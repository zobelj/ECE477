
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000750c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076f0  080076f0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080076f0  080076f0  000176f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076f8  080076f8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08007700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000ce8  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000df8  20000df8  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d3f  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5f  00000000  00000000  00032e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00035be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  00036c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236e6  00000000  00000000  00037b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a13  00000000  00000000  0005b24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc64c  00000000  00000000  0006ec61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b2ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004480  00000000  00000000  0013b300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800767c 	.word	0x0800767c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800767c 	.word	0x0800767c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <set_rows>:
{
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 return(ch);
}
void set_rows() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  // update row value
  row = (row + 1) % 4;
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <set_rows+0x98>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	425a      	negs	r2, r3
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	f002 0203 	and.w	r2, r2, #3
 80004e0:	bf58      	it	pl
 80004e2:	4253      	negpl	r3, r2
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <set_rows+0x98>)
 80004e6:	6013      	str	r3, [r2, #0]
  // set all rows to high
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2101      	movs	r1, #1
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <set_rows+0x9c>)
 80004ee:	f000 ff65 	bl	80013bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <set_rows+0x9c>)
 80004f8:	f000 ff60 	bl	80013bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4819      	ldr	r0, [pc, #100]	; (8000568 <set_rows+0x9c>)
 8000502:	f000 ff5b 	bl	80013bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4817      	ldr	r0, [pc, #92]	; (8000568 <set_rows+0x9c>)
 800050c:	f000 ff56 	bl	80013bc <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low
  switch(row) {
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <set_rows+0x98>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d823      	bhi.n	8000560 <set_rows+0x94>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <set_rows+0x54>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	0800053d 	.word	0x0800053d
 8000528:	08000549 	.word	0x08000549
 800052c:	08000555 	.word	0x08000555
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <set_rows+0x9c>)
 8000536:	f000 ff41 	bl	80013bc <HAL_GPIO_WritePin>
      break;
 800053a:	e011      	b.n	8000560 <set_rows+0x94>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <set_rows+0x9c>)
 8000542:	f000 ff3b 	bl	80013bc <HAL_GPIO_WritePin>
      break;
 8000546:	e00b      	b.n	8000560 <set_rows+0x94>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2104      	movs	r1, #4
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <set_rows+0x9c>)
 800054e:	f000 ff35 	bl	80013bc <HAL_GPIO_WritePin>
      break;
 8000552:	e005      	b.n	8000560 <set_rows+0x94>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <set_rows+0x9c>)
 800055a:	f000 ff2f 	bl	80013bc <HAL_GPIO_WritePin>
      break;
 800055e:	bf00      	nop
  }

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200001d4 	.word	0x200001d4
 8000568:	40020c00 	.word	0x40020c00

0800056c <get_cols>:

int get_cols() {
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  return ~(GPIOD->IDR >> 4) & 0xF;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <get_cols+0x1c>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	43db      	mvns	r3, r3
 8000578:	f003 030f 	and.w	r3, r3, #15
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00

0800058c <add_keypress>:

void add_keypress(char key) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if(keycodeNum < 7) {
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <add_keypress+0x84>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b06      	cmp	r3, #6
 800059c:	dc31      	bgt.n	8000602 <add_keypress+0x76>
	  switch(keycodeNum) {
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <add_keypress+0x84>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	d827      	bhi.n	80005f8 <add_keypress+0x6c>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <add_keypress+0x24>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	080005d1 	.word	0x080005d1
 80005b8:	080005d9 	.word	0x080005d9
 80005bc:	080005e1 	.word	0x080005e1
 80005c0:	080005e9 	.word	0x080005e9
 80005c4:	080005f1 	.word	0x080005f1
		case 1:
		  keyboardhid.KEYCODE1 = key;
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <add_keypress+0x88>)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	7093      	strb	r3, [r2, #2]
		  break;
 80005ce:	e013      	b.n	80005f8 <add_keypress+0x6c>
		case 2:
		  keyboardhid.KEYCODE2 = key;
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <add_keypress+0x88>)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	70d3      	strb	r3, [r2, #3]
		  break;
 80005d6:	e00f      	b.n	80005f8 <add_keypress+0x6c>
		case 3:
		  keyboardhid.KEYCODE3 = key;
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <add_keypress+0x88>)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	7113      	strb	r3, [r2, #4]
		  break;
 80005de:	e00b      	b.n	80005f8 <add_keypress+0x6c>
		case 4:
		  keyboardhid.KEYCODE4 = key;
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <add_keypress+0x88>)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	7153      	strb	r3, [r2, #5]
		  break;
 80005e6:	e007      	b.n	80005f8 <add_keypress+0x6c>
		case 5:
		  keyboardhid.KEYCODE5 = key;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <add_keypress+0x88>)
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	7193      	strb	r3, [r2, #6]
		  break;
 80005ee:	e003      	b.n	80005f8 <add_keypress+0x6c>
		case 6:
		  keyboardhid.KEYCODE6 = key;
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <add_keypress+0x88>)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	71d3      	strb	r3, [r2, #7]
		  break;
 80005f6:	bf00      	nop
	  }
	  keycodeNum++;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <add_keypress+0x84>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <add_keypress+0x84>)
 8000600:	6013      	str	r3, [r2, #0]
	}

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200001d0 	.word	0x200001d0
 8000614:	200001ec 	.word	0x200001ec

08000618 <record_keys>:

void record_keys() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 800061e:	2208      	movs	r2, #8
 8000620:	2100      	movs	r1, #0
 8000622:	4818      	ldr	r0, [pc, #96]	; (8000684 <record_keys+0x6c>)
 8000624:	f007 f822 	bl	800766c <memset>
  keycodeNum = 1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <record_keys+0x70>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]

  // add currently pressed keys to the keyboardhid keypresses
  for(int i = 0; i < 5; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e01e      	b.n	8000672 <record_keys+0x5a>
    for(int j = 0; j < 4; j++) {
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	e015      	b.n	8000666 <record_keys+0x4e>
      if(keypresses[i][j] == 1) {
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <record_keys+0x74>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	441a      	add	r2, r3
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d109      	bne.n	8000660 <record_keys+0x48>
        add_keypress(keys[i][j]);
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <record_keys+0x78>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	441a      	add	r2, r3
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff96 	bl	800058c <add_keypress>
    for(int j = 0; j < 4; j++) {
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b03      	cmp	r3, #3
 800066a:	dde6      	ble.n	800063a <record_keys+0x22>
  for(int i = 0; i < 5; i++) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b04      	cmp	r3, #4
 8000676:	dddd      	ble.n	8000634 <record_keys+0x1c>
      }
    }
  }

}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200001ec 	.word	0x200001ec
 8000688:	200001d0 	.word	0x200001d0
 800068c:	200001d8 	.word	0x200001d8
 8000690:	080076cc 	.word	0x080076cc

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fb34 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f82c 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f916 	bl	80008d0 <MX_GPIO_Init>
  MX_TIM4_Init();
 80006a4:	f000 f892 	bl	80007cc <MX_TIM4_Init>
  MX_TIM6_Init();
 80006a8:	f000 f8dc 	bl	8000864 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80006ac:	f006 fb74 	bl	8006d98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // start the timer
  HAL_Delay(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f000 fb98 	bl	8000de8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <main+0x4c>)
 80006ba:	f002 fdbd 	bl	8003238 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <main+0x50>)
 80006c0:	f002 fdba 	bl	8003238 <HAL_TIM_Base_Start_IT>

  state = 1;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <main+0x54>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
  lastState = 1;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <main+0x58>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]

  row = 0;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <main+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]

  keycodeNum = 1;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <main+0x60>)
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x48>
 80006de:	bf00      	nop
 80006e0:	2000012c 	.word	0x2000012c
 80006e4:	20000174 	.word	0x20000174
 80006e8:	200001c8 	.word	0x200001c8
 80006ec:	200001cc 	.word	0x200001cc
 80006f0:	200001d4 	.word	0x200001d4
 80006f4:	200001d0 	.word	0x200001d0

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f006 ffb0 	bl	800766c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800076c:	23a8      	movs	r3, #168	; 0xa8
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000774:	2307      	movs	r3, #7
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f002 f89b 	bl	80028b8 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 f9c4 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000798:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2105      	movs	r1, #5
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fafc 	bl	8002da8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b6:	f000 f9ad 	bl	8000b14 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_TIM4_Init+0x90>)
 80007ea:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <MX_TIM4_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_TIM4_Init+0x90>)
 80007f0:	229f      	movs	r2, #159	; 0x9f
 80007f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_TIM4_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM4_Init+0x90>)
 80007fc:	2263      	movs	r2, #99	; 0x63
 80007fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_TIM4_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM4_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <MX_TIM4_Init+0x90>)
 800080e:	f002 fcc3 	bl	8003198 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000818:	f000 f97c 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_TIM4_Init+0x90>)
 800082a:	f002 fe7d 	bl	8003528 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000834:	f000 f96e 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_TIM4_Init+0x90>)
 8000846:	f003 f899 	bl	800397c <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000850:	f000 f960 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000012c 	.word	0x2000012c
 8000860:	40000800 	.word	0x40000800

08000864 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_TIM6_Init+0x64>)
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_TIM6_Init+0x68>)
 8000876:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_TIM6_Init+0x64>)
 800087a:	f240 623f 	movw	r2, #1599	; 0x63f
 800087e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_TIM6_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_TIM6_Init+0x64>)
 8000888:	2209      	movs	r2, #9
 800088a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_TIM6_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_TIM6_Init+0x64>)
 8000894:	f002 fc80 	bl	8003198 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800089e:	f000 f939 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_TIM6_Init+0x64>)
 80008b0:	f003 f864 	bl	800397c <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f000 f92b 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000174 	.word	0x20000174
 80008cc:	40001000 	.word	0x40001000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_GPIO_Init+0xe8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a32      	ldr	r2, [pc, #200]	; (80009b8 <MX_GPIO_Init+0xe8>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MX_GPIO_Init+0xe8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <MX_GPIO_Init+0xe8>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_GPIO_Init+0xe8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_GPIO_Init+0xec>)
 800095c:	f000 fd2e 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL4_Pin COL0_Pin COL1_Pin COL2_Pin
                           COL3_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL0_Pin|COL1_Pin|COL2_Pin
 8000960:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000964:	617b      	str	r3, [r7, #20]
                          |COL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_GPIO_Init+0xec>)
 8000976:	f000 fb6d 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_Pin ROT_DT_Pin ROT_CLCK_Pin */
  GPIO_InitStruct.Pin = ROT_SW_Pin|ROT_DT_Pin|ROT_CLCK_Pin;
 800097a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0xf0>)
 8000990:	f000 fb60 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000994:	230f      	movs	r3, #15
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0xec>)
 80009ac:	f000 fb52 	bl	8001054 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40020800 	.word	0x40020800

080009c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a45      	ldr	r2, [pc, #276]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d10d      	bne.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	    // send HID report

    // Write keypresses matrix to keyboardhid.keycodes
    record_keys();
 80009d4:	f7ff fe20 	bl	8000618 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 80009d8:	2208      	movs	r2, #8
 80009da:	4943      	ldr	r1, [pc, #268]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009dc:	4843      	ldr	r0, [pc, #268]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x128>)
 80009de:	f004 fe61 	bl	80056a4 <USBD_HID_SendReport>
    keypresses[4][1] = 0;
 80009e2:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	745a      	strb	r2, [r3, #17]
    keypresses[4][2] = 0;
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	749a      	strb	r2, [r3, #18]
		}

		lastStateCLK = currentStateCLK;
		/* END Rotary Encoder */
	 }
}
 80009ee:	e075      	b.n	8000adc <HAL_TIM_PeriodElapsedCallback+0x118>
	else if(htim == &htim6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d171      	bne.n	8000adc <HAL_TIM_PeriodElapsedCallback+0x118>
		set_rows();
 80009f8:	f7ff fd68 	bl	80004cc <set_rows>
		int cols = get_cols();
 80009fc:	f7ff fdb6 	bl	800056c <get_cols>
 8000a00:	60b8      	str	r0, [r7, #8]
		for(int i = 0; i < 4; i++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e01d      	b.n	8000a44 <HAL_TIM_PeriodElapsedCallback+0x80>
			if(cols & (1 << i)) {
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	fa42 f303 	asr.w	r3, r2, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d009      	beq.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x68>
				keypresses[row][i] = 1;
 8000a18:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a34      	ldr	r2, [pc, #208]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	441a      	add	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e008      	b.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x7a>
        keypresses[row][i] = 0;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	441a      	add	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4413      	add	r3, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 4; i++) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	ddde      	ble.n	8000a08 <HAL_TIM_PeriodElapsedCallback+0x44>
		lastState = state;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a2c      	ldr	r2, [pc, #176]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a50:	6013      	str	r3, [r2, #0]
		state = HAL_GPIO_ReadPin(GPIOC, ROT_SW_Pin);
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	482b      	ldr	r0, [pc, #172]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000a56:	f000 fc99 	bl	800138c <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a60:	601a      	str	r2, [r3, #0]
		if (state == 0 && lastState != state) {
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d109      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xba>
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d003      	beq.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0xba>
			keypresses[4][0] = 1;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	741a      	strb	r2, [r3, #16]
 8000a7c:	e002      	b.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0xc0>
			keypresses[4][0] = 0;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	741a      	strb	r2, [r3, #16]
		currentStateCLK = HAL_GPIO_ReadPin(GPIOC, ROT_CLCK_Pin);
 8000a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a88:	481e      	ldr	r0, [pc, #120]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000a8a:	f000 fc7f 	bl	800138c <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a94:	601a      	str	r2, [r3, #0]
		if (currentStateCLK != lastStateCLK && currentStateCLK == 1) {
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d018      	beq.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d114      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x110>
			currentStateDT = HAL_GPIO_ReadPin(GPIOC, ROT_DT_Pin);
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4815      	ldr	r0, [pc, #84]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000aae:	f000 fc6d 	bl	800138c <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ab8:	601a      	str	r2, [r3, #0]
			if (currentStateDT != currentStateCLK) {
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d003      	beq.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x10a>
				keypresses[4][1] = 1;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	745a      	strb	r2, [r3, #17]
 8000acc:	e002      	b.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x110>
				keypresses[4][2] = 1;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	749a      	strb	r2, [r3, #18]
		lastStateCLK = currentStateCLK;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000012c 	.word	0x2000012c
 8000ae8:	200001ec 	.word	0x200001ec
 8000aec:	200001fc 	.word	0x200001fc
 8000af0:	200001d8 	.word	0x200001d8
 8000af4:	20000174 	.word	0x20000174
 8000af8:	200001d4 	.word	0x200001d4
 8000afc:	200001c8 	.word	0x200001c8
 8000b00:	200001cc 	.word	0x200001cc
 8000b04:	40020800 	.word	0x40020800
 8000b08:	200001bc 	.word	0x200001bc
 8000b0c:	200001c0 	.word	0x200001c0
 8000b10:	200001c4 	.word	0x200001c4

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <HAL_TIM_Base_MspInit+0x80>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d116      	bne.n	8000bb0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_TIM_Base_MspInit+0x84>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_TIM_Base_MspInit+0x84>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_TIM_Base_MspInit+0x84>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	201e      	movs	r0, #30
 8000ba4:	f000 fa1f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ba8:	201e      	movs	r0, #30
 8000baa:	f000 fa38 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bae:	e01a      	b.n	8000be6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_TIM_Base_MspInit+0x88>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d115      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_TIM_Base_MspInit+0x84>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <HAL_TIM_Base_MspInit+0x84>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_TIM_Base_MspInit+0x84>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2036      	movs	r0, #54	; 0x36
 8000bdc:	f000 fa03 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be0:	2036      	movs	r0, #54	; 0x36
 8000be2:	f000 fa1c 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40000800 	.word	0x40000800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40001000 	.word	0x40001000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8ae 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM4_IRQHandler+0x10>)
 8000c56:	f002 fb5f 	bl	8003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000012c 	.word	0x2000012c

08000c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM6_DAC_IRQHandler+0x10>)
 8000c6a:	f002 fb55 	bl	8003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000174 	.word	0x20000174

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f000 fd06 	bl	800168e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200008d8 	.word	0x200008d8

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f006 fca1 	bl	8007624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fcd7 	bl	8000694 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000cf4:	08007700 	.word	0x08007700
  ldr r2, =_sbss
 8000cf8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000cfc:	20000df8 	.word	0x20000df8

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fef2 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200001f4 	.word	0x200001f4

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200001f4 	.word	0x200001f4

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e16b      	b.n	8001348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 815a 	bne.w	8001342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80b4 	beq.w	8001342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b60      	ldr	r3, [pc, #384]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a5f      	ldr	r2, [pc, #380]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_GPIO_Init+0x30c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a5b      	ldr	r2, [pc, #364]	; (8001364 <HAL_GPIO_Init+0x310>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a52      	ldr	r2, [pc, #328]	; (8001368 <HAL_GPIO_Init+0x314>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a51      	ldr	r2, [pc, #324]	; (800136c <HAL_GPIO_Init+0x318>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a50      	ldr	r2, [pc, #320]	; (8001370 <HAL_GPIO_Init+0x31c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4f      	ldr	r2, [pc, #316]	; (8001374 <HAL_GPIO_Init+0x320>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4e      	ldr	r2, [pc, #312]	; (8001378 <HAL_GPIO_Init+0x324>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x216>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4d      	ldr	r2, [pc, #308]	; (800137c <HAL_GPIO_Init+0x328>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_GPIO_Init+0x32c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_GPIO_Init+0x330>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x20a>
 800125a:	2307      	movs	r3, #7
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x228>
 800125e:	2308      	movs	r3, #8
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x228>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x310>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <HAL_GPIO_Init+0x334>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a32      	ldr	r2, [pc, #200]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x334>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_GPIO_Init+0x334>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_GPIO_Init+0x334>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_GPIO_Init+0x334>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae90 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f0:	b08f      	sub	sp, #60	; 0x3c
 80013f2:	af0a      	add	r7, sp, #40	; 0x28
 80013f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e10f      	b.n	8001620 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f005 fdf2 	bl	8007004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fc41 	bl	8003cc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	687e      	ldr	r6, [r7, #4]
 800144c:	466d      	mov	r5, sp
 800144e:	f106 0410 	add.w	r4, r6, #16
 8001452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800145e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001462:	1d33      	adds	r3, r6, #4
 8001464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f002 fb18 	bl	8003a9c <USB_CoreInit>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0d0      	b.n	8001620 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fc2f 	bl	8003ce8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e04a      	b.n	8001526 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	333d      	adds	r3, #61	; 0x3d
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	333c      	adds	r3, #60	; 0x3c
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	b298      	uxth	r0, r3
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3344      	adds	r3, #68	; 0x44
 80014cc:	4602      	mov	r2, r0
 80014ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3340      	adds	r3, #64	; 0x40
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	3348      	adds	r3, #72	; 0x48
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	334c      	adds	r3, #76	; 0x4c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3354      	adds	r3, #84	; 0x54
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3af      	bcc.n	8001490 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e044      	b.n	80015c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3b5      	bcc.n	8001536 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	687e      	ldr	r6, [r7, #4]
 80015d2:	466d      	mov	r5, sp
 80015d4:	f106 0410 	add.w	r4, r6, #16
 80015d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e8:	1d33      	adds	r3, r6, #4
 80015ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f002 fbc7 	bl	8003d80 <USB_DevInit>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e00d      	b.n	8001620 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fd16 	bl	800504a <USB_DevDisconnect>

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001628 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_PCD_Start+0x1c>
 8001640:	2302      	movs	r3, #2
 8001642:	e020      	b.n	8001686 <HAL_PCD_Start+0x5e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	2b01      	cmp	r3, #1
 8001652:	d109      	bne.n	8001668 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fb19 	bl	8003ca4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fcc6 	bl	8005008 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800168e:	b590      	push	{r4, r7, lr}
 8001690:	b08d      	sub	sp, #52	; 0x34
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fd84 	bl	80051b2 <USB_GetMode>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 848a 	bne.w	8001fc6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fce8 	bl	800508c <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8480 	beq.w	8001fc4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fcd5 	bl	800508c <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d107      	bne.n	80016fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f002 0202 	and.w	r2, r2, #2
 80016fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fcc3 	bl	800508c <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b10      	cmp	r3, #16
 800170e:	d161      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0210 	bic.w	r2, r2, #16
 800171e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f003 020f 	and.w	r2, r3, #15
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	0c5b      	lsrs	r3, r3, #17
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	2b02      	cmp	r3, #2
 800174a:	d124      	bne.n	8001796 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d035      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	6a38      	ldr	r0, [r7, #32]
 800176c:	f003 fafa 	bl	8004d64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800177c:	441a      	add	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178e:	441a      	add	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	621a      	str	r2, [r3, #32]
 8001794:	e016      	b.n	80017c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	0c5b      	lsrs	r3, r3, #17
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d110      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017a8:	2208      	movs	r2, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f003 fad9 	bl	8004d64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017be:	441a      	add	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0210 	orr.w	r2, r2, #16
 80017d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fc57 	bl	800508c <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017e8:	f040 80a7 	bne.w	800193a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fc5c 	bl	80050b2 <USB_ReadDevAllOutEpInterrupt>
 80017fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017fc:	e099      	b.n	8001932 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 808e 	beq.w	8001926 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fc80 	bl	800511a <USB_ReadDevOutEPInterrupt>
 800181a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	461a      	mov	r2, r3
 8001834:	2301      	movs	r3, #1
 8001836:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 feaa 	bl	8002594 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001856:	461a      	mov	r2, r3
 8001858:	2308      	movs	r3, #8
 800185a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 ff80 	bl	8002764 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187a:	461a      	mov	r2, r3
 800187c:	2310      	movs	r3, #16
 800187e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d030      	beq.n	80018ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	2b80      	cmp	r3, #128	; 0x80
 8001894:	d109      	bne.n	80018aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2200      	movs	r2, #0
 80018cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f005 fca9 	bl	800722c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e6:	461a      	mov	r2, r3
 80018e8:	2302      	movs	r3, #2
 80018ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001902:	461a      	mov	r2, r3
 8001904:	2320      	movs	r3, #32
 8001906:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800191e:	461a      	mov	r2, r3
 8001920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001924:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	3301      	adds	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f af62 	bne.w	80017fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 fba4 	bl	800508c <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800194e:	f040 80db 	bne.w	8001b08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fbc5 	bl	80050e6 <USB_ReadDevAllInEpInterrupt>
 800195c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001962:	e0cd      	b.n	8001b00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80c2 	beq.w	8001af4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fbeb 	bl	8005156 <USB_ReadDevInEPInterrupt>
 8001980:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d057      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	2201      	movs	r2, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69f9      	ldr	r1, [r7, #28]
 80019a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019ac:	4013      	ands	r3, r2
 80019ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019bc:	461a      	mov	r2, r3
 80019be:	2301      	movs	r3, #1
 80019c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d132      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	334c      	adds	r3, #76	; 0x4c
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4403      	add	r3, r0
 80019ea:	3348      	adds	r3, #72	; 0x48
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4419      	add	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4403      	add	r3, r0
 80019fe:	334c      	adds	r3, #76	; 0x4c
 8001a00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d113      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x3a2>
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3354      	adds	r3, #84	; 0x54
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d108      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	f003 fbf2 	bl	8005214 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f005 fb73 	bl	8007122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a52:	461a      	mov	r2, r3
 8001a54:	2308      	movs	r3, #8
 8001a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2310      	movs	r3, #16
 8001a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d023      	beq.n	8001ae2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9c:	6a38      	ldr	r0, [r7, #32]
 8001a9e:	f002 fad3 	bl	8004048 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	3338      	adds	r3, #56	; 0x38
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	78db      	ldrb	r3, [r3, #3]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f005 fbc0 	bl	8007250 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001adc:	461a      	mov	r2, r3
 8001ade:	2302      	movs	r3, #2
 8001ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fcc3 	bl	800247a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3301      	adds	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f af2e 	bne.w	8001964 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fabd 	bl	800508c <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b1c:	d122      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d108      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b44:	2100      	movs	r1, #0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 feaa 	bl	80028a0 <HAL_PCDEx_LPM_Callback>
 8001b4c:	e002      	b.n	8001b54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f005 fb5e 	bl	8007210 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa8f 	bl	800508c <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b78:	d112      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f005 fb1a 	bl	80071c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b9e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fa71 	bl	800508c <USB_ReadInterrupts>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb4:	f040 80b7 	bne.w	8001d26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fa38 	bl	8004048 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bdc:	e046      	b.n	8001c6c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bea:	461a      	mov	r2, r3
 8001bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bf0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c02:	0151      	lsls	r1, r2, #5
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	440a      	add	r2, r1
 8001c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c36:	0151      	lsls	r1, r2, #5
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	440a      	add	r2, r1
 8001c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c56:	0151      	lsls	r1, r2, #5
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	440a      	add	r2, r1
 8001c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	3301      	adds	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3b3      	bcc.n	8001bde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca2:	f043 030b 	orr.w	r3, r3, #11
 8001ca6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb8:	f043 030b 	orr.w	r3, r3, #11
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	e015      	b.n	8001cec <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cd6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce6:	f043 030b 	orr.w	r3, r3, #11
 8001cea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d10:	461a      	mov	r2, r3
 8001d12:	f003 fa7f 	bl	8005214 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f9ae 	bl	800508c <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3a:	d124      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fa44 	bl	80051ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 f9f9 	bl	8004142 <USB_GetDevSpeed>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681c      	ldr	r4, [r3, #0]
 8001d5c:	f001 fa10 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 8001d60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f001 fef8 	bl	8003b60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f005 f9fe 	bl	8007172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 f97e 	bl	800508c <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d10a      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f005 f9db 	bl	8007156 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f002 0208 	and.w	r2, r2, #8
 8001dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 f969 	bl	800508c <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d122      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	e014      	b.n	8001e00 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d105      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fb0f 	bl	8002418 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3e5      	bcc.n	8001dd6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 f93c 	bl	800508c <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e1e:	d13b      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e02b      	b.n	8001e7e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3340      	adds	r3, #64	; 0x40
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d115      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da12      	bge.n	8001e78 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	333f      	adds	r3, #63	; 0x3f
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fad0 	bl	8002418 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3ce      	bcc.n	8001e26 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 f8f5 	bl	800508c <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eac:	d155      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eae:	2301      	movs	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e045      	b.n	8001f40 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d12e      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001edc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da2b      	bge.n	8001f3a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001eee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d121      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f36:	6053      	str	r3, [r2, #4]
            break;
 8001f38:	e007      	b.n	8001f4a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d3b4      	bcc.n	8001eb4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 f894 	bl	800508c <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6e:	d10a      	bne.n	8001f86 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f005 f97f 	bl	8007274 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f87e 	bl	800508c <USB_ReadInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d115      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f005 f96f 	bl	8007290 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	e000      	b.n	8001fc6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001fc4:	bf00      	nop
    }
  }
}
 8001fc6:	3734      	adds	r7, #52	; 0x34
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}

08001fcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_PCD_SetAddress+0x1a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e013      	b.n	800200e <HAL_PCD_SetAddress+0x42>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 ffdc 	bl	8004fbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	4608      	mov	r0, r1
 8002020:	4611      	mov	r1, r2
 8002022:	461a      	mov	r2, r3
 8002024:	4603      	mov	r3, r0
 8002026:	70fb      	strb	r3, [r7, #3]
 8002028:	460b      	mov	r3, r1
 800202a:	803b      	strh	r3, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	da0f      	bge.n	800205c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3338      	adds	r3, #56	; 0x38
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	705a      	strb	r2, [r3, #1]
 800205a:	e00f      	b.n	800207c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002088:	883a      	ldrh	r2, [r7, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	78ba      	ldrb	r2, [r7, #2]
 8002092:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d102      	bne.n	80020b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_PCD_EP_Open+0xaa>
 80020bc:	2302      	movs	r3, #2
 80020be:	e00e      	b.n	80020de <HAL_PCD_EP_Open+0xc8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 f85c 	bl	800418c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020dc:	7afb      	ldrb	r3, [r7, #11]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da0f      	bge.n	800211a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	3338      	adds	r3, #56	; 0x38
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	3304      	adds	r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	705a      	strb	r2, [r3, #1]
 8002118:	e00f      	b.n	800213a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_EP_Close+0x6e>
 8002150:	2302      	movs	r3, #2
 8002152:	e00e      	b.n	8002172 <HAL_PCD_EP_Close+0x8c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f002 f89a 	bl	800429c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	460b      	mov	r3, r1
 8002188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	f002 fb79 	bl	80048e4 <USB_EP0StartXfer>
 80021f2:	e008      	b.n	8002206 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	f002 f927 	bl	8004454 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	460b      	mov	r3, r1
 800221e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002220:	7afb      	ldrb	r3, [r7, #11]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	3338      	adds	r3, #56	; 0x38
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2201      	movs	r2, #1
 800224e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	b2da      	uxtb	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6979      	ldr	r1, [r7, #20]
 8002282:	f002 fb2f 	bl	80048e4 <USB_EP0StartXfer>
 8002286:	e008      	b.n	800229a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	f002 f8dd 	bl	8004454 <USB_EPStartXfer>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d901      	bls.n	80022c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e050      	b.n	8002364 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da0f      	bge.n	80022ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	3338      	adds	r3, #56	; 0x38
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	705a      	strb	r2, [r3, #1]
 80022e8:	e00d      	b.n	8002306 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	3304      	adds	r3, #4
 80022fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_PCD_EP_SetStall+0x82>
 8002322:	2302      	movs	r3, #2
 8002324:	e01e      	b.n	8002364 <HAL_PCD_EP_SetStall+0xc0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fd6d 	bl	8004e14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002354:	461a      	mov	r2, r3
 8002356:	f002 ff5d 	bl	8005214 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d901      	bls.n	800238a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e042      	b.n	8002410 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0f      	bge.n	80023b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3338      	adds	r3, #56	; 0x38
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	705a      	strb	r2, [r3, #1]
 80023b0:	e00f      	b.n	80023d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_PCD_EP_ClrStall+0x86>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e00e      	b.n	8002410 <HAL_PCD_EP_ClrStall+0xa4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fd75 	bl	8004ef0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002428:	2b00      	cmp	r3, #0
 800242a:	da0c      	bge.n	8002446 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 020f 	and.w	r2, r3, #15
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3338      	adds	r3, #56	; 0x38
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	3304      	adds	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e00c      	b.n	8002460 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fb94 	bl	8004b94 <USB_EPStopXfer>
 800246c:	4603      	mov	r3, r0
 800246e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002470:	7afb      	ldrb	r3, [r7, #11]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b08a      	sub	sp, #40	; 0x28
 800247e:	af02      	add	r7, sp, #8
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	3338      	adds	r3, #56	; 0x38
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	3304      	adds	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d901      	bls.n	80024b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06c      	b.n	800258c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d902      	bls.n	80024ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3303      	adds	r3, #3
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024d6:	e02b      	b.n	8002530 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d902      	bls.n	80024f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	3303      	adds	r3, #3
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800250c:	b2db      	uxtb	r3, r3
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4603      	mov	r3, r0
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f002 fbe8 	bl	8004ce8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	441a      	add	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	b29b      	uxth	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	429a      	cmp	r2, r3
 8002544:	d809      	bhi.n	800255a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800254e:	429a      	cmp	r2, r3
 8002550:	d203      	bcs.n	800255a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1be      	bne.n	80024d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	429a      	cmp	r2, r3
 8002564:	d811      	bhi.n	800258a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	2201      	movs	r2, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	43db      	mvns	r3, r3
 8002580:	6939      	ldr	r1, [r7, #16]
 8002582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002586:	4013      	ands	r3, r2
 8002588:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	333c      	adds	r3, #60	; 0x3c
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d17b      	bne.n	80026c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f240 80b9 	bls.w	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80b3 	beq.w	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f6:	461a      	mov	r2, r3
 80025f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fc:	6093      	str	r3, [r2, #8]
 80025fe:	e0a7      	b.n	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4413      	add	r3, r2
 8002612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002616:	461a      	mov	r2, r3
 8002618:	2320      	movs	r3, #32
 800261a:	6093      	str	r3, [r2, #8]
 800261c:	e098      	b.n	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 8093 	bne.w	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4a4b      	ldr	r2, [pc, #300]	; (800275c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d90f      	bls.n	8002652 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002648:	461a      	mov	r2, r3
 800264a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	e07e      	b.n	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	0159      	lsls	r1, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	440b      	add	r3, r1
 8002674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d114      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800269c:	461a      	mov	r2, r3
 800269e:	2101      	movs	r1, #1
 80026a0:	f002 fdb8 	bl	8005214 <USB_EP0_OutStart>
 80026a4:	e006      	b.n	80026b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	441a      	add	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f004 fd16 	bl	80070ec <HAL_PCD_DataOutStageCallback>
 80026c0:	e046      	b.n	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d124      	bne.n	8002714 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e0:	461a      	mov	r2, r3
 80026e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e6:	6093      	str	r3, [r2, #8]
 80026e8:	e032      	b.n	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002700:	461a      	mov	r2, r3
 8002702:	2320      	movs	r3, #32
 8002704:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f004 fced 	bl	80070ec <HAL_PCD_DataOutStageCallback>
 8002712:	e01d      	b.n	8002750 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d114      	bne.n	8002744 <PCD_EP_OutXfrComplete_int+0x1b0>
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800273c:	461a      	mov	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f002 fd68 	bl	8005214 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f004 fcce 	bl	80070ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	4f54300a 	.word	0x4f54300a
 8002760:	4f54310a 	.word	0x4f54310a

08002764 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	333c      	adds	r3, #60	; 0x3c
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d90e      	bls.n	80027b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b0:	461a      	mov	r2, r3
 80027b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f004 fc85 	bl	80070c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <PCD_EP_OutSetupPacket_int+0x88>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d90c      	bls.n	80027e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027d8:	461a      	mov	r2, r3
 80027da:	2101      	movs	r1, #1
 80027dc:	f002 fd1a 	bl	8005214 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	4f54300a 	.word	0x4f54300a

080027f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
 80027fc:	4613      	mov	r3, r2
 80027fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800280e:	883b      	ldrh	r3, [r7, #0]
 8002810:	0419      	lsls	r1, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	430a      	orrs	r2, r1
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
 800281c:	e028      	b.n	8002870 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	4413      	add	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e00d      	b.n	800284e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3340      	adds	r3, #64	; 0x40
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	4413      	add	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	3301      	adds	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	3b01      	subs	r3, #1
 8002854:	429a      	cmp	r2, r3
 8002856:	d3ec      	bcc.n	8002832 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002858:	883b      	ldrh	r3, [r7, #0]
 800285a:	0418      	lsls	r0, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	3b01      	subs	r3, #1
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	4302      	orrs	r2, r0
 8002868:	3340      	adds	r3, #64	; 0x40
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e267      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d075      	beq.n	80029c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d00c      	beq.n	80028fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e2:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d112      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fa:	d10b      	bne.n	8002914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05b      	beq.n	80029c0 <HAL_RCC_OscConfig+0x108>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d157      	bne.n	80029c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e242      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x74>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x98>
 8002936:	4b70      	ldr	r3, [pc, #448]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6f      	ldr	r2, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6d      	ldr	r3, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6c      	ldr	r2, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xb0>
 8002950:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a68      	ldr	r2, [pc, #416]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fa2e 	bl	8000dd0 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe fa2a 	bl	8000dd0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e207      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xc0>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fa1a 	bl	8000dd0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fa16 	bl	8000dd0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1f3      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b51      	ldr	r3, [pc, #324]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0xe8>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x152>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1c7      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4937      	ldr	r1, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x244>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe f9cf 	bl	8000dd0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe f9cb 	bl	8000dd0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1a8      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4925      	ldr	r1, [pc, #148]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x244>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe f9ae 	bl	8000dd0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fe f9aa 	bl	8000dd0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e187      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d036      	beq.n	8002b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_OscConfig+0x248>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe f98e 	bl	8000dd0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fe f98a 	bl	8000dd0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e167      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x200>
 8002ad6:	e01b      	b.n	8002b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_OscConfig+0x248>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe f977 	bl	8000dd0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00e      	b.n	8002b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe f973 	bl	8000dd0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d907      	bls.n	8002b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e150      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470000 	.word	0x42470000
 8002b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ea      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8097 	beq.w	8002c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b81      	ldr	r3, [pc, #516]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a7c      	ldr	r2, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b77      	ldr	r3, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a73      	ldr	r2, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7fe f933 	bl	8000dd0 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7fe f92f 	bl	8000dd0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e10c      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x474>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2ea>
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a63      	ldr	r2, [pc, #396]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x324>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x30c>
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x324>
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	4b55      	ldr	r3, [pc, #340]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a54      	ldr	r2, [pc, #336]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe f8f4 	bl	8000dd0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe f8f0 	bl	8000dd0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0cb      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ee      	beq.n	8002bec <HAL_RCC_OscConfig+0x334>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fe f8de 	bl	8000dd0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fe f8da 	bl	8000dd0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0b5      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ee      	bne.n	8002c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a38      	ldr	r2, [pc, #224]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a1 	beq.w	8002d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d05c      	beq.n	8002d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d141      	bne.n	8002cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_OscConfig+0x478>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe f8ae 	bl	8000dd0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe f8aa 	bl	8000dd0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e087      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x478>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f883 	bl	8000dd0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe f87f 	bl	8000dd0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e05c      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x416>
 8002cec:	e054      	b.n	8002d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x478>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f86c 	bl	8000dd0 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe f868 	bl	8000dd0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e045      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x470>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x444>
 8002d1a:	e03d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e038      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x4ec>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d028      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d121      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d11a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cc      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e067      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fd ff9a 	bl	8000dd0 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fd ff96 	bl	8000dd0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fefa 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	080076e0 	.word	0x080076e0
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b094      	sub	sp, #80	; 0x50
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f80:	2300      	movs	r3, #0
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f84:	2300      	movs	r3, #0
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8c:	4b79      	ldr	r3, [pc, #484]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	f200 80e1 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x3a>
 8002fa6:	e0db      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_GetSysClockFreq+0x204>)
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fac:	e0db      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb2:	e0d8      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	462b      	mov	r3, r5
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	0159      	lsls	r1, r3, #5
 8002ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff8:	0150      	lsls	r0, r2, #5
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4621      	mov	r1, r4
 8003000:	1a51      	subs	r1, r2, r1
 8003002:	6139      	str	r1, [r7, #16]
 8003004:	4629      	mov	r1, r5
 8003006:	eb63 0301 	sbc.w	r3, r3, r1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003018:	4659      	mov	r1, fp
 800301a:	018b      	lsls	r3, r1, #6
 800301c:	4651      	mov	r1, sl
 800301e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003022:	4651      	mov	r1, sl
 8003024:	018a      	lsls	r2, r1, #6
 8003026:	4651      	mov	r1, sl
 8003028:	ebb2 0801 	subs.w	r8, r2, r1
 800302c:	4659      	mov	r1, fp
 800302e:	eb63 0901 	sbc.w	r9, r3, r1
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800303e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003046:	4690      	mov	r8, r2
 8003048:	4699      	mov	r9, r3
 800304a:	4623      	mov	r3, r4
 800304c:	eb18 0303 	adds.w	r3, r8, r3
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	462b      	mov	r3, r5
 8003054:	eb49 0303 	adc.w	r3, r9, r3
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003066:	4629      	mov	r1, r5
 8003068:	024b      	lsls	r3, r1, #9
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003070:	4621      	mov	r1, r4
 8003072:	024a      	lsls	r2, r1, #9
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	2200      	movs	r2, #0
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003084:	f7fd f8a0 	bl	80001c8 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4613      	mov	r3, r2
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	e058      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	4611      	mov	r1, r2
 800309e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	f04f 0000 	mov.w	r0, #0
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	0159      	lsls	r1, r3, #5
 80030ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030be:	0150      	lsls	r0, r2, #5
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4641      	mov	r1, r8
 80030c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ca:	4649      	mov	r1, r9
 80030cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030e4:	ebb2 040a 	subs.w	r4, r2, sl
 80030e8:	eb63 050b 	sbc.w	r5, r3, fp
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	00eb      	lsls	r3, r5, #3
 80030f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fa:	00e2      	lsls	r2, r4, #3
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	4643      	mov	r3, r8
 8003102:	18e3      	adds	r3, r4, r3
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	464b      	mov	r3, r9
 8003108:	eb45 0303 	adc.w	r3, r5, r3
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003124:	4621      	mov	r1, r4
 8003126:	028a      	lsls	r2, r1, #10
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	2200      	movs	r2, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	61fa      	str	r2, [r7, #28]
 8003134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003138:	f7fd f846 	bl	80001c8 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetSysClockFreq+0x200>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetSysClockFreq+0x204>)
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003168:	4618      	mov	r0, r3
 800316a:	3750      	adds	r7, #80	; 0x50
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	007a1200 	.word	0x007a1200

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fcd6 	bl	8000b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fa96 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e04e      	b.n	80032ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <HAL_TIM_Base_Start_IT+0xc4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d01d      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_TIM_Base_Start_IT+0xc8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_TIM_Base_Start_IT+0xcc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_TIM_Base_Start_IT+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_TIM_Base_Start_IT+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_TIM_Base_Start_IT+0xd8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIM_Base_Start_IT+0xdc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d111      	bne.n	80032dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d010      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	e007      	b.n	80032ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40000c00 	.word	0x40000c00
 800330c:	40010400 	.word	0x40010400
 8003310:	40014000 	.word	0x40014000
 8003314:	40001800 	.word	0x40001800

08003318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0202 	mvn.w	r2, #2
 8003344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9b5 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9a7 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f9b8 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0204 	mvn.w	r2, #4
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f98b 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f97d 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f98e 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0208 	mvn.w	r2, #8
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2204      	movs	r2, #4
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f961 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f953 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f964 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b10      	cmp	r3, #16
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b10      	cmp	r3, #16
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2208      	movs	r2, #8
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f937 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f929 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f93a 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d10e      	bne.n	800349c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0201 	mvn.w	r2, #1
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fa94 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d10e      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d107      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fae0 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d10e      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d107      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8ff 	bl	80036f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d10e      	bne.n	8003520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d107      	bne.n	8003520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0220 	mvn.w	r2, #32
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 faaa 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIM_ConfigClockSource+0x1c>
 8003540:	2302      	movs	r3, #2
 8003542:	e0b4      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x186>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800356a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357c:	d03e      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0xd4>
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	f200 8087 	bhi.w	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	f000 8086 	beq.w	800369a <HAL_TIM_ConfigClockSource+0x172>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	d87f      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b70      	cmp	r3, #112	; 0x70
 8003596:	d01a      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xa6>
 8003598:	2b70      	cmp	r3, #112	; 0x70
 800359a:	d87b      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b60      	cmp	r3, #96	; 0x60
 800359e:	d050      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x11a>
 80035a0:	2b60      	cmp	r3, #96	; 0x60
 80035a2:	d877      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b50      	cmp	r3, #80	; 0x50
 80035a6:	d03c      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xfa>
 80035a8:	2b50      	cmp	r3, #80	; 0x50
 80035aa:	d873      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d058      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x13a>
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d86f      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b30      	cmp	r3, #48	; 0x30
 80035b6:	d064      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b30      	cmp	r3, #48	; 0x30
 80035ba:	d86b      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d060      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d867      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d05c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d05a      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	e062      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f000 f9ad 	bl	800393c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	609a      	str	r2, [r3, #8]
      break;
 80035fa:	e04f      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f000 f996 	bl	800393c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e03c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f000 f90a 	bl	8003848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2150      	movs	r1, #80	; 0x50
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f963 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 8003640:	e02c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f929 	bl	80038a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2160      	movs	r1, #96	; 0x60
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f953 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 8003660:	e01c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	461a      	mov	r2, r3
 8003670:	f000 f8ea 	bl	8003848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f943 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 8003680:	e00c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f000 f93a 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 8003692:	e003      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e000      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800369a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <TIM_Base_SetConfig+0x114>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d00f      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <TIM_Base_SetConfig+0x118>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <TIM_Base_SetConfig+0x11c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <TIM_Base_SetConfig+0x120>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3a      	ldr	r2, [pc, #232]	; (800382c <TIM_Base_SetConfig+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <TIM_Base_SetConfig+0x114>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d027      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <TIM_Base_SetConfig+0x118>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d023      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <TIM_Base_SetConfig+0x11c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01f      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <TIM_Base_SetConfig+0x120>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <TIM_Base_SetConfig+0x124>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d017      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a28      	ldr	r2, [pc, #160]	; (8003830 <TIM_Base_SetConfig+0x128>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a27      	ldr	r2, [pc, #156]	; (8003834 <TIM_Base_SetConfig+0x12c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00f      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <TIM_Base_SetConfig+0x130>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <TIM_Base_SetConfig+0x134>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <TIM_Base_SetConfig+0x138>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <TIM_Base_SetConfig+0x13c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <TIM_Base_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0xf8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <TIM_Base_SetConfig+0x124>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d103      	bne.n	8003808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	615a      	str	r2, [r3, #20]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40010400 	.word	0x40010400
 8003830:	40014000 	.word	0x40014000
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800
 800383c:	40001800 	.word	0x40001800
 8003840:	40001c00 	.word	0x40001c00
 8003844:	40002000 	.word	0x40002000

08003848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 030a 	bic.w	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0210 	bic.w	r2, r3, #16
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	f043 0307 	orr.w	r3, r3, #7
 8003928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	021a      	lsls	r2, r3, #8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	431a      	orrs	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e05a      	b.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d01d      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10c      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40001800 	.word	0x40001800

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	f107 001c 	add.w	r0, r7, #28
 8003aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d122      	bne.n	8003afa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f001 fbee 	bl	80052d0 <USB_CoreReset>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e01a      	b.n	8003b30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f001 fbe2 	bl	80052d0 <USB_CoreReset>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
 8003b22:	e005      	b.n	8003b30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10b      	bne.n	8003b4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f043 0206 	orr.w	r2, r3, #6
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b5a:	b004      	add	sp, #16
 8003b5c:	4770      	bx	lr
	...

08003b60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d165      	bne.n	8003c40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4a41      	ldr	r2, [pc, #260]	; (8003c7c <USB_SetTurnaroundTime+0x11c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d906      	bls.n	8003b8a <USB_SetTurnaroundTime+0x2a>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a40      	ldr	r2, [pc, #256]	; (8003c80 <USB_SetTurnaroundTime+0x120>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d202      	bcs.n	8003b8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b84:	230f      	movs	r3, #15
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e062      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <USB_SetTurnaroundTime+0x120>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d306      	bcc.n	8003ba0 <USB_SetTurnaroundTime+0x40>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <USB_SetTurnaroundTime+0x124>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d202      	bcs.n	8003ba0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b9a:	230e      	movs	r3, #14
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e057      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <USB_SetTurnaroundTime+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d306      	bcc.n	8003bb6 <USB_SetTurnaroundTime+0x56>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a37      	ldr	r2, [pc, #220]	; (8003c88 <USB_SetTurnaroundTime+0x128>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d202      	bcs.n	8003bb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bb0:	230d      	movs	r3, #13
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e04c      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <USB_SetTurnaroundTime+0x128>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d306      	bcc.n	8003bcc <USB_SetTurnaroundTime+0x6c>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <USB_SetTurnaroundTime+0x12c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d802      	bhi.n	8003bcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e041      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <USB_SetTurnaroundTime+0x12c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d906      	bls.n	8003be2 <USB_SetTurnaroundTime+0x82>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <USB_SetTurnaroundTime+0x130>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d802      	bhi.n	8003be2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bdc:	230b      	movs	r3, #11
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e036      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <USB_SetTurnaroundTime+0x130>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d906      	bls.n	8003bf8 <USB_SetTurnaroundTime+0x98>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <USB_SetTurnaroundTime+0x134>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d802      	bhi.n	8003bf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e02b      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <USB_SetTurnaroundTime+0x134>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d906      	bls.n	8003c0e <USB_SetTurnaroundTime+0xae>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <USB_SetTurnaroundTime+0x138>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d202      	bcs.n	8003c0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c08:	2309      	movs	r3, #9
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e020      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <USB_SetTurnaroundTime+0x138>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d306      	bcc.n	8003c24 <USB_SetTurnaroundTime+0xc4>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <USB_SetTurnaroundTime+0x13c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d802      	bhi.n	8003c24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e015      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <USB_SetTurnaroundTime+0x13c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d906      	bls.n	8003c3a <USB_SetTurnaroundTime+0xda>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <USB_SetTurnaroundTime+0x140>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d202      	bcs.n	8003c3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c34:	2307      	movs	r3, #7
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e00a      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e007      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c46:	2309      	movs	r3, #9
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e001      	b.n	8003c50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c4c:	2309      	movs	r3, #9
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	029b      	lsls	r3, r3, #10
 8003c64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	00d8acbf 	.word	0x00d8acbf
 8003c80:	00e4e1c0 	.word	0x00e4e1c0
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	01067380 	.word	0x01067380
 8003c8c:	011a499f 	.word	0x011a499f
 8003c90:	01312cff 	.word	0x01312cff
 8003c94:	014ca43f 	.word	0x014ca43f
 8003c98:	016e3600 	.word	0x016e3600
 8003c9c:	01a6ab1f 	.word	0x01a6ab1f
 8003ca0:	01e84800 	.word	0x01e84800

08003ca4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d115      	bne.n	8003d36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fd f866 	bl	8000de8 <HAL_Delay>
      ms++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f001 fa45 	bl	80051b2 <USB_GetMode>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d01e      	beq.n	8003d6c <USB_SetCurrentMode+0x84>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b31      	cmp	r3, #49	; 0x31
 8003d32:	d9f0      	bls.n	8003d16 <USB_SetCurrentMode+0x2e>
 8003d34:	e01a      	b.n	8003d6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d115      	bne.n	8003d68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f7fd f84d 	bl	8000de8 <HAL_Delay>
      ms++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f001 fa2c 	bl	80051b2 <USB_GetMode>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <USB_SetCurrentMode+0x84>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b31      	cmp	r3, #49	; 0x31
 8003d64:	d9f0      	bls.n	8003d48 <USB_SetCurrentMode+0x60>
 8003d66:	e001      	b.n	8003d6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e005      	b.n	8003d78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b32      	cmp	r3, #50	; 0x32
 8003d70:	d101      	bne.n	8003d76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d80:	b084      	sub	sp, #16
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e009      	b.n	8003db4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3340      	adds	r3, #64	; 0x40
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3301      	adds	r3, #1
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b0e      	cmp	r3, #14
 8003db8:	d9f2      	bls.n	8003da0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11c      	bne.n	8003dfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
 8003df8:	e00b      	b.n	8003e12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e24:	4619      	mov	r1, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	680b      	ldr	r3, [r1, #0]
 8003e30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10c      	bne.n	8003e52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f965 	bl	8004110 <USB_SetDevSpeed>
 8003e46:	e008      	b.n	8003e5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e48:	2101      	movs	r1, #1
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f960 	bl	8004110 <USB_SetDevSpeed>
 8003e50:	e003      	b.n	8003e5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e52:	2103      	movs	r1, #3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f95b 	bl	8004110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e5a:	2110      	movs	r1, #16
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8f3 	bl	8004048 <USB_FlushTxFifo>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f91f 	bl	80040b0 <USB_FlushRxFifo>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	461a      	mov	r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e043      	b.n	8003f2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ebc:	d118      	bne.n	8003ef0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e013      	b.n	8003f02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e008      	b.n	8003f02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	461a      	mov	r2, r3
 8003efe:	2300      	movs	r3, #0
 8003f00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2300      	movs	r3, #0
 8003f12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	461a      	mov	r2, r3
 8003f22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3b7      	bcc.n	8003ea6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e043      	b.n	8003fc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f52:	d118      	bne.n	8003f86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e013      	b.n	8003f98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	e008      	b.n	8003f98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	2300      	movs	r3, #0
 8003f96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3b7      	bcc.n	8003f3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f043 0210 	orr.w	r2, r3, #16
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <USB_DevInit+0x2c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f043 0208 	orr.w	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004040:	b004      	add	sp, #16
 8004042:	4770      	bx	lr
 8004044:	803c3800 	.word	0x803c3800

08004048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <USB_FlushTxFifo+0x64>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e01b      	b.n	80040a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	daf2      	bge.n	8004056 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	019b      	lsls	r3, r3, #6
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <USB_FlushTxFifo+0x64>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e006      	b.n	80040a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b20      	cmp	r3, #32
 800409c:	d0f0      	beq.n	8004080 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	00030d40 	.word	0x00030d40

080040b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <USB_FlushRxFifo+0x5c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e018      	b.n	8004100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	daf2      	bge.n	80040bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2210      	movs	r2, #16
 80040de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <USB_FlushRxFifo+0x5c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e006      	b.n	8004100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d0f0      	beq.n	80040e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	00030d40 	.word	0x00030d40

08004110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0306 	and.w	r3, r3, #6
 800415a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
 8004166:	e00a      	b.n	800417e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d002      	beq.n	8004174 <USB_GetDevSpeed+0x32>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b06      	cmp	r3, #6
 8004172:	d102      	bne.n	800417a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004174:	2302      	movs	r3, #2
 8004176:	75fb      	strb	r3, [r7, #23]
 8004178:	e001      	b.n	800417e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800417a:	230f      	movs	r3, #15
 800417c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d13a      	bne.n	800421e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2101      	movs	r1, #1
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d155      	bne.n	800428c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	791b      	ldrb	r3, [r3, #4]
 80041fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	059b      	lsls	r3, r3, #22
 8004202:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004204:	4313      	orrs	r3, r2
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e036      	b.n	800428c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4313      	orrs	r3, r2
 800423e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11a      	bne.n	800428c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	791b      	ldrb	r3, [r3, #4]
 8004270:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004272:	430b      	orrs	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d161      	bne.n	800437c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ce:	d11f      	bne.n	8004310 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800430e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	b29b      	uxth	r3, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004330:	4013      	ands	r3, r2
 8004332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004354:	4013      	ands	r3, r2
 8004356:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0159      	lsls	r1, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	440b      	add	r3, r1
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	4619      	mov	r1, r3
 8004374:	4b35      	ldr	r3, [pc, #212]	; (800444c <USB_DeactivateEndpoint+0x1b0>)
 8004376:	4013      	ands	r3, r2
 8004378:	600b      	str	r3, [r1, #0]
 800437a:	e060      	b.n	800443e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800438e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004392:	d11f      	bne.n	80043d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	2101      	movs	r1, #1
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	43db      	mvns	r3, r3
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f4:	4013      	ands	r3, r2
 80043f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	43db      	mvns	r3, r3
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004418:	4013      	ands	r3, r2
 800441a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0159      	lsls	r1, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	440b      	add	r3, r1
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	4619      	mov	r1, r3
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <USB_DeactivateEndpoint+0x1b4>)
 800443a:	4013      	ands	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	ec337800 	.word	0xec337800
 8004450:	eff37800 	.word	0xeff37800

08004454 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b01      	cmp	r3, #1
 8004472:	f040 815c 	bne.w	800472e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d132      	bne.n	80044e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004498:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800449c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	0cdb      	lsrs	r3, r3, #19
 80044de:	04db      	lsls	r3, r3, #19
 80044e0:	6113      	str	r3, [r2, #16]
 80044e2:	e074      	b.n	80045ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fe:	0cdb      	lsrs	r3, r3, #19
 8004500:	04db      	lsls	r3, r3, #19
 8004502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004522:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	440b      	add	r3, r1
 8004540:	1e59      	subs	r1, r3, #1
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	fbb1 f3f3 	udiv	r3, r1, r3
 800454a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800454c:	4b9d      	ldr	r3, [pc, #628]	; (80047c4 <USB_EPStartXfer+0x370>)
 800454e:	400b      	ands	r3, r1
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	0148      	lsls	r0, r1, #5
 8004554:	69f9      	ldr	r1, [r7, #28]
 8004556:	4401      	add	r1, r0
 8004558:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	0148      	lsls	r0, r1, #5
 800457a:	69f9      	ldr	r1, [r7, #28]
 800457c:	4401      	add	r1, r0
 800457e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	791b      	ldrb	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d11f      	bne.n	80045ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	0151      	lsls	r1, r2, #5
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	440a      	add	r2, r1
 80045a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d14b      	bne.n	800466c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	461a      	mov	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	791b      	ldrb	r3, [r3, #4]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d128      	bne.n	800464a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d110      	bne.n	800462a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e00f      	b.n	800464a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e133      	b.n	80048d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800468a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	791b      	ldrb	r3, [r3, #4]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d015      	beq.n	80046c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 811b 	beq.w	80048d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	2101      	movs	r1, #1
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	69f9      	ldr	r1, [r7, #28]
 80046b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ba:	4313      	orrs	r3, r2
 80046bc:	634b      	str	r3, [r1, #52]	; 0x34
 80046be:	e109      	b.n	80048d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d110      	bne.n	80046f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e00f      	b.n	8004712 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6919      	ldr	r1, [r3, #16]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	b298      	uxth	r0, r3
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fade 	bl	8004ce8 <USB_WritePacket>
 800472c:	e0d2      	b.n	80048d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	440a      	add	r2, r1
 8004744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004748:	0cdb      	lsrs	r3, r3, #19
 800474a:	04db      	lsls	r3, r3, #19
 800474c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800476c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004770:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d126      	bne.n	80047c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	0148      	lsls	r0, r1, #5
 8004794:	69f9      	ldr	r1, [r7, #28]
 8004796:	4401      	add	r1, r0
 8004798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800479c:	4313      	orrs	r3, r2
 800479e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047be:	6113      	str	r3, [r2, #16]
 80047c0:	e03a      	b.n	8004838 <USB_EPStartXfer+0x3e4>
 80047c2:	bf00      	nop
 80047c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	1e5a      	subs	r2, r3, #1
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	8afa      	ldrh	r2, [r7, #22]
 80047e4:	fb03 f202 	mul.w	r2, r3, r2
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	8afb      	ldrh	r3, [r7, #22]
 80047fc:	04d9      	lsls	r1, r3, #19
 80047fe:	4b38      	ldr	r3, [pc, #224]	; (80048e0 <USB_EPStartXfer+0x48c>)
 8004800:	400b      	ands	r3, r1
 8004802:	69b9      	ldr	r1, [r7, #24]
 8004804:	0148      	lsls	r0, r1, #5
 8004806:	69f9      	ldr	r1, [r7, #28]
 8004808:	4401      	add	r1, r0
 800480a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800480e:	4313      	orrs	r3, r2
 8004810:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	0148      	lsls	r0, r1, #5
 800482c:	69f9      	ldr	r1, [r7, #28]
 800482e:	4401      	add	r1, r0
 8004830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004834:	4313      	orrs	r3, r2
 8004836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10d      	bne.n	800485a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6919      	ldr	r1, [r3, #16]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	460a      	mov	r2, r1
 8004858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d128      	bne.n	80048b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d110      	bne.n	8004894 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00f      	b.n	80048b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	1ff80000 	.word	0x1ff80000

080048e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 80ce 	bne.w	8004aa2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d132      	bne.n	8004974 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800492c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	0cdb      	lsrs	r3, r3, #19
 800496e:	04db      	lsls	r3, r3, #19
 8004970:	6113      	str	r3, [r2, #16]
 8004972:	e04e      	b.n	8004a12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	0cdb      	lsrs	r3, r3, #19
 8004990:	04db      	lsls	r3, r3, #19
 8004992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d903      	bls.n	80049cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a02:	6939      	ldr	r1, [r7, #16]
 8004a04:	0148      	lsls	r0, r1, #5
 8004a06:	6979      	ldr	r1, [r7, #20]
 8004a08:	4401      	add	r1, r0
 8004a0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d11e      	bne.n	8004a56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e097      	b.n	8004b86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8083 	beq.w	8004b86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	634b      	str	r3, [r1, #52]	; 0x34
 8004aa0:	e071      	b.n	8004b86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004abc:	0cdb      	lsrs	r3, r3, #19
 8004abe:	04db      	lsls	r3, r3, #19
 8004ac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004adc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b34:	6939      	ldr	r1, [r7, #16]
 8004b36:	0148      	lsls	r0, r1, #5
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	4401      	add	r1, r0
 8004b3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b40:	4313      	orrs	r3, r2
 8004b42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10d      	bne.n	8004b66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6919      	ldr	r1, [r3, #16]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	460a      	mov	r2, r1
 8004b64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	0151      	lsls	r1, r2, #5
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d14a      	bne.n	8004c48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bca:	f040 8086 	bne.w	8004cda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bf0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d902      	bls.n	8004c2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
          break;
 8004c2a:	e056      	b.n	8004cda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c44:	d0e7      	beq.n	8004c16 <USB_EPStopXfer+0x82>
 8004c46:	e048      	b.n	8004cda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c60:	d13b      	bne.n	8004cda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3301      	adds	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d902      	bls.n	8004cc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cbe:	e00c      	b.n	8004cda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd8:	d0e7      	beq.n	8004caa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	71fb      	strb	r3, [r7, #7]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d123      	bne.n	8004d56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d0e:	88bb      	ldrh	r3, [r7, #4]
 8004d10:	3303      	adds	r3, #3
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e018      	b.n	8004d4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	031a      	lsls	r2, r3, #12
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d28:	461a      	mov	r2, r3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	3301      	adds	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d3e2      	bcc.n	8004d1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3724      	adds	r7, #36	; 0x24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b08b      	sub	sp, #44	; 0x2c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	e014      	b.n	8004dba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	3301      	adds	r3, #1
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	3301      	adds	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	3301      	adds	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	3301      	adds	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	3301      	adds	r3, #1
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	6a3a      	ldr	r2, [r7, #32]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3e6      	bcc.n	8004d90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dc2:	8bfb      	ldrh	r3, [r7, #30]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01e      	beq.n	8004e06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f107 0310 	add.w	r3, r7, #16
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	701a      	strb	r2, [r3, #0]
      i++;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	3301      	adds	r3, #1
 8004df2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	3301      	adds	r3, #1
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004dfa:	8bfb      	ldrh	r3, [r7, #30]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e00:	8bfb      	ldrh	r3, [r7, #30]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1ea      	bne.n	8004ddc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	372c      	adds	r7, #44	; 0x2c
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d12c      	bne.n	8004e8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db12      	blt.n	8004e68 <USB_EPSetStall+0x54>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00f      	beq.n	8004e68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e02b      	b.n	8004ee2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db12      	blt.n	8004ec2 <USB_EPSetStall+0xae>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00f      	beq.n	8004ec2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ec0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004edc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ee0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d128      	bne.n	8004f5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	791b      	ldrb	r3, [r3, #4]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d003      	beq.n	8004f3c <USB_EPClearStall+0x4c>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	791b      	ldrb	r3, [r3, #4]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d138      	bne.n	8004fae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e027      	b.n	8004fae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	791b      	ldrb	r3, [r3, #4]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d003      	beq.n	8004f8e <USB_EPClearStall+0x9e>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	791b      	ldrb	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d10f      	bne.n	8004fae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ff0:	68f9      	ldr	r1, [r7, #12]
 8004ff2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005036:	f023 0302 	bic.w	r3, r3, #2
 800503a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005078:	f043 0302 	orr.w	r3, r3, #2
 800507c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050a4:	68fb      	ldr	r3, [r7, #12]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	0c1b      	lsrs	r3, r3, #16
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	b29b      	uxth	r3, r3
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4013      	ands	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005148:	68bb      	ldr	r3, [r7, #8]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005156:	b480      	push	{r7}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	01db      	lsls	r3, r3, #7
 8005188:	b2db      	uxtb	r3, r3
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4013      	ands	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051a4:	68bb      	ldr	r3, [r7, #8]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005204:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	460b      	mov	r3, r1
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	333c      	adds	r3, #60	; 0x3c
 800522a:	3304      	adds	r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4a26      	ldr	r2, [pc, #152]	; (80052cc <USB_EP0_OutStart+0xb8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d90a      	bls.n	800524e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005248:	d101      	bne.n	800524e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e037      	b.n	80052be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800526c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527c:	f043 0318 	orr.w	r3, r3, #24
 8005280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005290:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005294:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10f      	bne.n	80052bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	4f54300a 	.word	0x4f54300a

080052d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <USB_CoreReset+0x64>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e01b      	b.n	8005326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	daf2      	bge.n	80052dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <USB_CoreReset+0x64>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e006      	b.n	8005326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b01      	cmp	r3, #1
 8005322:	d0f0      	beq.n	8005306 <USB_CoreReset+0x36>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	00030d40 	.word	0x00030d40

08005338 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005344:	2010      	movs	r0, #16
 8005346:	f002 f929 	bl	800759c <USBD_static_malloc>
 800534a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	32b0      	adds	r2, #176	; 0xb0
 800535c:	2100      	movs	r1, #0
 800535e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005362:	2302      	movs	r3, #2
 8005364:	e048      	b.n	80053f8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	32b0      	adds	r2, #176	; 0xb0
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	32b0      	adds	r2, #176	; 0xb0
 8005380:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7c1b      	ldrb	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <USBD_HID_Init+0xc8>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f003 020f 	and.w	r2, r3, #15
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	3326      	adds	r3, #38	; 0x26
 80053a8:	2207      	movs	r2, #7
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e00c      	b.n	80053c8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <USBD_HID_Init+0xc8>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f003 020f 	and.w	r2, r3, #15
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3326      	adds	r3, #38	; 0x26
 80053c4:	220a      	movs	r2, #10
 80053c6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <USBD_HID_Init+0xc8>)
 80053ca:	7819      	ldrb	r1, [r3, #0]
 80053cc:	2304      	movs	r3, #4
 80053ce:	2203      	movs	r2, #3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 ffd2 	bl	800737a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <USBD_HID_Init+0xc8>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	f003 020f 	and.w	r2, r3, #15
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	3324      	adds	r3, #36	; 0x24
 80053ec:	2201      	movs	r2, #1
 80053ee:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200000bf 	.word	0x200000bf

08005404 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <USBD_HID_DeInit+0x8c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 ffd5 	bl	80073c6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800541c:	4b1c      	ldr	r3, [pc, #112]	; (8005490 <USBD_HID_DeInit+0x8c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3324      	adds	r3, #36	; 0x24
 8005432:	2200      	movs	r2, #0
 8005434:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005436:	4b16      	ldr	r3, [pc, #88]	; (8005490 <USBD_HID_DeInit+0x8c>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3326      	adds	r3, #38	; 0x26
 800544c:	2200      	movs	r2, #0
 800544e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	32b0      	adds	r2, #176	; 0xb0
 800545a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d011      	beq.n	8005486 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	32b0      	adds	r2, #176	; 0xb0
 800546c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005470:	4618      	mov	r0, r3
 8005472:	f002 f8a1 	bl	80075b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	32b0      	adds	r2, #176	; 0xb0
 8005480:	2100      	movs	r1, #0
 8005482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200000bf 	.word	0x200000bf

08005494 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	32b0      	adds	r2, #176	; 0xb0
 80054a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ac:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	e0e8      	b.n	8005692 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d046      	beq.n	800555a <USBD_HID_Setup+0xc6>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	f040 80d8 	bne.w	8005682 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	3b02      	subs	r3, #2
 80054d8:	2b09      	cmp	r3, #9
 80054da:	d836      	bhi.n	800554a <USBD_HID_Setup+0xb6>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <USBD_HID_Setup+0x50>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	0800553b 	.word	0x0800553b
 80054e8:	0800551b 	.word	0x0800551b
 80054ec:	0800554b 	.word	0x0800554b
 80054f0:	0800554b 	.word	0x0800554b
 80054f4:	0800554b 	.word	0x0800554b
 80054f8:	0800554b 	.word	0x0800554b
 80054fc:	0800554b 	.word	0x0800554b
 8005500:	0800554b 	.word	0x0800554b
 8005504:	08005529 	.word	0x08005529
 8005508:	0800550d 	.word	0x0800550d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	885b      	ldrh	r3, [r3, #2]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	601a      	str	r2, [r3, #0]
          break;
 8005518:	e01e      	b.n	8005558 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 fbd5 	bl	8006cd0 <USBD_CtlSendData>
          break;
 8005526:	e017      	b.n	8005558 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	885b      	ldrh	r3, [r3, #2]
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	b29b      	uxth	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	605a      	str	r2, [r3, #4]
          break;
 8005538:	e00e      	b.n	8005558 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3304      	adds	r3, #4
 800553e:	2201      	movs	r2, #1
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 fbc4 	bl	8006cd0 <USBD_CtlSendData>
          break;
 8005548:	e006      	b.n	8005558 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fb4e 	bl	8006bee <USBD_CtlError>
          ret = USBD_FAIL;
 8005552:	2303      	movs	r3, #3
 8005554:	75fb      	strb	r3, [r7, #23]
          break;
 8005556:	bf00      	nop
      }
      break;
 8005558:	e09a      	b.n	8005690 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b0b      	cmp	r3, #11
 8005560:	f200 8086 	bhi.w	8005670 <USBD_HID_Setup+0x1dc>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <USBD_HID_Setup+0xd8>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	0800559d 	.word	0x0800559d
 8005570:	0800567f 	.word	0x0800567f
 8005574:	08005671 	.word	0x08005671
 8005578:	08005671 	.word	0x08005671
 800557c:	08005671 	.word	0x08005671
 8005580:	08005671 	.word	0x08005671
 8005584:	080055c7 	.word	0x080055c7
 8005588:	08005671 	.word	0x08005671
 800558c:	08005671 	.word	0x08005671
 8005590:	08005671 	.word	0x08005671
 8005594:	0800561f 	.word	0x0800561f
 8005598:	08005649 	.word	0x08005649
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d107      	bne.n	80055b8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055a8:	f107 030a 	add.w	r3, r7, #10
 80055ac:	2202      	movs	r2, #2
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 fb8d 	bl	8006cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055b6:	e063      	b.n	8005680 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fb17 	bl	8006bee <USBD_CtlError>
            ret = USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	75fb      	strb	r3, [r7, #23]
          break;
 80055c4:	e05c      	b.n	8005680 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	885b      	ldrh	r3, [r3, #2]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b22      	cmp	r3, #34	; 0x22
 80055d0:	d108      	bne.n	80055e4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	88db      	ldrh	r3, [r3, #6]
 80055d6:	2b3f      	cmp	r3, #63	; 0x3f
 80055d8:	bf28      	it	cs
 80055da:	233f      	movcs	r3, #63	; 0x3f
 80055dc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80055de:	4b2f      	ldr	r3, [pc, #188]	; (800569c <USBD_HID_Setup+0x208>)
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e015      	b.n	8005610 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	885b      	ldrh	r3, [r3, #2]
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b21      	cmp	r3, #33	; 0x21
 80055ee:	d108      	bne.n	8005602 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <USBD_HID_Setup+0x20c>)
 80055f2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	88db      	ldrh	r3, [r3, #6]
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	bf28      	it	cs
 80055fc:	2309      	movcs	r3, #9
 80055fe:	82bb      	strh	r3, [r7, #20]
 8005600:	e006      	b.n	8005610 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 faf2 	bl	8006bee <USBD_CtlError>
            ret = USBD_FAIL;
 800560a:	2303      	movs	r3, #3
 800560c:	75fb      	strb	r3, [r7, #23]
            break;
 800560e:	e037      	b.n	8005680 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005610:	8abb      	ldrh	r3, [r7, #20]
 8005612:	461a      	mov	r2, r3
 8005614:	6939      	ldr	r1, [r7, #16]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 fb5a 	bl	8006cd0 <USBD_CtlSendData>
          break;
 800561c:	e030      	b.n	8005680 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d107      	bne.n	800563a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3308      	adds	r3, #8
 800562e:	2201      	movs	r2, #1
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 fb4c 	bl	8006cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005638:	e022      	b.n	8005680 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fad6 	bl	8006bee <USBD_CtlError>
            ret = USBD_FAIL;
 8005642:	2303      	movs	r3, #3
 8005644:	75fb      	strb	r3, [r7, #23]
          break;
 8005646:	e01b      	b.n	8005680 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b03      	cmp	r3, #3
 8005652:	d106      	bne.n	8005662 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	885b      	ldrh	r3, [r3, #2]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005660:	e00e      	b.n	8005680 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fac2 	bl	8006bee <USBD_CtlError>
            ret = USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	75fb      	strb	r3, [r7, #23]
          break;
 800566e:	e007      	b.n	8005680 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fabb 	bl	8006bee <USBD_CtlError>
          ret = USBD_FAIL;
 8005678:	2303      	movs	r3, #3
 800567a:	75fb      	strb	r3, [r7, #23]
          break;
 800567c:	e000      	b.n	8005680 <USBD_HID_Setup+0x1ec>
          break;
 800567e:	bf00      	nop
      }
      break;
 8005680:	e006      	b.n	8005690 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 fab2 	bl	8006bee <USBD_CtlError>
      ret = USBD_FAIL;
 800568a:	2303      	movs	r3, #3
 800568c:	75fb      	strb	r3, [r7, #23]
      break;
 800568e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000080 	.word	0x20000080
 80056a0:	20000068 	.word	0x20000068

080056a4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	32b0      	adds	r2, #176	; 0xb0
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e014      	b.n	80056f6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d10d      	bne.n	80056f4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	7b1b      	ldrb	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2201      	movs	r2, #1
 80056e4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <USBD_HID_SendReport+0x5c>)
 80056e8:	7819      	ldrb	r1, [r3, #0]
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f001 ff11 	bl	8007516 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200000bf 	.word	0x200000bf

08005704 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800570c:	2181      	movs	r1, #129	; 0x81
 800570e:	4809      	ldr	r0, [pc, #36]	; (8005734 <USBD_HID_GetFSCfgDesc+0x30>)
 8005710:	f000 fc35 	bl	8005f7e <USBD_GetEpDesc>
 8005714:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	220a      	movs	r2, #10
 8005720:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2222      	movs	r2, #34	; 0x22
 8005726:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005728:	4b02      	ldr	r3, [pc, #8]	; (8005734 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000044 	.word	0x20000044

08005738 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005740:	2181      	movs	r1, #129	; 0x81
 8005742:	4809      	ldr	r0, [pc, #36]	; (8005768 <USBD_HID_GetHSCfgDesc+0x30>)
 8005744:	f000 fc1b 	bl	8005f7e <USBD_GetEpDesc>
 8005748:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2207      	movs	r2, #7
 8005754:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2222      	movs	r2, #34	; 0x22
 800575a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000044 	.word	0x20000044

0800576c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005774:	2181      	movs	r1, #129	; 0x81
 8005776:	4809      	ldr	r0, [pc, #36]	; (800579c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005778:	f000 fc01 	bl	8005f7e <USBD_GetEpDesc>
 800577c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	220a      	movs	r2, #10
 8005788:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2222      	movs	r2, #34	; 0x22
 800578e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000044 	.word	0x20000044

080057a0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	32b0      	adds	r2, #176	; 0xb0
 80057b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ba:	2200      	movs	r2, #0
 80057bc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	220a      	movs	r2, #10
 80057d8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80057da:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20000074 	.word	0x20000074

080057ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005800:	2303      	movs	r3, #3
 8005802:	e01f      	b.n	8005844 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	79fa      	ldrb	r2, [r7, #7]
 8005836:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f001 fd37 	bl	80072ac <USBD_LL_Init>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e025      	b.n	80058b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	32ae      	adds	r2, #174	; 0xae
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	32ae      	adds	r2, #174	; 0xae
 800588a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f107 020e 	add.w	r2, r7, #14
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	4602      	mov	r2, r0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fd3f 	bl	8007344 <USBD_LL_Start>
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	4611      	mov	r1, r2
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	4611      	mov	r1, r2
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f908 	bl	8006b7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005978:	461a      	mov	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2b02      	cmp	r3, #2
 800598c:	d01a      	beq.n	80059c4 <USBD_LL_SetupStage+0x72>
 800598e:	2b02      	cmp	r3, #2
 8005990:	d822      	bhi.n	80059d8 <USBD_LL_SetupStage+0x86>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <USBD_LL_SetupStage+0x4a>
 8005996:	2b01      	cmp	r3, #1
 8005998:	d00a      	beq.n	80059b0 <USBD_LL_SetupStage+0x5e>
 800599a:	e01d      	b.n	80059d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb5f 	bl	8006068 <USBD_StdDevReq>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73fb      	strb	r3, [r7, #15]
      break;
 80059ae:	e020      	b.n	80059f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fbc7 	bl	800614c <USBD_StdItfReq>
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
      break;
 80059c2:	e016      	b.n	80059f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fc29 	bl	8006224 <USBD_StdEPReq>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
      break;
 80059d6:	e00c      	b.n	80059f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 fd0c 	bl	8007404 <USBD_LL_StallEP>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	bf00      	nop
  }

  return ret;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	460b      	mov	r3, r1
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d16e      	bne.n	8005af2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	f040 8098 	bne.w	8005b58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d913      	bls.n	8005a5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	1ad2      	subs	r2, r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bf28      	it	cs
 8005a4e:	4613      	movcs	r3, r2
 8005a50:	461a      	mov	r2, r3
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f001 f967 	bl	8006d28 <USBD_CtlContinueRx>
 8005a5a:	e07d      	b.n	8005b58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d014      	beq.n	8005a94 <USBD_LL_DataOutStage+0x98>
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d81d      	bhi.n	8005aaa <USBD_LL_DataOutStage+0xae>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <USBD_LL_DataOutStage+0x7c>
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d003      	beq.n	8005a7e <USBD_LL_DataOutStage+0x82>
 8005a76:	e018      	b.n	8005aaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a7c:	e018      	b.n	8005ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	4619      	mov	r1, r3
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fa5e 	bl	8005f4a <USBD_CoreFindIF>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	75bb      	strb	r3, [r7, #22]
            break;
 8005a92:	e00d      	b.n	8005ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fa60 	bl	8005f64 <USBD_CoreFindEP>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8005aa8:	e002      	b.n	8005ab0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75bb      	strb	r3, [r7, #22]
            break;
 8005aae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ab0:	7dbb      	ldrb	r3, [r7, #22]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d119      	bne.n	8005aea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d113      	bne.n	8005aea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ac2:	7dba      	ldrb	r2, [r7, #22]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	32ae      	adds	r2, #174	; 0xae
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ad2:	7dba      	ldrb	r2, [r7, #22]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ada:	7dba      	ldrb	r2, [r7, #22]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	32ae      	adds	r2, #174	; 0xae
 8005ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f001 f92d 	bl	8006d4a <USBD_CtlSendStatus>
 8005af0:	e032      	b.n	8005b58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	4619      	mov	r1, r3
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fa31 	bl	8005f64 <USBD_CoreFindEP>
 8005b02:	4603      	mov	r3, r0
 8005b04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	2bff      	cmp	r3, #255	; 0xff
 8005b0a:	d025      	beq.n	8005b58 <USBD_LL_DataOutStage+0x15c>
 8005b0c:	7dbb      	ldrb	r3, [r7, #22]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d122      	bne.n	8005b58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d117      	bne.n	8005b4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b1e:	7dba      	ldrb	r2, [r7, #22]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	32ae      	adds	r2, #174	; 0xae
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00f      	beq.n	8005b4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b2e:	7dba      	ldrb	r2, [r7, #22]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b36:	7dba      	ldrb	r2, [r7, #22]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	32ae      	adds	r2, #174	; 0xae
 8005b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	7afa      	ldrb	r2, [r7, #11]
 8005b44:	4611      	mov	r1, r2
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	4798      	blx	r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	e000      	b.n	8005b5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d16f      	bne.n	8005c56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d15a      	bne.n	8005c3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d914      	bls.n	8005bbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f001 f8ac 	bl	8006d06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f001 fccf 	bl	8007558 <USBD_LL_PrepareReceive>
 8005bba:	e03f      	b.n	8005c3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d11c      	bne.n	8005c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d316      	bcc.n	8005c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d20f      	bcs.n	8005c02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f001 f88d 	bl	8006d06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f001 fcac 	bl	8007558 <USBD_LL_PrepareReceive>
 8005c00:	e01c      	b.n	8005c3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d10f      	bne.n	8005c2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f001 fbe7 	bl	8007404 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f001 f89a 	bl	8006d70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d03a      	beq.n	8005cbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff fe42 	bl	80058d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c54:	e032      	b.n	8005cbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f97f 	bl	8005f64 <USBD_CoreFindEP>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2bff      	cmp	r3, #255	; 0xff
 8005c6e:	d025      	beq.n	8005cbc <USBD_LL_DataInStage+0x15a>
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d122      	bne.n	8005cbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d11c      	bne.n	8005cbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c82:	7dfa      	ldrb	r2, [r7, #23]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	32ae      	adds	r2, #174	; 0xae
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d014      	beq.n	8005cbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c92:	7dfa      	ldrb	r2, [r7, #23]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c9a:	7dfa      	ldrb	r2, [r7, #23]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	32ae      	adds	r2, #174	; 0xae
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	7afa      	ldrb	r2, [r7, #11]
 8005ca8:	4611      	mov	r1, r2
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cb2:	7dbb      	ldrb	r3, [r7, #22]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005cb8:	7dbb      	ldrb	r3, [r7, #22]
 8005cba:	e000      	b.n	8005cbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6852      	ldr	r2, [r2, #4]
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2100      	movs	r1, #0
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fb21 	bl	800737a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2240      	movs	r2, #64	; 0x40
 8005d44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fb13 	bl	800737a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2240      	movs	r2, #64	; 0x40
 8005d5e:	621a      	str	r2, [r3, #32]

  return ret;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d106      	bne.n	8005dd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d110      	bne.n	8005e1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	32ae      	adds	r2, #174	; 0xae
 8005e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e01c      	b.n	8005e82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d115      	bne.n	8005e80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	32ae      	adds	r2, #174	; 0xae
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	32ae      	adds	r2, #174	; 0xae
 8005e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	32ae      	adds	r2, #174	; 0xae
 8005ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e01c      	b.n	8005ee6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d115      	bne.n	8005ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	32ae      	adds	r2, #174	; 0xae
 8005ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	32ae      	adds	r2, #174	; 0xae
 8005ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	4611      	mov	r1, r2
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6852      	ldr	r2, [r2, #4]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	4611      	mov	r1, r2
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	885b      	ldrh	r3, [r3, #2]
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d920      	bls.n	8005fe8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fae:	e013      	b.n	8005fd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fb0:	f107 030a 	add.w	r3, r7, #10
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f000 f81b 	bl	8005ff2 <USBD_GetNextDesc>
 8005fbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d108      	bne.n	8005fd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	789b      	ldrb	r3, [r3, #2]
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d008      	beq.n	8005fe6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	885b      	ldrh	r3, [r3, #2]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	897b      	ldrh	r3, [r7, #10]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d8e5      	bhi.n	8005fb0 <USBD_GetEpDesc+0x32>
 8005fe4:	e000      	b.n	8005fe8 <USBD_GetEpDesc+0x6a>
          break;
 8005fe6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fe8:	693b      	ldr	r3, [r7, #16]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	881a      	ldrh	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	4413      	add	r3, r2
 800600c:	b29a      	uxth	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4413      	add	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800604a:	8a3b      	ldrh	r3, [r7, #16]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	b21a      	sxth	r2, r3
 8006050:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006054:	4313      	orrs	r3, r2
 8006056:	b21b      	sxth	r3, r3
 8006058:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800605a:	89fb      	ldrh	r3, [r7, #14]
}
 800605c:	4618      	mov	r0, r3
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d005      	beq.n	800608e <USBD_StdDevReq+0x26>
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d857      	bhi.n	8006136 <USBD_StdDevReq+0xce>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <USBD_StdDevReq+0x42>
 800608a:	2b20      	cmp	r3, #32
 800608c:	d153      	bne.n	8006136 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	32ae      	adds	r2, #174	; 0xae
 8006098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
      break;
 80060a8:	e04a      	b.n	8006140 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	d83b      	bhi.n	800612a <USBD_StdDevReq+0xc2>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <USBD_StdDevReq+0x50>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006121 	.word	0x08006121
 80060c0:	0800612b 	.word	0x0800612b
 80060c4:	08006117 	.word	0x08006117
 80060c8:	0800612b 	.word	0x0800612b
 80060cc:	080060eb 	.word	0x080060eb
 80060d0:	080060e1 	.word	0x080060e1
 80060d4:	0800612b 	.word	0x0800612b
 80060d8:	08006103 	.word	0x08006103
 80060dc:	080060f5 	.word	0x080060f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa3c 	bl	8006560 <USBD_GetDescriptor>
          break;
 80060e8:	e024      	b.n	8006134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fba1 	bl	8006834 <USBD_SetAddress>
          break;
 80060f2:	e01f      	b.n	8006134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fbe0 	bl	80068bc <USBD_SetConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	73fb      	strb	r3, [r7, #15]
          break;
 8006100:	e018      	b.n	8006134 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fc83 	bl	8006a10 <USBD_GetConfig>
          break;
 800610a:	e013      	b.n	8006134 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fcb4 	bl	8006a7c <USBD_GetStatus>
          break;
 8006114:	e00e      	b.n	8006134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fce3 	bl	8006ae4 <USBD_SetFeature>
          break;
 800611e:	e009      	b.n	8006134 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fd07 	bl	8006b36 <USBD_ClrFeature>
          break;
 8006128:	e004      	b.n	8006134 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fd5e 	bl	8006bee <USBD_CtlError>
          break;
 8006132:	bf00      	nop
      }
      break;
 8006134:	e004      	b.n	8006140 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fd58 	bl	8006bee <USBD_CtlError>
      break;
 800613e:	bf00      	nop
  }

  return ret;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop

0800614c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d005      	beq.n	8006172 <USBD_StdItfReq+0x26>
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d852      	bhi.n	8006210 <USBD_StdItfReq+0xc4>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <USBD_StdItfReq+0x26>
 800616e:	2b20      	cmp	r3, #32
 8006170:	d14e      	bne.n	8006210 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006178:	b2db      	uxtb	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	2b02      	cmp	r3, #2
 800617e:	d840      	bhi.n	8006202 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	889b      	ldrh	r3, [r3, #4]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b01      	cmp	r3, #1
 8006188:	d836      	bhi.n	80061f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	889b      	ldrh	r3, [r3, #4]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fed9 	bl	8005f4a <USBD_CoreFindIF>
 8006198:	4603      	mov	r3, r0
 800619a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2bff      	cmp	r3, #255	; 0xff
 80061a0:	d01d      	beq.n	80061de <USBD_StdItfReq+0x92>
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11a      	bne.n	80061de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061a8:	7bba      	ldrb	r2, [r7, #14]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	32ae      	adds	r2, #174	; 0xae
 80061ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00f      	beq.n	80061d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061b8:	7bba      	ldrb	r2, [r7, #14]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061c0:	7bba      	ldrb	r2, [r7, #14]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32ae      	adds	r2, #174	; 0xae
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061d6:	e004      	b.n	80061e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061dc:	e001      	b.n	80061e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061de:	2303      	movs	r3, #3
 80061e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	88db      	ldrh	r3, [r3, #6]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d110      	bne.n	800620c <USBD_StdItfReq+0xc0>
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10d      	bne.n	800620c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fdaa 	bl	8006d4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061f6:	e009      	b.n	800620c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fcf7 	bl	8006bee <USBD_CtlError>
          break;
 8006200:	e004      	b.n	800620c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fcf2 	bl	8006bee <USBD_CtlError>
          break;
 800620a:	e000      	b.n	800620e <USBD_StdItfReq+0xc2>
          break;
 800620c:	bf00      	nop
      }
      break;
 800620e:	e004      	b.n	800621a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fceb 	bl	8006bee <USBD_CtlError>
      break;
 8006218:	bf00      	nop
  }

  return ret;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	889b      	ldrh	r3, [r3, #4]
 8006236:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d007      	beq.n	8006254 <USBD_StdEPReq+0x30>
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	f200 817f 	bhi.w	8006548 <USBD_StdEPReq+0x324>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02a      	beq.n	80062a4 <USBD_StdEPReq+0x80>
 800624e:	2b20      	cmp	r3, #32
 8006250:	f040 817a 	bne.w	8006548 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff fe83 	bl	8005f64 <USBD_CoreFindEP>
 800625e:	4603      	mov	r3, r0
 8006260:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006262:	7b7b      	ldrb	r3, [r7, #13]
 8006264:	2bff      	cmp	r3, #255	; 0xff
 8006266:	f000 8174 	beq.w	8006552 <USBD_StdEPReq+0x32e>
 800626a:	7b7b      	ldrb	r3, [r7, #13]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8170 	bne.w	8006552 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006272:	7b7a      	ldrb	r2, [r7, #13]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800627a:	7b7a      	ldrb	r2, [r7, #13]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	32ae      	adds	r2, #174	; 0xae
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8163 	beq.w	8006552 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800628c:	7b7a      	ldrb	r2, [r7, #13]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	32ae      	adds	r2, #174	; 0xae
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062a2:	e156      	b.n	8006552 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d008      	beq.n	80062be <USBD_StdEPReq+0x9a>
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	f300 8145 	bgt.w	800653c <USBD_StdEPReq+0x318>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 809b 	beq.w	80063ee <USBD_StdEPReq+0x1ca>
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d03c      	beq.n	8006336 <USBD_StdEPReq+0x112>
 80062bc:	e13e      	b.n	800653c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d002      	beq.n	80062d0 <USBD_StdEPReq+0xac>
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d016      	beq.n	80062fc <USBD_StdEPReq+0xd8>
 80062ce:	e02c      	b.n	800632a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <USBD_StdEPReq+0xce>
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d00a      	beq.n	80062f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f88f 	bl	8007404 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062e6:	2180      	movs	r1, #128	; 0x80
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f88b 	bl	8007404 <USBD_LL_StallEP>
 80062ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062f0:	e020      	b.n	8006334 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fc7a 	bl	8006bee <USBD_CtlError>
              break;
 80062fa:	e01b      	b.n	8006334 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	885b      	ldrh	r3, [r3, #2]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10e      	bne.n	8006322 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <USBD_StdEPReq+0xfe>
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d008      	beq.n	8006322 <USBD_StdEPReq+0xfe>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	88db      	ldrh	r3, [r3, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f871 	bl	8007404 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fd11 	bl	8006d4a <USBD_CtlSendStatus>

              break;
 8006328:	e004      	b.n	8006334 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fc5e 	bl	8006bee <USBD_CtlError>
              break;
 8006332:	bf00      	nop
          }
          break;
 8006334:	e107      	b.n	8006546 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d002      	beq.n	8006348 <USBD_StdEPReq+0x124>
 8006342:	2b03      	cmp	r3, #3
 8006344:	d016      	beq.n	8006374 <USBD_StdEPReq+0x150>
 8006346:	e04b      	b.n	80063e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <USBD_StdEPReq+0x146>
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d00a      	beq.n	800636a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 f853 	bl	8007404 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800635e:	2180      	movs	r1, #128	; 0x80
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f84f 	bl	8007404 <USBD_LL_StallEP>
 8006366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006368:	e040      	b.n	80063ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fc3e 	bl	8006bee <USBD_CtlError>
              break;
 8006372:	e03b      	b.n	80063ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d136      	bne.n	80063ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 f859 	bl	8007442 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fcda 	bl	8006d4a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fde2 	bl	8005f64 <USBD_CoreFindEP>
 80063a0:	4603      	mov	r3, r0
 80063a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063a4:	7b7b      	ldrb	r3, [r7, #13]
 80063a6:	2bff      	cmp	r3, #255	; 0xff
 80063a8:	d01f      	beq.n	80063ea <USBD_StdEPReq+0x1c6>
 80063aa:	7b7b      	ldrb	r3, [r7, #13]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d11c      	bne.n	80063ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063b0:	7b7a      	ldrb	r2, [r7, #13]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063b8:	7b7a      	ldrb	r2, [r7, #13]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	32ae      	adds	r2, #174	; 0xae
 80063be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d010      	beq.n	80063ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063c8:	7b7a      	ldrb	r2, [r7, #13]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	32ae      	adds	r2, #174	; 0xae
 80063ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063de:	e004      	b.n	80063ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fc03 	bl	8006bee <USBD_CtlError>
              break;
 80063e8:	e000      	b.n	80063ec <USBD_StdEPReq+0x1c8>
              break;
 80063ea:	bf00      	nop
          }
          break;
 80063ec:	e0ab      	b.n	8006546 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d002      	beq.n	8006400 <USBD_StdEPReq+0x1dc>
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d032      	beq.n	8006464 <USBD_StdEPReq+0x240>
 80063fe:	e097      	b.n	8006530 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <USBD_StdEPReq+0x1f2>
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d004      	beq.n	8006416 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fbed 	bl	8006bee <USBD_CtlError>
                break;
 8006414:	e091      	b.n	800653a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da0b      	bge.n	8006436 <USBD_StdEPReq+0x212>
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	3310      	adds	r3, #16
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	3304      	adds	r3, #4
 8006434:	e00b      	b.n	800644e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4413      	add	r3, r2
 800644c:	3304      	adds	r3, #4
 800644e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2202      	movs	r2, #2
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fc37 	bl	8006cd0 <USBD_CtlSendData>
              break;
 8006462:	e06a      	b.n	800653a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	da11      	bge.n	8006490 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	f003 020f 	and.w	r2, r3, #15
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	3324      	adds	r3, #36	; 0x24
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d117      	bne.n	80064b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fbb0 	bl	8006bee <USBD_CtlError>
                  break;
 800648e:	e054      	b.n	800653a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	f003 020f 	and.w	r2, r3, #15
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fb9d 	bl	8006bee <USBD_CtlError>
                  break;
 80064b4:	e041      	b.n	800653a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da0b      	bge.n	80064d6 <USBD_StdEPReq+0x2b2>
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	3310      	adds	r3, #16
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	3304      	adds	r3, #4
 80064d4:	e00b      	b.n	80064ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	3304      	adds	r3, #4
 80064ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <USBD_StdEPReq+0x2d8>
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d103      	bne.n	8006504 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e00e      	b.n	8006522 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 ffb9 	bl	8007480 <USBD_LL_IsStallEP>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e002      	b.n	8006522 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2202      	movs	r2, #2
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fbd1 	bl	8006cd0 <USBD_CtlSendData>
              break;
 800652e:	e004      	b.n	800653a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb5b 	bl	8006bee <USBD_CtlError>
              break;
 8006538:	bf00      	nop
          }
          break;
 800653a:	e004      	b.n	8006546 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fb55 	bl	8006bee <USBD_CtlError>
          break;
 8006544:	bf00      	nop
      }
      break;
 8006546:	e005      	b.n	8006554 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fb4f 	bl	8006bee <USBD_CtlError>
      break;
 8006550:	e000      	b.n	8006554 <USBD_StdEPReq+0x330>
      break;
 8006552:	bf00      	nop
  }

  return ret;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	2b06      	cmp	r3, #6
 8006582:	f200 8128 	bhi.w	80067d6 <USBD_GetDescriptor+0x276>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <USBD_GetDescriptor+0x2c>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065c1 	.word	0x080065c1
 8006594:	08006601 	.word	0x08006601
 8006598:	080067d7 	.word	0x080067d7
 800659c:	080067d7 	.word	0x080067d7
 80065a0:	08006777 	.word	0x08006777
 80065a4:	080067a3 	.word	0x080067a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 0108 	add.w	r1, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
      break;
 80065be:	e112      	b.n	80067e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7c1b      	ldrb	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10d      	bne.n	80065e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	f107 0208 	add.w	r2, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	2202      	movs	r2, #2
 80065e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065e2:	e100      	b.n	80067e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	f107 0208 	add.w	r2, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	2202      	movs	r2, #2
 80065fc:	701a      	strb	r2, [r3, #0]
      break;
 80065fe:	e0f2      	b.n	80067e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	885b      	ldrh	r3, [r3, #2]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b05      	cmp	r3, #5
 8006608:	f200 80ac 	bhi.w	8006764 <USBD_GetDescriptor+0x204>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USBD_GetDescriptor+0xb4>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	0800662d 	.word	0x0800662d
 8006618:	08006661 	.word	0x08006661
 800661c:	08006695 	.word	0x08006695
 8006620:	080066c9 	.word	0x080066c9
 8006624:	080066fd 	.word	0x080066fd
 8006628:	08006731 	.word	0x08006731
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	7c12      	ldrb	r2, [r2, #16]
 8006644:	f107 0108 	add.w	r1, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800664e:	e091      	b.n	8006774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 facb 	bl	8006bee <USBD_CtlError>
            err++;
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	3301      	adds	r3, #1
 800665c:	72fb      	strb	r3, [r7, #11]
          break;
 800665e:	e089      	b.n	8006774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	7c12      	ldrb	r2, [r2, #16]
 8006678:	f107 0108 	add.w	r1, r7, #8
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006682:	e077      	b.n	8006774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fab1 	bl	8006bee <USBD_CtlError>
            err++;
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	3301      	adds	r3, #1
 8006690:	72fb      	strb	r3, [r7, #11]
          break;
 8006692:	e06f      	b.n	8006774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	7c12      	ldrb	r2, [r2, #16]
 80066ac:	f107 0108 	add.w	r1, r7, #8
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
 80066b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b6:	e05d      	b.n	8006774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa97 	bl	8006bee <USBD_CtlError>
            err++;
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	3301      	adds	r3, #1
 80066c4:	72fb      	strb	r3, [r7, #11]
          break;
 80066c6:	e055      	b.n	8006774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	7c12      	ldrb	r2, [r2, #16]
 80066e0:	f107 0108 	add.w	r1, r7, #8
 80066e4:	4610      	mov	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ea:	e043      	b.n	8006774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa7d 	bl	8006bee <USBD_CtlError>
            err++;
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	3301      	adds	r3, #1
 80066f8:	72fb      	strb	r3, [r7, #11]
          break;
 80066fa:	e03b      	b.n	8006774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671e:	e029      	b.n	8006774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa63 	bl	8006bee <USBD_CtlError>
            err++;
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	3301      	adds	r3, #1
 800672c:	72fb      	strb	r3, [r7, #11]
          break;
 800672e:	e021      	b.n	8006774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	f107 0108 	add.w	r1, r7, #8
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006752:	e00f      	b.n	8006774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa49 	bl	8006bee <USBD_CtlError>
            err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
          break;
 8006762:	e007      	b.n	8006774 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa41 	bl	8006bee <USBD_CtlError>
          err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006772:	bf00      	nop
      }
      break;
 8006774:	e037      	b.n	80067e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7c1b      	ldrb	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006786:	f107 0208 	add.w	r2, r7, #8
 800678a:	4610      	mov	r0, r2
 800678c:	4798      	blx	r3
 800678e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006790:	e029      	b.n	80067e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa2a 	bl	8006bee <USBD_CtlError>
        err++;
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	3301      	adds	r3, #1
 800679e:	72fb      	strb	r3, [r7, #11]
      break;
 80067a0:	e021      	b.n	80067e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7c1b      	ldrb	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	f107 0208 	add.w	r2, r7, #8
 80067b6:	4610      	mov	r0, r2
 80067b8:	4798      	blx	r3
 80067ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	2207      	movs	r2, #7
 80067c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c4:	e00f      	b.n	80067e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa10 	bl	8006bee <USBD_CtlError>
        err++;
 80067ce:	7afb      	ldrb	r3, [r7, #11]
 80067d0:	3301      	adds	r3, #1
 80067d2:	72fb      	strb	r3, [r7, #11]
      break;
 80067d4:	e007      	b.n	80067e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa08 	bl	8006bee <USBD_CtlError>
      err++;
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	3301      	adds	r3, #1
 80067e2:	72fb      	strb	r3, [r7, #11]
      break;
 80067e4:	bf00      	nop
  }

  if (err != 0U)
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11e      	bne.n	800682a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	88db      	ldrh	r3, [r3, #6]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d016      	beq.n	8006822 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067f4:	893b      	ldrh	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	88da      	ldrh	r2, [r3, #6]
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	4293      	cmp	r3, r2
 8006802:	bf28      	it	cs
 8006804:	4613      	movcs	r3, r2
 8006806:	b29b      	uxth	r3, r3
 8006808:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	461a      	mov	r2, r3
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa5d 	bl	8006cd0 <USBD_CtlSendData>
 8006816:	e009      	b.n	800682c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9e7 	bl	8006bee <USBD_CtlError>
 8006820:	e004      	b.n	800682c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa91 	bl	8006d4a <USBD_CtlSendStatus>
 8006828:	e000      	b.n	800682c <USBD_GetDescriptor+0x2cc>
    return;
 800682a:	bf00      	nop
  }
}
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop

08006834 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	889b      	ldrh	r3, [r3, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d131      	bne.n	80068aa <USBD_SetAddress+0x76>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d12d      	bne.n	80068aa <USBD_SetAddress+0x76>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	2b7f      	cmp	r3, #127	; 0x7f
 8006854:	d829      	bhi.n	80068aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006860:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b03      	cmp	r3, #3
 800686c:	d104      	bne.n	8006878 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f9bc 	bl	8006bee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	e01d      	b.n	80068b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7bfa      	ldrb	r2, [r7, #15]
 800687c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fe27 	bl	80074d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa5d 	bl	8006d4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689e:	e009      	b.n	80068b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a8:	e004      	b.n	80068b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f99e 	bl	8006bee <USBD_CtlError>
  }
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	4b4e      	ldr	r3, [pc, #312]	; (8006a0c <USBD_SetConfig+0x150>)
 80068d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068d4:	4b4d      	ldr	r3, [pc, #308]	; (8006a0c <USBD_SetConfig+0x150>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d905      	bls.n	80068e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f985 	bl	8006bee <USBD_CtlError>
    return USBD_FAIL;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e08c      	b.n	8006a02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d002      	beq.n	80068fa <USBD_SetConfig+0x3e>
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d029      	beq.n	800694c <USBD_SetConfig+0x90>
 80068f8:	e075      	b.n	80069e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068fa:	4b44      	ldr	r3, [pc, #272]	; (8006a0c <USBD_SetConfig+0x150>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d020      	beq.n	8006944 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006902:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <USBD_SetConfig+0x150>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800690c:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <USBD_SetConfig+0x150>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fe ffe7 	bl	80058e6 <USBD_SetClassConfig>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d008      	beq.n	8006934 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f962 	bl	8006bee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006932:	e065      	b.n	8006a00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa08 	bl	8006d4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2203      	movs	r2, #3
 800693e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006942:	e05d      	b.n	8006a00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa00 	bl	8006d4a <USBD_CtlSendStatus>
      break;
 800694a:	e059      	b.n	8006a00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800694c:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <USBD_SetConfig+0x150>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d112      	bne.n	800697a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800695c:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <USBD_SetConfig+0x150>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006966:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <USBD_SetConfig+0x150>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fe ffd6 	bl	800591e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9e9 	bl	8006d4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006978:	e042      	b.n	8006a00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <USBD_SetConfig+0x150>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d02a      	beq.n	80069de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe ffc4 	bl	800591e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <USBD_SetConfig+0x150>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <USBD_SetConfig+0x150>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe ff9d 	bl	80058e6 <USBD_SetClassConfig>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00f      	beq.n	80069d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f918 	bl	8006bee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fe ffa9 	bl	800591e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069d4:	e014      	b.n	8006a00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f9b7 	bl	8006d4a <USBD_CtlSendStatus>
      break;
 80069dc:	e010      	b.n	8006a00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9b3 	bl	8006d4a <USBD_CtlSendStatus>
      break;
 80069e4:	e00c      	b.n	8006a00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f900 	bl	8006bee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069ee:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <USBD_SetConfig+0x150>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fe ff92 	bl	800591e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
      break;
 80069fe:	bf00      	nop
  }

  return ret;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200001f8 	.word	0x200001f8

08006a10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	88db      	ldrh	r3, [r3, #6]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d004      	beq.n	8006a2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8e2 	bl	8006bee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a2a:	e023      	b.n	8006a74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	dc02      	bgt.n	8006a3e <USBD_GetConfig+0x2e>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dc03      	bgt.n	8006a44 <USBD_GetConfig+0x34>
 8006a3c:	e015      	b.n	8006a6a <USBD_GetConfig+0x5a>
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d00b      	beq.n	8006a5a <USBD_GetConfig+0x4a>
 8006a42:	e012      	b.n	8006a6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f93c 	bl	8006cd0 <USBD_CtlSendData>
        break;
 8006a58:	e00c      	b.n	8006a74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f934 	bl	8006cd0 <USBD_CtlSendData>
        break;
 8006a68:	e004      	b.n	8006a74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f8be 	bl	8006bee <USBD_CtlError>
        break;
 8006a72:	bf00      	nop
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d81e      	bhi.n	8006ad2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	88db      	ldrh	r3, [r3, #6]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d004      	beq.n	8006aa6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8a5 	bl	8006bee <USBD_CtlError>
        break;
 8006aa4:	e01a      	b.n	8006adc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f043 0202 	orr.w	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f900 	bl	8006cd0 <USBD_CtlSendData>
      break;
 8006ad0:	e004      	b.n	8006adc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f88a 	bl	8006bee <USBD_CtlError>
      break;
 8006ada:	bf00      	nop
  }
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d107      	bne.n	8006b06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f923 	bl	8006d4a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b04:	e013      	b.n	8006b2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	885b      	ldrh	r3, [r3, #2]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d10b      	bne.n	8006b26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	889b      	ldrh	r3, [r3, #4]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f913 	bl	8006d4a <USBD_CtlSendStatus>
}
 8006b24:	e003      	b.n	8006b2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f860 	bl	8006bee <USBD_CtlError>
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d80b      	bhi.n	8006b66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d10c      	bne.n	8006b70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8f3 	bl	8006d4a <USBD_CtlSendStatus>
      }
      break;
 8006b64:	e004      	b.n	8006b70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f840 	bl	8006bee <USBD_CtlError>
      break;
 8006b6e:	e000      	b.n	8006b72 <USBD_ClrFeature+0x3c>
      break;
 8006b70:	bf00      	nop
  }
}
 8006b72:	bf00      	nop
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7ff fa41 	bl	800602c <SWAPBYTE>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fa34 	bl	800602c <SWAPBYTE>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fa27 	bl	800602c <SWAPBYTE>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	80da      	strh	r2, [r3, #6]
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fc02 	bl	8007404 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fbfe 	bl	8007404 <USBD_LL_StallEP>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d036      	beq.n	8006c94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f000 f836 	bl	8006c9c <USBD_GetLen>
 8006c30:	4603      	mov	r3, r0
 8006c32:	3301      	adds	r3, #1
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4413      	add	r3, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	7812      	ldrb	r2, [r2, #0]
 8006c48:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	4413      	add	r3, r2
 8006c56:	2203      	movs	r2, #3
 8006c58:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c60:	e013      	b.n	8006c8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3301      	adds	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]
    idx++;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	3301      	adds	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4413      	add	r3, r2
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	3301      	adds	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e7      	bne.n	8006c62 <USBD_GetString+0x52>
 8006c92:	e000      	b.n	8006c96 <USBD_GetString+0x86>
    return;
 8006c94:	bf00      	nop
  }
}
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cac:	e005      	b.n	8006cba <USBD_GetLen+0x1e>
  {
    len++;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f5      	bne.n	8006cae <USBD_GetLen+0x12>
  }

  return len;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fc0d 	bl	8007516 <USBD_LL_Transmit>

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	2100      	movs	r1, #0
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fbfc 	bl	8007516 <USBD_LL_Transmit>

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fc0c 	bl	8007558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2204      	movs	r2, #4
 8006d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fbd8 	bl	8007516 <USBD_LL_Transmit>

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2205      	movs	r2, #5
 8006d7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d80:	2300      	movs	r3, #0
 8006d82:	2200      	movs	r2, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fbe6 	bl	8007558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	490e      	ldr	r1, [pc, #56]	; (8006dd8 <MX_USB_DEVICE_Init+0x40>)
 8006da0:	480e      	ldr	r0, [pc, #56]	; (8006ddc <MX_USB_DEVICE_Init+0x44>)
 8006da2:	f7fe fd23 	bl	80057ec <USBD_Init>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dac:	f7f9 feb2 	bl	8000b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006db0:	490b      	ldr	r1, [pc, #44]	; (8006de0 <MX_USB_DEVICE_Init+0x48>)
 8006db2:	480a      	ldr	r0, [pc, #40]	; (8006ddc <MX_USB_DEVICE_Init+0x44>)
 8006db4:	f7fe fd4a 	bl	800584c <USBD_RegisterClass>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dbe:	f7f9 fea9 	bl	8000b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dc2:	4806      	ldr	r0, [pc, #24]	; (8006ddc <MX_USB_DEVICE_Init+0x44>)
 8006dc4:	f7fe fd78 	bl	80058b8 <USBD_Start>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006dce:	f7f9 fea1 	bl	8000b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200000c0 	.word	0x200000c0
 8006ddc:	200001fc 	.word	0x200001fc
 8006de0:	2000000c 	.word	0x2000000c

08006de4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	6039      	str	r1, [r7, #0]
 8006dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2212      	movs	r2, #18
 8006df4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006df6:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	200000dc 	.word	0x200000dc

08006e08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2204      	movs	r2, #4
 8006e18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e1a:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	200000f0 	.word	0x200000f0

08006e2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	6039      	str	r1, [r7, #0]
 8006e36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d105      	bne.n	8006e4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	4907      	ldr	r1, [pc, #28]	; (8006e60 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e42:	4808      	ldr	r0, [pc, #32]	; (8006e64 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e44:	f7ff fee4 	bl	8006c10 <USBD_GetString>
 8006e48:	e004      	b.n	8006e54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	4904      	ldr	r1, [pc, #16]	; (8006e60 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e4e:	4805      	ldr	r0, [pc, #20]	; (8006e64 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e50:	f7ff fede 	bl	8006c10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e54:	4b02      	ldr	r3, [pc, #8]	; (8006e60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200004d8 	.word	0x200004d8
 8006e64:	08007694 	.word	0x08007694

08006e68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	4904      	ldr	r1, [pc, #16]	; (8006e88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e78:	4804      	ldr	r0, [pc, #16]	; (8006e8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e7a:	f7ff fec9 	bl	8006c10 <USBD_GetString>
  return USBD_StrDesc;
 8006e7e:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200004d8 	.word	0x200004d8
 8006e8c:	0800769c 	.word	0x0800769c

08006e90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	221a      	movs	r2, #26
 8006ea0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ea2:	f000 f843 	bl	8006f2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ea6:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	200000f4 	.word	0x200000f4

08006eb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	6039      	str	r1, [r7, #0]
 8006ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d105      	bne.n	8006ed2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4907      	ldr	r1, [pc, #28]	; (8006ee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eca:	4808      	ldr	r0, [pc, #32]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ecc:	f7ff fea0 	bl	8006c10 <USBD_GetString>
 8006ed0:	e004      	b.n	8006edc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ed6:	4805      	ldr	r0, [pc, #20]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ed8:	f7ff fe9a 	bl	8006c10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200004d8 	.word	0x200004d8
 8006eec:	080076b0 	.word	0x080076b0

08006ef0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	4907      	ldr	r1, [pc, #28]	; (8006f24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f06:	4808      	ldr	r0, [pc, #32]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f08:	f7ff fe82 	bl	8006c10 <USBD_GetString>
 8006f0c:	e004      	b.n	8006f18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	4904      	ldr	r1, [pc, #16]	; (8006f24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f12:	4805      	ldr	r0, [pc, #20]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f14:	f7ff fe7c 	bl	8006c10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200004d8 	.word	0x200004d8
 8006f28:	080076bc 	.word	0x080076bc

08006f2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <Get_SerialNum+0x44>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f38:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <Get_SerialNum+0x48>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <Get_SerialNum+0x4c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f52:	2208      	movs	r2, #8
 8006f54:	4909      	ldr	r1, [pc, #36]	; (8006f7c <Get_SerialNum+0x50>)
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f814 	bl	8006f84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	4908      	ldr	r1, [pc, #32]	; (8006f80 <Get_SerialNum+0x54>)
 8006f60:	68b8      	ldr	r0, [r7, #8]
 8006f62:	f000 f80f 	bl	8006f84 <IntToUnicode>
  }
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	1fff7a10 	.word	0x1fff7a10
 8006f74:	1fff7a14 	.word	0x1fff7a14
 8006f78:	1fff7a18 	.word	0x1fff7a18
 8006f7c:	200000f6 	.word	0x200000f6
 8006f80:	20000106 	.word	0x20000106

08006f84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
 8006f9a:	e027      	b.n	8006fec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0f1b      	lsrs	r3, r3, #28
 8006fa0:	2b09      	cmp	r3, #9
 8006fa2:	d80b      	bhi.n	8006fbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	0f1b      	lsrs	r3, r3, #28
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3230      	adds	r2, #48	; 0x30
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e00a      	b.n	8006fd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	0f1b      	lsrs	r3, r3, #28
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	440b      	add	r3, r1
 8006fcc:	3237      	adds	r2, #55	; 0x37
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	3301      	adds	r3, #1
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
 8006fec:	7dfa      	ldrb	r2, [r7, #23]
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d3d3      	bcc.n	8006f9c <IntToUnicode+0x18>
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	609a      	str	r2, [r3, #8]
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007024:	d147      	bne.n	80070b6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	4a24      	ldr	r2, [pc, #144]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	6313      	str	r3, [r2, #48]	; 0x30
 8007036:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704c:	2300      	movs	r3, #0
 800704e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007050:	f107 0314 	add.w	r3, r7, #20
 8007054:	4619      	mov	r1, r3
 8007056:	481b      	ldr	r0, [pc, #108]	; (80070c4 <HAL_PCD_MspInit+0xc0>)
 8007058:	f7f9 fffc 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800705c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007062:	2302      	movs	r3, #2
 8007064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007066:	2300      	movs	r3, #0
 8007068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800706a:	2303      	movs	r3, #3
 800706c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800706e:	230a      	movs	r3, #10
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007072:	f107 0314 	add.w	r3, r7, #20
 8007076:	4619      	mov	r1, r3
 8007078:	4812      	ldr	r0, [pc, #72]	; (80070c4 <HAL_PCD_MspInit+0xc0>)
 800707a:	f7f9 ffeb 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 8007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007082:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 8007084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007088:	6353      	str	r3, [r2, #52]	; 0x34
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 8007094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007098:	6453      	str	r3, [r2, #68]	; 0x44
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <HAL_PCD_MspInit+0xbc>)
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	2043      	movs	r0, #67	; 0x43
 80070ac:	f7f9 ff9b 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070b0:	2043      	movs	r0, #67	; 0x43
 80070b2:	f7f9 ffb4 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070b6:	bf00      	nop
 80070b8:	3728      	adds	r7, #40	; 0x28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40023800 	.word	0x40023800
 80070c4:	40020000 	.word	0x40020000

080070c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070dc:	4619      	mov	r1, r3
 80070de:	4610      	mov	r0, r2
 80070e0:	f7fe fc37 	bl	8005952 <USBD_LL_SetupStage>
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	4619      	mov	r1, r3
 8007116:	f7fe fc71 	bl	80059fc <USBD_LL_DataOutStage>
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	334c      	adds	r3, #76	; 0x4c
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	4619      	mov	r1, r3
 800714a:	f7fe fd0a 	bl	8005b62 <USBD_LL_DataInStage>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe fe3e 	bl	8005de6 <USBD_LL_SOF>
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800717a:	2301      	movs	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]
 800718a:	e008      	b.n	800719e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d102      	bne.n	800719a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
 8007198:	e001      	b.n	800719e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800719a:	f7f9 fcbb 	bl	8000b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071a4:	7bfa      	ldrb	r2, [r7, #15]
 80071a6:	4611      	mov	r1, r2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe fdde 	bl	8005d6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fd86 	bl	8005cc6 <USBD_LL_Reset>
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fdd9 	bl	8005d8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <HAL_PCD_SuspendCallback+0x48>)
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	4a03      	ldr	r2, [pc, #12]	; (800720c <HAL_PCD_SuspendCallback+0x48>)
 80071fe:	f043 0306 	orr.w	r3, r3, #6
 8007202:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	e000ed00 	.word	0xe000ed00

08007210 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fdc9 	bl	8005db6 <USBD_LL_Resume>
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	4611      	mov	r1, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fe21 	bl	8005e8a <USBD_LL_IsoOUTIncomplete>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fddd 	bl	8005e26 <USBD_LL_IsoINIncomplete>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fe33 	bl	8005eee <USBD_LL_DevConnected>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fe30 	bl	8005f04 <USBD_LL_DevDisconnected>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d13c      	bne.n	8007336 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072bc:	4a20      	ldr	r2, [pc, #128]	; (8007340 <USBD_LL_Init+0x94>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1e      	ldr	r2, [pc, #120]	; (8007340 <USBD_LL_Init+0x94>)
 80072c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072cc:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <USBD_LL_Init+0x94>)
 80072ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072d4:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <USBD_LL_Init+0x94>)
 80072d6:	2204      	movs	r2, #4
 80072d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <USBD_LL_Init+0x94>)
 80072dc:	2202      	movs	r2, #2
 80072de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072e0:	4b17      	ldr	r3, [pc, #92]	; (8007340 <USBD_LL_Init+0x94>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072e6:	4b16      	ldr	r3, [pc, #88]	; (8007340 <USBD_LL_Init+0x94>)
 80072e8:	2202      	movs	r2, #2
 80072ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072ec:	4b14      	ldr	r3, [pc, #80]	; (8007340 <USBD_LL_Init+0x94>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072f2:	4b13      	ldr	r3, [pc, #76]	; (8007340 <USBD_LL_Init+0x94>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072f8:	4b11      	ldr	r3, [pc, #68]	; (8007340 <USBD_LL_Init+0x94>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <USBD_LL_Init+0x94>)
 8007300:	2201      	movs	r2, #1
 8007302:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007304:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <USBD_LL_Init+0x94>)
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800730a:	480d      	ldr	r0, [pc, #52]	; (8007340 <USBD_LL_Init+0x94>)
 800730c:	f7fa f86f 	bl	80013ee <HAL_PCD_Init>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007316:	f7f9 fbfd 	bl	8000b14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800731a:	2180      	movs	r1, #128	; 0x80
 800731c:	4808      	ldr	r0, [pc, #32]	; (8007340 <USBD_LL_Init+0x94>)
 800731e:	f7fb faae 	bl	800287e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007322:	2240      	movs	r2, #64	; 0x40
 8007324:	2100      	movs	r1, #0
 8007326:	4806      	ldr	r0, [pc, #24]	; (8007340 <USBD_LL_Init+0x94>)
 8007328:	f7fb fa62 	bl	80027f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800732c:	2280      	movs	r2, #128	; 0x80
 800732e:	2101      	movs	r1, #1
 8007330:	4803      	ldr	r0, [pc, #12]	; (8007340 <USBD_LL_Init+0x94>)
 8007332:	f7fb fa5d 	bl	80027f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	200008d8 	.word	0x200008d8

08007344 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800735a:	4618      	mov	r0, r3
 800735c:	f7fa f964 	bl	8001628 <HAL_PCD_Start>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f930 	bl	80075cc <USBD_Get_USB_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	4608      	mov	r0, r1
 8007384:	4611      	mov	r1, r2
 8007386:	461a      	mov	r2, r3
 8007388:	4603      	mov	r3, r0
 800738a:	70fb      	strb	r3, [r7, #3]
 800738c:	460b      	mov	r3, r1
 800738e:	70bb      	strb	r3, [r7, #2]
 8007390:	4613      	mov	r3, r2
 8007392:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80073a2:	78bb      	ldrb	r3, [r7, #2]
 80073a4:	883a      	ldrh	r2, [r7, #0]
 80073a6:	78f9      	ldrb	r1, [r7, #3]
 80073a8:	f7fa fe35 	bl	8002016 <HAL_PCD_EP_Open>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f90a 	bl	80075cc <USBD_Get_USB_Status>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fa fe7e 	bl	80020e6 <HAL_PCD_EP_Close>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f8eb 	bl	80075cc <USBD_Get_USB_Status>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800741e:	78fa      	ldrb	r2, [r7, #3]
 8007420:	4611      	mov	r1, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f7fa ff3e 	bl	80022a4 <HAL_PCD_EP_SetStall>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f8cc 	bl	80075cc <USBD_Get_USB_Status>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007438:	7bbb      	ldrb	r3, [r7, #14]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f7fa ff83 	bl	800236c <HAL_PCD_EP_ClrStall>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f8ad 	bl	80075cc <USBD_Get_USB_Status>
 8007472:	4603      	mov	r3, r0
 8007474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007476:	7bbb      	ldrb	r3, [r7, #14]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007492:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007498:	2b00      	cmp	r3, #0
 800749a:	da0b      	bge.n	80074b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	333e      	adds	r3, #62	; 0x3e
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	e00b      	b.n	80074cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	4613      	mov	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80074ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074f2:	78fa      	ldrb	r2, [r7, #3]
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fa fd68 	bl	8001fcc <HAL_PCD_SetAddress>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f862 	bl	80075cc <USBD_Get_USB_Status>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800750c:	7bbb      	ldrb	r3, [r7, #14]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b086      	sub	sp, #24
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	460b      	mov	r3, r1
 8007524:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007534:	7af9      	ldrb	r1, [r7, #11]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	f7fa fe69 	bl	8002210 <HAL_PCD_EP_Transmit>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f841 	bl	80075cc <USBD_Get_USB_Status>
 800754a:	4603      	mov	r3, r0
 800754c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800754e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	460b      	mov	r3, r1
 8007566:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007576:	7af9      	ldrb	r1, [r7, #11]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	f7fa fdfd 	bl	800217a <HAL_PCD_EP_Receive>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f820 	bl	80075cc <USBD_Get_USB_Status>
 800758c:	4603      	mov	r3, r0
 800758e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007590:	7dbb      	ldrb	r3, [r7, #22]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075a4:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <USBD_static_malloc+0x18>)
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000de4 	.word	0x20000de4

080075b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d817      	bhi.n	8007610 <USBD_Get_USB_Status+0x44>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <USBD_Get_USB_Status+0x1c>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080075ff 	.word	0x080075ff
 80075f0:	08007605 	.word	0x08007605
 80075f4:	0800760b 	.word	0x0800760b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
    break;
 80075fc:	e00b      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	73fb      	strb	r3, [r7, #15]
    break;
 8007602:	e008      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
    break;
 8007608:	e005      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800760a:	2303      	movs	r3, #3
 800760c:	73fb      	strb	r3, [r7, #15]
    break;
 800760e:	e002      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	73fb      	strb	r3, [r7, #15]
    break;
 8007614:	bf00      	nop
  }
  return usb_status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <__libc_init_array>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4d0d      	ldr	r5, [pc, #52]	; (800765c <__libc_init_array+0x38>)
 8007628:	4c0d      	ldr	r4, [pc, #52]	; (8007660 <__libc_init_array+0x3c>)
 800762a:	1b64      	subs	r4, r4, r5
 800762c:	10a4      	asrs	r4, r4, #2
 800762e:	2600      	movs	r6, #0
 8007630:	42a6      	cmp	r6, r4
 8007632:	d109      	bne.n	8007648 <__libc_init_array+0x24>
 8007634:	4d0b      	ldr	r5, [pc, #44]	; (8007664 <__libc_init_array+0x40>)
 8007636:	4c0c      	ldr	r4, [pc, #48]	; (8007668 <__libc_init_array+0x44>)
 8007638:	f000 f820 	bl	800767c <_init>
 800763c:	1b64      	subs	r4, r4, r5
 800763e:	10a4      	asrs	r4, r4, #2
 8007640:	2600      	movs	r6, #0
 8007642:	42a6      	cmp	r6, r4
 8007644:	d105      	bne.n	8007652 <__libc_init_array+0x2e>
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	f855 3b04 	ldr.w	r3, [r5], #4
 800764c:	4798      	blx	r3
 800764e:	3601      	adds	r6, #1
 8007650:	e7ee      	b.n	8007630 <__libc_init_array+0xc>
 8007652:	f855 3b04 	ldr.w	r3, [r5], #4
 8007656:	4798      	blx	r3
 8007658:	3601      	adds	r6, #1
 800765a:	e7f2      	b.n	8007642 <__libc_init_array+0x1e>
 800765c:	080076f8 	.word	0x080076f8
 8007660:	080076f8 	.word	0x080076f8
 8007664:	080076f8 	.word	0x080076f8
 8007668:	080076fc 	.word	0x080076fc

0800766c <memset>:
 800766c:	4402      	add	r2, r0
 800766e:	4603      	mov	r3, r0
 8007670:	4293      	cmp	r3, r2
 8007672:	d100      	bne.n	8007676 <memset+0xa>
 8007674:	4770      	bx	lr
 8007676:	f803 1b01 	strb.w	r1, [r3], #1
 800767a:	e7f9      	b.n	8007670 <memset+0x4>

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
