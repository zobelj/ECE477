
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800995c  0800995c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009964  08009964  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800996c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000d48  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e58  20000e58  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016676  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003228  00000000  00000000  000367b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002408b  00000000  00000000  0003c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018895  00000000  00000000  000600ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf127  00000000  00000000  00078940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147a67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053f0  00000000  00000000  00147ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080098cc 	.word	0x080098cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	080098cc 	.word	0x080098cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <scan_keypad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Local Keypad Scanning */
void scan_keypad() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  set_rows();
 80004d2:	f000 f85f 	bl	8000594 <set_rows>

  // read the columns
  int all_cols = get_cols();
 80004d6:	f000 f8c5 	bl	8000664 <get_cols>
 80004da:	60f8      	str	r0, [r7, #12]
  int local_cols = all_cols & 0x0F;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	60bb      	str	r3, [r7, #8]
  int expander_cols = (all_cols & 0xF0) >> 4;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	111b      	asrs	r3, r3, #4
 80004e8:	f003 030f 	and.w	r3, r3, #15
 80004ec:	607b      	str	r3, [r7, #4]
  
  // scan local cols
  for(int i = 0; i < 4; i++) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	e01d      	b.n	8000530 <scan_keypad+0x64>
    if(local_cols & (1 << i)) {
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	fa42 f303 	asr.w	r3, r2, r3
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d009      	beq.n	8000518 <scan_keypad+0x4c>
      keypresses[row][i] = 1;
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <scan_keypad+0xbc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a20      	ldr	r2, [pc, #128]	; (800058c <scan_keypad+0xc0>)
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	441a      	add	r2, r3
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	4413      	add	r3, r2
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	e008      	b.n	800052a <scan_keypad+0x5e>
    }
    else {
      keypresses[row][i] = 0;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <scan_keypad+0xbc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <scan_keypad+0xc0>)
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	441a      	add	r2, r3
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	4413      	add	r3, r2
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b03      	cmp	r3, #3
 8000534:	ddde      	ble.n	80004f4 <scan_keypad+0x28>
    }
  }

  // scan expander cols
  for(int i = 0; i < 4; i++) {
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	e01d      	b.n	8000578 <scan_keypad+0xac>
    if(expander_cols & (1 << i)) {
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	fa42 f303 	asr.w	r3, r2, r3
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d009      	beq.n	8000560 <scan_keypad+0x94>
      keypresses_2[row][i] = 1;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <scan_keypad+0xbc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <scan_keypad+0xc4>)
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	441a      	add	r2, r3
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	4413      	add	r3, r2
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e008      	b.n	8000572 <scan_keypad+0xa6>
    }
    else {
      keypresses_2[row][i] = 0;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <scan_keypad+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <scan_keypad+0xc4>)
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	441a      	add	r2, r3
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	4413      	add	r3, r2
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	3301      	adds	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	2b03      	cmp	r3, #3
 800057c:	ddde      	ble.n	800053c <scan_keypad+0x70>
    }

  }
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000224 	.word	0x20000224
 800058c:	20000228 	.word	0x20000228
 8000590:	2000023c 	.word	0x2000023c

08000594 <set_rows>:

void set_rows() {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  // update row value
  row = (row + 1) % 4;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <set_rows+0xc4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	425a      	negs	r2, r3
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	f002 0203 	and.w	r2, r2, #3
 80005aa:	bf58      	it	pl
 80005ac:	4253      	negpl	r3, r2
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <set_rows+0xc4>)
 80005b0:	6013      	str	r3, [r2, #0]
  // set all rows to high on local keypad
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2101      	movs	r1, #1
 80005b6:	4829      	ldr	r0, [pc, #164]	; (800065c <set_rows+0xc8>)
 80005b8:	f001 f8a0 	bl	80016fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	4826      	ldr	r0, [pc, #152]	; (800065c <set_rows+0xc8>)
 80005c2:	f001 f89b 	bl	80016fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	4824      	ldr	r0, [pc, #144]	; (800065c <set_rows+0xc8>)
 80005cc:	f001 f896 	bl	80016fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2108      	movs	r1, #8
 80005d4:	4821      	ldr	r0, [pc, #132]	; (800065c <set_rows+0xc8>)
 80005d6:	f001 f891 	bl	80016fc <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low
  switch(row) {
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <set_rows+0xc4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d822      	bhi.n	8000628 <set_rows+0x94>
 80005e2:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <set_rows+0x54>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	080005f9 	.word	0x080005f9
 80005ec:	08000605 	.word	0x08000605
 80005f0:	08000611 	.word	0x08000611
 80005f4:	0800061d 	.word	0x0800061d
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <set_rows+0xc8>)
 80005fe:	f001 f87d 	bl	80016fc <HAL_GPIO_WritePin>
      break;
 8000602:	e011      	b.n	8000628 <set_rows+0x94>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2102      	movs	r1, #2
 8000608:	4814      	ldr	r0, [pc, #80]	; (800065c <set_rows+0xc8>)
 800060a:	f001 f877 	bl	80016fc <HAL_GPIO_WritePin>
      break;
 800060e:	e00b      	b.n	8000628 <set_rows+0x94>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <set_rows+0xc8>)
 8000616:	f001 f871 	bl	80016fc <HAL_GPIO_WritePin>
      break;
 800061a:	e005      	b.n	8000628 <set_rows+0x94>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2108      	movs	r1, #8
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <set_rows+0xc8>)
 8000622:	f001 f86b 	bl	80016fc <HAL_GPIO_WritePin>
      break;
 8000626:	bf00      	nop
  }

  // set current row to low and others to high on gpio expander keypad
  uint8_t data[2] = {0x09, ~( 1 << row )};
 8000628:	2309      	movs	r3, #9
 800062a:	703b      	strb	r3, [r7, #0]
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <set_rows+0xc4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2201      	movs	r2, #1
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	707b      	strb	r3, [r7, #1]
  int retval = HAL_I2C_Master_Transmit_IT(&hi2c2, GPIOEX_ADD, data, 2);
 800063e:	463a      	mov	r2, r7
 8000640:	2302      	movs	r3, #2
 8000642:	214e      	movs	r1, #78	; 0x4e
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <set_rows+0xcc>)
 8000646:	f001 f9b7 	bl	80019b8 <HAL_I2C_Master_Transmit_IT>
 800064a:	4603      	mov	r3, r0
 800064c:	607b      	str	r3, [r7, #4]

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000224 	.word	0x20000224
 800065c:	40020c00 	.word	0x40020c00
 8000660:	2000012c 	.word	0x2000012c

08000664 <get_cols>:

int get_cols() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 4) & 0xF;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <get_cols+0x40>)
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	43db      	mvns	r3, r3
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	60fb      	str	r3, [r7, #12]

  // read the GPIO expander columns
  uint8_t data[1] = {0x09};
 8000678:	2309      	movs	r3, #9
 800067a:	703b      	strb	r3, [r7, #0]
//  HAL_I2C_Master_Transmit_IT(&hi2c2, GPIOEX_ADD, data, 1);
  int retval = HAL_I2C_Master_Receive_IT(&hi2c2, GPIOEX_ADD, data, 1);
 800067c:	463a      	mov	r2, r7
 800067e:	2301      	movs	r3, #1
 8000680:	214e      	movs	r1, #78	; 0x4e
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <get_cols+0x44>)
 8000684:	f001 fa3e 	bl	8001b04 <HAL_I2C_Master_Receive_IT>
 8000688:	4603      	mov	r3, r0
 800068a:	60bb      	str	r3, [r7, #8]

  int expander_cols = data[0] & 0xF0;
 800068c:	783b      	ldrb	r3, [r7, #0]
 800068e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000692:	607b      	str	r3, [r7, #4]

  return local_cols | expander_cols;
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	2000012c 	.word	0x2000012c

080006ac <scan_rotary>:
/* END Local Keypad Scanning */

/* Rotary Encoder Scanning */
void scan_rotary() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  currentStateCLK = HAL_GPIO_ReadPin(GPIOC, ROT_CLCK_Pin);
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	4831      	ldr	r0, [pc, #196]	; (800077c <scan_rotary+0xd0>)
 80006b6:	f001 f809 	bl	80016cc <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b30      	ldr	r3, [pc, #192]	; (8000780 <scan_rotary+0xd4>)
 80006c0:	601a      	str	r2, [r3, #0]

  // if CLK pin has changed, then the rotary encoder has turned
  if (currentStateCLK != lastStateCLK && rotLock == 0) {
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <scan_rotary+0xd4>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <scan_rotary+0xd8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d024      	beq.n	8000718 <scan_rotary+0x6c>
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <scan_rotary+0xdc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d120      	bne.n	8000718 <scan_rotary+0x6c>
    // if the DT state is different, then the encoder is rotating counter-clockwise
    currentStateDT = HAL_GPIO_ReadPin(GPIOC, ROT_DT_Pin);
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	4828      	ldr	r0, [pc, #160]	; (800077c <scan_rotary+0xd0>)
 80006da:	f000 fff7 	bl	80016cc <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <scan_rotary+0xe0>)
 80006e4:	601a      	str	r2, [r3, #0]

    if (currentStateDT != currentStateCLK) {
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <scan_rotary+0xe0>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <scan_rotary+0xd4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d003      	beq.n	80006fa <scan_rotary+0x4e>
      // Volume Down
      keypresses[4][1] = 1;
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <scan_rotary+0xe4>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	745a      	strb	r2, [r3, #17]
 80006f8:	e008      	b.n	800070c <scan_rotary+0x60>
    }

    // otherwise, it is turning clockwise
    else if (currentStateDT == currentStateCLK) {
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <scan_rotary+0xe0>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <scan_rotary+0xd4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d102      	bne.n	800070c <scan_rotary+0x60>
      // Volume Up
      keypresses[4][2] = 1;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <scan_rotary+0xe4>)
 8000708:	2201      	movs	r2, #1
 800070a:	749a      	strb	r2, [r3, #18]
    }
    rotLock++;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <scan_rotary+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <scan_rotary+0xdc>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	e009      	b.n	800072c <scan_rotary+0x80>

  }
  else if (rotLock == 0) {
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <scan_rotary+0xdc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d105      	bne.n	800072c <scan_rotary+0x80>
    keypresses[4][1] = 0;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <scan_rotary+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	745a      	strb	r2, [r3, #17]
    keypresses[4][2] = 0;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <scan_rotary+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	749a      	strb	r2, [r3, #18]
  }

  lastStateCLK = currentStateCLK;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <scan_rotary+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <scan_rotary+0xd8>)
 8000732:	6013      	str	r3, [r2, #0]

  // rotLock allows the rotary encoder's inputs to settle over a few extra clock cycles
  if(rotLock != 0) {
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <scan_rotary+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00e      	beq.n	800075a <scan_rotary+0xae>
    rotLock = (rotLock + 1) % 200;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <scan_rotary+0xdc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <scan_rotary+0xe8>)
 8000744:	fb83 1302 	smull	r1, r3, r3, r2
 8000748:	1199      	asrs	r1, r3, #6
 800074a:	17d3      	asrs	r3, r2, #31
 800074c:	1acb      	subs	r3, r1, r3
 800074e:	21c8      	movs	r1, #200	; 0xc8
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <scan_rotary+0xdc>)
 8000758:	6013      	str	r3, [r2, #0]
  }

  // if the state is low (default is high), turn toggle the LED
  if (HAL_GPIO_ReadPin(GPIOC, ROT_SW_Pin) == 0) {
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <scan_rotary+0xd0>)
 800075e:	f000 ffb5 	bl	80016cc <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d103      	bne.n	8000770 <scan_rotary+0xc4>
    // Volume Mute Toggle
    keypresses[4][0] = 1;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <scan_rotary+0xe4>)
 800076a:	2201      	movs	r2, #1
 800076c:	741a      	strb	r2, [r3, #16]
  }
  else {
    keypresses[4][0] = 0;
  }

}
 800076e:	e002      	b.n	8000776 <scan_rotary+0xca>
    keypresses[4][0] = 0;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <scan_rotary+0xe4>)
 8000772:	2200      	movs	r2, #0
 8000774:	741a      	strb	r2, [r3, #16]
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020800 	.word	0x40020800
 8000780:	20000210 	.word	0x20000210
 8000784:	20000214 	.word	0x20000214
 8000788:	2000021c 	.word	0x2000021c
 800078c:	20000218 	.word	0x20000218
 8000790:	20000228 	.word	0x20000228
 8000794:	51eb851f 	.word	0x51eb851f

08000798 <record_keys>:

}
/* END GPIO Expander Scanning */

/* USB Functions */
void record_keys() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 800079e:	2208      	movs	r2, #8
 80007a0:	2100      	movs	r1, #0
 80007a2:	482a      	ldr	r0, [pc, #168]	; (800084c <record_keys+0xb4>)
 80007a4:	f009 f88a 	bl	80098bc <memset>
  keycodeNum = 1;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <record_keys+0xb8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < 4; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e01e      	b.n	80007f2 <record_keys+0x5a>
	  for(int j = 0; j < 4; j++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	e015      	b.n	80007e6 <record_keys+0x4e>
		  if(keypresses[i][j] == 1) {
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <record_keys+0xbc>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	441a      	add	r2, r3
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d109      	bne.n	80007e0 <record_keys+0x48>
			  add_keypress(keys[i][j]);
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <record_keys+0xc0>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	441a      	add	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f842 	bl	8000864 <add_keypress>
	  for(int j = 0; j < 4; j++) {
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	dde6      	ble.n	80007ba <record_keys+0x22>
  for(int i = 0; i < 4; i++) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	dddd      	ble.n	80007b4 <record_keys+0x1c>
	    }
	  }
  }

  // Add GPIO Expander keypresses
  for(int i = 0; i < 4; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	e01e      	b.n	800083c <record_keys+0xa4>
	  for(int j = 0; j < 4; j++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	e015      	b.n	8000830 <record_keys+0x98>
		  if(keypresses_2[i][j] == 1) {
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <record_keys+0xc4>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	441a      	add	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d109      	bne.n	800082a <record_keys+0x92>
			  add_keypress(keys_2[i][j]);
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <record_keys+0xc8>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	441a      	add	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f81d 	bl	8000864 <add_keypress>
	  for(int j = 0; j < 4; j++) {
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2b03      	cmp	r3, #3
 8000834:	dde6      	ble.n	8000804 <record_keys+0x6c>
  for(int i = 0; i < 4; i++) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b03      	cmp	r3, #3
 8000840:	dddd      	ble.n	80007fe <record_keys+0x66>
		  }
	  }
  }

}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000024c 	.word	0x2000024c
 8000850:	20000220 	.word	0x20000220
 8000854:	20000228 	.word	0x20000228
 8000858:	0800991c 	.word	0x0800991c
 800085c:	2000023c 	.word	0x2000023c
 8000860:	08009930 	.word	0x08009930

08000864 <add_keypress>:

void add_keypress(char key) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	if(keycodeNum <= KEYCODE_LIMIT) {
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <add_keypress+0x84>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b06      	cmp	r3, #6
 8000874:	dc31      	bgt.n	80008da <add_keypress+0x76>
	  switch(keycodeNum) {
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <add_keypress+0x84>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	2b05      	cmp	r3, #5
 800087e:	d827      	bhi.n	80008d0 <add_keypress+0x6c>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <add_keypress+0x24>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	080008a1 	.word	0x080008a1
 800088c:	080008a9 	.word	0x080008a9
 8000890:	080008b1 	.word	0x080008b1
 8000894:	080008b9 	.word	0x080008b9
 8000898:	080008c1 	.word	0x080008c1
 800089c:	080008c9 	.word	0x080008c9
		case 1:
		  keyboardhid.KEYCODE1 = key;
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <add_keypress+0x88>)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	7093      	strb	r3, [r2, #2]
		  break;
 80008a6:	e013      	b.n	80008d0 <add_keypress+0x6c>
		case 2:
		  keyboardhid.KEYCODE2 = key;
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <add_keypress+0x88>)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	70d3      	strb	r3, [r2, #3]
		  break;
 80008ae:	e00f      	b.n	80008d0 <add_keypress+0x6c>
		case 3:
		  keyboardhid.KEYCODE3 = key;
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <add_keypress+0x88>)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	7113      	strb	r3, [r2, #4]
		  break;
 80008b6:	e00b      	b.n	80008d0 <add_keypress+0x6c>
		case 4:
		  keyboardhid.KEYCODE4 = key;
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <add_keypress+0x88>)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	7153      	strb	r3, [r2, #5]
		  break;
 80008be:	e007      	b.n	80008d0 <add_keypress+0x6c>
		case 5:
		  keyboardhid.KEYCODE5 = key;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <add_keypress+0x88>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	7193      	strb	r3, [r2, #6]
		  break;
 80008c6:	e003      	b.n	80008d0 <add_keypress+0x6c>
		case 6:
		  keyboardhid.KEYCODE6 = key;
 80008c8:	4a08      	ldr	r2, [pc, #32]	; (80008ec <add_keypress+0x88>)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	71d3      	strb	r3, [r2, #7]
		  break;
 80008ce:	bf00      	nop
	  }
	  keycodeNum++;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <add_keypress+0x84>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <add_keypress+0x84>)
 80008d8:	6013      	str	r3, [r2, #0]
	}

}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000220 	.word	0x20000220
 80008ec:	2000024c 	.word	0x2000024c

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fb76 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f82a 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f000 f962 	bl	8000bc4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000900:	f000 f8de 	bl	8000ac0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000904:	f000 f928 	bl	8000b58 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000908:	f008 fb6e 	bl	8008fe8 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 800090c:	f000 f88a 	bl	8000a24 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <main+0x48>)
 8000912:	f004 fdb9 	bl	8005488 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <main+0x4c>)
 8000918:	f004 fdb6 	bl	8005488 <HAL_TIM_Base_Start_IT>

  // init counter variables
  row = 0;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <main+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  keycodeNum = 1;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <main+0x54>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
  lastStateCLK = 0;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <main+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
  rotLock = 0;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <main+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000934:	e7fe      	b.n	8000934 <main+0x44>
 8000936:	bf00      	nop
 8000938:	20000180 	.word	0x20000180
 800093c:	200001c8 	.word	0x200001c8
 8000940:	20000224 	.word	0x20000224
 8000944:	20000220 	.word	0x20000220
 8000948:	20000214 	.word	0x20000214
 800094c:	2000021c 	.word	0x2000021c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f008 ffac 	bl	80098bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <SystemClock_Config+0xcc>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <SystemClock_Config+0xcc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <SystemClock_Config+0xd0>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <SystemClock_Config+0xd0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009c4:	23a8      	movs	r3, #168	; 0xa8
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009cc:	2307      	movs	r3, #7
 80009ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 f883 	bl	8004ae0 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e0:	f000 f99c 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2105      	movs	r1, #5
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fae4 	bl	8004fd0 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a0e:	f000 f985 	bl	8000d1c <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	; 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <MX_I2C2_Init+0x94>)
 8000a2e:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <MX_I2C2_Init+0x98>)
 8000a34:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a64:	f000 fe64 	bl	8001730 <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000a6e:	f000 f955 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  uint8_t iodir[2] = { 0x00 , 0xf0 };     // set pins 0-3 output and 4-7 as input
 8000a72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a76:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit_IT(&hi2c2, GPIOEX_ADD, iodir, 2);
 8000a78:	f107 020c 	add.w	r2, r7, #12
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	214e      	movs	r1, #78	; 0x4e
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a82:	f000 ff99 	bl	80019b8 <HAL_I2C_Master_Transmit_IT>
  uint8_t gppu[2] = { 0x06, 0xf0 };       // enable pull up resistors for pins 4-7
 8000a86:	f24f 0306 	movw	r3, #61446	; 0xf006
 8000a8a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit_IT(&hi2c2, GPIOEX_ADD, gppu, 2);
 8000a8c:	f107 0208 	add.w	r2, r7, #8
 8000a90:	2302      	movs	r3, #2
 8000a92:	214e      	movs	r1, #78	; 0x4e
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000a96:	f000 ff8f 	bl	80019b8 <HAL_I2C_Master_Transmit_IT>
  uint8_t ipol[2] = { 0x01, 0xf0 };       // enable reverse for pins 4-7
 8000a9a:	f24f 0301 	movw	r3, #61441	; 0xf001
 8000a9e:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit_IT(&hi2c2, GPIOEX_ADD, ipol, 2);
 8000aa0:	1d3a      	adds	r2, r7, #4
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	214e      	movs	r1, #78	; 0x4e
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MX_I2C2_Init+0x90>)
 8000aa8:	f000 ff86 	bl	80019b8 <HAL_I2C_Master_Transmit_IT>

  /* USER CODE END I2C2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000012c 	.word	0x2000012c
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <MX_TIM4_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000ae4:	229f      	movs	r2, #159	; 0x9f
 8000ae6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000af0:	2263      	movs	r2, #99	; 0x63
 8000af2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000b02:	f004 fc71 	bl	80053e8 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000b0c:	f000 f906 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000b1e:	f004 fe2b 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000b28:	f000 f8f8 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM4_Init+0x90>)
 8000b3a:	f005 f847 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000b44:	f000 f8ea 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000180 	.word	0x20000180
 8000b54:	40000800 	.word	0x40000800

08000b58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_TIM6_Init+0x68>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b6e:	f240 623f 	movw	r2, #1599	; 0x63f
 8000b72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b7c:	2209      	movs	r2, #9
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b88:	f004 fc2e 	bl	80053e8 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b92:	f000 f8c3 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000ba4:	f005 f812 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000bae:	f000 f8b5 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001c8 	.word	0x200001c8
 8000bc0:	40001000 	.word	0x40001000

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a32      	ldr	r2, [pc, #200]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a24      	ldr	r2, [pc, #144]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_GPIO_Init+0x104>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_GPIO_Init+0x108>)
 8000c6c:	f000 fd46 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL4_Pin COL0_Pin COL1_Pin COL2_Pin
                           COL3_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL0_Pin|COL1_Pin|COL2_Pin
 8000c70:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000c74:	617b      	str	r3, [r7, #20]
                          |COL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_GPIO_Init+0x108>)
 8000c86:	f000 fb85 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_Pin ROT_DT_Pin ROT_CLCK_Pin */
  GPIO_InitStruct.Pin = ROT_SW_Pin|ROT_DT_Pin|ROT_CLCK_Pin;
 8000c8a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_GPIO_Init+0x10c>)
 8000ca0:	f000 fb78 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_GPIO_Init+0x108>)
 8000cbc:	f000 fb6a 	bl	8001394 <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00
 8000cd0:	40020800 	.word	0x40020800

08000cd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d107      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8000ce4:	f7ff fd58 	bl	8000798 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cee:	f006 fe01 	bl	80078f4 <USBD_HID_SendReport>
		scan_rotary();

		/* GPIO Expander Keypad */
		//scan_gpioexpander();
	 }
}
 8000cf2:	e007      	b.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim == &htim6) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d103      	bne.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x30>
		scan_keypad();
 8000cfc:	f7ff fbe6 	bl	80004cc <scan_keypad>
		scan_rotary();
 8000d00:	f7ff fcd4 	bl	80006ac <scan_rotary>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000180 	.word	0x20000180
 8000d10:	2000024c 	.word	0x2000024c
 8000d14:	2000025c 	.word	0x2000025c
 8000d18:	200001c8 	.word	0x200001c8

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <HAL_I2C_MspInit+0xa4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d13c      	bne.n	8000e14 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000db6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <HAL_I2C_MspInit+0xac>)
 8000dd4:	f000 fade 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2021      	movs	r0, #33	; 0x21
 8000dfa:	f000 fa64 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000dfe:	2021      	movs	r0, #33	; 0x21
 8000e00:	f000 fa7d 	bl	80012fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2022      	movs	r0, #34	; 0x22
 8000e0a:	f000 fa5c 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e0e:	2022      	movs	r0, #34	; 0x22
 8000e10:	f000 fa75 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40005800 	.word	0x40005800
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400

08000e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_TIM_Base_MspInit+0x80>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d116      	bne.n	8000e68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_TIM_Base_MspInit+0x84>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <HAL_TIM_Base_MspInit+0x84>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_TIM_Base_MspInit+0x84>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	201e      	movs	r0, #30
 8000e5c:	f000 fa33 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e60:	201e      	movs	r0, #30
 8000e62:	f000 fa4c 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e66:	e01a      	b.n	8000e9e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_TIM_Base_MspInit+0x88>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d115      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_TIM_Base_MspInit+0x84>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <HAL_TIM_Base_MspInit+0x84>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_TIM_Base_MspInit+0x84>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2036      	movs	r0, #54	; 0x36
 8000e94:	f000 fa17 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f000 fa30 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40000800 	.word	0x40000800
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40001000 	.word	0x40001000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f8c2 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM4_IRQHandler+0x10>)
 8000f0e:	f004 fb2b 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000180 	.word	0x20000180

08000f1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <I2C2_EV_IRQHandler+0x10>)
 8000f22:	f000 fe9d 	bl	8001c60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000012c 	.word	0x2000012c

08000f30 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <I2C2_ER_IRQHandler+0x10>)
 8000f36:	f001 f804 	bl	8001f42 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000012c 	.word	0x2000012c

08000f44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM6_DAC_IRQHandler+0x10>)
 8000f4a:	f004 fb0d 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001c8 	.word	0x200001c8

08000f58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <OTG_FS_IRQHandler+0x10>)
 8000f5e:	f002 fcaa 	bl	80038b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000938 	.word	0x20000938

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fac:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fba:	f7ff ffd7 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f008 fc59 	bl	8009874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fc95 	bl	80008f0 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000fd4:	0800996c 	.word	0x0800996c
  ldr r2, =_sbss
 8000fd8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000fdc:	20000e58 	.word	0x20000e58

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f94f 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fe86 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f967 	bl	800131a <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001064:	f000 f92f 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000254 	.word	0x20000254

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000254 	.word	0x20000254

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d004      	beq.n	8001350 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e00c      	b.n	800136a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2205      	movs	r2, #5
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001384:	b2db      	uxtb	r3, r3
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e16b      	b.n	8001688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 815a 	bne.w	8001682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80b4 	beq.w	8001682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b60      	ldr	r3, [pc, #384]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a5f      	ldr	r2, [pc, #380]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_GPIO_Init+0x310>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_GPIO_Init+0x314>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d02b      	beq.n	80015ba <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x318>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d025      	beq.n	80015b6 <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <HAL_GPIO_Init+0x31c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_GPIO_Init+0x320>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x21a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <HAL_GPIO_Init+0x324>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x216>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x328>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x212>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_GPIO_Init+0x32c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x20e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_GPIO_Init+0x330>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x20a>
 800159a:	2307      	movs	r3, #7
 800159c:	e00e      	b.n	80015bc <HAL_GPIO_Init+0x228>
 800159e:	2308      	movs	r3, #8
 80015a0:	e00c      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e00a      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x228>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x310>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_GPIO_Init+0x334>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_GPIO_Init+0x334>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001652:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_GPIO_Init+0x334>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_GPIO_Init+0x334>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f ae90 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40021c00 	.word	0x40021c00
 80016c8:	40013c00 	.word	0x40013c00

080016cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e001      	b.n	80016ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001718:	e003      	b.n	8001722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	041a      	lsls	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	619a      	str	r2, [r3, #24]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e12b      	b.n	800199a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fb0e 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001794:	f003 fe14 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8001798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a81      	ldr	r2, [pc, #516]	; (80019a4 <HAL_I2C_Init+0x274>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d807      	bhi.n	80017b4 <HAL_I2C_Init+0x84>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4a80      	ldr	r2, [pc, #512]	; (80019a8 <HAL_I2C_Init+0x278>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bf94      	ite	ls
 80017ac:	2301      	movls	r3, #1
 80017ae:	2300      	movhi	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e006      	b.n	80017c2 <HAL_I2C_Init+0x92>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a7d      	ldr	r2, [pc, #500]	; (80019ac <HAL_I2C_Init+0x27c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf94      	ite	ls
 80017bc:	2301      	movls	r3, #1
 80017be:	2300      	movhi	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0e7      	b.n	800199a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4a78      	ldr	r2, [pc, #480]	; (80019b0 <HAL_I2C_Init+0x280>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a6a      	ldr	r2, [pc, #424]	; (80019a4 <HAL_I2C_Init+0x274>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d802      	bhi.n	8001804 <HAL_I2C_Init+0xd4>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3301      	adds	r3, #1
 8001802:	e009      	b.n	8001818 <HAL_I2C_Init+0xe8>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	4a69      	ldr	r2, [pc, #420]	; (80019b4 <HAL_I2C_Init+0x284>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	3301      	adds	r3, #1
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	495c      	ldr	r1, [pc, #368]	; (80019a4 <HAL_I2C_Init+0x274>)
 8001834:	428b      	cmp	r3, r1
 8001836:	d819      	bhi.n	800186c <HAL_I2C_Init+0x13c>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e59      	subs	r1, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fbb1 f3f3 	udiv	r3, r1, r3
 8001846:	1c59      	adds	r1, r3, #1
 8001848:	f640 73fc 	movw	r3, #4092	; 0xffc
 800184c:	400b      	ands	r3, r1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00a      	beq.n	8001868 <HAL_I2C_Init+0x138>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e59      	subs	r1, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001860:	3301      	adds	r3, #1
 8001862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001866:	e051      	b.n	800190c <HAL_I2C_Init+0x1dc>
 8001868:	2304      	movs	r3, #4
 800186a:	e04f      	b.n	800190c <HAL_I2C_Init+0x1dc>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d111      	bne.n	8001898 <HAL_I2C_Init+0x168>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e58      	subs	r0, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e012      	b.n	80018be <HAL_I2C_Init+0x18e>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e58      	subs	r0, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	0099      	lsls	r1, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Init+0x196>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e022      	b.n	800190c <HAL_I2C_Init+0x1dc>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10e      	bne.n	80018ec <HAL_I2C_Init+0x1bc>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e58      	subs	r0, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6859      	ldr	r1, [r3, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	440b      	add	r3, r1
 80018dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ea:	e00f      	b.n	800190c <HAL_I2C_Init+0x1dc>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1e58      	subs	r0, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	0099      	lsls	r1, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	6809      	ldr	r1, [r1, #0]
 8001910:	4313      	orrs	r3, r2
 8001912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800193a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6911      	ldr	r1, [r2, #16]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68d2      	ldr	r2, [r2, #12]
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	430b      	orrs	r3, r1
 800194e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	000186a0 	.word	0x000186a0
 80019a8:	001e847f 	.word	0x001e847f
 80019ac:	003d08ff 	.word	0x003d08ff
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	10624dd3 	.word	0x10624dd3

080019b8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	817b      	strh	r3, [r7, #10]
 80019c8:	4613      	mov	r3, r2
 80019ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	f040 8085 	bne.w	8001ae8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_I2C_Master_Transmit_IT+0x140>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_I2C_Master_Transmit_IT+0x144>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0a1a      	lsrs	r2, r3, #8
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d116      	bne.n	8001a32 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f043 0220 	orr.w	r2, r3, #32
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e05b      	b.n	8001aea <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d0db      	beq.n	80019f8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_I2C_Master_Transmit_IT+0x96>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e04d      	b.n	8001aea <HAL_I2C_Master_Transmit_IT+0x132>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d007      	beq.n	8001a74 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2221      	movs	r2, #33	; 0x21
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2210      	movs	r2, #16
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	893a      	ldrh	r2, [r7, #8]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <HAL_I2C_Master_Transmit_IT+0x148>)
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001ab6:	897a      	ldrh	r2, [r7, #10]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ad2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000
 8001afc:	14f8b589 	.word	0x14f8b589
 8001b00:	ffff0000 	.word	0xffff0000

08001b04 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	817b      	strh	r3, [r7, #10]
 8001b14:	4613      	mov	r3, r2
 8001b16:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	f040 808d 	bne.w	8001c44 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_I2C_Master_Receive_IT+0x150>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <HAL_I2C_Master_Receive_IT+0x154>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0a1a      	lsrs	r2, r3, #8
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009a      	lsls	r2, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d116      	bne.n	8001b7e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e063      	b.n	8001c46 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d0db      	beq.n	8001b44 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Master_Receive_IT+0x96>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e055      	b.n	8001c46 <HAL_I2C_Master_Receive_IT+0x142>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d007      	beq.n	8001bc0 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2222      	movs	r2, #34	; 0x22
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2210      	movs	r2, #16
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	893a      	ldrh	r2, [r7, #8]
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_I2C_Master_Receive_IT+0x158>)
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001c02:	897a      	ldrh	r2, [r7, #10]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001c1e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000000 	.word	0x20000000
 8001c58:	14f8b589 	.word	0x14f8b589
 8001c5c:	ffff0000 	.word	0xffff0000

08001c60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d003      	beq.n	8001c98 <HAL_I2C_EV_IRQHandler+0x38>
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	f040 80c1 	bne.w	8001e1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_I2C_EV_IRQHandler+0x6e>
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001cb8:	d003      	beq.n	8001cc2 <HAL_I2C_EV_IRQHandler+0x62>
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_EV_IRQHandler+0x66>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2C_EV_IRQHandler+0x68>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f000 8132 	beq.w	8001f32 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x92>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	0a5b      	lsrs	r3, r3, #9
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f001 fc7b 	bl	80035e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fd83 	bl	80027f6 <I2C_Master_SB>
 8001cf0:	e092      	b.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0xb2>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	0a5b      	lsrs	r3, r3, #9
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fdf9 	bl	8002902 <I2C_Master_ADD10>
 8001d10:	e082      	b.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_I2C_EV_IRQHandler+0xd2>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	0a5b      	lsrs	r3, r3, #9
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fe13 	bl	8002956 <I2C_Master_ADDR>
 8001d30:	e072      	b.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03b      	beq.n	8001db6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d4c:	f000 80f3 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	09db      	lsrs	r3, r3, #7
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00f      	beq.n	8001d7c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f9f3 	bl	8002160 <I2C_MasterTransmit_TXE>
 8001d7a:	e04d      	b.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80d6 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0a5b      	lsrs	r3, r3, #9
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80cf 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	2b21      	cmp	r3, #33	; 0x21
 8001d9c:	d103      	bne.n	8001da6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa7a 	bl	8002298 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001da4:	e0c7      	b.n	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	f040 80c4 	bne.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fae8 	bl	8002384 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db4:	e0bf      	b.n	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dc4:	f000 80b7 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00f      	beq.n	8001df4 <HAL_I2C_EV_IRQHandler+0x194>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	0a9b      	lsrs	r3, r3, #10
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_I2C_EV_IRQHandler+0x194>
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fb5d 	bl	80024ac <I2C_MasterReceive_RXNE>
 8001df2:	e011      	b.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 809a 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	0a5b      	lsrs	r3, r3, #9
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8093 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fc06 	bl	8002622 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e16:	e08e      	b.n	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e18:	e08d      	b.n	8001f36 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e007      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_I2C_EV_IRQHandler+0x20e>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	0a5b      	lsrs	r3, r3, #9
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00c      	beq.n	8001e6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e64:	69b9      	ldr	r1, [r7, #24]
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 ffc4 	bl	8002df4 <I2C_Slave_ADDR>
 8001e6c:	e066      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_I2C_EV_IRQHandler+0x22e>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	0a5b      	lsrs	r3, r3, #9
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fffe 	bl	8002e88 <I2C_Slave_STOPF>
 8001e8c:	e056      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	2b21      	cmp	r3, #33	; 0x21
 8001e92:	d002      	beq.n	8001e9a <HAL_I2C_EV_IRQHandler+0x23a>
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	2b29      	cmp	r3, #41	; 0x29
 8001e98:	d125      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	09db      	lsrs	r3, r3, #7
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00f      	beq.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x266>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	0a9b      	lsrs	r3, r3, #10
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x266>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 feda 	bl	8002c78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec4:	e039      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d033      	beq.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2da>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	0a5b      	lsrs	r3, r3, #9
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02d      	beq.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 ff07 	bl	8002cf2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee4:	e029      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00f      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	0a9b      	lsrs	r3, r3, #10
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 ff12 	bl	8002d34 <I2C_SlaveReceive_RXNE>
 8001f10:	e014      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00e      	beq.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	0a5b      	lsrs	r3, r3, #9
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 ff40 	bl	8002db0 <I2C_SlaveReceive_BTF>
 8001f30:	e004      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f32:	bf00      	nop
 8001f34:	e002      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f36:	bf00      	nop
 8001f38:	e000      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b08a      	sub	sp, #40	; 0x28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f64:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00e      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x4e>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00e      	beq.n	8001fba <HAL_I2C_ER_IRQHandler+0x78>
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001fb8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	0a9b      	lsrs	r3, r3, #10
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03f      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0x104>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d039      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001fd2:	7efb      	ldrb	r3, [r7, #27]
 8001fd4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fec:	7ebb      	ldrb	r3, [r7, #26]
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d112      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	2b21      	cmp	r3, #33	; 0x21
 8001ffc:	d008      	beq.n	8002010 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ffe:	7cfb      	ldrb	r3, [r7, #19]
 8002000:	2b29      	cmp	r3, #41	; 0x29
 8002002:	d005      	beq.n	8002010 <HAL_I2C_ER_IRQHandler+0xce>
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	2b28      	cmp	r3, #40	; 0x28
 8002008:	d106      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b21      	cmp	r3, #33	; 0x21
 800200e:	d103      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 f869 	bl	80030e8 <I2C_Slave_AF>
 8002016:	e016      	b.n	8002046 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002020:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800202a:	7efb      	ldrb	r3, [r7, #27]
 800202c:	2b10      	cmp	r3, #16
 800202e:	d002      	beq.n	8002036 <HAL_I2C_ER_IRQHandler+0xf4>
 8002030:	7efb      	ldrb	r3, [r7, #27]
 8002032:	2b40      	cmp	r3, #64	; 0x40
 8002034:	d107      	bne.n	8002046 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002044:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	0adb      	lsrs	r3, r3, #11
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <HAL_I2C_ER_IRQHandler+0x12e>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800206e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f001 f8a0 	bl	80031c8 <I2C_ITError>
  }
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
 80020ec:	4613      	mov	r3, r2
 80020ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002176:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d150      	bne.n	8002228 <I2C_MasterTransmit_TXE+0xc8>
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b21      	cmp	r3, #33	; 0x21
 800218a:	d14d      	bne.n	8002228 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b08      	cmp	r3, #8
 8002190:	d01d      	beq.n	80021ce <I2C_MasterTransmit_TXE+0x6e>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b20      	cmp	r3, #32
 8002196:	d01a      	beq.n	80021ce <I2C_MasterTransmit_TXE+0x6e>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800219e:	d016      	beq.n	80021ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2211      	movs	r2, #17
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff62 	bl	8002090 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021cc:	e060      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d107      	bne.n	8002218 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff7d 	bl	8002110 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002216:	e03b      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff35 	bl	8002090 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002226:	e033      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b21      	cmp	r3, #33	; 0x21
 800222c:	d005      	beq.n	800223a <I2C_MasterTransmit_TXE+0xda>
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d12d      	bne.n	8002290 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b22      	cmp	r3, #34	; 0x22
 8002238:	d12a      	bne.n	8002290 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002252:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002254:	e01c      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d103      	bne.n	800226a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f88e 	bl	8002384 <I2C_MemoryTransmit_TXE_BTF>
}
 8002268:	e012      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800228e:	e7ff      	b.n	8002290 <I2C_MasterTransmit_TXE+0x130>
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b21      	cmp	r3, #33	; 0x21
 80022b0:	d164      	bne.n	800237c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022e0:	e04c      	b.n	800237c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d01d      	beq.n	8002324 <I2C_MasterTransmit_BTF+0x8c>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d01a      	beq.n	8002324 <I2C_MasterTransmit_BTF+0x8c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022f4:	d016      	beq.n	8002324 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002304:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2211      	movs	r2, #17
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff feb7 	bl	8002090 <HAL_I2C_MasterTxCpltCallback>
}
 8002322:	e02b      	b.n	800237c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002332:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d107      	bne.n	800236e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fed2 	bl	8002110 <HAL_I2C_MemTxCpltCallback>
}
 800236c:	e006      	b.n	800237c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fe8a 	bl	8002090 <HAL_I2C_MasterTxCpltCallback>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002392:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11d      	bne.n	80023d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10b      	bne.n	80023bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	1c9a      	adds	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80023ba:	e073      	b.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	121b      	asrs	r3, r3, #8
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023d6:	e065      	b.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10b      	bne.n	80023f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023f6:	e055      	b.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d151      	bne.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b22      	cmp	r3, #34	; 0x22
 8002404:	d10d      	bne.n	8002422 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002420:	e040      	b.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b21      	cmp	r3, #33	; 0x21
 8002430:	d112      	bne.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002456:	e025      	b.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d120      	bne.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b21      	cmp	r3, #33	; 0x21
 8002466:	d11d      	bne.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002476:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fe36 	bl	8002110 <HAL_I2C_MemTxCpltCallback>
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b22      	cmp	r3, #34	; 0x22
 80024be:	f040 80ac 	bne.w	800261a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d921      	bls.n	8002514 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	f040 808c 	bne.w	800261a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002510:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002512:	e082      	b.n	800261a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2b02      	cmp	r3, #2
 800251a:	d075      	beq.n	8002608 <I2C_MasterReceive_RXNE+0x15c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d002      	beq.n	8002528 <I2C_MasterReceive_RXNE+0x7c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d16f      	bne.n	8002608 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f001 f827 	bl	800357c <I2C_WaitOnSTOPRequestThroughIT>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d142      	bne.n	80025ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002552:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d10a      	bne.n	80025a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fdc1 	bl	8002124 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025a2:	e03a      	b.n	800261a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2212      	movs	r2, #18
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fd76 	bl	80020a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025b8:	e02f      	b.n	800261a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fd99 	bl	8002138 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002606:	e008      	b.n	800261a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	605a      	str	r2, [r3, #4]
}
 8002618:	e7ff      	b.n	800261a <I2C_MasterReceive_RXNE+0x16e>
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b04      	cmp	r3, #4
 8002638:	d11b      	bne.n	8002672 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002648:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002670:	e0bd      	b.n	80027ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b03      	cmp	r3, #3
 800267a:	d129      	bne.n	80026d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00a      	beq.n	80026a8 <I2C_MasterReceive_BTF+0x86>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d007      	beq.n	80026a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026ce:	e08e      	b.n	80027ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d176      	bne.n	80027c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <I2C_MasterReceive_BTF+0xc4>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e019      	b.n	800272c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d002      	beq.n	8002704 <I2C_MasterReceive_BTF+0xe2>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d108      	bne.n	8002716 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e00a      	b.n	800272c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b10      	cmp	r3, #16
 800271a:	d007      	beq.n	800272c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002786:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d10a      	bne.n	80027b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fcba 	bl	8002124 <HAL_I2C_MemRxCpltCallback>
}
 80027b0:	e01d      	b.n	80027ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2212      	movs	r2, #18
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fc6f 	bl	80020a4 <HAL_I2C_MasterRxCpltCallback>
}
 80027c6:	e012      	b.n	80027ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d117      	bne.n	800283a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002822:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002824:	e067      	b.n	80028f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]
}
 8002838:	e05d      	b.n	80028f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002842:	d133      	bne.n	80028ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b21      	cmp	r3, #33	; 0x21
 800284e:	d109      	bne.n	8002864 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	e008      	b.n	8002876 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <I2C_Master_SB+0x92>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	2b00      	cmp	r3, #0
 800288e:	d032      	beq.n	80028f6 <I2C_Master_SB+0x100>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d02d      	beq.n	80028f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a8:	605a      	str	r2, [r3, #4]
}
 80028aa:	e024      	b.n	80028f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10e      	bne.n	80028d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	11db      	asrs	r3, r3, #7
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0306 	and.w	r3, r3, #6
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f063 030f 	orn	r3, r3, #15
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
}
 80028d0:	e011      	b.n	80028f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10d      	bne.n	80028f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	b29b      	uxth	r3, r3
 80028e0:	11db      	asrs	r3, r3, #7
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 0306 	and.w	r3, r3, #6
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f063 030e 	orn	r3, r3, #14
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	b2da      	uxtb	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <I2C_Master_ADD10+0x26>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d108      	bne.n	800293a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <I2C_Master_ADD10+0x48>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002948:	605a      	str	r2, [r3, #4]
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002956:	b480      	push	{r7}
 8002958:	b091      	sub	sp, #68	; 0x44
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b22      	cmp	r3, #34	; 0x22
 800297e:	f040 8169 	bne.w	8002c54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <I2C_Master_ADDR+0x54>
 800298a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10b      	bne.n	80029aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	e160      	b.n	8002c6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11d      	bne.n	80029ee <I2C_Master_ADDR+0x98>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029ba:	d118      	bne.n	80029ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	651a      	str	r2, [r3, #80]	; 0x50
 80029ec:	e13e      	b.n	8002c6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f8:	2300      	movs	r3, #0
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e115      	b.n	8002c4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 808a 	bne.w	8002b40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a32:	d137      	bne.n	8002aa4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a42:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a52:	d113      	bne.n	8002a7c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	e0e7      	b.n	8002c4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	623b      	str	r3, [r7, #32]
 8002a90:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e0d3      	b.n	8002c4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d02e      	beq.n	8002b08 <I2C_Master_ADDR+0x1b2>
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d02b      	beq.n	8002b08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d102      	bne.n	8002abc <I2C_Master_ADDR+0x166>
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d125      	bne.n	8002b08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00e      	beq.n	8002ae0 <I2C_Master_ADDR+0x18a>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d00b      	beq.n	8002ae0 <I2C_Master_ADDR+0x18a>
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d008      	beq.n	8002ae0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e007      	b.n	8002af0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	e0a1      	b.n	8002c4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e085      	b.n	8002c4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d14d      	bne.n	8002be6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d016      	beq.n	8002b7e <I2C_Master_ADDR+0x228>
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d013      	beq.n	8002b7e <I2C_Master_ADDR+0x228>
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d010      	beq.n	8002b7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e007      	b.n	8002b8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9c:	d117      	bne.n	8002bce <I2C_Master_ADDR+0x278>
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba4:	d00b      	beq.n	8002bbe <I2C_Master_ADDR+0x268>
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d008      	beq.n	8002bbe <I2C_Master_ADDR+0x268>
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d005      	beq.n	8002bbe <I2C_Master_ADDR+0x268>
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d002      	beq.n	8002bbe <I2C_Master_ADDR+0x268>
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d107      	bne.n	8002bce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	e032      	b.n	8002c4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bf4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c04:	d117      	bne.n	8002c36 <I2C_Master_ADDR+0x2e0>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c0c:	d00b      	beq.n	8002c26 <I2C_Master_ADDR+0x2d0>
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d008      	beq.n	8002c26 <I2C_Master_ADDR+0x2d0>
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d005      	beq.n	8002c26 <I2C_Master_ADDR+0x2d0>
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d002      	beq.n	8002c26 <I2C_Master_ADDR+0x2d0>
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d107      	bne.n	8002c36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c52:	e00b      	b.n	8002c6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	e7ff      	b.n	8002c6c <I2C_Master_ADDR+0x316>
 8002c6c:	bf00      	nop
 8002c6e:	3744      	adds	r7, #68	; 0x44
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d02b      	beq.n	8002cea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d114      	bne.n	8002cea <I2C_SlaveTransmit_TXE+0x72>
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b29      	cmp	r3, #41	; 0x29
 8002cc4:	d111      	bne.n	8002cea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2228      	movs	r2, #40	; 0x28
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff f9e7 	bl	80020b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02c      	beq.n	8002da8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d114      	bne.n	8002da8 <I2C_SlaveReceive_RXNE+0x74>
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b2a      	cmp	r3, #42	; 0x2a
 8002d82:	d111      	bne.n	8002da8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2222      	movs	r2, #34	; 0x22
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2228      	movs	r2, #40	; 0x28
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff f992 	bl	80020cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e0e:	2b28      	cmp	r3, #40	; 0x28
 8002e10:	d127      	bne.n	8002e62 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	09db      	lsrs	r3, r3, #7
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	81bb      	strh	r3, [r7, #12]
 8002e44:	e002      	b.n	8002e4c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e54:	89ba      	ldrh	r2, [r7, #12]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff f940 	bl	80020e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e60:	e00e      	b.n	8002e80 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee4:	d172      	bne.n	8002fcc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b22      	cmp	r3, #34	; 0x22
 8002eea:	d002      	beq.n	8002ef2 <I2C_Slave_STOPF+0x6a>
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef0:	d135      	bne.n	8002f5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0204 	orr.w	r2, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fa23 	bl	8001376 <HAL_DMA_GetState>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d049      	beq.n	8002fca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <I2C_Slave_STOPF+0x258>)
 8002f3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe f9f5 	bl	8001332 <HAL_DMA_Abort_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d03d      	beq.n	8002fca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f5c:	e035      	b.n	8002fca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0204 	orr.w	r2, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe f9ed 	bl	8001376 <HAL_DMA_GetState>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d014      	beq.n	8002fcc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa6:	4a4e      	ldr	r2, [pc, #312]	; (80030e0 <I2C_Slave_STOPF+0x258>)
 8002fa8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f9bf 	bl	8001332 <HAL_DMA_Abort_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
 8002fc8:	e000      	b.n	8002fcc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03e      	beq.n	8003054 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d112      	bne.n	800300a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d112      	bne.n	800303e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8b3 	bl	80031c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003062:	e039      	b.n	80030d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b2a      	cmp	r3, #42	; 0x2a
 8003068:	d109      	bne.n	800307e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2228      	movs	r2, #40	; 0x28
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff f827 	bl	80020cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b28      	cmp	r3, #40	; 0x28
 8003088:	d111      	bne.n	80030ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <I2C_Slave_STOPF+0x25c>)
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff f828 	bl	80020fc <HAL_I2C_ListenCpltCallback>
}
 80030ac:	e014      	b.n	80030d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	2b22      	cmp	r3, #34	; 0x22
 80030b4:	d002      	beq.n	80030bc <I2C_Slave_STOPF+0x234>
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b22      	cmp	r3, #34	; 0x22
 80030ba:	d10d      	bne.n	80030d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe fffa 	bl	80020cc <HAL_I2C_SlaveRxCpltCallback>
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	0800342d 	.word	0x0800342d
 80030e4:	ffff0000 	.word	0xffff0000

080030e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d002      	beq.n	800310a <I2C_Slave_AF+0x22>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d129      	bne.n	800315e <I2C_Slave_AF+0x76>
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b28      	cmp	r3, #40	; 0x28
 800310e:	d126      	bne.n	800315e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a2c      	ldr	r2, [pc, #176]	; (80031c4 <I2C_Slave_AF+0xdc>)
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003124:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe ffd0 	bl	80020fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800315c:	e02e      	b.n	80031bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b21      	cmp	r3, #33	; 0x21
 8003162:	d126      	bne.n	80031b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <I2C_Slave_AF+0xdc>)
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2221      	movs	r2, #33	; 0x21
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800318e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003198:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe ff84 	bl	80020b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80031b0:	e004      	b.n	80031bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ba:	615a      	str	r2, [r3, #20]
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	ffff0000 	.word	0xffff0000

080031c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031e0:	7bbb      	ldrb	r3, [r7, #14]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d002      	beq.n	80031ec <I2C_ITError+0x24>
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d10a      	bne.n	8003202 <I2C_ITError+0x3a>
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b22      	cmp	r3, #34	; 0x22
 80031f0:	d107      	bne.n	8003202 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003200:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003208:	2b28      	cmp	r3, #40	; 0x28
 800320a:	d107      	bne.n	800321c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2228      	movs	r2, #40	; 0x28
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800321a:	e015      	b.n	8003248 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322a:	d00a      	beq.n	8003242 <I2C_ITError+0x7a>
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b60      	cmp	r3, #96	; 0x60
 8003230:	d007      	beq.n	8003242 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003256:	d162      	bne.n	800331e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003266:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d020      	beq.n	80032b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	4a6a      	ldr	r2, [pc, #424]	; (8003424 <I2C_ITError+0x25c>)
 800327c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f855 	bl	8001332 <HAL_DMA_Abort_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8089 	beq.w	80033a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b2:	4610      	mov	r0, r2
 80032b4:	4798      	blx	r3
 80032b6:	e074      	b.n	80033a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	4a59      	ldr	r2, [pc, #356]	; (8003424 <I2C_ITError+0x25c>)
 80032be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe f834 	bl	8001332 <HAL_DMA_Abort_IT>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d068      	beq.n	80033a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d10b      	bne.n	80032f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003318:	4610      	mov	r0, r2
 800331a:	4798      	blx	r3
 800331c:	e041      	b.n	80033a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b60      	cmp	r3, #96	; 0x60
 8003328:	d125      	bne.n	8003376 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d10b      	bne.n	800335e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe feec 	bl	800214c <HAL_I2C_AbortCpltCallback>
 8003374:	e015      	b.n	80033a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d10b      	bne.n	800339c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe fecb 	bl	8002138 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10e      	bne.n	80033d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d113      	bne.n	800341c <I2C_ITError+0x254>
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b28      	cmp	r3, #40	; 0x28
 80033f8:	d110      	bne.n	800341c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <I2C_ITError+0x260>)
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fe70 	bl	80020fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	0800342d 	.word	0x0800342d
 8003428:	ffff0000 	.word	0xffff0000

0800342c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003446:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <I2C_DMAAbort+0x148>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	08db      	lsrs	r3, r3, #3
 800344c:	4a4a      	ldr	r2, [pc, #296]	; (8003578 <I2C_DMAAbort+0x14c>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	0a1a      	lsrs	r2, r3, #8
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00da      	lsls	r2, r3, #3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003472:	e00a      	b.n	800348a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003488:	d0ea      	beq.n	8003460 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	2200      	movs	r2, #0
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	2200      	movs	r2, #0
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	2200      	movs	r2, #0
 80034ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	2200      	movs	r2, #0
 80034de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b60      	cmp	r3, #96	; 0x60
 80034fa:	d10e      	bne.n	800351a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7fe fe1a 	bl	800214c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003518:	e027      	b.n	800356a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003520:	2b28      	cmp	r3, #40	; 0x28
 8003522:	d117      	bne.n	8003554 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003542:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2228      	movs	r2, #40	; 0x28
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003552:	e007      	b.n	8003564 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003564:	6978      	ldr	r0, [r7, #20]
 8003566:	f7fe fde7 	bl	8002138 <HAL_I2C_ErrorCallback>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000
 8003578:	14f8b589 	.word	0x14f8b589

0800357c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	0a1a      	lsrs	r2, r3, #8
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e008      	b.n	80035cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c8:	d0e9      	beq.n	800359e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	20000000 	.word	0x20000000
 80035dc:	14f8b589 	.word	0x14f8b589

080035e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035f0:	d103      	bne.n	80035fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80035f8:	e007      	b.n	800360a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003602:	d102      	bne.n	800360a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2208      	movs	r2, #8
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003618:	b08f      	sub	sp, #60	; 0x3c
 800361a:	af0a      	add	r7, sp, #40	; 0x28
 800361c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e10f      	b.n	8003848 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f005 fe06 	bl	8009254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2203      	movs	r2, #3
 800364c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f002 fc55 	bl	8005f16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	687e      	ldr	r6, [r7, #4]
 8003674:	466d      	mov	r5, sp
 8003676:	f106 0410 	add.w	r4, r6, #16
 800367a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003682:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003686:	e885 0003 	stmia.w	r5, {r0, r1}
 800368a:	1d33      	adds	r3, r6, #4
 800368c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	f002 fb2c 	bl	8005cec <USB_CoreInit>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0d0      	b.n	8003848 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 fc43 	bl	8005f38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	e04a      	b.n	800374e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	333d      	adds	r3, #61	; 0x3d
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	333c      	adds	r3, #60	; 0x3c
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	b298      	uxth	r0, r3
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3344      	adds	r3, #68	; 0x44
 80036f4:	4602      	mov	r2, r0
 80036f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3340      	adds	r3, #64	; 0x40
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3348      	adds	r3, #72	; 0x48
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334c      	adds	r3, #76	; 0x4c
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3354      	adds	r3, #84	; 0x54
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	3301      	adds	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d3af      	bcc.n	80036b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e044      	b.n	80037e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	3301      	adds	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3b5      	bcc.n	800375e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	687e      	ldr	r6, [r7, #4]
 80037fa:	466d      	mov	r5, sp
 80037fc:	f106 0410 	add.w	r4, r6, #16
 8003800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003808:	e894 0003 	ldmia.w	r4, {r0, r1}
 800380c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003810:	1d33      	adds	r3, r6, #4
 8003812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003814:	6838      	ldr	r0, [r7, #0]
 8003816:	f002 fbdb 	bl	8005fd0 <USB_DevInit>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00d      	b.n	8003848 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fd2a 	bl	800729a <USB_DevDisconnect>

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003850 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_PCD_Start+0x1c>
 8003868:	2302      	movs	r3, #2
 800386a:	e020      	b.n	80038ae <HAL_PCD_Start+0x5e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b01      	cmp	r3, #1
 800387a:	d109      	bne.n	8003890 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003880:	2b01      	cmp	r3, #1
 8003882:	d005      	beq.n	8003890 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f002 fb2d 	bl	8005ef4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 fcda 	bl	8007258 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b08d      	sub	sp, #52	; 0x34
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 fd98 	bl	8007402 <USB_GetMode>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 848a 	bne.w	80041ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 fcfc 	bl	80072dc <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8480 	beq.w	80041ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fce9 	bl	80072dc <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d107      	bne.n	8003924 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f002 0202 	and.w	r2, r2, #2
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f003 fcd7 	bl	80072dc <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d161      	bne.n	80039fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0210 	bic.w	r2, r2, #16
 8003946:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	0c5b      	lsrs	r3, r3, #17
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	2b02      	cmp	r3, #2
 8003972:	d124      	bne.n	80039be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d035      	beq.n	80039ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800398a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6a38      	ldr	r0, [r7, #32]
 8003994:	f003 fb0e 	bl	8006fb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a4:	441a      	add	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b6:	441a      	add	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	621a      	str	r2, [r3, #32]
 80039bc:	e016      	b.n	80039ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d110      	bne.n	80039ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039d0:	2208      	movs	r2, #8
 80039d2:	4619      	mov	r1, r3
 80039d4:	6a38      	ldr	r0, [r7, #32]
 80039d6:	f003 faed 	bl	8006fb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e6:	441a      	add	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0210 	orr.w	r2, r2, #16
 80039fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 fc6b 	bl	80072dc <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a10:	f040 80a7 	bne.w	8003b62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f003 fc70 	bl	8007302 <USB_ReadDevAllOutEpInterrupt>
 8003a22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a24:	e099      	b.n	8003b5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808e 	beq.w	8003b4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f003 fc94 	bl	800736a <USB_ReadDevOutEPInterrupt>
 8003a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 feaa 	bl	80047bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2308      	movs	r3, #8
 8003a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 ff80 	bl	800498c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d030      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d109      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f005 fcbd 	bl	800947c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2302      	movs	r3, #2
 8003b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af62 	bne.w	8003a26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 fbb8 	bl	80072dc <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b76:	f040 80db 	bne.w	8003d30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 fbd9 	bl	8007336 <USB_ReadDevAllInEpInterrupt>
 8003b84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b8a:	e0cd      	b.n	8003d28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80c2 	beq.w	8003d1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 fbff 	bl	80073a6 <USB_ReadDevInEPInterrupt>
 8003ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d057      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	2301      	movs	r3, #1
 8003be8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d132      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	334c      	adds	r3, #76	; 0x4c
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4403      	add	r3, r0
 8003c12:	3348      	adds	r3, #72	; 0x48
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4419      	add	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4403      	add	r3, r0
 8003c26:	334c      	adds	r3, #76	; 0x4c
 8003c28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3354      	adds	r3, #84	; 0x54
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c50:	461a      	mov	r2, r3
 8003c52:	2101      	movs	r1, #1
 8003c54:	f003 fc06 	bl	8007464 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f005 fb87 	bl	8009372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	461a      	mov	r2, r3
 8003c98:	2310      	movs	r3, #16
 8003c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2340      	movs	r3, #64	; 0x40
 8003cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d023      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cc4:	6a38      	ldr	r0, [r7, #32]
 8003cc6:	f002 fae7 	bl	8006298 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	3338      	adds	r3, #56	; 0x38
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	78db      	ldrb	r3, [r3, #3]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f005 fbd4 	bl	80094a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	461a      	mov	r2, r3
 8003d06:	2302      	movs	r3, #2
 8003d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fcc3 	bl	80046a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	3301      	adds	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f47f af2e 	bne.w	8003b8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f003 fad1 	bl	80072dc <USB_ReadInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d44:	d122      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d108      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 feaa 	bl	8004ac8 <HAL_PCDEx_LPM_Callback>
 8003d74:	e002      	b.n	8003d7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f005 fb72 	bl	8009460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 faa3 	bl	80072dc <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da0:	d112      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f005 fb2e 	bl	8009414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dc6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 fa85 	bl	80072dc <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ddc:	f040 80b7 	bne.w	8003f4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2110      	movs	r1, #16
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 fa4c 	bl	8006298 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e04:	e046      	b.n	8003e94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	461a      	mov	r2, r3
 8003e14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e46:	461a      	mov	r2, r3
 8003e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5e:	0151      	lsls	r1, r2, #5
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	440a      	add	r2, r1
 8003e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	3301      	adds	r3, #1
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3b3      	bcc.n	8003e06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003eb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eca:	f043 030b 	orr.w	r3, r3, #11
 8003ece:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee0:	f043 030b 	orr.w	r3, r3, #11
 8003ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee6:	e015      	b.n	8003f14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003efa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003efe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0e:	f043 030b 	orr.w	r3, r3, #11
 8003f12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f003 fa93 	bl	8007464 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 f9c2 	bl	80072dc <USB_ReadInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	d124      	bne.n	8003fae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fa58 	bl	800741e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f002 fa0d 	bl	8006392 <USB_GetDevSpeed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681c      	ldr	r4, [r3, #0]
 8003f84:	f001 fa10 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 8003f88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	4620      	mov	r0, r4
 8003f94:	f001 ff0c 	bl	8005db0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f005 fa12 	bl	80093c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 f992 	bl	80072dc <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f005 f9ef 	bl	80093a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f002 0208 	and.w	r2, r2, #8
 8003fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 f97d 	bl	80072dc <USB_ReadInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d122      	bne.n	8004032 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	e014      	b.n	8004028 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d105      	bne.n	8004022 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb0f 	bl	8004640 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402e:	429a      	cmp	r2, r3
 8004030:	d3e5      	bcc.n	8003ffe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f003 f950 	bl	80072dc <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d13b      	bne.n	80040c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004048:	2301      	movs	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	e02b      	b.n	80040a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3340      	adds	r3, #64	; 0x40
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d115      	bne.n	80040a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	da12      	bge.n	80040a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	333f      	adds	r3, #63	; 0x3f
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fad0 	bl	8004640 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	3301      	adds	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3ce      	bcc.n	800404e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f003 f909 	bl	80072dc <USB_ReadInterrupts>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d4:	d155      	bne.n	8004182 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d6:	2301      	movs	r3, #1
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
 80040da:	e045      	b.n	8004168 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d12e      	bne.n	8004162 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004104:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	da2b      	bge.n	8004162 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004116:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800411a:	429a      	cmp	r2, r3
 800411c:	d121      	bne.n	8004162 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415e:	6053      	str	r3, [r2, #4]
            break;
 8004160:	e007      	b.n	8004172 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	3301      	adds	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	429a      	cmp	r2, r3
 8004170:	d3b4      	bcc.n	80040dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 f8a8 	bl	80072dc <USB_ReadInterrupts>
 800418c:	4603      	mov	r3, r0
 800418e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004196:	d10a      	bne.n	80041ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f005 f993 	bl	80094c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 f892 	bl	80072dc <USB_ReadInterrupts>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d115      	bne.n	80041ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f005 f983 	bl	80094e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	e000      	b.n	80041ee <HAL_PCD_IRQHandler+0x938>
      return;
 80041ec:	bf00      	nop
    }
  }
}
 80041ee:	3734      	adds	r7, #52	; 0x34
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd90      	pop	{r4, r7, pc}

080041f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_PCD_SetAddress+0x1a>
 800420a:	2302      	movs	r3, #2
 800420c:	e013      	b.n	8004236 <HAL_PCD_SetAddress+0x42>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f002 fff0 	bl	800720c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	4608      	mov	r0, r1
 8004248:	4611      	mov	r1, r2
 800424a:	461a      	mov	r2, r3
 800424c:	4603      	mov	r3, r0
 800424e:	70fb      	strb	r3, [r7, #3]
 8004250:	460b      	mov	r3, r1
 8004252:	803b      	strh	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800425c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004260:	2b00      	cmp	r3, #0
 8004262:	da0f      	bge.n	8004284 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 020f 	and.w	r2, r3, #15
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	3338      	adds	r3, #56	; 0x38
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	705a      	strb	r2, [r3, #1]
 8004282:	e00f      	b.n	80042a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 020f 	and.w	r2, r3, #15
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042b0:	883a      	ldrh	r2, [r7, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	78ba      	ldrb	r2, [r7, #2]
 80042ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042ce:	78bb      	ldrb	r3, [r7, #2]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d102      	bne.n	80042da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_PCD_EP_Open+0xaa>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e00e      	b.n	8004306 <HAL_PCD_EP_Open+0xc8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f002 f870 	bl	80063dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004304:	7afb      	ldrb	r3, [r7, #11]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800431a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431e:	2b00      	cmp	r3, #0
 8004320:	da0f      	bge.n	8004342 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	3338      	adds	r3, #56	; 0x38
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	3304      	adds	r3, #4
 8004338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
 8004340:	e00f      	b.n	8004362 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	3304      	adds	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_PCD_EP_Close+0x6e>
 8004378:	2302      	movs	r3, #2
 800437a:	e00e      	b.n	800439a <HAL_PCD_EP_Close+0x8c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	4618      	mov	r0, r3
 800438c:	f002 f8ae 	bl	80064ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	460b      	mov	r3, r1
 80043b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d102      	bne.n	80043fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	f002 fb8d 	bl	8006b34 <USB_EP0StartXfer>
 800441a:	e008      	b.n	800442e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	f002 f93b 	bl	80066a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3338      	adds	r3, #56	; 0x38
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	3304      	adds	r3, #4
 800445e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2201      	movs	r2, #1
 8004476:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	b2da      	uxtb	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004492:	7afb      	ldrb	r3, [r7, #11]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	f002 fb43 	bl	8006b34 <USB_EP0StartXfer>
 80044ae:	e008      	b.n	80044c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	f002 f8f1 	bl	80066a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 020f 	and.w	r2, r3, #15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d901      	bls.n	80044ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e050      	b.n	800458c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da0f      	bge.n	8004512 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	3338      	adds	r3, #56	; 0x38
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	3304      	adds	r3, #4
 8004508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	705a      	strb	r2, [r3, #1]
 8004510:	e00d      	b.n	800452e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	3304      	adds	r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_PCD_EP_SetStall+0x82>
 800454a:	2302      	movs	r3, #2
 800454c:	e01e      	b.n	800458c <HAL_PCD_EP_SetStall+0xc0>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f002 fd81 	bl	8007064 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	b2d9      	uxtb	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800457c:	461a      	mov	r2, r3
 800457e:	f002 ff71 	bl	8007464 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d901      	bls.n	80045b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e042      	b.n	8004638 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da0f      	bge.n	80045da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 020f 	and.w	r2, r3, #15
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3338      	adds	r3, #56	; 0x38
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	3304      	adds	r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	705a      	strb	r2, [r3, #1]
 80045d8:	e00f      	b.n	80045fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_PCD_EP_ClrStall+0x86>
 8004616:	2302      	movs	r3, #2
 8004618:	e00e      	b.n	8004638 <HAL_PCD_EP_ClrStall+0xa4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	4618      	mov	r0, r3
 800462a:	f002 fd89 	bl	8007140 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800464c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004650:	2b00      	cmp	r3, #0
 8004652:	da0c      	bge.n	800466e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	3338      	adds	r3, #56	; 0x38
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4413      	add	r3, r2
 8004668:	3304      	adds	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e00c      	b.n	8004688 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	f003 020f 	and.w	r2, r3, #15
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68f9      	ldr	r1, [r7, #12]
 800468e:	4618      	mov	r0, r3
 8004690:	f002 fba8 	bl	8006de4 <USB_EPStopXfer>
 8004694:	4603      	mov	r3, r0
 8004696:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004698:	7afb      	ldrb	r3, [r7, #11]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b08a      	sub	sp, #40	; 0x28
 80046a6:	af02      	add	r7, sp, #8
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	3338      	adds	r3, #56	; 0x38
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	3304      	adds	r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d901      	bls.n	80046da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06c      	b.n	80047b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d902      	bls.n	80046f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3303      	adds	r3, #3
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046fe:	e02b      	b.n	8004758 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	429a      	cmp	r2, r3
 8004714:	d902      	bls.n	800471c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	3303      	adds	r3, #3
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6919      	ldr	r1, [r3, #16]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004734:	b2db      	uxtb	r3, r3
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4603      	mov	r3, r0
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f002 fbfc 	bl	8006f38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	441a      	add	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	441a      	add	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	b29b      	uxth	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	429a      	cmp	r2, r3
 800476c:	d809      	bhi.n	8004782 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004776:	429a      	cmp	r2, r3
 8004778:	d203      	bcs.n	8004782 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1be      	bne.n	8004700 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	429a      	cmp	r2, r3
 800478c:	d811      	bhi.n	80047b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2201      	movs	r2, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ae:	4013      	ands	r3, r2
 80047b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	333c      	adds	r3, #60	; 0x3c
 80047d4:	3304      	adds	r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d17b      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4a61      	ldr	r2, [pc, #388]	; (8004984 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	f240 80b9 	bls.w	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80b3 	beq.w	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004824:	6093      	str	r3, [r2, #8]
 8004826:	e0a7      	b.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	2320      	movs	r3, #32
 8004842:	6093      	str	r3, [r2, #8]
 8004844:	e098      	b.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8093 	bne.w	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4a4b      	ldr	r2, [pc, #300]	; (8004984 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d90f      	bls.n	800487a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	6093      	str	r3, [r2, #8]
 8004878:	e07e      	b.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	0159      	lsls	r1, r3, #5
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	440b      	add	r3, r1
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d114      	bne.n	80048dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048c4:	461a      	mov	r2, r3
 80048c6:	2101      	movs	r1, #1
 80048c8:	f002 fdcc 	bl	8007464 <USB_EP0_OutStart>
 80048cc:	e006      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f004 fd2a 	bl	800933c <HAL_PCD_DataOutStageCallback>
 80048e8:	e046      	b.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4a26      	ldr	r2, [pc, #152]	; (8004988 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d124      	bne.n	800493c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	461a      	mov	r2, r3
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	6093      	str	r3, [r2, #8]
 8004910:	e032      	b.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	2320      	movs	r3, #32
 800492c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f004 fd01 	bl	800933c <HAL_PCD_DataOutStageCallback>
 800493a:	e01d      	b.n	8004978 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d114      	bne.n	800496c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d108      	bne.n	800496c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004964:	461a      	mov	r2, r3
 8004966:	2100      	movs	r1, #0
 8004968:	f002 fd7c 	bl	8007464 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f004 fce2 	bl	800933c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	4f54300a 	.word	0x4f54300a
 8004988:	4f54310a 	.word	0x4f54310a

0800498c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	333c      	adds	r3, #60	; 0x3c
 80049a4:	3304      	adds	r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <PCD_EP_OutSetupPacket_int+0x88>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d90e      	bls.n	80049e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f004 fc99 	bl	8009318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d90c      	bls.n	8004a08 <PCD_EP_OutSetupPacket_int+0x7c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d108      	bne.n	8004a08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a00:	461a      	mov	r2, r3
 8004a02:	2101      	movs	r1, #1
 8004a04:	f002 fd2e 	bl	8007464 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	4f54300a 	.word	0x4f54300a

08004a18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
 8004a24:	4613      	mov	r3, r2
 8004a26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a36:	883b      	ldrh	r3, [r7, #0]
 8004a38:	0419      	lsls	r1, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
 8004a44:	e028      	b.n	8004a98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e00d      	b.n	8004a76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	3340      	adds	r3, #64	; 0x40
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	3301      	adds	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3ec      	bcc.n	8004a5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a80:	883b      	ldrh	r3, [r7, #0]
 8004a82:	0418      	lsls	r0, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6819      	ldr	r1, [r3, #0]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	4302      	orrs	r2, r0
 8004a90:	3340      	adds	r3, #64	; 0x40
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e267      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d075      	beq.n	8004bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afe:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d00c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b85      	ldr	r3, [pc, #532]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d112      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b16:	4b82      	ldr	r3, [pc, #520]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	4b7e      	ldr	r3, [pc, #504]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d05b      	beq.n	8004be8 <HAL_RCC_OscConfig+0x108>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d157      	bne.n	8004be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e242      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x74>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e01d      	b.n	8004b90 <HAL_RCC_OscConfig+0xb0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x98>
 8004b5e:	4b70      	ldr	r3, [pc, #448]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6f      	ldr	r2, [pc, #444]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6c      	ldr	r2, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0xb0>
 8004b78:	4b69      	ldr	r3, [pc, #420]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a68      	ldr	r2, [pc, #416]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	4b66      	ldr	r3, [pc, #408]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a65      	ldr	r2, [pc, #404]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fc fa8a 	bl	80010b0 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fc fa86 	bl	80010b0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e207      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xc0>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fc fa76 	bl	80010b0 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc8:	f7fc fa72 	bl	80010b0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e1f3      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0xe8>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d063      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d11c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0e:	4b44      	ldr	r3, [pc, #272]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_RCC_OscConfig+0x152>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e1c7      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4937      	ldr	r1, [pc, #220]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	e03a      	b.n	8004cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCC_OscConfig+0x244>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fc fa2b 	bl	80010b0 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5e:	f7fc fa27 	bl	80010b0 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e1a8      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4925      	ldr	r1, [pc, #148]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCC_OscConfig+0x244>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fc fa0a 	bl	80010b0 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fc fa06 	bl	80010b0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e187      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d036      	beq.n	8004d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_RCC_OscConfig+0x248>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fc f9ea 	bl	80010b0 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fc f9e6 	bl	80010b0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e167      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x200>
 8004cfe:	e01b      	b.n	8004d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_OscConfig+0x248>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d06:	f7fc f9d3 	bl	80010b0 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	e00e      	b.n	8004d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fc f9cf 	bl	80010b0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d907      	bls.n	8004d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e150      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	42470000 	.word	0x42470000
 8004d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ea      	bne.n	8004d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8097 	beq.w	8004e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b81      	ldr	r3, [pc, #516]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b7d      	ldr	r3, [pc, #500]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a7c      	ldr	r2, [pc, #496]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b7a      	ldr	r3, [pc, #488]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b77      	ldr	r3, [pc, #476]	; (8004f54 <HAL_RCC_OscConfig+0x474>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d118      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b74      	ldr	r3, [pc, #464]	; (8004f54 <HAL_RCC_OscConfig+0x474>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a73      	ldr	r2, [pc, #460]	; (8004f54 <HAL_RCC_OscConfig+0x474>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7fc f98f 	bl	80010b0 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7fc f98b 	bl	80010b0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e10c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4b6a      	ldr	r3, [pc, #424]	; (8004f54 <HAL_RCC_OscConfig+0x474>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <HAL_RCC_OscConfig+0x2ea>
 8004dbc:	4b64      	ldr	r3, [pc, #400]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a63      	ldr	r2, [pc, #396]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCC_OscConfig+0x324>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x30c>
 8004dd2:	4b5f      	ldr	r3, [pc, #380]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a5e      	ldr	r2, [pc, #376]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a5b      	ldr	r2, [pc, #364]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0x324>
 8004dec:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	4a54      	ldr	r2, [pc, #336]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	f023 0304 	bic.w	r3, r3, #4
 8004e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fc f950 	bl	80010b0 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fc f94c 	bl	80010b0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0cb      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0ee      	beq.n	8004e14 <HAL_RCC_OscConfig+0x334>
 8004e36:	e014      	b.n	8004e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e38:	f7fc f93a 	bl	80010b0 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fc f936 	bl	80010b0 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0b5      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e56:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ee      	bne.n	8004e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	4a38      	ldr	r2, [pc, #224]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80a1 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e7e:	4b34      	ldr	r3, [pc, #208]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d05c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d141      	bne.n	8004f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fc f90a 	bl	80010b0 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fc f906 	bl	80010b0 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e087      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	491b      	ldr	r1, [pc, #108]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fc f8df 	bl	80010b0 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fc f8db 	bl	80010b0 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e05c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x416>
 8004f14:	e054      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCC_OscConfig+0x478>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fc f8c8 	bl	80010b0 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fc f8c4 	bl	80010b0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e045      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_RCC_OscConfig+0x470>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x444>
 8004f42:	e03d      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e038      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40007000 	.word	0x40007000
 8004f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_RCC_OscConfig+0x4ec>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d028      	beq.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d121      	bne.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d11a      	bne.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d111      	bne.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d107      	bne.n	8004fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800

08004fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0cc      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b68      	ldr	r3, [pc, #416]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d90c      	bls.n	800500c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b65      	ldr	r3, [pc, #404]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0b8      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005024:	4b59      	ldr	r3, [pc, #356]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a58      	ldr	r2, [pc, #352]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800502e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800503c:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a52      	ldr	r2, [pc, #328]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	4b50      	ldr	r3, [pc, #320]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	494d      	ldr	r1, [pc, #308]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d044      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d119      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d003      	beq.n	800508e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508a:	2b03      	cmp	r3, #3
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e06f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e067      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4b37      	ldr	r3, [pc, #220]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4934      	ldr	r1, [pc, #208]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c0:	f7fb fff6 	bl	80010b0 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	e00a      	b.n	80050de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c8:	f7fb fff2 	bl	80010b0 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e04f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 020c 	and.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1eb      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d20c      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e032      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4916      	ldr	r1, [pc, #88]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	490e      	ldr	r1, [pc, #56]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005156:	f000 f821 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800515a:	4602      	mov	r2, r0
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	490a      	ldr	r1, [pc, #40]	; (8005190 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	5ccb      	ldrb	r3, [r1, r3]
 800516a:	fa22 f303 	lsr.w	r3, r2, r3
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fb ff56 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023c00 	.word	0x40023c00
 800518c:	40023800 	.word	0x40023800
 8005190:	08009944 	.word	0x08009944
 8005194:	20000000 	.word	0x20000000
 8005198:	20000004 	.word	0x20000004

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b094      	sub	sp, #80	; 0x50
 80051a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
 80051a8:	2300      	movs	r3, #0
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ac:	2300      	movs	r3, #0
 80051ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b4:	4b79      	ldr	r3, [pc, #484]	; (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d00d      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x40>
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	f200 80e1 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ce:	e0db      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d0:	4b73      	ldr	r3, [pc, #460]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051d4:	e0db      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051d6:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051da:	e0d8      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051dc:	4b6f      	ldr	r3, [pc, #444]	; (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e6:	4b6d      	ldr	r3, [pc, #436]	; (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d063      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f2:	4b6a      	ldr	r3, [pc, #424]	; (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	2200      	movs	r2, #0
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80051fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005204:	633b      	str	r3, [r7, #48]	; 0x30
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	0159      	lsls	r1, r3, #5
 800521c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005220:	0150      	lsls	r0, r2, #5
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4621      	mov	r1, r4
 8005228:	1a51      	subs	r1, r2, r1
 800522a:	6139      	str	r1, [r7, #16]
 800522c:	4629      	mov	r1, r5
 800522e:	eb63 0301 	sbc.w	r3, r3, r1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005240:	4659      	mov	r1, fp
 8005242:	018b      	lsls	r3, r1, #6
 8005244:	4651      	mov	r1, sl
 8005246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524a:	4651      	mov	r1, sl
 800524c:	018a      	lsls	r2, r1, #6
 800524e:	4651      	mov	r1, sl
 8005250:	ebb2 0801 	subs.w	r8, r2, r1
 8005254:	4659      	mov	r1, fp
 8005256:	eb63 0901 	sbc.w	r9, r3, r1
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526e:	4690      	mov	r8, r2
 8005270:	4699      	mov	r9, r3
 8005272:	4623      	mov	r3, r4
 8005274:	eb18 0303 	adds.w	r3, r8, r3
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	462b      	mov	r3, r5
 800527c:	eb49 0303 	adc.w	r3, r9, r3
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800528e:	4629      	mov	r1, r5
 8005290:	024b      	lsls	r3, r1, #9
 8005292:	4621      	mov	r1, r4
 8005294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005298:	4621      	mov	r1, r4
 800529a:	024a      	lsls	r2, r1, #9
 800529c:	4610      	mov	r0, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a2:	2200      	movs	r2, #0
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ac:	f7fa ff8c 	bl	80001c8 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4613      	mov	r3, r2
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b8:	e058      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ba:	4b38      	ldr	r3, [pc, #224]	; (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	2200      	movs	r2, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	4611      	mov	r1, r2
 80052c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	2300      	movs	r3, #0
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
 80052d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	f04f 0000 	mov.w	r0, #0
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	0159      	lsls	r1, r3, #5
 80052e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e6:	0150      	lsls	r0, r2, #5
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4641      	mov	r1, r8
 80052ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f2:	4649      	mov	r1, r9
 80052f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800530c:	ebb2 040a 	subs.w	r4, r2, sl
 8005310:	eb63 050b 	sbc.w	r5, r3, fp
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	00eb      	lsls	r3, r5, #3
 800531e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005322:	00e2      	lsls	r2, r4, #3
 8005324:	4614      	mov	r4, r2
 8005326:	461d      	mov	r5, r3
 8005328:	4643      	mov	r3, r8
 800532a:	18e3      	adds	r3, r4, r3
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	464b      	mov	r3, r9
 8005330:	eb45 0303 	adc.w	r3, r5, r3
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005342:	4629      	mov	r1, r5
 8005344:	028b      	lsls	r3, r1, #10
 8005346:	4621      	mov	r1, r4
 8005348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800534c:	4621      	mov	r1, r4
 800534e:	028a      	lsls	r2, r1, #10
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005356:	2200      	movs	r2, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	61fa      	str	r2, [r7, #28]
 800535c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005360:	f7fa ff32 	bl	80001c8 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	3301      	adds	r3, #1
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800537c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800537e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005386:	e002      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005390:	4618      	mov	r0, r3
 8005392:	3750      	adds	r7, #80	; 0x50
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	00f42400 	.word	0x00f42400
 80053a4:	007a1200 	.word	0x007a1200

080053a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000000 	.word	0x20000000

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c4:	f7ff fff0 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0a9b      	lsrs	r3, r3, #10
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40023800 	.word	0x40023800
 80053e4:	08009954 	.word	0x08009954

080053e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e041      	b.n	800547e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fb fd0a 	bl	8000e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fa96 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e04e      	b.n	800553e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_TIM_Base_Start_IT+0xc4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d01d      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_TIM_Base_Start_IT+0xc8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <HAL_TIM_Base_Start_IT+0xcc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_TIM_Base_Start_IT+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIM_Base_Start_IT+0xd4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_TIM_Base_Start_IT+0xd8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <HAL_TIM_Base_Start_IT+0xdc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d111      	bne.n	800552c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d010      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	e007      	b.n	800553c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0202 	mvn.w	r2, #2
 8005594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9b5 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9a7 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9b8 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0204 	mvn.w	r2, #4
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f98b 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f97d 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f98e 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0208 	mvn.w	r2, #8
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f961 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f953 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f964 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b10      	cmp	r3, #16
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f937 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f929 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f93a 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0201 	mvn.w	r2, #1
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb faf4 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	d10e      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d107      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fae0 	bl	8005cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d10e      	bne.n	8005744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d107      	bne.n	8005744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8ff 	bl	8005942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b20      	cmp	r3, #32
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b20      	cmp	r3, #32
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0220 	mvn.w	r2, #32
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 faaa 	bl	8005cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x1c>
 8005790:	2302      	movs	r3, #2
 8005792:	e0b4      	b.n	80058fe <HAL_TIM_ConfigClockSource+0x186>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057cc:	d03e      	beq.n	800584c <HAL_TIM_ConfigClockSource+0xd4>
 80057ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d2:	f200 8087 	bhi.w	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	f000 8086 	beq.w	80058ea <HAL_TIM_ConfigClockSource+0x172>
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e2:	d87f      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b70      	cmp	r3, #112	; 0x70
 80057e6:	d01a      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xa6>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d87b      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b60      	cmp	r3, #96	; 0x60
 80057ee:	d050      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x11a>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d877      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b50      	cmp	r3, #80	; 0x50
 80057f6:	d03c      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0xfa>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d873      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d058      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d86f      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b30      	cmp	r3, #48	; 0x30
 8005806:	d064      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d86b      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d060      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d867      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d05c      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005818:	2b10      	cmp	r3, #16
 800581a:	d05a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 800581c:	e062      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f000 f9ad 	bl	8005b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	609a      	str	r2, [r3, #8]
      break;
 800584a:	e04f      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6899      	ldr	r1, [r3, #8]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f000 f996 	bl	8005b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586e:	609a      	str	r2, [r3, #8]
      break;
 8005870:	e03c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 f90a 	bl	8005a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2150      	movs	r1, #80	; 0x50
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f963 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 8005890:	e02c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 f929 	bl	8005af6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2160      	movs	r1, #96	; 0x60
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f953 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80058b0:	e01c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f8ea 	bl	8005a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2140      	movs	r1, #64	; 0x40
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f943 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80058d0:	e00c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f000 f93a 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80058e2:	e003      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e000      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a40      	ldr	r2, [pc, #256]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3d      	ldr	r2, [pc, #244]	; (8005a70 <TIM_Base_SetConfig+0x118>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3c      	ldr	r2, [pc, #240]	; (8005a74 <TIM_Base_SetConfig+0x11c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3b      	ldr	r2, [pc, #236]	; (8005a78 <TIM_Base_SetConfig+0x120>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3a      	ldr	r2, [pc, #232]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2f      	ldr	r2, [pc, #188]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b8:	d027      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2c      	ldr	r2, [pc, #176]	; (8005a70 <TIM_Base_SetConfig+0x118>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d023      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <TIM_Base_SetConfig+0x11c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01f      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2a      	ldr	r2, [pc, #168]	; (8005a78 <TIM_Base_SetConfig+0x120>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d017      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <TIM_Base_SetConfig+0x128>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <TIM_Base_SetConfig+0x12c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00f      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <TIM_Base_SetConfig+0x130>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <TIM_Base_SetConfig+0x134>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <TIM_Base_SetConfig+0x138>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <TIM_Base_SetConfig+0x13c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d108      	bne.n	8005a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_Base_SetConfig+0xf8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0c      	ldr	r2, [pc, #48]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	40001800 	.word	0x40001800
 8005a90:	40001c00 	.word	0x40001c00
 8005a94:	40002000 	.word	0x40002000

08005a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 030a 	bic.w	r3, r3, #10
 8005ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b087      	sub	sp, #28
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0210 	bic.w	r2, r3, #16
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	031b      	lsls	r3, r3, #12
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f043 0307 	orr.w	r3, r3, #7
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e05a      	b.n	8005c9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d01d      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10c      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40001800 	.word	0x40001800

08005cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cec:	b084      	sub	sp, #16
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	f107 001c 	add.w	r0, r7, #28
 8005cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d122      	bne.n	8005d4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 fbee 	bl	8007520 <USB_CoreReset>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]
 8005d48:	e01a      	b.n	8005d80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fbe2 	bl	8007520 <USB_CoreReset>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	; 0x38
 8005d72:	e005      	b.n	8005d80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d10b      	bne.n	8005d9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f043 0206 	orr.w	r2, r3, #6
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005daa:	b004      	add	sp, #16
 8005dac:	4770      	bx	lr
	...

08005db0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d165      	bne.n	8005e90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4a41      	ldr	r2, [pc, #260]	; (8005ecc <USB_SetTurnaroundTime+0x11c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d906      	bls.n	8005dda <USB_SetTurnaroundTime+0x2a>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4a40      	ldr	r2, [pc, #256]	; (8005ed0 <USB_SetTurnaroundTime+0x120>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d202      	bcs.n	8005dda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005dd4:	230f      	movs	r3, #15
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e062      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4a3c      	ldr	r2, [pc, #240]	; (8005ed0 <USB_SetTurnaroundTime+0x120>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d306      	bcc.n	8005df0 <USB_SetTurnaroundTime+0x40>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <USB_SetTurnaroundTime+0x124>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d202      	bcs.n	8005df0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005dea:	230e      	movs	r3, #14
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	e057      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4a38      	ldr	r2, [pc, #224]	; (8005ed4 <USB_SetTurnaroundTime+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d306      	bcc.n	8005e06 <USB_SetTurnaroundTime+0x56>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a37      	ldr	r2, [pc, #220]	; (8005ed8 <USB_SetTurnaroundTime+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d202      	bcs.n	8005e06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e00:	230d      	movs	r3, #13
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	e04c      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4a33      	ldr	r2, [pc, #204]	; (8005ed8 <USB_SetTurnaroundTime+0x128>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d306      	bcc.n	8005e1c <USB_SetTurnaroundTime+0x6c>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a32      	ldr	r2, [pc, #200]	; (8005edc <USB_SetTurnaroundTime+0x12c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d802      	bhi.n	8005e1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e16:	230c      	movs	r3, #12
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e041      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <USB_SetTurnaroundTime+0x12c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d906      	bls.n	8005e32 <USB_SetTurnaroundTime+0x82>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a2e      	ldr	r2, [pc, #184]	; (8005ee0 <USB_SetTurnaroundTime+0x130>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d802      	bhi.n	8005e32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e2c:	230b      	movs	r3, #11
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e036      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <USB_SetTurnaroundTime+0x130>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d906      	bls.n	8005e48 <USB_SetTurnaroundTime+0x98>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <USB_SetTurnaroundTime+0x134>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d802      	bhi.n	8005e48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e42:	230a      	movs	r3, #10
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e02b      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <USB_SetTurnaroundTime+0x134>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d906      	bls.n	8005e5e <USB_SetTurnaroundTime+0xae>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <USB_SetTurnaroundTime+0x138>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d202      	bcs.n	8005e5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e58:	2309      	movs	r3, #9
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e020      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <USB_SetTurnaroundTime+0x138>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d306      	bcc.n	8005e74 <USB_SetTurnaroundTime+0xc4>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <USB_SetTurnaroundTime+0x13c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d802      	bhi.n	8005e74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e6e:	2308      	movs	r3, #8
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e015      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <USB_SetTurnaroundTime+0x13c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d906      	bls.n	8005e8a <USB_SetTurnaroundTime+0xda>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <USB_SetTurnaroundTime+0x140>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d202      	bcs.n	8005e8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e84:	2307      	movs	r3, #7
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e00a      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e8a:	2306      	movs	r3, #6
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e007      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e96:	2309      	movs	r3, #9
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e001      	b.n	8005ea0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e9c:	2309      	movs	r3, #9
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	029b      	lsls	r3, r3, #10
 8005eb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	00d8acbf 	.word	0x00d8acbf
 8005ed0:	00e4e1c0 	.word	0x00e4e1c0
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	01067380 	.word	0x01067380
 8005edc:	011a499f 	.word	0x011a499f
 8005ee0:	01312cff 	.word	0x01312cff
 8005ee4:	014ca43f 	.word	0x014ca43f
 8005ee8:	016e3600 	.word	0x016e3600
 8005eec:	01a6ab1f 	.word	0x01a6ab1f
 8005ef0:	01e84800 	.word	0x01e84800

08005ef4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f043 0201 	orr.w	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f023 0201 	bic.w	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d115      	bne.n	8005f86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f66:	2001      	movs	r0, #1
 8005f68:	f7fb f8ae 	bl	80010c8 <HAL_Delay>
      ms++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fa45 	bl	8007402 <USB_GetMode>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d01e      	beq.n	8005fbc <USB_SetCurrentMode+0x84>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b31      	cmp	r3, #49	; 0x31
 8005f82:	d9f0      	bls.n	8005f66 <USB_SetCurrentMode+0x2e>
 8005f84:	e01a      	b.n	8005fbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d115      	bne.n	8005fb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f98:	2001      	movs	r0, #1
 8005f9a:	f7fb f895 	bl	80010c8 <HAL_Delay>
      ms++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fa2c 	bl	8007402 <USB_GetMode>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <USB_SetCurrentMode+0x84>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b31      	cmp	r3, #49	; 0x31
 8005fb4:	d9f0      	bls.n	8005f98 <USB_SetCurrentMode+0x60>
 8005fb6:	e001      	b.n	8005fbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e005      	b.n	8005fc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b32      	cmp	r3, #50	; 0x32
 8005fc0:	d101      	bne.n	8005fc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	e009      	b.n	8006004 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3340      	adds	r3, #64	; 0x40
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3301      	adds	r3, #1
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b0e      	cmp	r3, #14
 8006008:	d9f2      	bls.n	8005ff0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d11c      	bne.n	800604a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
 8006048:	e00b      	b.n	8006062 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006068:	461a      	mov	r2, r3
 800606a:	2300      	movs	r3, #0
 800606c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	4619      	mov	r1, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	461a      	mov	r2, r3
 800607e:	680b      	ldr	r3, [r1, #0]
 8006080:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10c      	bne.n	80060a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800608e:	2100      	movs	r1, #0
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f965 	bl	8006360 <USB_SetDevSpeed>
 8006096:	e008      	b.n	80060aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006098:	2101      	movs	r1, #1
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f960 	bl	8006360 <USB_SetDevSpeed>
 80060a0:	e003      	b.n	80060aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060a2:	2103      	movs	r1, #3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f95b 	bl	8006360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060aa:	2110      	movs	r1, #16
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8f3 	bl	8006298 <USB_FlushTxFifo>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f91f 	bl	8006300 <USB_FlushRxFifo>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	461a      	mov	r2, r3
 80060d4:	2300      	movs	r3, #0
 80060d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060de:	461a      	mov	r2, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	e043      	b.n	800617e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610c:	d118      	bne.n	8006140 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	461a      	mov	r2, r3
 8006122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e013      	b.n	8006152 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	461a      	mov	r2, r3
 8006138:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	e008      	b.n	8006152 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	461a      	mov	r2, r3
 800614e:	2300      	movs	r3, #0
 8006150:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	461a      	mov	r2, r3
 8006160:	2300      	movs	r3, #0
 8006162:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	461a      	mov	r2, r3
 8006172:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006176:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3301      	adds	r3, #1
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d3b7      	bcc.n	80060f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	e043      	b.n	8006214 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800619e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a2:	d118      	bne.n	80061d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	461a      	mov	r2, r3
 80061b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	e013      	b.n	80061e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	461a      	mov	r2, r3
 80061ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e008      	b.n	80061e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	461a      	mov	r2, r3
 80061e4:	2300      	movs	r3, #0
 80061e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	461a      	mov	r2, r3
 8006208:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800620c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d3b7      	bcc.n	800618c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800622e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800623c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f043 0210 	orr.w	r2, r3, #16
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <USB_DevInit+0x2c4>)
 8006256:	4313      	orrs	r3, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800625c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f043 0208 	orr.w	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800627c:	f043 0304 	orr.w	r3, r3, #4
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006290:	b004      	add	sp, #16
 8006292:	4770      	bx	lr
 8006294:	803c3800 	.word	0x803c3800

08006298 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4a13      	ldr	r2, [pc, #76]	; (80062fc <USB_FlushTxFifo+0x64>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e01b      	b.n	80062f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	daf2      	bge.n	80062a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	019b      	lsls	r3, r3, #6
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a08      	ldr	r2, [pc, #32]	; (80062fc <USB_FlushTxFifo+0x64>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d901      	bls.n	80062e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e006      	b.n	80062f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d0f0      	beq.n	80062d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	00030d40 	.word	0x00030d40

08006300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a11      	ldr	r2, [pc, #68]	; (800635c <USB_FlushRxFifo+0x5c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e018      	b.n	8006350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	daf2      	bge.n	800630c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2210      	movs	r2, #16
 800632e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a08      	ldr	r2, [pc, #32]	; (800635c <USB_FlushRxFifo+0x5c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e006      	b.n	8006350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d0f0      	beq.n	8006330 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	00030d40 	.word	0x00030d40

08006360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006380:	4313      	orrs	r3, r2
 8006382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006392:	b480      	push	{r7}
 8006394:	b087      	sub	sp, #28
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0306 	and.w	r3, r3, #6
 80063aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]
 80063b6:	e00a      	b.n	80063ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d002      	beq.n	80063c4 <USB_GetDevSpeed+0x32>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d102      	bne.n	80063ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063c4:	2302      	movs	r3, #2
 80063c6:	75fb      	strb	r3, [r7, #23]
 80063c8:	e001      	b.n	80063ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063ca:	230f      	movs	r3, #15
 80063cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d13a      	bne.n	800646e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006416:	4313      	orrs	r3, r2
 8006418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d155      	bne.n	80064dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	791b      	ldrb	r3, [r3, #4]
 800644a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800644c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	059b      	lsls	r3, r3, #22
 8006452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006454:	4313      	orrs	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e036      	b.n	80064dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	69da      	ldr	r2, [r3, #28]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648c:	4313      	orrs	r3, r2
 800648e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11a      	bne.n	80064dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	791b      	ldrb	r3, [r3, #4]
 80064c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064c2:	430b      	orrs	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d161      	bne.n	80065cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800651a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800651e:	d11f      	bne.n	8006560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800653e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f303 	lsl.w	r3, r1, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4013      	ands	r3, r2
 8006582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f303 	lsl.w	r3, r1, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a4:	4013      	ands	r3, r2
 80065a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	0159      	lsls	r1, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	440b      	add	r3, r1
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	4619      	mov	r1, r3
 80065c4:	4b35      	ldr	r3, [pc, #212]	; (800669c <USB_DeactivateEndpoint+0x1b0>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	600b      	str	r3, [r1, #0]
 80065ca:	e060      	b.n	800668e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d11f      	bne.n	8006624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	041b      	lsls	r3, r3, #16
 800663c:	43db      	mvns	r3, r3
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006644:	4013      	ands	r3, r2
 8006646:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	43db      	mvns	r3, r3
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006668:	4013      	ands	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	0159      	lsls	r1, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	440b      	add	r3, r1
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	4619      	mov	r1, r3
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <USB_DeactivateEndpoint+0x1b4>)
 800668a:	4013      	ands	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	ec337800 	.word	0xec337800
 80066a0:	eff37800 	.word	0xeff37800

080066a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	f040 815c 	bne.w	800697e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d132      	bne.n	8006734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	0cdb      	lsrs	r3, r3, #19
 800672e:	04db      	lsls	r3, r3, #19
 8006730:	6113      	str	r3, [r2, #16]
 8006732:	e074      	b.n	800681e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674e:	0cdb      	lsrs	r3, r3, #19
 8006750:	04db      	lsls	r3, r3, #19
 8006752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6999      	ldr	r1, [r3, #24]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	440b      	add	r3, r1
 8006790:	1e59      	subs	r1, r3, #1
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	fbb1 f3f3 	udiv	r3, r1, r3
 800679a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800679c:	4b9d      	ldr	r3, [pc, #628]	; (8006a14 <USB_EPStartXfer+0x370>)
 800679e:	400b      	ands	r3, r1
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	0148      	lsls	r0, r1, #5
 80067a4:	69f9      	ldr	r1, [r7, #28]
 80067a6:	4401      	add	r1, r0
 80067a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ac:	4313      	orrs	r3, r2
 80067ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c6:	69b9      	ldr	r1, [r7, #24]
 80067c8:	0148      	lsls	r0, r1, #5
 80067ca:	69f9      	ldr	r1, [r7, #28]
 80067cc:	4401      	add	r1, r0
 80067ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067d2:	4313      	orrs	r3, r2
 80067d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d11f      	bne.n	800681e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800681c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d14b      	bne.n	80068bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	791b      	ldrb	r3, [r3, #4]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d128      	bne.n	800689a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d110      	bne.n	800687a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e00f      	b.n	800689a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e133      	b.n	8006b24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	791b      	ldrb	r3, [r3, #4]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d015      	beq.n	8006910 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 811b 	beq.w	8006b24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	2101      	movs	r1, #1
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	69f9      	ldr	r1, [r7, #28]
 8006906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690a:	4313      	orrs	r3, r2
 800690c:	634b      	str	r3, [r1, #52]	; 0x34
 800690e:	e109      	b.n	8006b24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d110      	bne.n	8006942 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e00f      	b.n	8006962 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006960:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6919      	ldr	r1, [r3, #16]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	b298      	uxth	r0, r3
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	4603      	mov	r3, r0
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fade 	bl	8006f38 <USB_WritePacket>
 800697c:	e0d2      	b.n	8006b24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006998:	0cdb      	lsrs	r3, r3, #19
 800699a:	04db      	lsls	r3, r3, #19
 800699c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d126      	bne.n	8006a18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069e0:	69b9      	ldr	r1, [r7, #24]
 80069e2:	0148      	lsls	r0, r1, #5
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	4401      	add	r1, r0
 80069e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069ec:	4313      	orrs	r3, r2
 80069ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a0e:	6113      	str	r3, [r2, #16]
 8006a10:	e03a      	b.n	8006a88 <USB_EPStartXfer+0x3e4>
 8006a12:	bf00      	nop
 8006a14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	8afa      	ldrh	r2, [r7, #22]
 8006a34:	fb03 f202 	mul.w	r2, r3, r2
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	8afb      	ldrh	r3, [r7, #22]
 8006a4c:	04d9      	lsls	r1, r3, #19
 8006a4e:	4b38      	ldr	r3, [pc, #224]	; (8006b30 <USB_EPStartXfer+0x48c>)
 8006a50:	400b      	ands	r3, r1
 8006a52:	69b9      	ldr	r1, [r7, #24]
 8006a54:	0148      	lsls	r0, r1, #5
 8006a56:	69f9      	ldr	r1, [r7, #28]
 8006a58:	4401      	add	r1, r0
 8006a5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	0148      	lsls	r0, r1, #5
 8006a7c:	69f9      	ldr	r1, [r7, #28]
 8006a7e:	4401      	add	r1, r0
 8006a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a84:	4313      	orrs	r3, r2
 8006a86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d10d      	bne.n	8006aaa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6919      	ldr	r1, [r3, #16]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	460a      	mov	r2, r1
 8006aa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	791b      	ldrb	r3, [r3, #4]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d128      	bne.n	8006b04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d110      	bne.n	8006ae4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	69fa      	ldr	r2, [r7, #28]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e00f      	b.n	8006b04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	1ff80000 	.word	0x1ff80000

08006b34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f040 80ce 	bne.w	8006cf2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d132      	bne.n	8006bc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbc:	0cdb      	lsrs	r3, r3, #19
 8006bbe:	04db      	lsls	r3, r3, #19
 8006bc0:	6113      	str	r3, [r2, #16]
 8006bc2:	e04e      	b.n	8006c62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bde:	0cdb      	lsrs	r3, r3, #19
 8006be0:	04db      	lsls	r3, r3, #19
 8006be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d903      	bls.n	8006c1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c52:	6939      	ldr	r1, [r7, #16]
 8006c54:	0148      	lsls	r0, r1, #5
 8006c56:	6979      	ldr	r1, [r7, #20]
 8006c58:	4401      	add	r1, r0
 8006c5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d11e      	bne.n	8006ca6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	e097      	b.n	8006dd6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8083 	beq.w	8006dd6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cec:	4313      	orrs	r3, r2
 8006cee:	634b      	str	r3, [r1, #52]	; 0x34
 8006cf0:	e071      	b.n	8006dd6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0c:	0cdb      	lsrs	r3, r3, #19
 8006d0e:	04db      	lsls	r3, r3, #19
 8006d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d84:	6939      	ldr	r1, [r7, #16]
 8006d86:	0148      	lsls	r0, r1, #5
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	4401      	add	r1, r0
 8006d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d90:	4313      	orrs	r3, r2
 8006d92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d10d      	bne.n	8006db6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6919      	ldr	r1, [r3, #16]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	460a      	mov	r2, r1
 8006db4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d14a      	bne.n	8006e98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e1a:	f040 8086 	bne.w	8006f2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	7812      	ldrb	r2, [r2, #0]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d902      	bls.n	8006e7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7a:	e056      	b.n	8006f2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e94:	d0e7      	beq.n	8006e66 <USB_EPStopXfer+0x82>
 8006e96:	e048      	b.n	8006f2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb0:	d13b      	bne.n	8006f2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ed4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d902      	bls.n	8006f10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f0e:	e00c      	b.n	8006f2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f28:	d0e7      	beq.n	8006efa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4611      	mov	r1, r2
 8006f44:	461a      	mov	r2, r3
 8006f46:	460b      	mov	r3, r1
 8006f48:	71fb      	strb	r3, [r7, #7]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d123      	bne.n	8006fa6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f5e:	88bb      	ldrh	r3, [r7, #4]
 8006f60:	3303      	adds	r3, #3
 8006f62:	089b      	lsrs	r3, r3, #2
 8006f64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e018      	b.n	8006f9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	031a      	lsls	r2, r3, #12
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f78:	461a      	mov	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	3301      	adds	r3, #1
 8006f96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3e2      	bcc.n	8006f6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3724      	adds	r7, #36	; 0x24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b08b      	sub	sp, #44	; 0x2c
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	089b      	lsrs	r3, r3, #2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fda:	2300      	movs	r3, #0
 8006fdc:	623b      	str	r3, [r7, #32]
 8006fde:	e014      	b.n	800700a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	3301      	adds	r3, #1
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	3301      	adds	r3, #1
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	3301      	adds	r3, #1
 8007008:	623b      	str	r3, [r7, #32]
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3e6      	bcc.n	8006fe0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007012:	8bfb      	ldrh	r3, [r7, #30]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01e      	beq.n	8007056 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007022:	461a      	mov	r2, r3
 8007024:	f107 0310 	add.w	r3, r7, #16
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	b2da      	uxtb	r2, r3
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	701a      	strb	r2, [r3, #0]
      i++;
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	3301      	adds	r3, #1
 8007042:	623b      	str	r3, [r7, #32]
      pDest++;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	3301      	adds	r3, #1
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800704a:	8bfb      	ldrh	r3, [r7, #30]
 800704c:	3b01      	subs	r3, #1
 800704e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007050:	8bfb      	ldrh	r3, [r7, #30]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1ea      	bne.n	800702c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007058:	4618      	mov	r0, r3
 800705a:	372c      	adds	r7, #44	; 0x2c
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d12c      	bne.n	80070da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	db12      	blt.n	80070b8 <USB_EPSetStall+0x54>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00f      	beq.n	80070b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e02b      	b.n	8007132 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db12      	blt.n	8007112 <USB_EPSetStall+0xae>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007110:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	440a      	add	r2, r1
 8007128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007130:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d128      	bne.n	80071ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	440a      	add	r2, r1
 8007172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800717a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	791b      	ldrb	r3, [r3, #4]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d003      	beq.n	800718c <USB_EPClearStall+0x4c>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	791b      	ldrb	r3, [r3, #4]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d138      	bne.n	80071fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	e027      	b.n	80071fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d003      	beq.n	80071de <USB_EPClearStall+0x9e>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d10f      	bne.n	80071fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800722a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800722e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007286:	f023 0302 	bic.w	r3, r3, #2
 800728a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072b4:	f023 0303 	bic.w	r3, r3, #3
 80072b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4013      	ands	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	4013      	ands	r3, r2
 8007324:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	0c1b      	lsrs	r3, r3, #16
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	4013      	ands	r3, r2
 8007358:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	b29b      	uxth	r3, r3
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4013      	ands	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007398:	68bb      	ldr	r3, [r7, #8]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b087      	sub	sp, #28
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	fa22 f303 	lsr.w	r3, r2, r3
 80073d6:	01db      	lsls	r3, r3, #7
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4013      	ands	r3, r2
 80073f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073f4:	68bb      	ldr	r3, [r7, #8]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0301 	and.w	r3, r3, #1
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007438:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800743c:	f023 0307 	bic.w	r3, r3, #7
 8007440:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007454:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	460b      	mov	r3, r1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	333c      	adds	r3, #60	; 0x3c
 800747a:	3304      	adds	r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4a26      	ldr	r2, [pc, #152]	; (800751c <USB_EP0_OutStart+0xb8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d90a      	bls.n	800749e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007498:	d101      	bne.n	800749e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e037      	b.n	800750e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	461a      	mov	r2, r3
 80074a6:	2300      	movs	r3, #0
 80074a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074cc:	f043 0318 	orr.w	r3, r3, #24
 80074d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80074e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d10f      	bne.n	800750c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007506:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800750a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	4f54300a 	.word	0x4f54300a

08007520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4a13      	ldr	r2, [pc, #76]	; (8007584 <USB_CoreReset+0x64>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e01b      	b.n	8007576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	daf2      	bge.n	800752c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f043 0201 	orr.w	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a09      	ldr	r2, [pc, #36]	; (8007584 <USB_CoreReset+0x64>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d901      	bls.n	8007568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e006      	b.n	8007576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	d0f0      	beq.n	8007556 <USB_CoreReset+0x36>

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	00030d40 	.word	0x00030d40

08007588 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007594:	2010      	movs	r0, #16
 8007596:	f002 f929 	bl	80097ec <USBD_static_malloc>
 800759a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32b0      	adds	r2, #176	; 0xb0
 80075ac:	2100      	movs	r1, #0
 80075ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075b2:	2302      	movs	r3, #2
 80075b4:	e048      	b.n	8007648 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	32b0      	adds	r2, #176	; 0xb0
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32b0      	adds	r2, #176	; 0xb0
 80075d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7c1b      	ldrb	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10d      	bne.n	80075fe <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <USBD_HID_Init+0xc8>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	f003 020f 	and.w	r2, r3, #15
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	3326      	adds	r3, #38	; 0x26
 80075f8:	2207      	movs	r2, #7
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e00c      	b.n	8007618 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80075fe:	4b14      	ldr	r3, [pc, #80]	; (8007650 <USBD_HID_Init+0xc8>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	3326      	adds	r3, #38	; 0x26
 8007614:	220a      	movs	r2, #10
 8007616:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007618:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <USBD_HID_Init+0xc8>)
 800761a:	7819      	ldrb	r1, [r3, #0]
 800761c:	2304      	movs	r3, #4
 800761e:	2203      	movs	r2, #3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 ffd2 	bl	80095ca <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007626:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <USBD_HID_Init+0xc8>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	3324      	adds	r3, #36	; 0x24
 800763c:	2201      	movs	r2, #1
 800763e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	200000bf 	.word	0x200000bf

08007654 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007660:	4b1f      	ldr	r3, [pc, #124]	; (80076e0 <USBD_HID_DeInit+0x8c>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 ffd5 	bl	8009616 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800766c:	4b1c      	ldr	r3, [pc, #112]	; (80076e0 <USBD_HID_DeInit+0x8c>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3324      	adds	r3, #36	; 0x24
 8007682:	2200      	movs	r2, #0
 8007684:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007686:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <USBD_HID_DeInit+0x8c>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 020f 	and.w	r2, r3, #15
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	3326      	adds	r3, #38	; 0x26
 800769c:	2200      	movs	r2, #0
 800769e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32b0      	adds	r2, #176	; 0xb0
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d011      	beq.n	80076d6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	32b0      	adds	r2, #176	; 0xb0
 80076bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 f8a1 	bl	8009808 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	; 0xb0
 80076d0:	2100      	movs	r1, #0
 80076d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	200000bf 	.word	0x200000bf

080076e4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	32b0      	adds	r2, #176	; 0xb0
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	e0e8      	b.n	80078e2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007718:	2b00      	cmp	r3, #0
 800771a:	d046      	beq.n	80077aa <USBD_HID_Setup+0xc6>
 800771c:	2b20      	cmp	r3, #32
 800771e:	f040 80d8 	bne.w	80078d2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	3b02      	subs	r3, #2
 8007728:	2b09      	cmp	r3, #9
 800772a:	d836      	bhi.n	800779a <USBD_HID_Setup+0xb6>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <USBD_HID_Setup+0x50>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	0800778b 	.word	0x0800778b
 8007738:	0800776b 	.word	0x0800776b
 800773c:	0800779b 	.word	0x0800779b
 8007740:	0800779b 	.word	0x0800779b
 8007744:	0800779b 	.word	0x0800779b
 8007748:	0800779b 	.word	0x0800779b
 800774c:	0800779b 	.word	0x0800779b
 8007750:	0800779b 	.word	0x0800779b
 8007754:	08007779 	.word	0x08007779
 8007758:	0800775d 	.word	0x0800775d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	885b      	ldrh	r3, [r3, #2]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	601a      	str	r2, [r3, #0]
          break;
 8007768:	e01e      	b.n	80077a8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fbd5 	bl	8008f20 <USBD_CtlSendData>
          break;
 8007776:	e017      	b.n	80077a8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	b29b      	uxth	r3, r3
 8007780:	b2db      	uxtb	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	605a      	str	r2, [r3, #4]
          break;
 8007788:	e00e      	b.n	80077a8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3304      	adds	r3, #4
 800778e:	2201      	movs	r2, #1
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fbc4 	bl	8008f20 <USBD_CtlSendData>
          break;
 8007798:	e006      	b.n	80077a8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fb4e 	bl	8008e3e <USBD_CtlError>
          ret = USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	75fb      	strb	r3, [r7, #23]
          break;
 80077a6:	bf00      	nop
      }
      break;
 80077a8:	e09a      	b.n	80078e0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b0b      	cmp	r3, #11
 80077b0:	f200 8086 	bhi.w	80078c0 <USBD_HID_Setup+0x1dc>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <USBD_HID_Setup+0xd8>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077ed 	.word	0x080077ed
 80077c0:	080078cf 	.word	0x080078cf
 80077c4:	080078c1 	.word	0x080078c1
 80077c8:	080078c1 	.word	0x080078c1
 80077cc:	080078c1 	.word	0x080078c1
 80077d0:	080078c1 	.word	0x080078c1
 80077d4:	08007817 	.word	0x08007817
 80077d8:	080078c1 	.word	0x080078c1
 80077dc:	080078c1 	.word	0x080078c1
 80077e0:	080078c1 	.word	0x080078c1
 80077e4:	0800786f 	.word	0x0800786f
 80077e8:	08007899 	.word	0x08007899
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d107      	bne.n	8007808 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077f8:	f107 030a 	add.w	r3, r7, #10
 80077fc:	2202      	movs	r2, #2
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 fb8d 	bl	8008f20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007806:	e063      	b.n	80078d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fb17 	bl	8008e3e <USBD_CtlError>
            ret = USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	75fb      	strb	r3, [r7, #23]
          break;
 8007814:	e05c      	b.n	80078d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	885b      	ldrh	r3, [r3, #2]
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b22      	cmp	r3, #34	; 0x22
 8007820:	d108      	bne.n	8007834 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	88db      	ldrh	r3, [r3, #6]
 8007826:	2b3f      	cmp	r3, #63	; 0x3f
 8007828:	bf28      	it	cs
 800782a:	233f      	movcs	r3, #63	; 0x3f
 800782c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800782e:	4b2f      	ldr	r3, [pc, #188]	; (80078ec <USBD_HID_Setup+0x208>)
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	e015      	b.n	8007860 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	885b      	ldrh	r3, [r3, #2]
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b21      	cmp	r3, #33	; 0x21
 800783e:	d108      	bne.n	8007852 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <USBD_HID_Setup+0x20c>)
 8007842:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b09      	cmp	r3, #9
 800784a:	bf28      	it	cs
 800784c:	2309      	movcs	r3, #9
 800784e:	82bb      	strh	r3, [r7, #20]
 8007850:	e006      	b.n	8007860 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 faf2 	bl	8008e3e <USBD_CtlError>
            ret = USBD_FAIL;
 800785a:	2303      	movs	r3, #3
 800785c:	75fb      	strb	r3, [r7, #23]
            break;
 800785e:	e037      	b.n	80078d0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007860:	8abb      	ldrh	r3, [r7, #20]
 8007862:	461a      	mov	r2, r3
 8007864:	6939      	ldr	r1, [r7, #16]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fb5a 	bl	8008f20 <USBD_CtlSendData>
          break;
 800786c:	e030      	b.n	80078d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d107      	bne.n	800788a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3308      	adds	r3, #8
 800787e:	2201      	movs	r2, #1
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fb4c 	bl	8008f20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007888:	e022      	b.n	80078d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 fad6 	bl	8008e3e <USBD_CtlError>
            ret = USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	75fb      	strb	r3, [r7, #23]
          break;
 8007896:	e01b      	b.n	80078d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d106      	bne.n	80078b2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078b0:	e00e      	b.n	80078d0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 fac2 	bl	8008e3e <USBD_CtlError>
            ret = USBD_FAIL;
 80078ba:	2303      	movs	r3, #3
 80078bc:	75fb      	strb	r3, [r7, #23]
          break;
 80078be:	e007      	b.n	80078d0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fabb 	bl	8008e3e <USBD_CtlError>
          ret = USBD_FAIL;
 80078c8:	2303      	movs	r3, #3
 80078ca:	75fb      	strb	r3, [r7, #23]
          break;
 80078cc:	e000      	b.n	80078d0 <USBD_HID_Setup+0x1ec>
          break;
 80078ce:	bf00      	nop
      }
      break;
 80078d0:	e006      	b.n	80078e0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 fab2 	bl	8008e3e <USBD_CtlError>
      ret = USBD_FAIL;
 80078da:	2303      	movs	r3, #3
 80078dc:	75fb      	strb	r3, [r7, #23]
      break;
 80078de:	bf00      	nop
  }

  return (uint8_t)ret;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000080 	.word	0x20000080
 80078f0:	20000068 	.word	0x20000068

080078f4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	32b0      	adds	r2, #176	; 0xb0
 800790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007910:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	e014      	b.n	8007946 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b03      	cmp	r3, #3
 8007926:	d10d      	bne.n	8007944 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	7b1b      	ldrb	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2201      	movs	r2, #1
 8007934:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <USBD_HID_SendReport+0x5c>)
 8007938:	7819      	ldrb	r1, [r3, #0]
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 ff11 	bl	8009766 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	200000bf 	.word	0x200000bf

08007954 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800795c:	2181      	movs	r1, #129	; 0x81
 800795e:	4809      	ldr	r0, [pc, #36]	; (8007984 <USBD_HID_GetFSCfgDesc+0x30>)
 8007960:	f000 fc35 	bl	80081ce <USBD_GetEpDesc>
 8007964:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	220a      	movs	r2, #10
 8007970:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2222      	movs	r2, #34	; 0x22
 8007976:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000044 	.word	0x20000044

08007988 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007990:	2181      	movs	r1, #129	; 0x81
 8007992:	4809      	ldr	r0, [pc, #36]	; (80079b8 <USBD_HID_GetHSCfgDesc+0x30>)
 8007994:	f000 fc1b 	bl	80081ce <USBD_GetEpDesc>
 8007998:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2207      	movs	r2, #7
 80079a4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2222      	movs	r2, #34	; 0x22
 80079aa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80079ac:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000044 	.word	0x20000044

080079bc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80079c4:	2181      	movs	r1, #129	; 0x81
 80079c6:	4809      	ldr	r0, [pc, #36]	; (80079ec <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80079c8:	f000 fc01 	bl	80081ce <USBD_GetEpDesc>
 80079cc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	220a      	movs	r2, #10
 80079d8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2222      	movs	r2, #34	; 0x22
 80079de:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80079e0:	4b02      	ldr	r3, [pc, #8]	; (80079ec <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000044 	.word	0x20000044

080079f0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	32b0      	adds	r2, #176	; 0xb0
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	220a      	movs	r2, #10
 8007a28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	20000074 	.word	0x20000074

08007a3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e01f      	b.n	8007a94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	79fa      	ldrb	r2, [r7, #7]
 8007a86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 fd37 	bl	80094fc <USBD_LL_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e025      	b.n	8007b00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32ae      	adds	r2, #174	; 0xae
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00f      	beq.n	8007af0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32ae      	adds	r2, #174	; 0xae
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	f107 020e 	add.w	r2, r7, #14
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	4602      	mov	r2, r0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fd3f 	bl	8009594 <USBD_LL_Start>
 8007b16:	4603      	mov	r3, r0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b94:	2303      	movs	r3, #3
 8007b96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 f908 	bl	8008dca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d01a      	beq.n	8007c14 <USBD_LL_SetupStage+0x72>
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d822      	bhi.n	8007c28 <USBD_LL_SetupStage+0x86>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <USBD_LL_SetupStage+0x4a>
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d00a      	beq.n	8007c00 <USBD_LL_SetupStage+0x5e>
 8007bea:	e01d      	b.n	8007c28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb5f 	bl	80082b8 <USBD_StdDevReq>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfe:	e020      	b.n	8007c42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fbc7 	bl	800839c <USBD_StdItfReq>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
      break;
 8007c12:	e016      	b.n	8007c42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fc29 	bl	8008474 <USBD_StdEPReq>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
      break;
 8007c26:	e00c      	b.n	8007c42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fd0c 	bl	8009654 <USBD_LL_StallEP>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c40:	bf00      	nop
  }

  return ret;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	460b      	mov	r3, r1
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d16e      	bne.n	8007d42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	f040 8098 	bne.w	8007da8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d913      	bls.n	8007cac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	1ad2      	subs	r2, r2, r3
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	bf28      	it	cs
 8007c9e:	4613      	movcs	r3, r2
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f001 f967 	bl	8008f78 <USBD_CtlContinueRx>
 8007caa:	e07d      	b.n	8007da8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d014      	beq.n	8007ce4 <USBD_LL_DataOutStage+0x98>
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d81d      	bhi.n	8007cfa <USBD_LL_DataOutStage+0xae>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <USBD_LL_DataOutStage+0x7c>
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d003      	beq.n	8007cce <USBD_LL_DataOutStage+0x82>
 8007cc6:	e018      	b.n	8007cfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	75bb      	strb	r3, [r7, #22]
            break;
 8007ccc:	e018      	b.n	8007d00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fa5e 	bl	800819a <USBD_CoreFindIF>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce2:	e00d      	b.n	8007d00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	4619      	mov	r1, r3
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fa60 	bl	80081b4 <USBD_CoreFindEP>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75bb      	strb	r3, [r7, #22]
            break;
 8007cf8:	e002      	b.n	8007d00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75bb      	strb	r3, [r7, #22]
            break;
 8007cfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d00:	7dbb      	ldrb	r3, [r7, #22]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d119      	bne.n	8007d3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d113      	bne.n	8007d3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d12:	7dba      	ldrb	r2, [r7, #22]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	32ae      	adds	r2, #174	; 0xae
 8007d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d22:	7dba      	ldrb	r2, [r7, #22]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d2a:	7dba      	ldrb	r2, [r7, #22]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	32ae      	adds	r2, #174	; 0xae
 8007d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f001 f92d 	bl	8008f9a <USBD_CtlSendStatus>
 8007d40:	e032      	b.n	8007da8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fa31 	bl	80081b4 <USBD_CoreFindEP>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d56:	7dbb      	ldrb	r3, [r7, #22]
 8007d58:	2bff      	cmp	r3, #255	; 0xff
 8007d5a:	d025      	beq.n	8007da8 <USBD_LL_DataOutStage+0x15c>
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d122      	bne.n	8007da8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d117      	bne.n	8007d9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d6e:	7dba      	ldrb	r2, [r7, #22]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	32ae      	adds	r2, #174	; 0xae
 8007d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00f      	beq.n	8007d9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d7e:	7dba      	ldrb	r2, [r7, #22]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d86:	7dba      	ldrb	r2, [r7, #22]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	32ae      	adds	r2, #174	; 0xae
 8007d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	7afa      	ldrb	r2, [r7, #11]
 8007d94:	4611      	mov	r1, r2
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	4798      	blx	r3
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	e000      	b.n	8007daa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b086      	sub	sp, #24
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d16f      	bne.n	8007ea6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d15a      	bne.n	8007e8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d914      	bls.n	8007e0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f001 f8ac 	bl	8008f56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2200      	movs	r2, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f001 fccf 	bl	80097a8 <USBD_LL_PrepareReceive>
 8007e0a:	e03f      	b.n	8007e8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d11c      	bne.n	8007e52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d316      	bcc.n	8007e52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d20f      	bcs.n	8007e52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e32:	2200      	movs	r2, #0
 8007e34:	2100      	movs	r1, #0
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f001 f88d 	bl	8008f56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 fcac 	bl	80097a8 <USBD_LL_PrepareReceive>
 8007e50:	e01c      	b.n	8007e8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d10f      	bne.n	8007e7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e7e:	2180      	movs	r1, #128	; 0x80
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f001 fbe7 	bl	8009654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f001 f89a 	bl	8008fc0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d03a      	beq.n	8007f0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fe42 	bl	8007b20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ea4:	e032      	b.n	8007f0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	4619      	mov	r1, r3
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f97f 	bl	80081b4 <USBD_CoreFindEP>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	2bff      	cmp	r3, #255	; 0xff
 8007ebe:	d025      	beq.n	8007f0c <USBD_LL_DataInStage+0x15a>
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d122      	bne.n	8007f0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d11c      	bne.n	8007f0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ed2:	7dfa      	ldrb	r2, [r7, #23]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	32ae      	adds	r2, #174	; 0xae
 8007ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d014      	beq.n	8007f0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ee2:	7dfa      	ldrb	r2, [r7, #23]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007eea:	7dfa      	ldrb	r2, [r7, #23]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	32ae      	adds	r2, #174	; 0xae
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	7afa      	ldrb	r2, [r7, #11]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	4798      	blx	r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f02:	7dbb      	ldrb	r3, [r7, #22]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f08:	7dbb      	ldrb	r3, [r7, #22]
 8007f0a:	e000      	b.n	8007f0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d014      	beq.n	8007f7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6852      	ldr	r2, [r2, #4]
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 fb21 	bl	80095ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2240      	movs	r2, #64	; 0x40
 8007f94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fb13 	bl	80095ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2240      	movs	r2, #64	; 0x40
 8007fae:	621a      	str	r2, [r3, #32]

  return ret;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	78fa      	ldrb	r2, [r7, #3]
 8007fca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b04      	cmp	r3, #4
 8008018:	d106      	bne.n	8008028 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008020:	b2da      	uxtb	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d110      	bne.n	800806c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	32ae      	adds	r2, #174	; 0xae
 800808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008094:	2303      	movs	r3, #3
 8008096:	e01c      	b.n	80080d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d115      	bne.n	80080d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32ae      	adds	r2, #174	; 0xae
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	; 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	4611      	mov	r1, r2
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	32ae      	adds	r2, #174	; 0xae
 80080f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e01c      	b.n	8008136 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b03      	cmp	r3, #3
 8008106:	d115      	bne.n	8008134 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32ae      	adds	r2, #174	; 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32ae      	adds	r2, #174	; 0xae
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	78fa      	ldrb	r2, [r7, #3]
 800812e:	4611      	mov	r1, r2
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00e      	beq.n	8008190 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6852      	ldr	r2, [r2, #4]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	4611      	mov	r1, r2
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	885b      	ldrh	r3, [r3, #2]
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d920      	bls.n	8008238 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081fe:	e013      	b.n	8008228 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008200:	f107 030a 	add.w	r3, r7, #10
 8008204:	4619      	mov	r1, r3
 8008206:	6978      	ldr	r0, [r7, #20]
 8008208:	f000 f81b 	bl	8008242 <USBD_GetNextDesc>
 800820c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	2b05      	cmp	r3, #5
 8008214:	d108      	bne.n	8008228 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	789b      	ldrb	r3, [r3, #2]
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	429a      	cmp	r2, r3
 8008222:	d008      	beq.n	8008236 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	885b      	ldrh	r3, [r3, #2]
 800822c:	b29a      	uxth	r2, r3
 800822e:	897b      	ldrh	r3, [r7, #10]
 8008230:	429a      	cmp	r2, r3
 8008232:	d8e5      	bhi.n	8008200 <USBD_GetEpDesc+0x32>
 8008234:	e000      	b.n	8008238 <USBD_GetEpDesc+0x6a>
          break;
 8008236:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008238:	693b      	ldr	r3, [r7, #16]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	881a      	ldrh	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	4413      	add	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4413      	add	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	3301      	adds	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800829a:	8a3b      	ldrh	r3, [r7, #16]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	b21a      	sxth	r2, r3
 80082a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b21b      	sxth	r3, r3
 80082a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082aa:	89fb      	ldrh	r3, [r7, #14]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d005      	beq.n	80082de <USBD_StdDevReq+0x26>
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d857      	bhi.n	8008386 <USBD_StdDevReq+0xce>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00f      	beq.n	80082fa <USBD_StdDevReq+0x42>
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d153      	bne.n	8008386 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	32ae      	adds	r2, #174	; 0xae
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e04a      	b.n	8008390 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d83b      	bhi.n	800837a <USBD_StdDevReq+0xc2>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_StdDevReq+0x50>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800835d 	.word	0x0800835d
 800830c:	08008371 	.word	0x08008371
 8008310:	0800837b 	.word	0x0800837b
 8008314:	08008367 	.word	0x08008367
 8008318:	0800837b 	.word	0x0800837b
 800831c:	0800833b 	.word	0x0800833b
 8008320:	08008331 	.word	0x08008331
 8008324:	0800837b 	.word	0x0800837b
 8008328:	08008353 	.word	0x08008353
 800832c:	08008345 	.word	0x08008345
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa3c 	bl	80087b0 <USBD_GetDescriptor>
          break;
 8008338:	e024      	b.n	8008384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fba1 	bl	8008a84 <USBD_SetAddress>
          break;
 8008342:	e01f      	b.n	8008384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fbe0 	bl	8008b0c <USBD_SetConfig>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
          break;
 8008350:	e018      	b.n	8008384 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc83 	bl	8008c60 <USBD_GetConfig>
          break;
 800835a:	e013      	b.n	8008384 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fcb4 	bl	8008ccc <USBD_GetStatus>
          break;
 8008364:	e00e      	b.n	8008384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fce3 	bl	8008d34 <USBD_SetFeature>
          break;
 800836e:	e009      	b.n	8008384 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fd07 	bl	8008d86 <USBD_ClrFeature>
          break;
 8008378:	e004      	b.n	8008384 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fd5e 	bl	8008e3e <USBD_CtlError>
          break;
 8008382:	bf00      	nop
      }
      break;
 8008384:	e004      	b.n	8008390 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fd58 	bl	8008e3e <USBD_CtlError>
      break;
 800838e:	bf00      	nop
  }

  return ret;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop

0800839c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d005      	beq.n	80083c2 <USBD_StdItfReq+0x26>
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d852      	bhi.n	8008460 <USBD_StdItfReq+0xc4>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <USBD_StdItfReq+0x26>
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d14e      	bne.n	8008460 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d840      	bhi.n	8008452 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	889b      	ldrh	r3, [r3, #4]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d836      	bhi.n	8008448 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	889b      	ldrh	r3, [r3, #4]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fed9 	bl	800819a <USBD_CoreFindIF>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2bff      	cmp	r3, #255	; 0xff
 80083f0:	d01d      	beq.n	800842e <USBD_StdItfReq+0x92>
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11a      	bne.n	800842e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083f8:	7bba      	ldrb	r2, [r7, #14]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	32ae      	adds	r2, #174	; 0xae
 80083fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00f      	beq.n	8008428 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008408:	7bba      	ldrb	r2, [r7, #14]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008410:	7bba      	ldrb	r2, [r7, #14]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32ae      	adds	r2, #174	; 0xae
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008426:	e004      	b.n	8008432 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800842c:	e001      	b.n	8008432 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800842e:	2303      	movs	r3, #3
 8008430:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	88db      	ldrh	r3, [r3, #6]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d110      	bne.n	800845c <USBD_StdItfReq+0xc0>
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10d      	bne.n	800845c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fdaa 	bl	8008f9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008446:	e009      	b.n	800845c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fcf7 	bl	8008e3e <USBD_CtlError>
          break;
 8008450:	e004      	b.n	800845c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fcf2 	bl	8008e3e <USBD_CtlError>
          break;
 800845a:	e000      	b.n	800845e <USBD_StdItfReq+0xc2>
          break;
 800845c:	bf00      	nop
      }
      break;
 800845e:	e004      	b.n	800846a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fceb 	bl	8008e3e <USBD_CtlError>
      break;
 8008468:	bf00      	nop
  }

  return ret;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	889b      	ldrh	r3, [r3, #4]
 8008486:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008490:	2b40      	cmp	r3, #64	; 0x40
 8008492:	d007      	beq.n	80084a4 <USBD_StdEPReq+0x30>
 8008494:	2b40      	cmp	r3, #64	; 0x40
 8008496:	f200 817f 	bhi.w	8008798 <USBD_StdEPReq+0x324>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d02a      	beq.n	80084f4 <USBD_StdEPReq+0x80>
 800849e:	2b20      	cmp	r3, #32
 80084a0:	f040 817a 	bne.w	8008798 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fe83 	bl	80081b4 <USBD_CoreFindEP>
 80084ae:	4603      	mov	r3, r0
 80084b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084b2:	7b7b      	ldrb	r3, [r7, #13]
 80084b4:	2bff      	cmp	r3, #255	; 0xff
 80084b6:	f000 8174 	beq.w	80087a2 <USBD_StdEPReq+0x32e>
 80084ba:	7b7b      	ldrb	r3, [r7, #13]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 8170 	bne.w	80087a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084c2:	7b7a      	ldrb	r2, [r7, #13]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084ca:	7b7a      	ldrb	r2, [r7, #13]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	32ae      	adds	r2, #174	; 0xae
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8163 	beq.w	80087a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084dc:	7b7a      	ldrb	r2, [r7, #13]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	32ae      	adds	r2, #174	; 0xae
 80084e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084f2:	e156      	b.n	80087a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d008      	beq.n	800850e <USBD_StdEPReq+0x9a>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	f300 8145 	bgt.w	800878c <USBD_StdEPReq+0x318>
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 809b 	beq.w	800863e <USBD_StdEPReq+0x1ca>
 8008508:	2b01      	cmp	r3, #1
 800850a:	d03c      	beq.n	8008586 <USBD_StdEPReq+0x112>
 800850c:	e13e      	b.n	800878c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d002      	beq.n	8008520 <USBD_StdEPReq+0xac>
 800851a:	2b03      	cmp	r3, #3
 800851c:	d016      	beq.n	800854c <USBD_StdEPReq+0xd8>
 800851e:	e02c      	b.n	800857a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <USBD_StdEPReq+0xce>
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b80      	cmp	r3, #128	; 0x80
 800852a:	d00a      	beq.n	8008542 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f88f 	bl	8009654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f88b 	bl	8009654 <USBD_LL_StallEP>
 800853e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008540:	e020      	b.n	8008584 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fc7a 	bl	8008e3e <USBD_CtlError>
              break;
 800854a:	e01b      	b.n	8008584 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	885b      	ldrh	r3, [r3, #2]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10e      	bne.n	8008572 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <USBD_StdEPReq+0xfe>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d008      	beq.n	8008572 <USBD_StdEPReq+0xfe>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	88db      	ldrh	r3, [r3, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 f871 	bl	8009654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fd11 	bl	8008f9a <USBD_CtlSendStatus>

              break;
 8008578:	e004      	b.n	8008584 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fc5e 	bl	8008e3e <USBD_CtlError>
              break;
 8008582:	bf00      	nop
          }
          break;
 8008584:	e107      	b.n	8008796 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d002      	beq.n	8008598 <USBD_StdEPReq+0x124>
 8008592:	2b03      	cmp	r3, #3
 8008594:	d016      	beq.n	80085c4 <USBD_StdEPReq+0x150>
 8008596:	e04b      	b.n	8008630 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00d      	beq.n	80085ba <USBD_StdEPReq+0x146>
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b80      	cmp	r3, #128	; 0x80
 80085a2:	d00a      	beq.n	80085ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f853 	bl	8009654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ae:	2180      	movs	r1, #128	; 0x80
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 f84f 	bl	8009654 <USBD_LL_StallEP>
 80085b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085b8:	e040      	b.n	800863c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fc3e 	bl	8008e3e <USBD_CtlError>
              break;
 80085c2:	e03b      	b.n	800863c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	885b      	ldrh	r3, [r3, #2]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d136      	bne.n	800863a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 f859 	bl	8009692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fcda 	bl	8008f9a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff fde2 	bl	80081b4 <USBD_CoreFindEP>
 80085f0:	4603      	mov	r3, r0
 80085f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085f4:	7b7b      	ldrb	r3, [r7, #13]
 80085f6:	2bff      	cmp	r3, #255	; 0xff
 80085f8:	d01f      	beq.n	800863a <USBD_StdEPReq+0x1c6>
 80085fa:	7b7b      	ldrb	r3, [r7, #13]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d11c      	bne.n	800863a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008600:	7b7a      	ldrb	r2, [r7, #13]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008608:	7b7a      	ldrb	r2, [r7, #13]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	32ae      	adds	r2, #174	; 0xae
 800860e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d010      	beq.n	800863a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008618:	7b7a      	ldrb	r2, [r7, #13]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32ae      	adds	r2, #174	; 0xae
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800862e:	e004      	b.n	800863a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc03 	bl	8008e3e <USBD_CtlError>
              break;
 8008638:	e000      	b.n	800863c <USBD_StdEPReq+0x1c8>
              break;
 800863a:	bf00      	nop
          }
          break;
 800863c:	e0ab      	b.n	8008796 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d002      	beq.n	8008650 <USBD_StdEPReq+0x1dc>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d032      	beq.n	80086b4 <USBD_StdEPReq+0x240>
 800864e:	e097      	b.n	8008780 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <USBD_StdEPReq+0x1f2>
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d004      	beq.n	8008666 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fbed 	bl	8008e3e <USBD_CtlError>
                break;
 8008664:	e091      	b.n	800878a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800866a:	2b00      	cmp	r3, #0
 800866c:	da0b      	bge.n	8008686 <USBD_StdEPReq+0x212>
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	3310      	adds	r3, #16
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	4413      	add	r3, r2
 8008682:	3304      	adds	r3, #4
 8008684:	e00b      	b.n	800869e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4413      	add	r3, r2
 800869c:	3304      	adds	r3, #4
 800869e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2202      	movs	r2, #2
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fc37 	bl	8008f20 <USBD_CtlSendData>
              break;
 80086b2:	e06a      	b.n	800878a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	da11      	bge.n	80086e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	f003 020f 	and.w	r2, r3, #15
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3324      	adds	r3, #36	; 0x24
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d117      	bne.n	8008706 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fbb0 	bl	8008e3e <USBD_CtlError>
                  break;
 80086de:	e054      	b.n	800878a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	f003 020f 	and.w	r2, r3, #15
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fb9d 	bl	8008e3e <USBD_CtlError>
                  break;
 8008704:	e041      	b.n	800878a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800870a:	2b00      	cmp	r3, #0
 800870c:	da0b      	bge.n	8008726 <USBD_StdEPReq+0x2b2>
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	3310      	adds	r3, #16
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	3304      	adds	r3, #4
 8008724:	e00b      	b.n	800873e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	4413      	add	r3, r2
 800873c:	3304      	adds	r3, #4
 800873e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <USBD_StdEPReq+0x2d8>
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d103      	bne.n	8008754 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e00e      	b.n	8008772 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 ffb9 	bl	80096d0 <USBD_LL_IsStallEP>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e002      	b.n	8008772 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2202      	movs	r2, #2
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fbd1 	bl	8008f20 <USBD_CtlSendData>
              break;
 800877e:	e004      	b.n	800878a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fb5b 	bl	8008e3e <USBD_CtlError>
              break;
 8008788:	bf00      	nop
          }
          break;
 800878a:	e004      	b.n	8008796 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb55 	bl	8008e3e <USBD_CtlError>
          break;
 8008794:	bf00      	nop
      }
      break;
 8008796:	e005      	b.n	80087a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fb4f 	bl	8008e3e <USBD_CtlError>
      break;
 80087a0:	e000      	b.n	80087a4 <USBD_StdEPReq+0x330>
      break;
 80087a2:	bf00      	nop
  }

  return ret;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b06      	cmp	r3, #6
 80087d2:	f200 8128 	bhi.w	8008a26 <USBD_GetDescriptor+0x276>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <USBD_GetDescriptor+0x2c>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	08008811 	.word	0x08008811
 80087e4:	08008851 	.word	0x08008851
 80087e8:	08008a27 	.word	0x08008a27
 80087ec:	08008a27 	.word	0x08008a27
 80087f0:	080089c7 	.word	0x080089c7
 80087f4:	080089f3 	.word	0x080089f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
      break;
 800880e:	e112      	b.n	8008a36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7c1b      	ldrb	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10d      	bne.n	8008834 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	f107 0208 	add.w	r2, r7, #8
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
 8008828:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	2202      	movs	r2, #2
 8008830:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008832:	e100      	b.n	8008a36 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	f107 0208 	add.w	r2, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	2202      	movs	r2, #2
 800884c:	701a      	strb	r2, [r3, #0]
      break;
 800884e:	e0f2      	b.n	8008a36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	885b      	ldrh	r3, [r3, #2]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b05      	cmp	r3, #5
 8008858:	f200 80ac 	bhi.w	80089b4 <USBD_GetDescriptor+0x204>
 800885c:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <USBD_GetDescriptor+0xb4>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	0800887d 	.word	0x0800887d
 8008868:	080088b1 	.word	0x080088b1
 800886c:	080088e5 	.word	0x080088e5
 8008870:	08008919 	.word	0x08008919
 8008874:	0800894d 	.word	0x0800894d
 8008878:	08008981 	.word	0x08008981
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889e:	e091      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 facb 	bl	8008e3e <USBD_CtlError>
            err++;
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	3301      	adds	r3, #1
 80088ac:	72fb      	strb	r3, [r7, #11]
          break;
 80088ae:	e089      	b.n	80089c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7c12      	ldrb	r2, [r2, #16]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088d2:	e077      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fab1 	bl	8008e3e <USBD_CtlError>
            err++;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	3301      	adds	r3, #1
 80088e0:	72fb      	strb	r3, [r7, #11]
          break;
 80088e2:	e06f      	b.n	80089c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008906:	e05d      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa97 	bl	8008e3e <USBD_CtlError>
            err++;
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	3301      	adds	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
          break;
 8008916:	e055      	b.n	80089c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800893a:	e043      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa7d 	bl	8008e3e <USBD_CtlError>
            err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
          break;
 800894a:	e03b      	b.n	80089c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896e:	e029      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa63 	bl	8008e3e <USBD_CtlError>
            err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
          break;
 800897e:	e021      	b.n	80089c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e00f      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa49 	bl	8008e3e <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e007      	b.n	80089c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa41 	bl	8008e3e <USBD_CtlError>
          err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089c2:	bf00      	nop
      }
      break;
 80089c4:	e037      	b.n	8008a36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7c1b      	ldrb	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d109      	bne.n	80089e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f107 0208 	add.w	r2, r7, #8
 80089da:	4610      	mov	r0, r2
 80089dc:	4798      	blx	r3
 80089de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e0:	e029      	b.n	8008a36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fa2a 	bl	8008e3e <USBD_CtlError>
        err++;
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	3301      	adds	r3, #1
 80089ee:	72fb      	strb	r3, [r7, #11]
      break;
 80089f0:	e021      	b.n	8008a36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7c1b      	ldrb	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10d      	bne.n	8008a16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f107 0208 	add.w	r2, r7, #8
 8008a06:	4610      	mov	r0, r2
 8008a08:	4798      	blx	r3
 8008a0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	2207      	movs	r2, #7
 8008a12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a14:	e00f      	b.n	8008a36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa10 	bl	8008e3e <USBD_CtlError>
        err++;
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	3301      	adds	r3, #1
 8008a22:	72fb      	strb	r3, [r7, #11]
      break;
 8008a24:	e007      	b.n	8008a36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fa08 	bl	8008e3e <USBD_CtlError>
      err++;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	3301      	adds	r3, #1
 8008a32:	72fb      	strb	r3, [r7, #11]
      break;
 8008a34:	bf00      	nop
  }

  if (err != 0U)
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11e      	bne.n	8008a7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	88db      	ldrh	r3, [r3, #6]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d016      	beq.n	8008a72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a44:	893b      	ldrh	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88da      	ldrh	r2, [r3, #6]
 8008a4e:	893b      	ldrh	r3, [r7, #8]
 8008a50:	4293      	cmp	r3, r2
 8008a52:	bf28      	it	cs
 8008a54:	4613      	movcs	r3, r2
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a5a:	893b      	ldrh	r3, [r7, #8]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fa5d 	bl	8008f20 <USBD_CtlSendData>
 8008a66:	e009      	b.n	8008a7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9e7 	bl	8008e3e <USBD_CtlError>
 8008a70:	e004      	b.n	8008a7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa91 	bl	8008f9a <USBD_CtlSendStatus>
 8008a78:	e000      	b.n	8008a7c <USBD_GetDescriptor+0x2cc>
    return;
 8008a7a:	bf00      	nop
  }
}
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop

08008a84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	889b      	ldrh	r3, [r3, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d131      	bne.n	8008afa <USBD_SetAddress+0x76>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	88db      	ldrh	r3, [r3, #6]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d12d      	bne.n	8008afa <USBD_SetAddress+0x76>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa4:	d829      	bhi.n	8008afa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d104      	bne.n	8008ac8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9bc 	bl	8008e3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac6:	e01d      	b.n	8008b04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	7bfa      	ldrb	r2, [r7, #15]
 8008acc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fe27 	bl	8009728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa5d 	bl	8008f9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aee:	e009      	b.n	8008b04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af8:	e004      	b.n	8008b04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f99e 	bl	8008e3e <USBD_CtlError>
  }
}
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	4b4e      	ldr	r3, [pc, #312]	; (8008c5c <USBD_SetConfig+0x150>)
 8008b22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b24:	4b4d      	ldr	r3, [pc, #308]	; (8008c5c <USBD_SetConfig+0x150>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d905      	bls.n	8008b38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f985 	bl	8008e3e <USBD_CtlError>
    return USBD_FAIL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e08c      	b.n	8008c52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d002      	beq.n	8008b4a <USBD_SetConfig+0x3e>
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d029      	beq.n	8008b9c <USBD_SetConfig+0x90>
 8008b48:	e075      	b.n	8008c36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b4a:	4b44      	ldr	r3, [pc, #272]	; (8008c5c <USBD_SetConfig+0x150>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d020      	beq.n	8008b94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b52:	4b42      	ldr	r3, [pc, #264]	; (8008c5c <USBD_SetConfig+0x150>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b5c:	4b3f      	ldr	r3, [pc, #252]	; (8008c5c <USBD_SetConfig+0x150>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fe ffe7 	bl	8007b36 <USBD_SetClassConfig>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f962 	bl	8008e3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b82:	e065      	b.n	8008c50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fa08 	bl	8008f9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b92:	e05d      	b.n	8008c50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fa00 	bl	8008f9a <USBD_CtlSendStatus>
      break;
 8008b9a:	e059      	b.n	8008c50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b9c:	4b2f      	ldr	r3, [pc, #188]	; (8008c5c <USBD_SetConfig+0x150>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d112      	bne.n	8008bca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bac:	4b2b      	ldr	r3, [pc, #172]	; (8008c5c <USBD_SetConfig+0x150>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bb6:	4b29      	ldr	r3, [pc, #164]	; (8008c5c <USBD_SetConfig+0x150>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7fe ffd6 	bl	8007b6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f9e9 	bl	8008f9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bc8:	e042      	b.n	8008c50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bca:	4b24      	ldr	r3, [pc, #144]	; (8008c5c <USBD_SetConfig+0x150>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d02a      	beq.n	8008c2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fe ffc4 	bl	8007b6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008be6:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <USBD_SetConfig+0x150>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bf0:	4b1a      	ldr	r3, [pc, #104]	; (8008c5c <USBD_SetConfig+0x150>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7fe ff9d 	bl	8007b36 <USBD_SetClassConfig>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00f      	beq.n	8008c26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f918 	bl	8008e3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fe ffa9 	bl	8007b6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c24:	e014      	b.n	8008c50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f9b7 	bl	8008f9a <USBD_CtlSendStatus>
      break;
 8008c2c:	e010      	b.n	8008c50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f9b3 	bl	8008f9a <USBD_CtlSendStatus>
      break;
 8008c34:	e00c      	b.n	8008c50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f900 	bl	8008e3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c3e:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <USBD_SetConfig+0x150>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fe ff92 	bl	8007b6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4e:	bf00      	nop
  }

  return ret;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000258 	.word	0x20000258

08008c60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	88db      	ldrh	r3, [r3, #6]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d004      	beq.n	8008c7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f8e2 	bl	8008e3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c7a:	e023      	b.n	8008cc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	dc02      	bgt.n	8008c8e <USBD_GetConfig+0x2e>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc03      	bgt.n	8008c94 <USBD_GetConfig+0x34>
 8008c8c:	e015      	b.n	8008cba <USBD_GetConfig+0x5a>
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d00b      	beq.n	8008caa <USBD_GetConfig+0x4a>
 8008c92:	e012      	b.n	8008cba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f93c 	bl	8008f20 <USBD_CtlSendData>
        break;
 8008ca8:	e00c      	b.n	8008cc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3304      	adds	r3, #4
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f934 	bl	8008f20 <USBD_CtlSendData>
        break;
 8008cb8:	e004      	b.n	8008cc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8be 	bl	8008e3e <USBD_CtlError>
        break;
 8008cc2:	bf00      	nop
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d81e      	bhi.n	8008d22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	88db      	ldrh	r3, [r3, #6]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d004      	beq.n	8008cf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f8a5 	bl	8008e3e <USBD_CtlError>
        break;
 8008cf4:	e01a      	b.n	8008d2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f043 0202 	orr.w	r2, r3, #2
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	330c      	adds	r3, #12
 8008d16:	2202      	movs	r2, #2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f900 	bl	8008f20 <USBD_CtlSendData>
      break;
 8008d20:	e004      	b.n	8008d2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f88a 	bl	8008e3e <USBD_CtlError>
      break;
 8008d2a:	bf00      	nop
  }
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	885b      	ldrh	r3, [r3, #2]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d107      	bne.n	8008d56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f923 	bl	8008f9a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d54:	e013      	b.n	8008d7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	885b      	ldrh	r3, [r3, #2]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d10b      	bne.n	8008d76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	889b      	ldrh	r3, [r3, #4]
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f913 	bl	8008f9a <USBD_CtlSendStatus>
}
 8008d74:	e003      	b.n	8008d7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f860 	bl	8008e3e <USBD_CtlError>
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d80b      	bhi.n	8008db6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	885b      	ldrh	r3, [r3, #2]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d10c      	bne.n	8008dc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8f3 	bl	8008f9a <USBD_CtlSendStatus>
      }
      break;
 8008db4:	e004      	b.n	8008dc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f840 	bl	8008e3e <USBD_CtlError>
      break;
 8008dbe:	e000      	b.n	8008dc2 <USBD_ClrFeature+0x3c>
      break;
 8008dc0:	bf00      	nop
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	781a      	ldrb	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f7ff fa41 	bl	800827c <SWAPBYTE>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3301      	adds	r3, #1
 8008e06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff fa34 	bl	800827c <SWAPBYTE>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff fa27 	bl	800827c <SWAPBYTE>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	80da      	strh	r2, [r3, #6]
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e48:	2180      	movs	r1, #128	; 0x80
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fc02 	bl	8009654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e50:	2100      	movs	r1, #0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fbfe 	bl	8009654 <USBD_LL_StallEP>
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d036      	beq.n	8008ee4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e7a:	6938      	ldr	r0, [r7, #16]
 8008e7c:	f000 f836 	bl	8008eec <USBD_GetLen>
 8008e80:	4603      	mov	r3, r0
 8008e82:	3301      	adds	r3, #1
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	4413      	add	r3, r2
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7812      	ldrb	r2, [r2, #0]
 8008e98:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	3301      	adds	r3, #1
 8008eae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eb0:	e013      	b.n	8008eda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	7812      	ldrb	r2, [r2, #0]
 8008ebc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
    idx++;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	4413      	add	r3, r2
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e7      	bne.n	8008eb2 <USBD_GetString+0x52>
 8008ee2:	e000      	b.n	8008ee6 <USBD_GetString+0x86>
    return;
 8008ee4:	bf00      	nop
  }
}
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008efc:	e005      	b.n	8008f0a <USBD_GetLen+0x1e>
  {
    len++;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	3301      	adds	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f5      	bne.n	8008efe <USBD_GetLen+0x12>
  }

  return len;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	2100      	movs	r1, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fc0d 	bl	8009766 <USBD_LL_Transmit>

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	2100      	movs	r1, #0
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fbfc 	bl	8009766 <USBD_LL_Transmit>

  return USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	2100      	movs	r1, #0
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 fc0c 	bl	80097a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008faa:	2300      	movs	r3, #0
 8008fac:	2200      	movs	r2, #0
 8008fae:	2100      	movs	r1, #0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fbd8 	bl	8009766 <USBD_LL_Transmit>

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2205      	movs	r2, #5
 8008fcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fbe6 	bl	80097a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fec:	2200      	movs	r2, #0
 8008fee:	490e      	ldr	r1, [pc, #56]	; (8009028 <MX_USB_DEVICE_Init+0x40>)
 8008ff0:	480e      	ldr	r0, [pc, #56]	; (800902c <MX_USB_DEVICE_Init+0x44>)
 8008ff2:	f7fe fd23 	bl	8007a3c <USBD_Init>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ffc:	f7f7 fe8e 	bl	8000d1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009000:	490b      	ldr	r1, [pc, #44]	; (8009030 <MX_USB_DEVICE_Init+0x48>)
 8009002:	480a      	ldr	r0, [pc, #40]	; (800902c <MX_USB_DEVICE_Init+0x44>)
 8009004:	f7fe fd4a 	bl	8007a9c <USBD_RegisterClass>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800900e:	f7f7 fe85 	bl	8000d1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009012:	4806      	ldr	r0, [pc, #24]	; (800902c <MX_USB_DEVICE_Init+0x44>)
 8009014:	f7fe fd78 	bl	8007b08 <USBD_Start>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800901e:	f7f7 fe7d 	bl	8000d1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200000c0 	.word	0x200000c0
 800902c:	2000025c 	.word	0x2000025c
 8009030:	2000000c 	.word	0x2000000c

08009034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2212      	movs	r2, #18
 8009044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009046:	4b03      	ldr	r3, [pc, #12]	; (8009054 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	200000dc 	.word	0x200000dc

08009058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2204      	movs	r2, #4
 8009068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200000f0 	.word	0x200000f0

0800907c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	; (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009094:	f7ff fee4 	bl	8008e60 <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a0:	f7ff fede 	bl	8008e60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000538 	.word	0x20000538
 80090b4:	080098e4 	.word	0x080098e4

080090b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090c8:	4804      	ldr	r0, [pc, #16]	; (80090dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ca:	f7ff fec9 	bl	8008e60 <USBD_GetString>
  return USBD_StrDesc;
 80090ce:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000538 	.word	0x20000538
 80090dc:	080098ec 	.word	0x080098ec

080090e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	221a      	movs	r2, #26
 80090f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090f2:	f000 f843 	bl	800917c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090f6:	4b02      	ldr	r3, [pc, #8]	; (8009100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	200000f4 	.word	0x200000f4

08009104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4907      	ldr	r1, [pc, #28]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800911a:	4808      	ldr	r0, [pc, #32]	; (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 800911c:	f7ff fea0 	bl	8008e60 <USBD_GetString>
 8009120:	e004      	b.n	800912c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4904      	ldr	r1, [pc, #16]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009126:	4805      	ldr	r0, [pc, #20]	; (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009128:	f7ff fe9a 	bl	8008e60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800912c:	4b02      	ldr	r3, [pc, #8]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000538 	.word	0x20000538
 800913c:	08009900 	.word	0x08009900

08009140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4907      	ldr	r1, [pc, #28]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009156:	4808      	ldr	r0, [pc, #32]	; (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009158:	f7ff fe82 	bl	8008e60 <USBD_GetString>
 800915c:	e004      	b.n	8009168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009162:	4805      	ldr	r0, [pc, #20]	; (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009164:	f7ff fe7c 	bl	8008e60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000538 	.word	0x20000538
 8009178:	0800990c 	.word	0x0800990c

0800917c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <Get_SerialNum+0x44>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <Get_SerialNum+0x48>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800918e:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <Get_SerialNum+0x4c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d009      	beq.n	80091b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091a2:	2208      	movs	r2, #8
 80091a4:	4909      	ldr	r1, [pc, #36]	; (80091cc <Get_SerialNum+0x50>)
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f814 	bl	80091d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ac:	2204      	movs	r2, #4
 80091ae:	4908      	ldr	r1, [pc, #32]	; (80091d0 <Get_SerialNum+0x54>)
 80091b0:	68b8      	ldr	r0, [r7, #8]
 80091b2:	f000 f80f 	bl	80091d4 <IntToUnicode>
  }
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	1fff7a10 	.word	0x1fff7a10
 80091c4:	1fff7a14 	.word	0x1fff7a14
 80091c8:	1fff7a18 	.word	0x1fff7a18
 80091cc:	200000f6 	.word	0x200000f6
 80091d0:	20000106 	.word	0x20000106

080091d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
 80091ea:	e027      	b.n	800923c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	0f1b      	lsrs	r3, r3, #28
 80091f0:	2b09      	cmp	r3, #9
 80091f2:	d80b      	bhi.n	800920c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	0f1b      	lsrs	r3, r3, #28
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4619      	mov	r1, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	440b      	add	r3, r1
 8009204:	3230      	adds	r2, #48	; 0x30
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e00a      	b.n	8009222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	0f1b      	lsrs	r3, r3, #28
 8009210:	b2da      	uxtb	r2, r3
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4619      	mov	r1, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	440b      	add	r3, r1
 800921c:	3237      	adds	r2, #55	; 0x37
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	011b      	lsls	r3, r3, #4
 8009226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	3301      	adds	r3, #1
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	4413      	add	r3, r2
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	3301      	adds	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
 800923c:	7dfa      	ldrb	r2, [r7, #23]
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	429a      	cmp	r2, r3
 8009242:	d3d3      	bcc.n	80091ec <IntToUnicode+0x18>
  }
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
	...

08009254 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	; 0x28
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800925c:	f107 0314 	add.w	r3, r7, #20
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	605a      	str	r2, [r3, #4]
 8009266:	609a      	str	r2, [r3, #8]
 8009268:	60da      	str	r2, [r3, #12]
 800926a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009274:	d147      	bne.n	8009306 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009276:	2300      	movs	r3, #0
 8009278:	613b      	str	r3, [r7, #16]
 800927a:	4b25      	ldr	r3, [pc, #148]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927e:	4a24      	ldr	r2, [pc, #144]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	6313      	str	r3, [r2, #48]	; 0x30
 8009286:	4b22      	ldr	r3, [pc, #136]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009298:	2300      	movs	r3, #0
 800929a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929c:	2300      	movs	r3, #0
 800929e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a0:	f107 0314 	add.w	r3, r7, #20
 80092a4:	4619      	mov	r1, r3
 80092a6:	481b      	ldr	r0, [pc, #108]	; (8009314 <HAL_PCD_MspInit+0xc0>)
 80092a8:	f7f8 f874 	bl	8001394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80092b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b2:	2302      	movs	r3, #2
 80092b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ba:	2303      	movs	r3, #3
 80092bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092be:	230a      	movs	r3, #10
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092c2:	f107 0314 	add.w	r3, r7, #20
 80092c6:	4619      	mov	r1, r3
 80092c8:	4812      	ldr	r0, [pc, #72]	; (8009314 <HAL_PCD_MspInit+0xc0>)
 80092ca:	f7f8 f863 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092ce:	4b10      	ldr	r3, [pc, #64]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 80092d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d8:	6353      	str	r3, [r2, #52]	; 0x34
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 80092e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e2:	4a0b      	ldr	r2, [pc, #44]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 80092e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092e8:	6453      	str	r3, [r2, #68]	; 0x44
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_PCD_MspInit+0xbc>)
 80092ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	2043      	movs	r0, #67	; 0x43
 80092fc:	f7f7 ffe3 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009300:	2043      	movs	r0, #67	; 0x43
 8009302:	f7f7 fffc 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009306:	bf00      	nop
 8009308:	3728      	adds	r7, #40	; 0x28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	40023800 	.word	0x40023800
 8009314:	40020000 	.word	0x40020000

08009318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fe fc37 	bl	8007ba2 <USBD_LL_SetupStage>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	4619      	mov	r1, r3
 8009366:	f7fe fc71 	bl	8007c4c <USBD_LL_DataOutStage>
}
 800936a:	bf00      	nop
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	4613      	mov	r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	334c      	adds	r3, #76	; 0x4c
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	4619      	mov	r1, r3
 800939a:	f7fe fd0a 	bl	8007db2 <USBD_LL_DataInStage>
}
 800939e:	bf00      	nop
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fe3e 	bl	8008036 <USBD_LL_SOF>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093ca:	2301      	movs	r3, #1
 80093cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d102      	bne.n	80093dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
 80093da:	e008      	b.n	80093ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d102      	bne.n	80093ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
 80093e8:	e001      	b.n	80093ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80093ea:	f7f7 fc97 	bl	8000d1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093f4:	7bfa      	ldrb	r2, [r7, #15]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fdde 	bl	8007fba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009404:	4618      	mov	r0, r3
 8009406:	f7fe fd86 	bl	8007f16 <USBD_LL_Reset>
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fdd9 	bl	8007fda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a1b      	ldr	r3, [r3, #32]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <HAL_PCD_SuspendCallback+0x48>)
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	4a03      	ldr	r2, [pc, #12]	; (800945c <HAL_PCD_SuspendCallback+0x48>)
 800944e:	f043 0306 	orr.w	r3, r3, #6
 8009452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	e000ed00 	.word	0xe000ed00

08009460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fdc9 	bl	8008006 <USBD_LL_Resume>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fe21 	bl	80080da <USBD_LL_IsoOUTIncomplete>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fddd 	bl	8008076 <USBD_LL_IsoINIncomplete>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fe33 	bl	800813e <USBD_LL_DevConnected>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fe30 	bl	8008154 <USBD_LL_DevDisconnected>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d13c      	bne.n	8009586 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800950c:	4a20      	ldr	r2, [pc, #128]	; (8009590 <USBD_LL_Init+0x94>)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a1e      	ldr	r2, [pc, #120]	; (8009590 <USBD_LL_Init+0x94>)
 8009518:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800951c:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <USBD_LL_Init+0x94>)
 800951e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <USBD_LL_Init+0x94>)
 8009526:	2204      	movs	r2, #4
 8009528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800952a:	4b19      	ldr	r3, [pc, #100]	; (8009590 <USBD_LL_Init+0x94>)
 800952c:	2202      	movs	r2, #2
 800952e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009530:	4b17      	ldr	r3, [pc, #92]	; (8009590 <USBD_LL_Init+0x94>)
 8009532:	2200      	movs	r2, #0
 8009534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009536:	4b16      	ldr	r3, [pc, #88]	; (8009590 <USBD_LL_Init+0x94>)
 8009538:	2202      	movs	r2, #2
 800953a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800953c:	4b14      	ldr	r3, [pc, #80]	; (8009590 <USBD_LL_Init+0x94>)
 800953e:	2200      	movs	r2, #0
 8009540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009542:	4b13      	ldr	r3, [pc, #76]	; (8009590 <USBD_LL_Init+0x94>)
 8009544:	2200      	movs	r2, #0
 8009546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009548:	4b11      	ldr	r3, [pc, #68]	; (8009590 <USBD_LL_Init+0x94>)
 800954a:	2200      	movs	r2, #0
 800954c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800954e:	4b10      	ldr	r3, [pc, #64]	; (8009590 <USBD_LL_Init+0x94>)
 8009550:	2201      	movs	r2, #1
 8009552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <USBD_LL_Init+0x94>)
 8009556:	2200      	movs	r2, #0
 8009558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800955a:	480d      	ldr	r0, [pc, #52]	; (8009590 <USBD_LL_Init+0x94>)
 800955c:	f7fa f85b 	bl	8003616 <HAL_PCD_Init>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009566:	f7f7 fbd9 	bl	8000d1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800956a:	2180      	movs	r1, #128	; 0x80
 800956c:	4808      	ldr	r0, [pc, #32]	; (8009590 <USBD_LL_Init+0x94>)
 800956e:	f7fb fa9a 	bl	8004aa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009572:	2240      	movs	r2, #64	; 0x40
 8009574:	2100      	movs	r1, #0
 8009576:	4806      	ldr	r0, [pc, #24]	; (8009590 <USBD_LL_Init+0x94>)
 8009578:	f7fb fa4e 	bl	8004a18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800957c:	2280      	movs	r2, #128	; 0x80
 800957e:	2101      	movs	r1, #1
 8009580:	4803      	ldr	r0, [pc, #12]	; (8009590 <USBD_LL_Init+0x94>)
 8009582:	f7fb fa49 	bl	8004a18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20000938 	.word	0x20000938

08009594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fa f950 	bl	8003850 <HAL_PCD_Start>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f930 	bl	800981c <USBD_Get_USB_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	461a      	mov	r2, r3
 80095d8:	4603      	mov	r3, r0
 80095da:	70fb      	strb	r3, [r7, #3]
 80095dc:	460b      	mov	r3, r1
 80095de:	70bb      	strb	r3, [r7, #2]
 80095e0:	4613      	mov	r3, r2
 80095e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095f2:	78bb      	ldrb	r3, [r7, #2]
 80095f4:	883a      	ldrh	r2, [r7, #0]
 80095f6:	78f9      	ldrb	r1, [r7, #3]
 80095f8:	f7fa fe21 	bl	800423e <HAL_PCD_EP_Open>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f90a 	bl	800981c <USBD_Get_USB_Status>
 8009608:	4603      	mov	r3, r0
 800960a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960c:	7bbb      	ldrb	r3, [r7, #14]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7fa fe6a 	bl	800430e <HAL_PCD_EP_Close>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f8eb 	bl	800981c <USBD_Get_USB_Status>
 8009646:	4603      	mov	r3, r0
 8009648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964a:	7bbb      	ldrb	r3, [r7, #14]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f7fa ff2a 	bl	80044cc <HAL_PCD_EP_SetStall>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f8cc 	bl	800981c <USBD_Get_USB_Status>
 8009684:	4603      	mov	r3, r0
 8009686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009688:	7bbb      	ldrb	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fa ff6f 	bl	8004594 <HAL_PCD_EP_ClrStall>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f8ad 	bl	800981c <USBD_Get_USB_Status>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	da0b      	bge.n	8009704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	4613      	mov	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	440b      	add	r3, r1
 80096fe:	333e      	adds	r3, #62	; 0x3e
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	e00b      	b.n	800971c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	4613      	mov	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800971a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f7fa fd54 	bl	80041f4 <HAL_PCD_SetAddress>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 f862 	bl	800981c <USBD_Get_USB_Status>
 8009758:	4603      	mov	r3, r0
 800975a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800975c:	7bbb      	ldrb	r3, [r7, #14]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	460b      	mov	r3, r1
 8009774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009784:	7af9      	ldrb	r1, [r7, #11]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	f7fa fe55 	bl	8004438 <HAL_PCD_EP_Transmit>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f841 	bl	800981c <USBD_Get_USB_Status>
 800979a:	4603      	mov	r3, r0
 800979c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800979e:	7dbb      	ldrb	r3, [r7, #22]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	460b      	mov	r3, r1
 80097b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097c6:	7af9      	ldrb	r1, [r7, #11]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	f7fa fde9 	bl	80043a2 <HAL_PCD_EP_Receive>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f820 	bl	800981c <USBD_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097f4:	4b03      	ldr	r3, [pc, #12]	; (8009804 <USBD_static_malloc+0x18>)
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000e44 	.word	0x20000e44

08009808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	2b03      	cmp	r3, #3
 800982e:	d817      	bhi.n	8009860 <USBD_Get_USB_Status+0x44>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <USBD_Get_USB_Status+0x1c>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	0800984f 	.word	0x0800984f
 8009840:	08009855 	.word	0x08009855
 8009844:	0800985b 	.word	0x0800985b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e00b      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800984e:	2303      	movs	r3, #3
 8009850:	73fb      	strb	r3, [r7, #15]
    break;
 8009852:	e008      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009854:	2301      	movs	r3, #1
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	e005      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800985a:	2303      	movs	r3, #3
 800985c:	73fb      	strb	r3, [r7, #15]
    break;
 800985e:	e002      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	73fb      	strb	r3, [r7, #15]
    break;
 8009864:	bf00      	nop
  }
  return usb_status;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <__libc_init_array>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	4d0d      	ldr	r5, [pc, #52]	; (80098ac <__libc_init_array+0x38>)
 8009878:	4c0d      	ldr	r4, [pc, #52]	; (80098b0 <__libc_init_array+0x3c>)
 800987a:	1b64      	subs	r4, r4, r5
 800987c:	10a4      	asrs	r4, r4, #2
 800987e:	2600      	movs	r6, #0
 8009880:	42a6      	cmp	r6, r4
 8009882:	d109      	bne.n	8009898 <__libc_init_array+0x24>
 8009884:	4d0b      	ldr	r5, [pc, #44]	; (80098b4 <__libc_init_array+0x40>)
 8009886:	4c0c      	ldr	r4, [pc, #48]	; (80098b8 <__libc_init_array+0x44>)
 8009888:	f000 f820 	bl	80098cc <_init>
 800988c:	1b64      	subs	r4, r4, r5
 800988e:	10a4      	asrs	r4, r4, #2
 8009890:	2600      	movs	r6, #0
 8009892:	42a6      	cmp	r6, r4
 8009894:	d105      	bne.n	80098a2 <__libc_init_array+0x2e>
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	f855 3b04 	ldr.w	r3, [r5], #4
 800989c:	4798      	blx	r3
 800989e:	3601      	adds	r6, #1
 80098a0:	e7ee      	b.n	8009880 <__libc_init_array+0xc>
 80098a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a6:	4798      	blx	r3
 80098a8:	3601      	adds	r6, #1
 80098aa:	e7f2      	b.n	8009892 <__libc_init_array+0x1e>
 80098ac:	08009964 	.word	0x08009964
 80098b0:	08009964 	.word	0x08009964
 80098b4:	08009964 	.word	0x08009964
 80098b8:	08009968 	.word	0x08009968

080098bc <memset>:
 80098bc:	4402      	add	r2, r0
 80098be:	4603      	mov	r3, r0
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d100      	bne.n	80098c6 <memset+0xa>
 80098c4:	4770      	bx	lr
 80098c6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ca:	e7f9      	b.n	80098c0 <memset+0x4>

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
