
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c77c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000122c  0800c90c  0800c90c  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db38  0800db38  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800db38  0800db38  0001db38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db40  0800db40  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db40  0800db40  0001db40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db44  0800db44  0001db44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800db48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00000e20  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fb0  20000fb0  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f36  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a44  00000000  00000000  0003a0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  0003f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002507c  00000000  00000000  00040788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7ae  00000000  00000000  00065804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1aea  00000000  00000000  00081fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153a9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064f4  00000000  00000000  00153aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8f4 	.word	0x0800c8f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	0800c8f4 	.word	0x0800c8f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08d      	sub	sp, #52	; 0x34
 8000578:	af02      	add	r7, sp, #8
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	4611      	mov	r1, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	460b      	mov	r3, r1
 8000586:	81bb      	strh	r3, [r7, #12]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b1e      	cmp	r3, #30
 8000590:	d961      	bls.n	8000656 <ILI9341_DrawChar+0xe2>
 8000592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db5d      	blt.n	8000656 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3b20      	subs	r3, #32
 80005b6:	7ffa      	ldrb	r2, [r7, #31]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80005c4:	7fbb      	ldrb	r3, [r7, #30]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	7f7b      	ldrb	r3, [r7, #29]
 80005ca:	b29c      	uxth	r4, r3
 80005cc:	88f9      	ldrh	r1, [r7, #6]
 80005ce:	89b8      	ldrh	r0, [r7, #12]
 80005d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4623      	mov	r3, r4
 80005d6:	f000 fc67 	bl	8000ea8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e035      	b.n	800064c <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	e02b      	b.n	800063e <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80005e6:	7f3b      	ldrb	r3, [r7, #28]
 80005e8:	6a3a      	ldr	r2, [r7, #32]
 80005ea:	fb03 f202 	mul.w	r2, r3, r2
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	10db      	asrs	r3, r3, #3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	4413      	add	r3, r2
 80005f8:	3301      	adds	r3, #1
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000610:	7dfa      	ldrb	r2, [r7, #23]
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	4013      	ands	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	b29a      	uxth	r2, r3
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	b298      	uxth	r0, r3
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b29b      	uxth	r3, r3
 8000630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fbd2 	bl	8000ddc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	3301      	adds	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
 800063e:	7fbb      	ldrb	r3, [r7, #30]
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbcf      	blt.n	80005e6 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	7f7b      	ldrb	r3, [r7, #29]
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	429a      	cmp	r2, r3
 8000652:	dbc5      	blt.n	80005e0 <ILI9341_DrawChar+0x6c>
 8000654:	e000      	b.n	8000658 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000656:	bf00      	nop
			}
		}
	}
}
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08a      	sub	sp, #40	; 0x28
 8000662:	af02      	add	r7, sp, #8
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	460b      	mov	r3, r1
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4613      	mov	r3, r2
 8000672:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000680:	e02d      	b.n	80006de <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	88b9      	ldrh	r1, [r7, #4]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	f7ff ff6d 	bl	8000574 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b20      	subs	r3, #32
 80006a0:	7ffa      	ldrb	r2, [r7, #31]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	3304      	adds	r3, #4
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	1c9a      	adds	r2, r3, #2
 80006b8:	7fbb      	ldrb	r3, [r7, #30]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	da07      	bge.n	80006ce <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3302      	adds	r3, #2
 80006ca:	80fb      	strh	r3, [r7, #6]
 80006cc:	e004      	b.n	80006d8 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80006ce:	7fbb      	ldrb	r3, [r7, #30]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1cd      	bne.n	8000682 <ILI9341_DrawText+0x24>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_SPI_TxCpltCallback>:
uint16_t LCD_DC_PIN = LCD1_DC_PIN;
GPIO_TypeDef* LCD_RST_PORT = LCD1_RST_PORT;
uint16_t LCD_RST_PIN = LCD1_RST_PIN;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SPI_TxCpltCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d107      	bne.n	8000710 <HAL_SPI_TxCpltCallback+0x20>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SPI_TxCpltCallback+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SPI_TxCpltCallback+0x30>)
 8000706:	8811      	ldrh	r1, [r2, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fabc 	bl	8002c88 <HAL_GPIO_WritePin>
  }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000200 	.word	0x20000200
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008

08000724 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800072e:	bf00      	nop
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b02      	cmp	r3, #2
 800073c:	d1f8      	bne.n	8000730 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000746:	f006 ffd9 	bl	80076fc <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000200 	.word	0x20000200

08000758 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000764:	bf00      	nop
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b02      	cmp	r3, #2
 8000772:	d1f8      	bne.n	8000766 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 800077c:	f006 ffbe 	bl	80076fc <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000200 	.word	0x20000200

0800078c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <ILI9341_WriteCommand+0x3c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <ILI9341_WriteCommand+0x40>)
 800079c:	8811      	ldrh	r1, [r2, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fa71 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ILI9341_WriteCommand+0x44>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <ILI9341_WriteCommand+0x48>)
 80007ac:	8811      	ldrh	r1, [r2, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fa69 	bl	8002c88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb3 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000008 	.word	0x20000008

080007d8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <ILI9341_WriteData+0x3c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <ILI9341_WriteData+0x40>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fa4b 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <ILI9341_WriteData+0x44>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <ILI9341_WriteData+0x48>)
 80007f8:	8811      	ldrh	r1, [r2, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fa43 	bl	8002c88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff8d 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000010 	.word	0x20000010
 800081c:	20000004 	.word	0x20000004
 8000820:	20000008 	.word	0x20000008

08000824 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ILI9341_WriteBuffer+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <ILI9341_WriteBuffer+0x44>)
 8000836:	8811      	ldrh	r1, [r2, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fa24 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <ILI9341_WriteBuffer+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <ILI9341_WriteBuffer+0x4c>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fa1c 	bl	8002c88 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff7f 	bl	8000758 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000010 	.word	0x20000010
 800086c:	20000004 	.word	0x20000004
 8000870:	20000008 	.word	0x20000008

08000874 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008b2:	202a      	movs	r0, #42	; 0x2a
 80008b4:	f7ff ff6a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffb0 	bl	8000824 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008d4:	883b      	ldrh	r3, [r7, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008e4:	202b      	movs	r0, #43	; 0x2b
 80008e6:	f7ff ff51 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff97 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80008f6:	202c      	movs	r0, #44	; 0x2c
 80008f8:	f7ff ff48 	bl	800078c <ILI9341_WriteCommand>
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <ILI9341_Reset+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <ILI9341_Reset+0x58>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 f9b8 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f001 fb2b 	bl	8001f74 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <ILI9341_Reset+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <ILI9341_Reset+0x60>)
 8000924:	8811      	ldrh	r1, [r2, #0]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 f9ad 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f001 fb20 	bl	8001f74 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <ILI9341_Reset+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <ILI9341_Reset+0x58>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f002 f9a2 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ILI9341_Reset+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <ILI9341_Reset+0x60>)
 800094a:	8811      	ldrh	r1, [r2, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f002 f99a 	bl	8002c88 <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000014 	.word	0x20000014
 800095c:	20000018 	.word	0x20000018
 8000960:	20000004 	.word	0x20000004
 8000964:	20000008 	.word	0x20000008

08000968 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <ILI9341_Enable+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <ILI9341_Enable+0x1c>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f986 	bl	8002c88 <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000014 	.word	0x20000014
 8000984:	20000018 	.word	0x20000018

08000988 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800098c:	f7ff ffec 	bl	8000968 <ILI9341_Enable>
	ILI9341_Reset();
 8000990:	f7ff ffb8 	bl	8000904 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fef9 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 faea 	bl	8001f74 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80009a0:	20cb      	movs	r0, #203	; 0xcb
 80009a2:	f7ff fef3 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80009a6:	2039      	movs	r0, #57	; 0x39
 80009a8:	f7ff ff16 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80009ac:	202c      	movs	r0, #44	; 0x2c
 80009ae:	f7ff ff13 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff10 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009b8:	2034      	movs	r0, #52	; 0x34
 80009ba:	f7ff ff0d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff ff0a 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009c4:	20cf      	movs	r0, #207	; 0xcf
 80009c6:	f7ff fee1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ff04 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009d0:	20c1      	movs	r0, #193	; 0xc1
 80009d2:	f7ff ff01 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009d6:	2030      	movs	r0, #48	; 0x30
 80009d8:	f7ff fefe 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009dc:	20e8      	movs	r0, #232	; 0xe8
 80009de:	f7ff fed5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009e2:	2085      	movs	r0, #133	; 0x85
 80009e4:	f7ff fef8 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fef5 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f7ff fef2 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009f4:	20ea      	movs	r0, #234	; 0xea
 80009f6:	f7ff fec9 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff feec 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fee9 	bl	80007d8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000a06:	20ed      	movs	r0, #237	; 0xed
 8000a08:	f7ff fec0 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f7ff fee3 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fee0 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a18:	2012      	movs	r0, #18
 8000a1a:	f7ff fedd 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a1e:	2081      	movs	r0, #129	; 0x81
 8000a20:	f7ff feda 	bl	80007d8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a24:	20f7      	movs	r0, #247	; 0xf7
 8000a26:	f7ff feb1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f7ff fed4 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a30:	20c0      	movs	r0, #192	; 0xc0
 8000a32:	f7ff feab 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a36:	2023      	movs	r0, #35	; 0x23
 8000a38:	f7ff fece 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a3c:	20c1      	movs	r0, #193	; 0xc1
 8000a3e:	f7ff fea5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a42:	2010      	movs	r0, #16
 8000a44:	f7ff fec8 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a48:	20c5      	movs	r0, #197	; 0xc5
 8000a4a:	f7ff fe9f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a4e:	203e      	movs	r0, #62	; 0x3e
 8000a50:	f7ff fec2 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f7ff febf 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a5a:	20c7      	movs	r0, #199	; 0xc7
 8000a5c:	f7ff fe96 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a60:	2086      	movs	r0, #134	; 0x86
 8000a62:	f7ff feb9 	bl	80007d8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a66:	2036      	movs	r0, #54	; 0x36
 8000a68:	f7ff fe90 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a6c:	2048      	movs	r0, #72	; 0x48
 8000a6e:	f7ff feb3 	bl	80007d8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a72:	203a      	movs	r0, #58	; 0x3a
 8000a74:	f7ff fe8a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a78:	2055      	movs	r0, #85	; 0x55
 8000a7a:	f7ff fead 	bl	80007d8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a7e:	20b1      	movs	r0, #177	; 0xb1
 8000a80:	f7ff fe84 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fea7 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a8a:	2018      	movs	r0, #24
 8000a8c:	f7ff fea4 	bl	80007d8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a90:	20b6      	movs	r0, #182	; 0xb6
 8000a92:	f7ff fe7b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fe9e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a9c:	2082      	movs	r0, #130	; 0x82
 8000a9e:	f7ff fe9b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	f7ff fe98 	bl	80007d8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000aa8:	20f2      	movs	r0, #242	; 0xf2
 8000aaa:	f7ff fe6f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe92 	bl	80007d8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f7ff fe69 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fe8c 	bl	80007d8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ac0:	20e0      	movs	r0, #224	; 0xe0
 8000ac2:	f7ff fe63 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fe86 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000acc:	2031      	movs	r0, #49	; 0x31
 8000ace:	f7ff fe83 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000ad2:	202b      	movs	r0, #43	; 0x2b
 8000ad4:	f7ff fe80 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f7ff fe7d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f7ff fe7a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff fe77 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000aea:	204e      	movs	r0, #78	; 0x4e
 8000aec:	f7ff fe74 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000af0:	20f1      	movs	r0, #241	; 0xf1
 8000af2:	f7ff fe71 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000af6:	2037      	movs	r0, #55	; 0x37
 8000af8:	f7ff fe6e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f7ff fe6b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f7ff fe68 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f7ff fe65 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b0e:	200e      	movs	r0, #14
 8000b10:	f7ff fe62 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f7ff fe5f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe5c 	bl	80007d8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b20:	20e1      	movs	r0, #225	; 0xe1
 8000b22:	f7ff fe33 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe56 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b2c:	200e      	movs	r0, #14
 8000b2e:	f7ff fe53 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b32:	2014      	movs	r0, #20
 8000b34:	f7ff fe50 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff fe4d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b3e:	2011      	movs	r0, #17
 8000b40:	f7ff fe4a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff fe47 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b4a:	2031      	movs	r0, #49	; 0x31
 8000b4c:	f7ff fe44 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b50:	20c1      	movs	r0, #193	; 0xc1
 8000b52:	f7ff fe41 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b56:	2048      	movs	r0, #72	; 0x48
 8000b58:	f7ff fe3e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff fe3b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe38 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f7ff fe35 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b6e:	2031      	movs	r0, #49	; 0x31
 8000b70:	f7ff fe32 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b74:	2036      	movs	r0, #54	; 0x36
 8000b76:	f7ff fe2f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff fe2c 	bl	80007d8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b80:	2011      	movs	r0, #17
 8000b82:	f7ff fe03 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 f9f4 	bl	8001f74 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b8c:	2029      	movs	r0, #41	; 0x29
 8000b8e:	f7ff fdfd 	bl	800078c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f802 	bl	8000b9c <ILI9341_SetRotation>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000ba6:	2036      	movs	r0, #54	; 0x36
 8000ba8:	f7ff fdf0 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 f9e1 	bl	8001f74 <HAL_Delay>

	switch(rotation)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d837      	bhi.n	8000c28 <ILI9341_SetRotation+0x8c>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <ILI9341_SetRotation+0x24>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be7 	.word	0x08000be7
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c13 	.word	0x08000c13
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bd0:	2048      	movs	r0, #72	; 0x48
 8000bd2:	f7ff fe01 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bd8:	22f0      	movs	r2, #240	; 0xf0
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be2:	801a      	strh	r2, [r3, #0]
		break;
 8000be4:	e021      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff fdf6 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bf2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bf6:	22f0      	movs	r2, #240	; 0xf0
 8000bf8:	801a      	strh	r2, [r3, #0]
		break;
 8000bfa:	e016      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000bfc:	2088      	movs	r0, #136	; 0x88
 8000bfe:	f7ff fdeb 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c04:	22f0      	movs	r2, #240	; 0xf0
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c0e:	801a      	strh	r2, [r3, #0]
		break;
 8000c10:	e00b      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000c12:	20e8      	movs	r0, #232	; 0xe8
 8000c14:	f7ff fde0 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c22:	22f0      	movs	r2, #240	; 0xf0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e000      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000002 	.word	0x20000002
 8000c38:	20000000 	.word	0x20000000

08000c3c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c40:	b08d      	sub	sp, #52	; 0x34
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	466b      	mov	r3, sp
 8000c4c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c5a:	d202      	bcs.n	8000c62 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e002      	b.n	8000c68 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <ILI9341_DrawColorBurst+0x140>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <ILI9341_DrawColorBurst+0x144>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 f808 	bl	8002c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000c7e:	8811      	ldrh	r1, [r2, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f800 	bl	8002c88 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c94:	460b      	mov	r3, r1
 8000c96:	3b01      	subs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	461d      	mov	r5, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	00eb      	lsls	r3, r5, #3
 8000cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc8:	00e2      	lsls	r2, r4, #3
 8000cca:	1dcb      	adds	r3, r1, #7
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	3300      	adds	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cde:	e00e      	b.n	8000cfe <ILI9341_DrawColorBurst+0xc2>
	{
		BurstBuffer[j] = chifted;
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	3301      	adds	r3, #1
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ec      	bcc.n	8000ce0 <ILI9341_DrawColorBurst+0xa4>
	}

	uint32_t SendingSize = size * 2;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d20:	fb01 f202 	mul.w	r2, r1, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <ILI9341_DrawColorBurst+0x114>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	e009      	b.n	8000d48 <ILI9341_DrawColorBurst+0x10c>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	230a      	movs	r3, #10
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d3e:	f006 fba0 	bl	8007482 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	3301      	adds	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f1      	bcc.n	8000d34 <ILI9341_DrawColorBurst+0xf8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	230a      	movs	r3, #10
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d5a:	f006 fb92 	bl	8007482 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000d64:	8811      	ldrh	r1, [r2, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 ff8d 	bl	8002c88 <HAL_GPIO_WritePin>
 8000d6e:	46b5      	mov	sp, r6
}
 8000d70:	bf00      	nop
 8000d72:	3734      	adds	r7, #52	; 0x34
 8000d74:	46bd      	mov	sp, r7
 8000d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000200 	.word	0x20000200

08000d90 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fd63 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff38 	bl	8000c3c <ILI9341_DrawColorBurst>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	20000000 	.word	0x20000000

08000ddc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <ILI9341_DrawPixel+0xc4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d24d      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <ILI9341_DrawPixel+0xc8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d247      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	753b      	strb	r3, [r7, #20]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	757b      	strb	r3, [r7, #21]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	121b      	asrs	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75bb      	strb	r3, [r7, #22]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	743b      	strb	r3, [r7, #16]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	747b      	strb	r3, [r7, #17]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	74bb      	strb	r3, [r7, #18]
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	733b      	strb	r3, [r7, #12]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e5e:	202a      	movs	r0, #42	; 0x2a
 8000e60:	f7ff fc94 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fcda 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e70:	202b      	movs	r0, #43	; 0x2b
 8000e72:	f7ff fc8b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fcd1 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e82:	202c      	movs	r0, #44	; 0x2c
 8000e84:	f7ff fc82 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fcc8 	bl	8000824 <ILI9341_WriteBuffer>
 8000e94:	e000      	b.n	8000e98 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d23d      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d237      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dd05      	ble.n	8000efa <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	883b      	ldrh	r3, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f02:	8812      	ldrh	r2, [r2, #0]
 8000f04:	b292      	uxth	r2, r2
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd05      	ble.n	8000f16 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29c      	uxth	r4, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b9      	ldrh	r1, [r7, #4]
 8000f30:	88f8      	ldrh	r0, [r7, #6]
 8000f32:	4622      	mov	r2, r4
 8000f34:	f7ff fc9e 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe78 	bl	8000c3c <ILI9341_DrawColorBurst>
 8000f4c:	e000      	b.n	8000f50 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000002 	.word	0x20000002
 8000f5c:	20000000 	.word	0x20000000

08000f60 <scan_keypad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Local Keypad Scanning */
void scan_keypad() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
  set_rows();
 8000f66:	f000 f85f 	bl	8001028 <set_rows>

  // read the columns
  int all_cols = get_cols();
 8000f6a:	f000 f8c5 	bl	80010f8 <get_cols>
 8000f6e:	60f8      	str	r0, [r7, #12]
  int local_cols = all_cols & 0x0F;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	60bb      	str	r3, [r7, #8]
  int expander_cols = (all_cols & 0xF0) >> 4;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	111b      	asrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	607b      	str	r3, [r7, #4]
  
  // scan local cols
  for(int i = 0; i < 4; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e01d      	b.n	8000fc4 <scan_keypad+0x64>
    if(local_cols & (1 << i)) {
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa42 f303 	asr.w	r3, r2, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <scan_keypad+0x4c>
      keypresses[row][i] = 1;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <scan_keypad+0xbc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a20      	ldr	r2, [pc, #128]	; (8001020 <scan_keypad+0xc0>)
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	441a      	add	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	e008      	b.n	8000fbe <scan_keypad+0x5e>
    }
    else {
      keypresses[row][i] = 0;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <scan_keypad+0xbc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <scan_keypad+0xc0>)
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	441a      	add	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	ddde      	ble.n	8000f88 <scan_keypad+0x28>
    }
  }

  // scan expander cols
  for(int i = 0; i < 4; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	e01d      	b.n	800100c <scan_keypad+0xac>
    if(expander_cols & (1 << i)) {
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	fa42 f303 	asr.w	r3, r2, r3
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d009      	beq.n	8000ff4 <scan_keypad+0x94>
      keypresses_2[row][i] = 1;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <scan_keypad+0xbc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <scan_keypad+0xc4>)
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	441a      	add	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e008      	b.n	8001006 <scan_keypad+0xa6>
    }
    else {
      keypresses_2[row][i] = 0;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <scan_keypad+0xbc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <scan_keypad+0xc4>)
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	441a      	add	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4413      	add	r3, r2
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3301      	adds	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b03      	cmp	r3, #3
 8001010:	ddde      	ble.n	8000fd0 <scan_keypad+0x70>
    }

  }

}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000364 	.word	0x20000364
 8001020:	20000368 	.word	0x20000368
 8001024:	2000037c 	.word	0x2000037c

08001028 <set_rows>:

void set_rows() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af02      	add	r7, sp, #8
  // update row value
  row = (row + 1) % 4;
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <set_rows+0xc4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	425a      	negs	r2, r3
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	bf58      	it	pl
 8001040:	4253      	negpl	r3, r2
 8001042:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <set_rows+0xc4>)
 8001044:	6013      	str	r3, [r2, #0]
  // set all rows to high on local keypad
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2101      	movs	r1, #1
 800104a:	4829      	ldr	r0, [pc, #164]	; (80010f0 <set_rows+0xc8>)
 800104c:	f001 fe1c 	bl	8002c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2102      	movs	r1, #2
 8001054:	4826      	ldr	r0, [pc, #152]	; (80010f0 <set_rows+0xc8>)
 8001056:	f001 fe17 	bl	8002c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2104      	movs	r1, #4
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <set_rows+0xc8>)
 8001060:	f001 fe12 	bl	8002c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <set_rows+0xc8>)
 800106a:	f001 fe0d 	bl	8002c88 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low
  switch(row) {
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <set_rows+0xc4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d822      	bhi.n	80010bc <set_rows+0x94>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <set_rows+0x54>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	08001099 	.word	0x08001099
 8001084:	080010a5 	.word	0x080010a5
 8001088:	080010b1 	.word	0x080010b1
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2101      	movs	r1, #1
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <set_rows+0xc8>)
 8001092:	f001 fdf9 	bl	8002c88 <HAL_GPIO_WritePin>
      break;
 8001096:	e011      	b.n	80010bc <set_rows+0x94>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <set_rows+0xc8>)
 800109e:	f001 fdf3 	bl	8002c88 <HAL_GPIO_WritePin>
      break;
 80010a2:	e00b      	b.n	80010bc <set_rows+0x94>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2104      	movs	r1, #4
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <set_rows+0xc8>)
 80010aa:	f001 fded 	bl	8002c88 <HAL_GPIO_WritePin>
      break;
 80010ae:	e005      	b.n	80010bc <set_rows+0x94>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2108      	movs	r1, #8
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <set_rows+0xc8>)
 80010b6:	f001 fde7 	bl	8002c88 <HAL_GPIO_WritePin>
      break;
 80010ba:	bf00      	nop
  }

  // set current row to low and others to high on gpio expander keypad
  uint8_t data[2] = {0x0A, ~( 8 >> row )};
 80010bc:	230a      	movs	r3, #10
 80010be:	713b      	strb	r3, [r7, #4]
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <set_rows+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2208      	movs	r2, #8
 80010c6:	fa42 f303 	asr.w	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 80010d2:	1d3a      	adds	r2, r7, #4
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2302      	movs	r3, #2
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <set_rows+0xcc>)
 80010e0:	f001 ff30 	bl	8002f44 <HAL_I2C_Master_Transmit>

}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000364 	.word	0x20000364
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	200001ac 	.word	0x200001ac

080010f8 <get_cols>:

int get_cols() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 4) & 0xF;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <get_cols+0x54>)
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	43db      	mvns	r3, r3
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	60fb      	str	r3, [r7, #12]

  // read the GPIO expander columns
  uint8_t data[1] = {0x09};
 800110c:	2309      	movs	r3, #9
 800110e:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 8001110:	1d3a      	adds	r2, r7, #4
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <get_cols+0x58>)
 800111e:	f001 ff11 	bl	8002f44 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 8001122:	1d3a      	adds	r2, r7, #4
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <get_cols+0x58>)
 8001130:	f002 f806 	bl	8003140 <HAL_I2C_Master_Receive>

  int expander_cols = data[0] & 0xF0;
 8001134:	793b      	ldrb	r3, [r7, #4]
 8001136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800113a:	60bb      	str	r3, [r7, #8]

  return local_cols | expander_cols;
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4313      	orrs	r3, r2
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020c00 	.word	0x40020c00
 8001150:	200001ac 	.word	0x200001ac

08001154 <scan_rotary>:
/* END Local Keypad Scanning */

/* Rotary Encoder Scanning */
void scan_rotary() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  currentStateCLK = HAL_GPIO_ReadPin(GPIOC, ROT_CLCK_Pin);
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <scan_rotary+0xe4>)
 800115e:	f001 fd7b 	bl	8002c58 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <scan_rotary+0xe8>)
 8001168:	601a      	str	r2, [r3, #0]

  // if CLK pin has changed, then the rotary encoder has turned
  if (currentStateCLK != lastStateCLK && rotLock == 0 ) {// && rotLock == 0) {
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <scan_rotary+0xe8>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <scan_rotary+0xec>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d02e      	beq.n	80011d4 <scan_rotary+0x80>
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <scan_rotary+0xf0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <scan_rotary+0x80>
    // if the DT state is different, then the encoder is rotating counter-clockwise
    currentStateDT = HAL_GPIO_ReadPin(GPIOC, ROT_DT_Pin);
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	482d      	ldr	r0, [pc, #180]	; (8001238 <scan_rotary+0xe4>)
 8001182:	f001 fd69 	bl	8002c58 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <scan_rotary+0xf4>)
 800118c:	601a      	str	r2, [r3, #0]

    if (currentStateDT != currentStateCLK) {
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <scan_rotary+0xf4>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <scan_rotary+0xe8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d008      	beq.n	80011ac <scan_rotary+0x58>
      // Volume Down
      rotary_keypresses[1] = 1;
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <scan_rotary+0xf8>)
 800119c:	2201      	movs	r2, #1
 800119e:	705a      	strb	r2, [r3, #1]
      turn_counter--;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <scan_rotary+0xfc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <scan_rotary+0xfc>)
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00d      	b.n	80011c8 <scan_rotary+0x74>
    }

    // otherwise, it is turning clockwise
    else if (currentStateDT == currentStateCLK) {
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <scan_rotary+0xf4>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <scan_rotary+0xe8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d107      	bne.n	80011c8 <scan_rotary+0x74>
      // Volume Up
      rotary_keypresses[2] = 1;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <scan_rotary+0xf8>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	709a      	strb	r2, [r3, #2]
      turn_counter++;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <scan_rotary+0xfc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a22      	ldr	r2, [pc, #136]	; (8001250 <scan_rotary+0xfc>)
 80011c6:	6013      	str	r3, [r2, #0]
    }
    rotLock++;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <scan_rotary+0xf0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <scan_rotary+0xf0>)
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e009      	b.n	80011e8 <scan_rotary+0x94>

  }
  else if (rotLock == 0) {
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <scan_rotary+0xf0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <scan_rotary+0x94>
	  rotary_keypresses[1] = 0;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <scan_rotary+0xf8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	705a      	strb	r2, [r3, #1]
	  rotary_keypresses[2] = 0;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <scan_rotary+0xf8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	709a      	strb	r2, [r3, #2]
  }

  lastStateCLK = currentStateCLK;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <scan_rotary+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <scan_rotary+0xec>)
 80011ee:	6013      	str	r3, [r2, #0]

  // rotLock allows the rotary encoder's inputs to settle over a few extra clock cycles
  if(rotLock != 0) {
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <scan_rotary+0xf0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00e      	beq.n	8001216 <scan_rotary+0xc2>
    rotLock = (rotLock + 1) % 150;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <scan_rotary+0xf0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <scan_rotary+0x100>)
 8001200:	fb83 1302 	smull	r1, r3, r3, r2
 8001204:	1119      	asrs	r1, r3, #4
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1acb      	subs	r3, r1, r3
 800120a:	2196      	movs	r1, #150	; 0x96
 800120c:	fb01 f303 	mul.w	r3, r1, r3
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <scan_rotary+0xf0>)
 8001214:	6013      	str	r3, [r2, #0]
  }

  // if the state is low (default is high), turn toggle the LED
  if (HAL_GPIO_ReadPin(GPIOC, ROT_SW_Pin) == 0) {
 8001216:	2140      	movs	r1, #64	; 0x40
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <scan_rotary+0xe4>)
 800121a:	f001 fd1d 	bl	8002c58 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <scan_rotary+0xd8>
    // Volume Mute Toggle
	  rotary_keypresses[0] = 1;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <scan_rotary+0xf8>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
  }
  else {
	  rotary_keypresses[0] = 0;
  }

}
 800122a:	e002      	b.n	8001232 <scan_rotary+0xde>
	  rotary_keypresses[0] = 0;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <scan_rotary+0xf8>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	20000350 	.word	0x20000350
 8001240:	20000354 	.word	0x20000354
 8001244:	2000035c 	.word	0x2000035c
 8001248:	20000358 	.word	0x20000358
 800124c:	2000038c 	.word	0x2000038c
 8001250:	2000034c 	.word	0x2000034c
 8001254:	1b4e81b5 	.word	0x1b4e81b5

08001258 <record_keys>:
/* END Rotary Encoder Scanning */

/* USB Functions */
void record_keys() {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 800125e:	2208      	movs	r2, #8
 8001260:	2100      	movs	r1, #0
 8001262:	4837      	ldr	r0, [pc, #220]	; (8001340 <record_keys+0xe8>)
 8001264:	f00a fed0 	bl	800c008 <memset>
  keycodeNum = 1;
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <record_keys+0xec>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < 4; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e01f      	b.n	80012b4 <record_keys+0x5c>
	  for(int j = 0; j < 4; j++) {
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	e016      	b.n	80012a8 <record_keys+0x50>
		  if(keypresses[i][j] == 1) {
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <record_keys+0xf0>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	441a      	add	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10a      	bne.n	80012a2 <record_keys+0x4a>
			  add_keypress(keys[i][j]);
 800128c:	492f      	ldr	r1, [pc, #188]	; (800134c <record_keys+0xf4>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	009a      	lsls	r2, r3, #2
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4413      	add	r3, r2
 8001296:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f85f 	bl	8001360 <add_keypress>
	  for(int j = 0; j < 4; j++) {
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	3301      	adds	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	dde5      	ble.n	800127a <record_keys+0x22>
  for(int i = 0; i < 4; i++) {
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	dddc      	ble.n	8001274 <record_keys+0x1c>
	    }
	  }
  }

  // Add GPIO Expander keypresses
  for(int i = 0; i < 4; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e01f      	b.n	8001300 <record_keys+0xa8>
	  for(int j = 0; j < 4; j++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	e016      	b.n	80012f4 <record_keys+0x9c>
		  if(keypresses_2[i][j] == 1) {
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <record_keys+0xf8>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	441a      	add	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10a      	bne.n	80012ee <record_keys+0x96>
			  add_keypress(keys_2[i][j]);
 80012d8:	491e      	ldr	r1, [pc, #120]	; (8001354 <record_keys+0xfc>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	009a      	lsls	r2, r3, #2
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f839 	bl	8001360 <add_keypress>
	  for(int j = 0; j < 4; j++) {
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	dde5      	ble.n	80012c6 <record_keys+0x6e>
  for(int i = 0; i < 4; i++) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b03      	cmp	r3, #3
 8001304:	dddc      	ble.n	80012c0 <record_keys+0x68>
		  }
	  }
  }

  // Add Rotary Encoder keypresses
  for(int i = 0; i < 4; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e010      	b.n	800132e <record_keys+0xd6>
	  if(rotary_keypresses[i] == 1)
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <record_keys+0x100>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d107      	bne.n	8001328 <record_keys+0xd0>
		  add_keypress(rotary_keys[i]);
 8001318:	4a10      	ldr	r2, [pc, #64]	; (800135c <record_keys+0x104>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f81c 	bl	8001360 <add_keypress>
  for(int i = 0; i < 4; i++) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b03      	cmp	r3, #3
 8001332:	ddeb      	ble.n	800130c <record_keys+0xb4>
  }

}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000390 	.word	0x20000390
 8001344:	20000360 	.word	0x20000360
 8001348:	20000368 	.word	0x20000368
 800134c:	0800da8c 	.word	0x0800da8c
 8001350:	2000037c 	.word	0x2000037c
 8001354:	0800dab4 	.word	0x0800dab4
 8001358:	2000038c 	.word	0x2000038c
 800135c:	0800dadc 	.word	0x0800dadc

08001360 <add_keypress>:

void add_keypress(char key) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]

	if(key == (char)KEY_SHIFT) {
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d103      	bne.n	8001378 <add_keypress+0x18>
		keyboardhid.MODIFIER = 2;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <add_keypress+0x88>)
 8001372:	2202      	movs	r2, #2
 8001374:	701a      	strb	r2, [r3, #0]
		return;
 8001376:	e031      	b.n	80013dc <add_keypress+0x7c>
	}

	switch(keycodeNum) {
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <add_keypress+0x8c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	2b05      	cmp	r3, #5
 8001380:	d826      	bhi.n	80013d0 <add_keypress+0x70>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <add_keypress+0x28>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	080013a1 	.word	0x080013a1
 800138c:	080013a9 	.word	0x080013a9
 8001390:	080013b1 	.word	0x080013b1
 8001394:	080013b9 	.word	0x080013b9
 8001398:	080013c1 	.word	0x080013c1
 800139c:	080013c9 	.word	0x080013c9
			case 1:
			  keyboardhid.KEYCODE1 = key;
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <add_keypress+0x88>)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	7093      	strb	r3, [r2, #2]
			  break;
 80013a6:	e014      	b.n	80013d2 <add_keypress+0x72>
			case 2:
			  keyboardhid.KEYCODE2 = key;
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <add_keypress+0x88>)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	70d3      	strb	r3, [r2, #3]
			  break;
 80013ae:	e010      	b.n	80013d2 <add_keypress+0x72>
			case 3:
			  keyboardhid.KEYCODE3 = key;
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <add_keypress+0x88>)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	7113      	strb	r3, [r2, #4]
			  break;
 80013b6:	e00c      	b.n	80013d2 <add_keypress+0x72>
			case 4:
			  keyboardhid.KEYCODE4 = key;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <add_keypress+0x88>)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	7153      	strb	r3, [r2, #5]
			  break;
 80013be:	e008      	b.n	80013d2 <add_keypress+0x72>
			case 5:
			  keyboardhid.KEYCODE5 = key;
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <add_keypress+0x88>)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	7193      	strb	r3, [r2, #6]
			  break;
 80013c6:	e004      	b.n	80013d2 <add_keypress+0x72>
			case 6:
			  keyboardhid.KEYCODE6 = key;
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <add_keypress+0x88>)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	71d3      	strb	r3, [r2, #7]
			  break;
 80013ce:	e000      	b.n	80013d2 <add_keypress+0x72>
			default:
				break;
 80013d0:	bf00      	nop
		  }
		  keycodeNum++;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <add_keypress+0x8c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <add_keypress+0x8c>)
 80013da:	6013      	str	r3, [r2, #0]

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000390 	.word	0x20000390
 80013ec:	20000360 	.word	0x20000360

080013f0 <switch_lcd>:
/* END USB Functions */

/* LCD Functions */
void switch_lcd() {
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  // switch LCD_*_PIN and LCD_*_PORT between LCD1_* and LCD2_*
  if(LCD_CS_PIN == LCD2_CS_PIN) {
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <switch_lcd+0x70>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013fc:	d115      	bne.n	800142a <switch_lcd+0x3a>
	  LCD_CS_PORT = LCD1_CS_PORT;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <switch_lcd+0x74>)
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <switch_lcd+0x78>)
 8001402:	601a      	str	r2, [r3, #0]
	  LCD_CS_PIN = LCD1_CS_PIN;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <switch_lcd+0x70>)
 8001406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140a:	801a      	strh	r2, [r3, #0]
	  LCD_DC_PORT = LCD1_DC_PORT;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <switch_lcd+0x7c>)
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <switch_lcd+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
	  LCD_DC_PIN = LCD1_DC_PIN;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <switch_lcd+0x80>)
 8001414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001418:	801a      	strh	r2, [r3, #0]
	  LCD_RST_PORT = LCD1_RST_PORT;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <switch_lcd+0x84>)
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <switch_lcd+0x78>)
 800141e:	601a      	str	r2, [r3, #0]
	  LCD_RST_PIN = LCD1_RST_PIN;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <switch_lcd+0x88>)
 8001422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001426:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
	LCD_DC_PIN = LCD2_DC_PIN;
	LCD_RST_PORT = LCD2_RST_PORT;
	LCD_RST_PIN = LCD2_RST_PIN;
  }
}
 8001428:	e014      	b.n	8001454 <switch_lcd+0x64>
    LCD_CS_PORT = LCD2_CS_PORT;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <switch_lcd+0x74>)
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <switch_lcd+0x78>)
 800142e:	601a      	str	r2, [r3, #0]
	LCD_CS_PIN = LCD2_CS_PIN;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <switch_lcd+0x70>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <switch_lcd+0x7c>)
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <switch_lcd+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
	LCD_DC_PIN = LCD2_DC_PIN;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <switch_lcd+0x80>)
 8001440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001444:	801a      	strh	r2, [r3, #0]
	LCD_RST_PORT = LCD2_RST_PORT;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <switch_lcd+0x84>)
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <switch_lcd+0x78>)
 800144a:	601a      	str	r2, [r3, #0]
	LCD_RST_PIN = LCD2_RST_PIN;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <switch_lcd+0x88>)
 800144e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001452:	801a      	strh	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004
 8001468:	40021000 	.word	0x40021000
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000010 	.word	0x20000010
 8001474:	20000014 	.word	0x20000014
 8001478:	20000018 	.word	0x20000018

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001482:	f000 fd05 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001486:	f000 f87d 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148a:	f000 fa13 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800148e:	f000 f9f1 	bl	8001874 <MX_DMA_Init>
  MX_TIM4_Init();
 8001492:	f000 f96d 	bl	8001770 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001496:	f000 f9b7 	bl	8001808 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800149a:	f00a f945 	bl	800b728 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 800149e:	f000 f8d9 	bl	8001654 <MX_I2C2_Init>
  MX_SPI1_Init();
 80014a2:	f000 f92f 	bl	8001704 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCDs
  ILI9341_Init();
 80014a6:	f7ff fa6f 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff fb76 	bl	8000b9c <ILI9341_SetRotation>

  switch_lcd();
 80014b0:	f7ff ff9e 	bl	80013f0 <switch_lcd>
  ILI9341_Init();
 80014b4:	f7ff fa68 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fb6f 	bl	8000b9c <ILI9341_SetRotation>

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 80014be:	4827      	ldr	r0, [pc, #156]	; (800155c <main+0xe0>)
 80014c0:	f006 fb82 	bl	8007bc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80014c4:	4826      	ldr	r0, [pc, #152]	; (8001560 <main+0xe4>)
 80014c6:	f006 fb7f 	bl	8007bc8 <HAL_TIM_Base_Start_IT>

  // init counter variables
  row = 0;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <main+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  keycodeNum = 1;
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <main+0xec>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
  lastStateCLK = 0;
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <main+0xf0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  rotLock = 0;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <main+0xf4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

  lcd_counter = 0;
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <main+0xf8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
  turn_counter = 1;
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <main+0xfc>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  char buffer1[10];
  char buffer2[10];
  while (1)
  {
	  ILI9341_FillScreen(WHITE);
 80014ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014f2:	f7ff fc4d 	bl	8000d90 <ILI9341_FillScreen>

	  // draw the counter to the lcd
	  sprintf(buffer1, "%d", lcd_counter++);
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <main+0xf8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	491d      	ldr	r1, [pc, #116]	; (8001574 <main+0xf8>)
 80014fe:	600a      	str	r2, [r1, #0]
 8001500:	f107 000c 	add.w	r0, r7, #12
 8001504:	461a      	mov	r2, r3
 8001506:	491d      	ldr	r1, [pc, #116]	; (800157c <main+0x100>)
 8001508:	f00a fd86 	bl	800c018 <siprintf>
	  ILI9341_DrawText(buffer1, FONT4, 90, 110, BLACK, WHITE);
 800150c:	f107 000c 	add.w	r0, r7, #12
 8001510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	236e      	movs	r3, #110	; 0x6e
 800151c:	225a      	movs	r2, #90	; 0x5a
 800151e:	4918      	ldr	r1, [pc, #96]	; (8001580 <main+0x104>)
 8001520:	f7ff f89d 	bl	800065e <ILI9341_DrawText>

	  switch_lcd();
 8001524:	f7ff ff64 	bl	80013f0 <switch_lcd>

	  ILI9341_FillScreen(WHITE);
 8001528:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800152c:	f7ff fc30 	bl	8000d90 <ILI9341_FillScreen>

	  // draw the counter to the lcd
	  sprintf(buffer2, "%d", turn_counter);
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <main+0xfc>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	463b      	mov	r3, r7
 8001536:	4911      	ldr	r1, [pc, #68]	; (800157c <main+0x100>)
 8001538:	4618      	mov	r0, r3
 800153a:	f00a fd6d 	bl	800c018 <siprintf>
	  ILI9341_DrawText(buffer2, FONT4, 90, 110, BLACK, WHITE);
 800153e:	4638      	mov	r0, r7
 8001540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	2300      	movs	r3, #0
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	236e      	movs	r3, #110	; 0x6e
 800154c:	225a      	movs	r2, #90	; 0x5a
 800154e:	490c      	ldr	r1, [pc, #48]	; (8001580 <main+0x104>)
 8001550:	f7ff f885 	bl	800065e <ILI9341_DrawText>
	  switch_lcd();
 8001554:	f7ff ff4c 	bl	80013f0 <switch_lcd>
	  ILI9341_FillScreen(WHITE);
 8001558:	e7c9      	b.n	80014ee <main+0x72>
 800155a:	bf00      	nop
 800155c:	200002b8 	.word	0x200002b8
 8001560:	20000300 	.word	0x20000300
 8001564:	20000364 	.word	0x20000364
 8001568:	20000360 	.word	0x20000360
 800156c:	20000354 	.word	0x20000354
 8001570:	2000035c 	.word	0x2000035c
 8001574:	20000348 	.word	0x20000348
 8001578:	2000034c 	.word	0x2000034c
 800157c:	0800c90c 	.word	0x0800c90c
 8001580:	0800c948 	.word	0x0800c948

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2230      	movs	r2, #48	; 0x30
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f00a fd38 	bl	800c008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <SystemClock_Config+0xc8>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a26      	ldr	r2, [pc, #152]	; (800164c <SystemClock_Config+0xc8>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <SystemClock_Config+0xc8>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <SystemClock_Config+0xcc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a20      	ldr	r2, [pc, #128]	; (8001650 <SystemClock_Config+0xcc>)
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <SystemClock_Config+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ea:	2302      	movs	r3, #2
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f4:	2304      	movs	r3, #4
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015f8:	2348      	movs	r3, #72	; 0x48
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001600:	2303      	movs	r3, #3
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	4618      	mov	r0, r3
 800160a:	f005 fa2d 	bl	8006a68 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001614:	f000 fa1e 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	230f      	movs	r3, #15
 800161a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2102      	movs	r1, #2
 8001634:	4618      	mov	r0, r3
 8001636:	f005 fc8f 	bl	8006f58 <HAL_RCC_ClockConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001640:	f000 fa08 	bl	8001a54 <Error_Handler>
  }
}
 8001644:	bf00      	nop
 8001646:	3750      	adds	r7, #80	; 0x50
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_I2C2_Init+0xa4>)
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <MX_I2C2_Init+0xa8>)
 800165e:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_I2C2_Init+0xa4>)
 8001662:	4a27      	ldr	r2, [pc, #156]	; (8001700 <MX_I2C2_Init+0xac>)
 8001664:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_I2C2_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_I2C2_Init+0xa4>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_I2C2_Init+0xa4>)
 8001674:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001678:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_I2C2_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_I2C2_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_I2C2_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_I2C2_Init+0xa4>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001692:	4819      	ldr	r0, [pc, #100]	; (80016f8 <MX_I2C2_Init+0xa4>)
 8001694:	f001 fb12 	bl	8002cbc <HAL_I2C_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800169e:	f000 f9d9 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  uint8_t iodir[2] = { 0x00 , 0xf0 };     // set pins 0-3 output and 4-7 as input
 80016a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016a6:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, iodir, 2, HAL_MAX_DELAY);
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2302      	movs	r3, #2
 80016b4:	2140      	movs	r1, #64	; 0x40
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_I2C2_Init+0xa4>)
 80016b8:	f001 fc44 	bl	8002f44 <HAL_I2C_Master_Transmit>
  uint8_t gppu[2] = { 0x06, 0xf0 };       // enable pull up resistors for pins 4-7
 80016bc:	f24f 0306 	movw	r3, #61446	; 0xf006
 80016c0:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, gppu, 2, HAL_MAX_DELAY);
 80016c2:	f107 0208 	add.w	r2, r7, #8
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2302      	movs	r3, #2
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <MX_I2C2_Init+0xa4>)
 80016d2:	f001 fc37 	bl	8002f44 <HAL_I2C_Master_Transmit>
  uint8_t ipol[2] = { 0x01, 0xf0 };       // enable reverse for pins 4-7
 80016d6:	f24f 0301 	movw	r3, #61441	; 0xf001
 80016da:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, ipol, 2, HAL_MAX_DELAY);
 80016dc:	1d3a      	adds	r2, r7, #4
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2302      	movs	r3, #2
 80016e6:	2140      	movs	r1, #64	; 0x40
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <MX_I2C2_Init+0xa4>)
 80016ea:	f001 fc2b 	bl	8002f44 <HAL_I2C_Master_Transmit>

  /* USER CODE END I2C2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001ac 	.word	0x200001ac
 80016fc:	40005800 	.word	0x40005800
 8001700:	00061a80 	.word	0x00061a80

08001704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_SPI1_Init+0x64>)
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <MX_SPI1_Init+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0x64>)
 8001730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0x64>)
 8001738:	2208      	movs	r2, #8
 800173a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0x64>)
 8001750:	220a      	movs	r2, #10
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_SPI1_Init+0x64>)
 8001756:	f005 fe0b 	bl	8007370 <HAL_SPI_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001760:	f000 f978 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000200 	.word	0x20000200
 800176c:	40013000 	.word	0x40013000

08001770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_TIM4_Init+0x90>)
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <MX_TIM4_Init+0x94>)
 8001790:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_TIM4_Init+0x90>)
 8001794:	229f      	movs	r2, #159	; 0x9f
 8001796:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_TIM4_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_TIM4_Init+0x90>)
 80017a0:	2263      	movs	r2, #99	; 0x63
 80017a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_TIM4_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_TIM4_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_TIM4_Init+0x90>)
 80017b2:	f006 f9b9 	bl	8007b28 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80017bc:	f000 f94a 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_TIM4_Init+0x90>)
 80017ce:	f006 fb73 	bl	8007eb8 <HAL_TIM_ConfigClockSource>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80017d8:	f000 f93c 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_TIM4_Init+0x90>)
 80017ea:	f006 fd8f 	bl	800830c <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80017f4:	f000 f92e 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200002b8 	.word	0x200002b8
 8001804:	40000800 	.word	0x40000800

08001808 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_TIM6_Init+0x64>)
 8001818:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_TIM6_Init+0x68>)
 800181a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_TIM6_Init+0x64>)
 800181e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001822:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_TIM6_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_TIM6_Init+0x64>)
 800182c:	2213      	movs	r2, #19
 800182e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_TIM6_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_TIM6_Init+0x64>)
 8001838:	f006 f976 	bl	8007b28 <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001842:	f000 f907 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <MX_TIM6_Init+0x64>)
 8001854:	f006 fd5a 	bl	800830c <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800185e:	f000 f8f9 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000300 	.word	0x20000300
 8001870:	40001000 	.word	0x40001000

08001874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_DMA_Init+0x3c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <MX_DMA_Init+0x3c>)
 8001884:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_DMA_Init+0x3c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	203b      	movs	r0, #59	; 0x3b
 800189c:	f000 fc69 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018a0:	203b      	movs	r0, #59	; 0x3b
 80018a2:	f000 fc82 	bl	80021aa <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <MX_GPIO_Init+0x148>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <MX_GPIO_Init+0x148>)
 80018d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b48      	ldr	r3, [pc, #288]	; (80019fc <MX_GPIO_Init+0x148>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	4b44      	ldr	r3, [pc, #272]	; (80019fc <MX_GPIO_Init+0x148>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a43      	ldr	r2, [pc, #268]	; (80019fc <MX_GPIO_Init+0x148>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <MX_GPIO_Init+0x148>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <MX_GPIO_Init+0x148>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a3c      	ldr	r2, [pc, #240]	; (80019fc <MX_GPIO_Init+0x148>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <MX_GPIO_Init+0x148>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <MX_GPIO_Init+0x148>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a35      	ldr	r2, [pc, #212]	; (80019fc <MX_GPIO_Init+0x148>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <MX_GPIO_Init+0x148>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <MX_GPIO_Init+0x148>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <MX_GPIO_Init+0x148>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <MX_GPIO_Init+0x148>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_GPIO_Init+0x148>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a27      	ldr	r2, [pc, #156]	; (80019fc <MX_GPIO_Init+0x148>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <MX_GPIO_Init+0x148>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LDC1_RESET_Pin|LCD2_RESET_Pin|LCD1_CS_Pin|LCD1_DC_Pin
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <MX_GPIO_Init+0x14c>)
 800197a:	f001 f985 	bl	8002c88 <HAL_GPIO_WritePin>
                          |LCD2_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	210f      	movs	r1, #15
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <MX_GPIO_Init+0x150>)
 8001984:	f001 f980 	bl	8002c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LDC1_RESET_Pin LCD2_RESET_Pin LCD1_CS_Pin LCD1_DC_Pin
                           LCD2_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LDC1_RESET_Pin|LCD2_RESET_Pin|LCD1_CS_Pin|LCD1_DC_Pin
 8001988:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800198c:	61fb      	str	r3, [r7, #28]
                          |LCD2_CS_Pin|LCD2_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4817      	ldr	r0, [pc, #92]	; (8001a00 <MX_GPIO_Init+0x14c>)
 80019a2:	f000 ffbd 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_Pin ROT_DT_Pin ROT_CLCK_Pin */
  GPIO_InitStruct.Pin = ROT_SW_Pin|ROT_DT_Pin|ROT_CLCK_Pin;
 80019a6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_GPIO_Init+0x154>)
 80019bc:	f000 ffb0 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 80019c0:	230f      	movs	r3, #15
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <MX_GPIO_Init+0x150>)
 80019d8:	f000 ffa2 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 80019dc:	23f0      	movs	r3, #240	; 0xf0
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_GPIO_Init+0x150>)
 80019f0:	f000 ff96 	bl	8002920 <HAL_GPIO_Init>

}
 80019f4:	bf00      	nop
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40020800 	.word	0x40020800

08001a0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d107      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8001a1c:	f7ff fc1c 	bl	8001258 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8001a20:	2208      	movs	r2, #8
 8001a22:	4909      	ldr	r1, [pc, #36]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a26:	f008 fb05 	bl	800a034 <USBD_HID_SendReport>
		scan_keypad();

		/* Rotary Encoder */
		scan_rotary();
	}
}
 8001a2a:	e007      	b.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim == &htim6) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d103      	bne.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x30>
		scan_keypad();
 8001a34:	f7ff fa94 	bl	8000f60 <scan_keypad>
		scan_rotary();
 8001a38:	f7ff fb8c 	bl	8001154 <scan_rotary>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200002b8 	.word	0x200002b8
 8001a48:	20000390 	.word	0x20000390
 8001a4c:	200003a4 	.word	0x200003a4
 8001a50:	20000300 	.word	0x20000300

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_I2C_MspInit+0xa4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d13c      	bne.n	8001b4c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_I2C_MspInit+0xa8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_I2C_MspInit+0xa8>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_I2C_MspInit+0xa8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b00:	2304      	movs	r3, #4
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <HAL_I2C_MspInit+0xac>)
 8001b0c:	f000 ff08 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_I2C_MspInit+0xa8>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <HAL_I2C_MspInit+0xa8>)
 8001b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_I2C_MspInit+0xa8>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2021      	movs	r0, #33	; 0x21
 8001b32:	f000 fb1e 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b36:	2021      	movs	r0, #33	; 0x21
 8001b38:	f000 fb37 	bl	80021aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	f000 fb16 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b46:	2022      	movs	r0, #34	; 0x22
 8001b48:	f000 fb2f 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40005800 	.word	0x40005800
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020400 	.word	0x40020400

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a30      	ldr	r2, [pc, #192]	; (8001c40 <HAL_SPI_MspInit+0xe0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d159      	bne.n	8001c36 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_SPI_MspInit+0xe4>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <HAL_SPI_MspInit+0xe4>)
 8001b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_SPI_MspInit+0xe4>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_SPI_MspInit+0xe4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <HAL_SPI_MspInit+0xe4>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_SPI_MspInit+0xe4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bba:	23a0      	movs	r3, #160	; 0xa0
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481c      	ldr	r0, [pc, #112]	; (8001c48 <HAL_SPI_MspInit+0xe8>)
 8001bd6:	f000 fea3 	bl	8002920 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_SPI_MspInit+0xf0>)
 8001bde:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001be2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001be6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c1a:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c1c:	f000 fae0 	bl	80021e0 <HAL_DMA_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001c26:	f7ff ff15 	bl	8001a54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c2e:	649a      	str	r2, [r3, #72]	; 0x48
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_SPI_MspInit+0xec>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40013000 	.word	0x40013000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	20000258 	.word	0x20000258
 8001c50:	40026458 	.word	0x40026458

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_TIM_Base_MspInit+0x80>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d116      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	201e      	movs	r0, #30
 8001c88:	f000 fa73 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c8c:	201e      	movs	r0, #30
 8001c8e:	f000 fa8c 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c92:	e01a      	b.n	8001cca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_TIM_Base_MspInit+0x88>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d115      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001ca8:	f043 0310 	orr.w	r3, r3, #16
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2036      	movs	r0, #54	; 0x36
 8001cc0:	f000 fa57 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cc4:	2036      	movs	r0, #54	; 0x36
 8001cc6:	f000 fa70 	bl	80021aa <HAL_NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40001000 	.word	0x40001000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <UsageFault_Handler+0x4>

08001cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2c:	f000 f902 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM4_IRQHandler+0x10>)
 8001d3a:	f005 ffb5 	bl	8007ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200002b8 	.word	0x200002b8

08001d48 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <I2C2_EV_IRQHandler+0x10>)
 8001d4e:	f001 fc1d 	bl	800358c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001ac 	.word	0x200001ac

08001d5c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <I2C2_ER_IRQHandler+0x10>)
 8001d62:	f001 fd84 	bl	800386e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200001ac 	.word	0x200001ac

08001d70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM6_DAC_IRQHandler+0x10>)
 8001d76:	f005 ff97 	bl	8007ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000300 	.word	0x20000300

08001d84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <DMA2_Stream3_IRQHandler+0x10>)
 8001d8a:	f000 fb51 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000258 	.word	0x20000258

08001d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <OTG_FS_IRQHandler+0x10>)
 8001d9e:	f003 fd4d 	bl	800583c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000a80 	.word	0x20000a80

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f00a f8ea 	bl	800bfb4 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20020000 	.word	0x20020000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	20000398 	.word	0x20000398
 8001e14:	20000fb0 	.word	0x20000fb0

08001e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e42:	490e      	ldr	r1, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e58:	4c0b      	ldr	r4, [pc, #44]	; (8001e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e66:	f7ff ffd7 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f00a f8a9 	bl	800bfc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6e:	f7ff fb05 	bl	800147c <main>
  bx  lr    
 8001e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001e80:	0800db48 	.word	0x0800db48
  ldr r2, =_sbss
 8001e84:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001e88:	20000fb0 	.word	0x20000fb0

08001e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC_IRQHandler>
	...

08001e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_Init+0x40>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_Init+0x40>)
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_Init+0x40>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f000 f94f 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ebe:	200f      	movs	r0, #15
 8001ec0:	f000 f808 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec4:	f7ff fdcc 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x54>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x58>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f967 	bl	80021c6 <HAL_SYSTICK_Config>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00e      	b.n	8001f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d80a      	bhi.n	8001f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f10:	f000 f92f 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_InitTick+0x5c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2000001c 	.word	0x2000001c
 8001f2c:	20000024 	.word	0x20000024
 8001f30:	20000020 	.word	0x20000020

08001f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000024 	.word	0x20000024
 8001f58:	2000039c 	.word	0x2000039c

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000039c 	.word	0x2000039c

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9a:	bf00      	nop
 8001f9c:	f7ff ffde 	bl	8001f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000024 	.word	0x20000024

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <__NVIC_EnableIRQ+0x38>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	; (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	f7ff ff8e 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff29 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff3e 	bl	8002004 <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff8e 	bl	80020b0 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5d 	bl	800205c <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff31 	bl	8002020 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa2 	bl	8002118 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff feb6 	bl	8001f5c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e099      	b.n	8002330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	e00f      	b.n	800223e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221e:	f7ff fe9d 	bl	8001f5c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b05      	cmp	r3, #5
 800222a:	d908      	bls.n	800223e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e078      	b.n	8002330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e8      	bne.n	800221e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_DMA_Init+0x158>)
 8002258:	4013      	ands	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800226a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2b04      	cmp	r3, #4
 8002296:	d107      	bne.n	80022a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4313      	orrs	r3, r2
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f023 0307 	bic.w	r3, r3, #7
 80022be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d117      	bne.n	8002302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fa9f 	bl	8002828 <DMA_CheckFifoParam>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022fe:	2301      	movs	r3, #1
 8002300:	e016      	b.n	8002330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa56 	bl	80027bc <DMA_CalcBaseAndBitshift>
 8002310:	4603      	mov	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	223f      	movs	r2, #63	; 0x3f
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	f010803f 	.word	0xf010803f

0800233c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_DMA_Start_IT+0x26>
 800235e:	2302      	movs	r3, #2
 8002360:	e040      	b.n	80023e4 <HAL_DMA_Start_IT+0xa8>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d12f      	bne.n	80023d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2202      	movs	r2, #2
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f9e8 	bl	8002760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	223f      	movs	r2, #63	; 0x3f
 8002396:	409a      	lsls	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0216 	orr.w	r2, r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0208 	orr.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e005      	b.n	80023e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023de:	2302      	movs	r3, #2
 80023e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d004      	beq.n	800240a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00c      	b.n	8002424 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2205      	movs	r2, #5
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800243c:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <HAL_DMA_IRQHandler+0x248>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a8e      	ldr	r2, [pc, #568]	; (800267c <HAL_DMA_IRQHandler+0x24c>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2208      	movs	r2, #8
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01a      	beq.n	800249c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	2208      	movs	r2, #8
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2201      	movs	r2, #1
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2201      	movs	r2, #1
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2204      	movs	r2, #4
 80024d8:	409a      	lsls	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2204      	movs	r2, #4
 80024f6:	409a      	lsls	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	2210      	movs	r2, #16
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d043      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03c      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2210      	movs	r2, #16
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d018      	beq.n	8002572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d024      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
 800255e:	e01f      	b.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
 8002570:	e016      	b.n	80025a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2220      	movs	r2, #32
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 808f 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8087 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2220      	movs	r2, #32
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d136      	bne.n	8002648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0216 	bic.w	r2, r2, #22
 80025e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_DMA_IRQHandler+0x1da>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0208 	bic.w	r2, r2, #8
 8002618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	223f      	movs	r2, #63	; 0x3f
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263a:	2b00      	cmp	r3, #0
 800263c:	d07e      	beq.n	800273c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
        }
        return;
 8002646:	e079      	b.n	800273c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	2b00      	cmp	r3, #0
 800266a:	d031      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
 8002674:	e02c      	b.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
 8002676:	bf00      	nop
 8002678:	2000001c 	.word	0x2000001c
 800267c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e01e      	b.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0210 	bic.w	r2, r2, #16
 80026ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d032      	beq.n	800273e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d022      	beq.n	800272a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	d307      	bcc.n	8002718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <HAL_DMA_IRQHandler+0x2cc>
 8002716:	e000      	b.n	800271a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e000      	b.n	800273e <HAL_DMA_IRQHandler+0x30e>
        return;
 800273c:	bf00      	nop
    }
  }
}
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002752:	b2db      	uxtb	r3, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800277c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d108      	bne.n	80027a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800279e:	e007      	b.n	80027b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3b10      	subs	r3, #16
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <DMA_CalcBaseAndBitshift+0x64>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <DMA_CalcBaseAndBitshift+0x68>)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d909      	bls.n	80027fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	659a      	str	r2, [r3, #88]	; 0x58
 80027fc:	e007      	b.n	800280e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	aaaaaaab 	.word	0xaaaaaaab
 8002824:	0800dafc 	.word	0x0800dafc

08002828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11f      	bne.n	8002882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d856      	bhi.n	80028f6 <DMA_CheckFifoParam+0xce>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <DMA_CheckFifoParam+0x28>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002861 	.word	0x08002861
 8002854:	08002873 	.word	0x08002873
 8002858:	08002861 	.word	0x08002861
 800285c:	080028f7 	.word	0x080028f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d046      	beq.n	80028fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002870:	e043      	b.n	80028fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800287a:	d140      	bne.n	80028fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002880:	e03d      	b.n	80028fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288a:	d121      	bne.n	80028d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d837      	bhi.n	8002902 <DMA_CheckFifoParam+0xda>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <DMA_CheckFifoParam+0x70>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028af 	.word	0x080028af
 80028a0:	080028a9 	.word	0x080028a9
 80028a4:	080028c1 	.word	0x080028c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	e030      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d025      	beq.n	8002906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028be:	e022      	b.n	8002906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028c8:	d11f      	bne.n	800290a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ce:	e01c      	b.n	800290a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d903      	bls.n	80028de <DMA_CheckFifoParam+0xb6>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d003      	beq.n	80028e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028dc:	e018      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      break;
 80028e2:	e015      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e00b      	b.n	800290e <DMA_CheckFifoParam+0xe6>
      break;
 80028f6:	bf00      	nop
 80028f8:	e00a      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 80028fa:	bf00      	nop
 80028fc:	e008      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 80028fe:	bf00      	nop
 8002900:	e006      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 8002902:	bf00      	nop
 8002904:	e004      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;   
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
    }
  } 
  
  return status; 
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e16b      	b.n	8002c14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	f040 815a 	bne.w	8002c0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	2b02      	cmp	r3, #2
 8002970:	d130      	bne.n	80029d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0201 	and.w	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d017      	beq.n	8002a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d123      	bne.n	8002a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80b4 	beq.w	8002c0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_GPIO_Init+0x310>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_GPIO_Init+0x314>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02b      	beq.n	8002b46 <HAL_GPIO_Init+0x226>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_GPIO_Init+0x318>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d025      	beq.n	8002b42 <HAL_GPIO_Init+0x222>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <HAL_GPIO_Init+0x21e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4f      	ldr	r2, [pc, #316]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_Init+0x21a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4e      	ldr	r2, [pc, #312]	; (8002c44 <HAL_GPIO_Init+0x324>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x216>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <HAL_GPIO_Init+0x328>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4c      	ldr	r2, [pc, #304]	; (8002c4c <HAL_GPIO_Init+0x32c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x20e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4b      	ldr	r2, [pc, #300]	; (8002c50 <HAL_GPIO_Init+0x330>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x20a>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e00e      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	e00c      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b2e:	2306      	movs	r3, #6
 8002b30:	e00a      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b32:	2305      	movs	r3, #5
 8002b34:	e008      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b36:	2304      	movs	r3, #4
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e004      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x228>
 8002b46:	2300      	movs	r3, #0
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f002 0203 	and.w	r2, r2, #3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4093      	lsls	r3, r2
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b58:	4935      	ldr	r1, [pc, #212]	; (8002c30 <HAL_GPIO_Init+0x310>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8a:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_GPIO_Init+0x334>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	f67f ae90 	bls.w	800293c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40021400 	.word	0x40021400
 8002c4c:	40021800 	.word	0x40021800
 8002c50:	40021c00 	.word	0x40021c00
 8002c54:	40013c00 	.word	0x40013c00

08002c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e001      	b.n	8002c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
 8002c94:	4613      	mov	r3, r2
 8002c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c98:	787b      	ldrb	r3, [r7, #1]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca4:	e003      	b.n	8002cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ca6:	887b      	ldrh	r3, [r7, #2]
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	619a      	str	r2, [r3, #24]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e12b      	b.n	8002f26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe fee4 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d20:	f004 fb12 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8002d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a81      	ldr	r2, [pc, #516]	; (8002f30 <HAL_I2C_Init+0x274>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d807      	bhi.n	8002d40 <HAL_I2C_Init+0x84>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a80      	ldr	r2, [pc, #512]	; (8002f34 <HAL_I2C_Init+0x278>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e006      	b.n	8002d4e <HAL_I2C_Init+0x92>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <HAL_I2C_Init+0x27c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0e7      	b.n	8002f26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a78      	ldr	r2, [pc, #480]	; (8002f3c <HAL_I2C_Init+0x280>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0c9b      	lsrs	r3, r3, #18
 8002d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a6a      	ldr	r2, [pc, #424]	; (8002f30 <HAL_I2C_Init+0x274>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d802      	bhi.n	8002d90 <HAL_I2C_Init+0xd4>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	e009      	b.n	8002da4 <HAL_I2C_Init+0xe8>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <HAL_I2C_Init+0x284>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	3301      	adds	r3, #1
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002db6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	495c      	ldr	r1, [pc, #368]	; (8002f30 <HAL_I2C_Init+0x274>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	d819      	bhi.n	8002df8 <HAL_I2C_Init+0x13c>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e59      	subs	r1, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dd8:	400b      	ands	r3, r1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_I2C_Init+0x138>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1e59      	subs	r1, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df2:	e051      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002df4:	2304      	movs	r3, #4
 8002df6:	e04f      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d111      	bne.n	8002e24 <HAL_I2C_Init+0x168>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e012      	b.n	8002e4a <HAL_I2C_Init+0x18e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e58      	subs	r0, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	0099      	lsls	r1, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Init+0x196>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e022      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10e      	bne.n	8002e78 <HAL_I2C_Init+0x1bc>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e58      	subs	r0, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	440b      	add	r3, r1
 8002e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e76:	e00f      	b.n	8002e98 <HAL_I2C_Init+0x1dc>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6809      	ldr	r1, [r1, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6911      	ldr	r1, [r2, #16]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	000186a0 	.word	0x000186a0
 8002f34:	001e847f 	.word	0x001e847f
 8002f38:	003d08ff 	.word	0x003d08ff
 8002f3c:	431bde83 	.word	0x431bde83
 8002f40:	10624dd3 	.word	0x10624dd3

08002f44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	460b      	mov	r3, r1
 8002f52:	817b      	strh	r3, [r7, #10]
 8002f54:	4613      	mov	r3, r2
 8002f56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff f800 	bl	8001f5c <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	f040 80e0 	bne.w	800312c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2319      	movs	r3, #25
 8002f72:	2201      	movs	r2, #1
 8002f74:	4970      	ldr	r1, [pc, #448]	; (8003138 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f002 f8e6 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0d3      	b.n	800312e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2C_Master_Transmit+0x50>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0cc      	b.n	800312e <HAL_I2C_Master_Transmit+0x1ea>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d007      	beq.n	8002fba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2221      	movs	r2, #33	; 0x21
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	893a      	ldrh	r2, [r7, #8]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a50      	ldr	r2, [pc, #320]	; (800313c <HAL_I2C_Master_Transmit+0x1f8>)
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f001 fea8 	bl	8004d58 <I2C_MasterRequestWrite>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e08d      	b.n	800312e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003028:	e066      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f002 f960 	bl	80052f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b04      	cmp	r3, #4
 8003040:	d107      	bne.n	8003052 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003050:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	781a      	ldrb	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d11b      	bne.n	80030cc <HAL_I2C_Master_Transmit+0x188>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d017      	beq.n	80030cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	6a39      	ldr	r1, [r7, #32]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f002 f950 	bl	8005376 <I2C_WaitOnBTFFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d107      	bne.n	80030f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e01a      	b.n	800312e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d194      	bne.n	800302a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	00100002 	.word	0x00100002
 800313c:	ffff0000 	.word	0xffff0000

08003140 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	; 0x30
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	461a      	mov	r2, r3
 800314c:	460b      	mov	r3, r1
 800314e:	817b      	strh	r3, [r7, #10]
 8003150:	4613      	mov	r3, r2
 8003152:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7fe ff02 	bl	8001f5c <HAL_GetTick>
 8003158:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 820b 	bne.w	800357e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2319      	movs	r3, #25
 800316e:	2201      	movs	r2, #1
 8003170:	497c      	ldr	r1, [pc, #496]	; (8003364 <HAL_I2C_Master_Receive+0x224>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f001 ffe8 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	e1fe      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_I2C_Master_Receive+0x50>
 800318c:	2302      	movs	r3, #2
 800318e:	e1f7      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d007      	beq.n	80031b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2222      	movs	r2, #34	; 0x22
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2210      	movs	r2, #16
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	893a      	ldrh	r2, [r7, #8]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a5c      	ldr	r2, [pc, #368]	; (8003368 <HAL_I2C_Master_Receive+0x228>)
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f8:	8979      	ldrh	r1, [r7, #10]
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f001 fe2c 	bl	8004e5c <I2C_MasterRequestRead>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e1b8      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d113      	bne.n	800323e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e18c      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b01      	cmp	r3, #1
 8003244:	d11b      	bne.n	800327e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e16c      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b02      	cmp	r3, #2
 8003284:	d11b      	bne.n	80032be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	e14c      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032e4:	e138      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	f200 80f1 	bhi.w	80034d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d123      	bne.n	8003340 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f002 f8ad 	bl	800545c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e139      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800333e:	e10b      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b02      	cmp	r3, #2
 8003346:	d14e      	bne.n	80033e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	2200      	movs	r2, #0
 8003350:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_I2C_Master_Receive+0x22c>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f001 fef8 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e10e      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
 8003362:	bf00      	nop
 8003364:	00100002 	.word	0x00100002
 8003368:	ffff0000 	.word	0xffff0000
 800336c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e4:	e0b8      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	2200      	movs	r2, #0
 80033ee:	4966      	ldr	r1, [pc, #408]	; (8003588 <HAL_I2C_Master_Receive+0x448>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f001 fea9 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0bf      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	2200      	movs	r2, #0
 800344a:	494f      	ldr	r1, [pc, #316]	; (8003588 <HAL_I2C_Master_Receive+0x448>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f001 fe7b 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e091      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d0:	e042      	b.n	8003558 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f001 ffc0 	bl	800545c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e04c      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d118      	bne.n	8003558 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f aec2 	bne.w	80032e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	00010004 	.word	0x00010004

0800358c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d003      	beq.n	80035c4 <HAL_I2C_EV_IRQHandler+0x38>
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	f040 80c1 	bne.w	8003746 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <HAL_I2C_EV_IRQHandler+0x6e>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035e4:	d003      	beq.n	80035ee <HAL_I2C_EV_IRQHandler+0x62>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_EV_IRQHandler+0x66>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x68>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f000 8132 	beq.w	800385e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_I2C_EV_IRQHandler+0x92>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	0a5b      	lsrs	r3, r3, #9
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 ffa8 	bl	8005566 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fd83 	bl	8004122 <I2C_Master_SB>
 800361c:	e092      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0xb2>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	0a5b      	lsrs	r3, r3, #9
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fdf9 	bl	800422e <I2C_Master_ADD10>
 800363c:	e082      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0xd2>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fe13 	bl	8004282 <I2C_Master_ADDR>
 800365c:	e072      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d03b      	beq.n	80036e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003678:	f000 80f3 	beq.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	09db      	lsrs	r3, r3, #7
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00f      	beq.n	80036a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f9f3 	bl	8003a8c <I2C_MasterTransmit_TXE>
 80036a6:	e04d      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80d6 	beq.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0a5b      	lsrs	r3, r3, #9
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80cf 	beq.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036c4:	7bbb      	ldrb	r3, [r7, #14]
 80036c6:	2b21      	cmp	r3, #33	; 0x21
 80036c8:	d103      	bne.n	80036d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa7a 	bl	8003bc4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d0:	e0c7      	b.n	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	f040 80c4 	bne.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fae8 	bl	8003cb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e0:	e0bf      	b.n	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f0:	f000 80b7 	beq.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00f      	beq.n	8003720 <HAL_I2C_EV_IRQHandler+0x194>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <HAL_I2C_EV_IRQHandler+0x194>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d103      	bne.n	8003720 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fb5d 	bl	8003dd8 <I2C_MasterReceive_RXNE>
 800371e:	e011      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 809a 	beq.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	0a5b      	lsrs	r3, r3, #9
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8093 	beq.w	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fc06 	bl	8003f4e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003742:	e08e      	b.n	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003744:	e08d      	b.n	8003862 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e007      	b.n	8003768 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d012      	beq.n	800379a <HAL_I2C_EV_IRQHandler+0x20e>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	0a5b      	lsrs	r3, r3, #9
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003790:	69b9      	ldr	r1, [r7, #24]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 ffc4 	bl	8004720 <I2C_Slave_ADDR>
 8003798:	e066      	b.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x22e>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	0a5b      	lsrs	r3, r3, #9
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fffe 	bl	80047b4 <I2C_Slave_STOPF>
 80037b8:	e056      	b.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	2b21      	cmp	r3, #33	; 0x21
 80037be:	d002      	beq.n	80037c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80037c0:	7bbb      	ldrb	r3, [r7, #14]
 80037c2:	2b29      	cmp	r3, #41	; 0x29
 80037c4:	d125      	bne.n	8003812 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	09db      	lsrs	r3, r3, #7
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <HAL_I2C_EV_IRQHandler+0x266>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	0a9b      	lsrs	r3, r3, #10
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_I2C_EV_IRQHandler+0x266>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 feda 	bl	80045a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037f0:	e039      	b.n	8003866 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d033      	beq.n	8003866 <HAL_I2C_EV_IRQHandler+0x2da>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	0a5b      	lsrs	r3, r3, #9
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02d      	beq.n	8003866 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 ff07 	bl	800461e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003810:	e029      	b.n	8003866 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00f      	beq.n	800383e <HAL_I2C_EV_IRQHandler+0x2b2>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	0a9b      	lsrs	r3, r3, #10
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_I2C_EV_IRQHandler+0x2b2>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 ff12 	bl	8004660 <I2C_SlaveReceive_RXNE>
 800383c:	e014      	b.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	0a5b      	lsrs	r3, r3, #9
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 ff40 	bl	80046dc <I2C_SlaveReceive_BTF>
 800385c:	e004      	b.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003866:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b08a      	sub	sp, #40	; 0x28
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003890:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00e      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x4e>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	0a5b      	lsrs	r3, r3, #9
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <HAL_I2C_ER_IRQHandler+0x78>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80038e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	0a9b      	lsrs	r3, r3, #10
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03f      	beq.n	8003972 <HAL_I2C_ER_IRQHandler+0x104>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d039      	beq.n	8003972 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80038fe:	7efb      	ldrb	r3, [r7, #27]
 8003900:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003918:	7ebb      	ldrb	r3, [r7, #26]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d112      	bne.n	8003944 <HAL_I2C_ER_IRQHandler+0xd6>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10f      	bne.n	8003944 <HAL_I2C_ER_IRQHandler+0xd6>
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	2b21      	cmp	r3, #33	; 0x21
 8003928:	d008      	beq.n	800393c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b29      	cmp	r3, #41	; 0x29
 800392e:	d005      	beq.n	800393c <HAL_I2C_ER_IRQHandler+0xce>
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b28      	cmp	r3, #40	; 0x28
 8003934:	d106      	bne.n	8003944 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b21      	cmp	r3, #33	; 0x21
 800393a:	d103      	bne.n	8003944 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f001 f869 	bl	8004a14 <I2C_Slave_AF>
 8003942:	e016      	b.n	8003972 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800394c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003956:	7efb      	ldrb	r3, [r7, #27]
 8003958:	2b10      	cmp	r3, #16
 800395a:	d002      	beq.n	8003962 <HAL_I2C_ER_IRQHandler+0xf4>
 800395c:	7efb      	ldrb	r3, [r7, #27]
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d107      	bne.n	8003972 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	0adb      	lsrs	r3, r3, #11
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <HAL_I2C_ER_IRQHandler+0x12e>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	f043 0308 	orr.w	r3, r3, #8
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800399a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f001 f8a0 	bl	8004af4 <I2C_ITError>
  }
}
 80039b4:	bf00      	nop
 80039b6:	3728      	adds	r7, #40	; 0x28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d150      	bne.n	8003b54 <I2C_MasterTransmit_TXE+0xc8>
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b21      	cmp	r3, #33	; 0x21
 8003ab6:	d14d      	bne.n	8003b54 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d01d      	beq.n	8003afa <I2C_MasterTransmit_TXE+0x6e>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d01a      	beq.n	8003afa <I2C_MasterTransmit_TXE+0x6e>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aca:	d016      	beq.n	8003afa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ada:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2211      	movs	r2, #17
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff62 	bl	80039bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003af8:	e060      	b.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b08:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d107      	bne.n	8003b44 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff7d 	bl	8003a3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b42:	e03b      	b.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ff35 	bl	80039bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b52:	e033      	b.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b21      	cmp	r3, #33	; 0x21
 8003b58:	d005      	beq.n	8003b66 <I2C_MasterTransmit_TXE+0xda>
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d12d      	bne.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b22      	cmp	r3, #34	; 0x22
 8003b64:	d12a      	bne.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b80:	e01c      	b.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d103      	bne.n	8003b96 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f88e 	bl	8003cb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b94:	e012      	b.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bba:	e7ff      	b.n	8003bbc <I2C_MasterTransmit_TXE+0x130>
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b21      	cmp	r3, #33	; 0x21
 8003bdc:	d164      	bne.n	8003ca8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d012      	beq.n	8003c0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c0c:	e04c      	b.n	8003ca8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d01d      	beq.n	8003c50 <I2C_MasterTransmit_BTF+0x8c>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d01a      	beq.n	8003c50 <I2C_MasterTransmit_BTF+0x8c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c20:	d016      	beq.n	8003c50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2211      	movs	r2, #17
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff feb7 	bl	80039bc <HAL_I2C_MasterTxCpltCallback>
}
 8003c4e:	e02b      	b.n	8003ca8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d107      	bne.n	8003c9a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fed2 	bl	8003a3c <HAL_I2C_MemTxCpltCallback>
}
 8003c98:	e006      	b.n	8003ca8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fe8a 	bl	80039bc <HAL_I2C_MasterTxCpltCallback>
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11d      	bne.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d10b      	bne.n	8003ce8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ce6:	e073      	b.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	121b      	asrs	r3, r3, #8
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d02:	e065      	b.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10b      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d22:	e055      	b.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d151      	bne.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b22      	cmp	r3, #34	; 0x22
 8003d30:	d10d      	bne.n	8003d4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d4c:	e040      	b.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b21      	cmp	r3, #33	; 0x21
 8003d5c:	d112      	bne.n	8003d84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d82:	e025      	b.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d120      	bne.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b21      	cmp	r3, #33	; 0x21
 8003d92:	d11d      	bne.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003da2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fe36 	bl	8003a3c <HAL_I2C_MemTxCpltCallback>
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b22      	cmp	r3, #34	; 0x22
 8003dea:	f040 80ac 	bne.w	8003f46 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d921      	bls.n	8003e40 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	f040 808c 	bne.w	8003f46 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e3e:	e082      	b.n	8003f46 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d075      	beq.n	8003f34 <I2C_MasterReceive_RXNE+0x15c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d002      	beq.n	8003e54 <I2C_MasterReceive_RXNE+0x7c>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d16f      	bne.n	8003f34 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 facf 	bl	80053f8 <I2C_WaitOnSTOPRequestThroughIT>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d142      	bne.n	8003ee6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d10a      	bne.n	8003ed0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fdc1 	bl	8003a50 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ece:	e03a      	b.n	8003f46 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2212      	movs	r2, #18
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fd76 	bl	80039d0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ee4:	e02f      	b.n	8003f46 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fd99 	bl	8003a64 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f32:	e008      	b.n	8003f46 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	605a      	str	r2, [r3, #4]
}
 8003f44:	e7ff      	b.n	8003f46 <I2C_MasterReceive_RXNE+0x16e>
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d11b      	bne.n	8003f9e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f9c:	e0bd      	b.n	800411a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d129      	bne.n	8003ffc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d00a      	beq.n	8003fd4 <I2C_MasterReceive_BTF+0x86>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d007      	beq.n	8003fd4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ffa:	e08e      	b.n	800411a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d176      	bne.n	80040f4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d002      	beq.n	8004012 <I2C_MasterReceive_BTF+0xc4>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b10      	cmp	r3, #16
 8004010:	d108      	bne.n	8004024 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e019      	b.n	8004058 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d002      	beq.n	8004030 <I2C_MasterReceive_BTF+0xe2>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d108      	bne.n	8004042 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e00a      	b.n	8004058 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b10      	cmp	r3, #16
 8004046:	d007      	beq.n	8004058 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10a      	bne.n	80040de <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fcba 	bl	8003a50 <HAL_I2C_MemRxCpltCallback>
}
 80040dc:	e01d      	b.n	800411a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2212      	movs	r2, #18
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fc6f 	bl	80039d0 <HAL_I2C_MasterRxCpltCallback>
}
 80040f2:	e012      	b.n	800411a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d117      	bne.n	8004166 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800414e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004150:	e067      	b.n	8004222 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	b2da      	uxtb	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
}
 8004164:	e05d      	b.n	8004222 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416e:	d133      	bne.n	80041d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b21      	cmp	r3, #33	; 0x21
 800417a:	d109      	bne.n	8004190 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e008      	b.n	80041a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <I2C_Master_SB+0x92>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d032      	beq.n	8004222 <I2C_Master_SB+0x100>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d02d      	beq.n	8004222 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d4:	605a      	str	r2, [r3, #4]
}
 80041d6:	e024      	b.n	8004222 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10e      	bne.n	80041fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	11db      	asrs	r3, r3, #7
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0306 	and.w	r3, r3, #6
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f063 030f 	orn	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]
}
 80041fc:	e011      	b.n	8004222 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10d      	bne.n	8004222 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	b29b      	uxth	r3, r3
 800420c:	11db      	asrs	r3, r3, #7
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 0306 	and.w	r3, r3, #6
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f063 030e 	orn	r3, r3, #14
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	b2da      	uxtb	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <I2C_Master_ADD10+0x26>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d108      	bne.n	8004266 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <I2C_Master_ADD10+0x48>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004274:	605a      	str	r2, [r3, #4]
  }
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004282:	b480      	push	{r7}
 8004284:	b091      	sub	sp, #68	; 0x44
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b22      	cmp	r3, #34	; 0x22
 80042aa:	f040 8169 	bne.w	8004580 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <I2C_Master_ADDR+0x54>
 80042b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d10b      	bne.n	80042d6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042be:	2300      	movs	r3, #0
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	e160      	b.n	8004598 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11d      	bne.n	800431a <I2C_Master_ADDR+0x98>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042e6:	d118      	bne.n	800431a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	651a      	str	r2, [r3, #80]	; 0x50
 8004318:	e13e      	b.n	8004598 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d113      	bne.n	800434c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004324:	2300      	movs	r3, #0
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e115      	b.n	8004578 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	f040 808a 	bne.w	800446c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800435e:	d137      	bne.n	80043d0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437e:	d113      	bne.n	80043a8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004390:	2300      	movs	r3, #0
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	e0e7      	b.n	8004578 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	2300      	movs	r3, #0
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e0d3      	b.n	8004578 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d02e      	beq.n	8004434 <I2C_Master_ADDR+0x1b2>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d02b      	beq.n	8004434 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043de:	2b12      	cmp	r3, #18
 80043e0:	d102      	bne.n	80043e8 <I2C_Master_ADDR+0x166>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d125      	bne.n	8004434 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d00e      	beq.n	800440c <I2C_Master_ADDR+0x18a>
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d00b      	beq.n	800440c <I2C_Master_ADDR+0x18a>
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d008      	beq.n	800440c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e007      	b.n	800441c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800441a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	e0a1      	b.n	8004578 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004442:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e085      	b.n	8004578 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d14d      	bne.n	8004512 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2b04      	cmp	r3, #4
 800447a:	d016      	beq.n	80044aa <I2C_Master_ADDR+0x228>
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2b02      	cmp	r3, #2
 8004480:	d013      	beq.n	80044aa <I2C_Master_ADDR+0x228>
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2b10      	cmp	r3, #16
 8004486:	d010      	beq.n	80044aa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004496:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e007      	b.n	80044ba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c8:	d117      	bne.n	80044fa <I2C_Master_ADDR+0x278>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d0:	d00b      	beq.n	80044ea <I2C_Master_ADDR+0x268>
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d008      	beq.n	80044ea <I2C_Master_ADDR+0x268>
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d005      	beq.n	80044ea <I2C_Master_ADDR+0x268>
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d002      	beq.n	80044ea <I2C_Master_ADDR+0x268>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d107      	bne.n	80044fa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	e032      	b.n	8004578 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004520:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004530:	d117      	bne.n	8004562 <I2C_Master_ADDR+0x2e0>
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004538:	d00b      	beq.n	8004552 <I2C_Master_ADDR+0x2d0>
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	2b01      	cmp	r3, #1
 800453e:	d008      	beq.n	8004552 <I2C_Master_ADDR+0x2d0>
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	2b08      	cmp	r3, #8
 8004544:	d005      	beq.n	8004552 <I2C_Master_ADDR+0x2d0>
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	2b10      	cmp	r3, #16
 800454a:	d002      	beq.n	8004552 <I2C_Master_ADDR+0x2d0>
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	2b20      	cmp	r3, #32
 8004550:	d107      	bne.n	8004562 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004560:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800457e:	e00b      	b.n	8004598 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
}
 8004596:	e7ff      	b.n	8004598 <I2C_Master_ADDR+0x316>
 8004598:	bf00      	nop
 800459a:	3744      	adds	r7, #68	; 0x44
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02b      	beq.n	8004616 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d114      	bne.n	8004616 <I2C_SlaveTransmit_TXE+0x72>
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b29      	cmp	r3, #41	; 0x29
 80045f0:	d111      	bne.n	8004616 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004600:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2221      	movs	r2, #33	; 0x21
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2228      	movs	r2, #40	; 0x28
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff f9e7 	bl	80039e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d011      	beq.n	8004654 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02c      	beq.n	80046d4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d114      	bne.n	80046d4 <I2C_SlaveReceive_RXNE+0x74>
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b2a      	cmp	r3, #42	; 0x2a
 80046ae:	d111      	bne.n	80046d4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2222      	movs	r2, #34	; 0x22
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2228      	movs	r2, #40	; 0x28
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff f992 	bl	80039f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d012      	beq.n	8004714 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800473a:	2b28      	cmp	r3, #40	; 0x28
 800473c:	d127      	bne.n	800478e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	09db      	lsrs	r3, r3, #7
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	81bb      	strh	r3, [r7, #12]
 8004770:	e002      	b.n	8004778 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004780:	89ba      	ldrh	r2, [r7, #12]
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff f940 	bl	8003a0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800478c:	e00e      	b.n	80047ac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004800:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004810:	d172      	bne.n	80048f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b22      	cmp	r3, #34	; 0x22
 8004816:	d002      	beq.n	800481e <I2C_Slave_STOPF+0x6a>
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b2a      	cmp	r3, #42	; 0x2a
 800481c:	d135      	bne.n	800488a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004850:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd ff74 	bl	8002744 <HAL_DMA_GetState>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d049      	beq.n	80048f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <I2C_Slave_STOPF+0x258>)
 8004868:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd fdbc 	bl	80023ec <HAL_DMA_Abort_IT>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d03d      	beq.n	80048f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004888:	e035      	b.n	80048f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd ff3e 	bl	8002744 <HAL_DMA_GetState>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d014      	beq.n	80048f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	4a4e      	ldr	r2, [pc, #312]	; (8004a0c <I2C_Slave_STOPF+0x258>)
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fd86 	bl	80023ec <HAL_DMA_Abort_IT>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048f0:	4610      	mov	r0, r2
 80048f2:	4798      	blx	r3
 80048f4:	e000      	b.n	80048f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d03e      	beq.n	8004980 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d112      	bne.n	8004936 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d112      	bne.n	800496a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f043 0204 	orr.w	r2, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8b3 	bl	8004af4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800498e:	e039      	b.n	8004a04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b2a      	cmp	r3, #42	; 0x2a
 8004994:	d109      	bne.n	80049aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2228      	movs	r2, #40	; 0x28
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff f827 	bl	80039f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b28      	cmp	r3, #40	; 0x28
 80049b4:	d111      	bne.n	80049da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <I2C_Slave_STOPF+0x25c>)
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff f828 	bl	8003a28 <HAL_I2C_ListenCpltCallback>
}
 80049d8:	e014      	b.n	8004a04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	2b22      	cmp	r3, #34	; 0x22
 80049e0:	d002      	beq.n	80049e8 <I2C_Slave_STOPF+0x234>
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b22      	cmp	r3, #34	; 0x22
 80049e6:	d10d      	bne.n	8004a04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fe fffa 	bl	80039f8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08004ff9 	.word	0x08004ff9
 8004a10:	ffff0000 	.word	0xffff0000

08004a14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d002      	beq.n	8004a36 <I2C_Slave_AF+0x22>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d129      	bne.n	8004a8a <I2C_Slave_AF+0x76>
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b28      	cmp	r3, #40	; 0x28
 8004a3a:	d126      	bne.n	8004a8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <I2C_Slave_AF+0xdc>)
 8004a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe ffd0 	bl	8003a28 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a88:	e02e      	b.n	8004ae8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b21      	cmp	r3, #33	; 0x21
 8004a8e:	d126      	bne.n	8004ade <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <I2C_Slave_AF+0xdc>)
 8004a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2221      	movs	r2, #33	; 0x21
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fe ff84 	bl	80039e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004adc:	e004      	b.n	8004ae8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae6:	615a      	str	r2, [r3, #20]
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	ffff0000 	.word	0xffff0000

08004af4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b0c:	7bbb      	ldrb	r3, [r7, #14]
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d002      	beq.n	8004b18 <I2C_ITError+0x24>
 8004b12:	7bbb      	ldrb	r3, [r7, #14]
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d10a      	bne.n	8004b2e <I2C_ITError+0x3a>
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b22      	cmp	r3, #34	; 0x22
 8004b1c:	d107      	bne.n	8004b2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b34:	2b28      	cmp	r3, #40	; 0x28
 8004b36:	d107      	bne.n	8004b48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2228      	movs	r2, #40	; 0x28
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b46:	e015      	b.n	8004b74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b56:	d00a      	beq.n	8004b6e <I2C_ITError+0x7a>
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b60      	cmp	r3, #96	; 0x60
 8004b5c:	d007      	beq.n	8004b6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d162      	bne.n	8004c4a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d020      	beq.n	8004be4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	4a6a      	ldr	r2, [pc, #424]	; (8004d50 <I2C_ITError+0x25c>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fc1c 	bl	80023ec <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8089 	beq.w	8004cce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bde:	4610      	mov	r0, r2
 8004be0:	4798      	blx	r3
 8004be2:	e074      	b.n	8004cce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	4a59      	ldr	r2, [pc, #356]	; (8004d50 <I2C_ITError+0x25c>)
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fd fbfb 	bl	80023ec <HAL_DMA_Abort_IT>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d068      	beq.n	8004cce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d10b      	bne.n	8004c22 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c44:	4610      	mov	r0, r2
 8004c46:	4798      	blx	r3
 8004c48:	e041      	b.n	8004cce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b60      	cmp	r3, #96	; 0x60
 8004c54:	d125      	bne.n	8004ca2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d10b      	bne.n	8004c8a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe feec 	bl	8003a78 <HAL_I2C_AbortCpltCallback>
 8004ca0:	e015      	b.n	8004cce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d10b      	bne.n	8004cc8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fe fecb 	bl	8003a64 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10e      	bne.n	8004cfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d113      	bne.n	8004d48 <I2C_ITError+0x254>
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b28      	cmp	r3, #40	; 0x28
 8004d24:	d110      	bne.n	8004d48 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <I2C_ITError+0x260>)
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fe fe70 	bl	8003a28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	08004ff9 	.word	0x08004ff9
 8004d54:	ffff0000 	.word	0xffff0000

08004d58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	460b      	mov	r3, r1
 8004d66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d006      	beq.n	8004d82 <I2C_MasterRequestWrite+0x2a>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d003      	beq.n	8004d82 <I2C_MasterRequestWrite+0x2a>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d80:	d108      	bne.n	8004d94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e00b      	b.n	8004dac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	2b12      	cmp	r3, #18
 8004d9a:	d107      	bne.n	8004dac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f9c5 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	d103      	bne.n	8004ddc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e035      	b.n	8004e4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de8:	d108      	bne.n	8004dfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dea:	897b      	ldrh	r3, [r7, #10]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df8:	611a      	str	r2, [r3, #16]
 8004dfa:	e01b      	b.n	8004e34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	11db      	asrs	r3, r3, #7
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 0306 	and.w	r3, r3, #6
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f063 030f 	orn	r3, r3, #15
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <I2C_MasterRequestWrite+0xfc>)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f9eb 	bl	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e010      	b.n	8004e4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4907      	ldr	r1, [pc, #28]	; (8004e58 <I2C_MasterRequestWrite+0x100>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f9db 	bl	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010008 	.word	0x00010008
 8004e58:	00010002 	.word	0x00010002

08004e5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d006      	beq.n	8004e96 <I2C_MasterRequestRead+0x3a>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d003      	beq.n	8004e96 <I2C_MasterRequestRead+0x3a>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e94:	d108      	bne.n	8004ea8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e00b      	b.n	8004ec0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b11      	cmp	r3, #17
 8004eae:	d107      	bne.n	8004ec0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f93b 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d103      	bne.n	8004ef0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e079      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	d108      	bne.n	8004f10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e05f      	b.n	8004fd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f10:	897b      	ldrh	r3, [r7, #10]
 8004f12:	11db      	asrs	r3, r3, #7
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 0306 	and.w	r3, r3, #6
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f063 030f 	orn	r3, r3, #15
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4930      	ldr	r1, [pc, #192]	; (8004ff0 <I2C_MasterRequestRead+0x194>)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f961 	bl	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e054      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f3e:	897b      	ldrh	r3, [r7, #10]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4929      	ldr	r1, [pc, #164]	; (8004ff4 <I2C_MasterRequestRead+0x198>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f951 	bl	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e044      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f8d9 	bl	8005148 <I2C_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d103      	bne.n	8004fb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e017      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fb8:	897b      	ldrh	r3, [r7, #10]
 8004fba:	11db      	asrs	r3, r3, #7
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0306 	and.w	r3, r3, #6
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f063 030e 	orn	r3, r3, #14
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	4907      	ldr	r1, [pc, #28]	; (8004ff4 <I2C_MasterRequestRead+0x198>)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f90d 	bl	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	00010008 	.word	0x00010008
 8004ff4:	00010002 	.word	0x00010002

08004ff8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005012:	4b4b      	ldr	r3, [pc, #300]	; (8005140 <I2C_DMAAbort+0x148>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	08db      	lsrs	r3, r3, #3
 8005018:	4a4a      	ldr	r2, [pc, #296]	; (8005144 <I2C_DMAAbort+0x14c>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0a1a      	lsrs	r2, r3, #8
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00da      	lsls	r2, r3, #3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800503e:	e00a      	b.n	8005056 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005054:	d0ea      	beq.n	800502c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	2200      	movs	r2, #0
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	2200      	movs	r2, #0
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005084:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	2200      	movs	r2, #0
 800509a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	2200      	movs	r2, #0
 80050aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d10e      	bne.n	80050e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050de:	6978      	ldr	r0, [r7, #20]
 80050e0:	f7fe fcca 	bl	8003a78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050e4:	e027      	b.n	8005136 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050ec:	2b28      	cmp	r3, #40	; 0x28
 80050ee:	d117      	bne.n	8005120 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2228      	movs	r2, #40	; 0x28
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800511e:	e007      	b.n	8005130 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005130:	6978      	ldr	r0, [r7, #20]
 8005132:	f7fe fc97 	bl	8003a64 <HAL_I2C_ErrorCallback>
}
 8005136:	bf00      	nop
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2000001c 	.word	0x2000001c
 8005144:	14f8b589 	.word	0x14f8b589

08005148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005158:	e025      	b.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005160:	d021      	beq.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fc fefb 	bl	8001f5c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d116      	bne.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e023      	b.n	80051ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10d      	bne.n	80051cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	e00c      	b.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	43da      	mvns	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4013      	ands	r3, r2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d0b6      	beq.n	800515a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005204:	e051      	b.n	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005214:	d123      	bne.n	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005224:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800522e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e046      	b.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005264:	d021      	beq.n	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fc fe79 	bl	8001f5c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d116      	bne.n	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e020      	b.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10c      	bne.n	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	43da      	mvns	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e00b      	b.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d18d      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005300:	e02d      	b.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f900 	bl	8005508 <I2C_IsAcknowledgeFailed>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e02d      	b.n	800536e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005318:	d021      	beq.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fc fe1f 	bl	8001f5c <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d116      	bne.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e007      	b.n	800536e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b80      	cmp	r3, #128	; 0x80
 800536a:	d1ca      	bne.n	8005302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005382:	e02d      	b.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f8bf 	bl	8005508 <I2C_IsAcknowledgeFailed>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e02d      	b.n	80053f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800539a:	d021      	beq.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539c:	f7fc fdde 	bl	8001f5c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d302      	bcc.n	80053b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d1ca      	bne.n	8005384 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005404:	4b13      	ldr	r3, [pc, #76]	; (8005454 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	08db      	lsrs	r3, r3, #3
 800540a:	4a13      	ldr	r2, [pc, #76]	; (8005458 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	0a1a      	lsrs	r2, r3, #8
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3b01      	subs	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e008      	b.n	8005448 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005444:	d0e9      	beq.n	800541a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	2000001c 	.word	0x2000001c
 8005458:	14f8b589 	.word	0x14f8b589

0800545c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005468:	e042      	b.n	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b10      	cmp	r3, #16
 8005476:	d119      	bne.n	80054ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0210 	mvn.w	r2, #16
 8005480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e029      	b.n	8005500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7fc fd56 	bl	8001f5c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d116      	bne.n	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e007      	b.n	8005500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d1b5      	bne.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d11b      	bne.n	8005558 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005528:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	f043 0204 	orr.w	r2, r3, #4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005576:	d103      	bne.n	8005580 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800557e:	e007      	b.n	8005590 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005588:	d102      	bne.n	8005590 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2208      	movs	r2, #8
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800559c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559e:	b08f      	sub	sp, #60	; 0x3c
 80055a0:	af0a      	add	r7, sp, #40	; 0x28
 80055a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e10f      	b.n	80057ce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f006 f9e3 	bl	800b994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2203      	movs	r2, #3
 80055d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f003 f832 	bl	8008656 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	687e      	ldr	r6, [r7, #4]
 80055fa:	466d      	mov	r5, sp
 80055fc:	f106 0410 	add.w	r4, r6, #16
 8005600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800560c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005610:	1d33      	adds	r3, r6, #4
 8005612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005614:	6838      	ldr	r0, [r7, #0]
 8005616:	f002 ff09 	bl	800842c <USB_CoreInit>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0d0      	b.n	80057ce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f003 f820 	bl	8008678 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
 800563c:	e04a      	b.n	80056d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	333d      	adds	r3, #61	; 0x3d
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005652:	7bfa      	ldrb	r2, [r7, #15]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	333c      	adds	r3, #60	; 0x3c
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	b298      	uxth	r0, r3
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	3344      	adds	r3, #68	; 0x44
 800567a:	4602      	mov	r2, r0
 800567c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800567e:	7bfa      	ldrb	r2, [r7, #15]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	3340      	adds	r3, #64	; 0x40
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	3348      	adds	r3, #72	; 0x48
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	334c      	adds	r3, #76	; 0x4c
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056ba:	7bfa      	ldrb	r2, [r7, #15]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3354      	adds	r3, #84	; 0x54
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	3301      	adds	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d3af      	bcc.n	800563e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
 80056e2:	e044      	b.n	800576e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	3301      	adds	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
 800576e:	7bfa      	ldrb	r2, [r7, #15]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d3b5      	bcc.n	80056e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	687e      	ldr	r6, [r7, #4]
 8005780:	466d      	mov	r5, sp
 8005782:	f106 0410 	add.w	r4, r6, #16
 8005786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800578a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800578c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800578e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005792:	e885 0003 	stmia.w	r5, {r0, r1}
 8005796:	1d33      	adds	r3, r6, #4
 8005798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800579a:	6838      	ldr	r0, [r7, #0]
 800579c:	f002 ffb8 	bl	8008710 <USB_DevInit>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e00d      	b.n	80057ce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f004 f907 	bl	80099da <USB_DevDisconnect>

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_PCD_Start+0x1c>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e020      	b.n	8005834 <HAL_PCD_Start+0x5e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d109      	bne.n	8005816 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005806:	2b01      	cmp	r3, #1
 8005808:	d005      	beq.n	8005816 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f002 ff0a 	bl	8008634 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f004 f8b7 	bl	8009998 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b08d      	sub	sp, #52	; 0x34
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f004 f975 	bl	8009b42 <USB_GetMode>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 848a 	bne.w	8006174 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f004 f8d9 	bl	8009a1c <USB_ReadInterrupts>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8480 	beq.w	8006172 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f004 f8c6 	bl	8009a1c <USB_ReadInterrupts>
 8005890:	4603      	mov	r3, r0
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d107      	bne.n	80058aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 0202 	and.w	r2, r2, #2
 80058a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f004 f8b4 	bl	8009a1c <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d161      	bne.n	8005982 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0210 	bic.w	r2, r2, #16
 80058cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 020f 	and.w	r2, r3, #15
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	3304      	adds	r3, #4
 80058ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	0c5b      	lsrs	r3, r3, #17
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d124      	bne.n	8005944 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d035      	beq.n	8005972 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6a38      	ldr	r0, [r7, #32]
 800591a:	f003 feeb 	bl	80096f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592a:	441a      	add	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593c:	441a      	add	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	621a      	str	r2, [r3, #32]
 8005942:	e016      	b.n	8005972 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	0c5b      	lsrs	r3, r3, #17
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2b06      	cmp	r3, #6
 800594e:	d110      	bne.n	8005972 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005956:	2208      	movs	r2, #8
 8005958:	4619      	mov	r1, r3
 800595a:	6a38      	ldr	r0, [r7, #32]
 800595c:	f003 feca 	bl	80096f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596c:	441a      	add	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0210 	orr.w	r2, r2, #16
 8005980:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f004 f848 	bl	8009a1c <USB_ReadInterrupts>
 800598c:	4603      	mov	r3, r0
 800598e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005992:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005996:	f040 80a7 	bne.w	8005ae8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 f84d 	bl	8009a42 <USB_ReadDevAllOutEpInterrupt>
 80059a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059aa:	e099      	b.n	8005ae0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 808e 	beq.w	8005ad4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	4611      	mov	r1, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 f871 	bl	8009aaa <USB_ReadDevOutEPInterrupt>
 80059c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00c      	beq.n	80059ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	461a      	mov	r2, r3
 80059e2:	2301      	movs	r3, #1
 80059e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 feab 	bl	8006744 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	461a      	mov	r2, r3
 8005a06:	2308      	movs	r3, #8
 8005a08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 ff81 	bl	8006914 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d030      	beq.n	8005a9a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d109      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a56:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	78db      	ldrb	r3, [r3, #3]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d108      	bne.n	8005a88 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f006 f89a 	bl	800bbbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	461a      	mov	r2, r3
 8005a96:	2302      	movs	r3, #2
 8005a98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	461a      	mov	r2, r3
 8005ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ad2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f47f af62 	bne.w	80059ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f003 ff95 	bl	8009a1c <USB_ReadInterrupts>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005afc:	f040 80db 	bne.w	8005cb6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f003 ffb6 	bl	8009a76 <USB_ReadDevAllInEpInterrupt>
 8005b0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b10:	e0cd      	b.n	8005cae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80c2 	beq.w	8005ca2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f003 ffdc 	bl	8009ae6 <USB_ReadDevInEPInterrupt>
 8005b2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d057      	beq.n	8005bea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2201      	movs	r2, #1
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69f9      	ldr	r1, [r7, #28]
 8005b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d132      	bne.n	8005bde <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	334c      	adds	r3, #76	; 0x4c
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4403      	add	r3, r0
 8005b98:	3348      	adds	r3, #72	; 0x48
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4419      	add	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4403      	add	r3, r0
 8005bac:	334c      	adds	r3, #76	; 0x4c
 8005bae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d113      	bne.n	8005bde <HAL_PCD_IRQHandler+0x3a2>
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3354      	adds	r3, #84	; 0x54
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2101      	movs	r1, #1
 8005bda:	f003 ffe3 	bl	8009ba4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f005 ff64 	bl	800bab2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	461a      	mov	r2, r3
 8005c02:	2308      	movs	r3, #8
 8005c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2310      	movs	r3, #16
 8005c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2340      	movs	r3, #64	; 0x40
 8005c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d023      	beq.n	8005c90 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4a:	6a38      	ldr	r0, [r7, #32]
 8005c4c:	f002 fec4 	bl	80089d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	3338      	adds	r3, #56	; 0x38
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	4413      	add	r3, r2
 8005c60:	3304      	adds	r3, #4
 8005c62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	78db      	ldrb	r3, [r3, #3]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d108      	bne.n	8005c7e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f005 ffb1 	bl	800bbe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fcc3 	bl	8006628 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f af2e 	bne.w	8005b12 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f003 feae 	bl	8009a1c <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cca:	d122      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d108      	bne.n	8005cfc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 feab 	bl	8006a50 <HAL_PCDEx_LPM_Callback>
 8005cfa:	e002      	b.n	8005d02 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f005 ff4f 	bl	800bba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f003 fe80 	bl	8009a1c <USB_ReadInterrupts>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	d112      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d102      	bne.n	8005d3e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f005 ff0b 	bl	800bb54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d4c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f003 fe62 	bl	8009a1c <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	f040 80b7 	bne.w	8005ed4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2110      	movs	r1, #16
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 fe29 	bl	80089d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8a:	e046      	b.n	8005e1a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d9e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dd2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e12:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	3301      	adds	r3, #1
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d3b3      	bcc.n	8005d8c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e32:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e36:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d016      	beq.n	8005e6e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e50:	f043 030b 	orr.w	r3, r3, #11
 8005e54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e66:	f043 030b 	orr.w	r3, r3, #11
 8005e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8005e6c:	e015      	b.n	8005e9a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e80:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005e84:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e94:	f043 030b 	orr.w	r3, r3, #11
 8005e98:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005eac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f003 fe70 	bl	8009ba4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f003 fd9f 	bl	8009a1c <USB_ReadInterrupts>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee8:	d124      	bne.n	8005f34 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f003 fe35 	bl	8009b5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f002 fdea 	bl	8008ad2 <USB_GetDevSpeed>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681c      	ldr	r4, [r3, #0]
 8005f0a:	f001 fa11 	bl	8007330 <HAL_RCC_GetHCLKFreq>
 8005f0e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f002 fae9 	bl	80084f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f005 fdef 	bl	800bb02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f003 fd6f 	bl	8009a1c <USB_ReadInterrupts>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d10a      	bne.n	8005f5e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f005 fdcc 	bl	800bae6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f002 0208 	and.w	r2, r2, #8
 8005f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f003 fd5a 	bl	8009a1c <USB_ReadInterrupts>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b80      	cmp	r3, #128	; 0x80
 8005f70:	d122      	bne.n	8005fb8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f7e:	2301      	movs	r3, #1
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
 8005f82:	e014      	b.n	8005fae <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fb0f 	bl	80065c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	3301      	adds	r3, #1
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d3e5      	bcc.n	8005f84 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f003 fd2d 	bl	8009a1c <USB_ReadInterrupts>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fcc:	d13b      	bne.n	8006046 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fce:	2301      	movs	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd2:	e02b      	b.n	800602c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3340      	adds	r3, #64	; 0x40
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d115      	bne.n	8006026 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ffa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da12      	bge.n	8006026 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006004:	4613      	mov	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	333f      	adds	r3, #63	; 0x3f
 8006010:	2201      	movs	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800601c:	b2db      	uxtb	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fad0 	bl	80065c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	3301      	adds	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	429a      	cmp	r2, r3
 8006034:	d3ce      	bcc.n	8005fd4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f003 fce6 	bl	8009a1c <USB_ReadInterrupts>
 8006050:	4603      	mov	r3, r0
 8006052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800605a:	d155      	bne.n	8006108 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800605c:	2301      	movs	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	e045      	b.n	80060ee <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d12e      	bne.n	80060e8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800608a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800608c:	2b00      	cmp	r3, #0
 800608e:	da2b      	bge.n	80060e8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800609c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d121      	bne.n	80060e8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060e4:	6053      	str	r3, [r2, #4]
            break;
 80060e6:	e007      	b.n	80060f8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	3301      	adds	r3, #1
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d3b4      	bcc.n	8006062 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f003 fc85 	bl	8009a1c <USB_ReadInterrupts>
 8006112:	4603      	mov	r3, r0
 8006114:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d10a      	bne.n	8006134 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f005 fd70 	bl	800bc04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f003 fc6f 	bl	8009a1c <USB_ReadInterrupts>
 800613e:	4603      	mov	r3, r0
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d115      	bne.n	8006174 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f005 fd60 	bl	800bc20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
 8006170:	e000      	b.n	8006174 <HAL_PCD_IRQHandler+0x938>
      return;
 8006172:	bf00      	nop
    }
  }
}
 8006174:	3734      	adds	r7, #52	; 0x34
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}

0800617a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_PCD_SetAddress+0x1a>
 8006190:	2302      	movs	r3, #2
 8006192:	e013      	b.n	80061bc <HAL_PCD_SetAddress+0x42>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	4611      	mov	r1, r2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f003 fbcd 	bl	800994c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	4608      	mov	r0, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	461a      	mov	r2, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	70fb      	strb	r3, [r7, #3]
 80061d6:	460b      	mov	r3, r1
 80061d8:	803b      	strh	r3, [r7, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0f      	bge.n	800620a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	f003 020f 	and.w	r2, r3, #15
 80061f0:	4613      	mov	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	3338      	adds	r3, #56	; 0x38
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	705a      	strb	r2, [r3, #1]
 8006208:	e00f      	b.n	800622a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4413      	add	r3, r2
 8006220:	3304      	adds	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006236:	883a      	ldrh	r2, [r7, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	78ba      	ldrb	r2, [r7, #2]
 8006240:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006254:	78bb      	ldrb	r3, [r7, #2]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d102      	bne.n	8006260 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_PCD_EP_Open+0xaa>
 800626a:	2302      	movs	r3, #2
 800626c:	e00e      	b.n	800628c <HAL_PCD_EP_Open+0xc8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	4618      	mov	r0, r3
 800627e:	f002 fc4d 	bl	8008b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800628a:	7afb      	ldrb	r3, [r7, #11]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da0f      	bge.n	80062c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	4613      	mov	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	3338      	adds	r3, #56	; 0x38
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	3304      	adds	r3, #4
 80062be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	705a      	strb	r2, [r3, #1]
 80062c6:	e00f      	b.n	80062e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	4413      	add	r3, r2
 80062de:	3304      	adds	r3, #4
 80062e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_PCD_EP_Close+0x6e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e00e      	b.n	8006320 <HAL_PCD_EP_Close+0x8c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	4618      	mov	r0, r3
 8006312:	f002 fc8b 	bl	8008c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	460b      	mov	r3, r1
 8006336:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2200      	movs	r2, #0
 8006362:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	b2da      	uxtb	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d102      	bne.n	8006384 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6979      	ldr	r1, [r7, #20]
 800639c:	f002 ff6a 	bl	8009274 <USB_EP0StartXfer>
 80063a0:	e008      	b.n	80063b4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	6979      	ldr	r1, [r7, #20]
 80063b0:	f002 fd18 	bl	8008de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	460b      	mov	r3, r1
 80063cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	3338      	adds	r3, #56	; 0x38
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	3304      	adds	r3, #4
 80063e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2201      	movs	r2, #1
 80063fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	b2da      	uxtb	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d102      	bne.n	8006418 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	f002 ff20 	bl	8009274 <USB_EP0StartXfer>
 8006434:	e008      	b.n	8006448 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	f002 fcce 	bl	8008de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d901      	bls.n	8006470 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e050      	b.n	8006512 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006474:	2b00      	cmp	r3, #0
 8006476:	da0f      	bge.n	8006498 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	f003 020f 	and.w	r2, r3, #15
 800647e:	4613      	mov	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	3338      	adds	r3, #56	; 0x38
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4413      	add	r3, r2
 800648c:	3304      	adds	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	705a      	strb	r2, [r3, #1]
 8006496:	e00d      	b.n	80064b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	4613      	mov	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_PCD_EP_SetStall+0x82>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e01e      	b.n	8006512 <HAL_PCD_EP_SetStall+0xc0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f003 f95e 	bl	80097a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	b2d9      	uxtb	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006502:	461a      	mov	r2, r3
 8006504:	f003 fb4e 	bl	8009ba4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d901      	bls.n	8006538 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e042      	b.n	80065be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	da0f      	bge.n	8006560 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	3338      	adds	r3, #56	; 0x38
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	705a      	strb	r2, [r3, #1]
 800655e:	e00f      	b.n	8006580 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	f003 020f 	and.w	r2, r3, #15
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_PCD_EP_ClrStall+0x86>
 800659c:	2302      	movs	r3, #2
 800659e:	e00e      	b.n	80065be <HAL_PCD_EP_ClrStall+0xa4>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f003 f966 	bl	8009880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80065d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da0c      	bge.n	80065f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	3338      	adds	r3, #56	; 0x38
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	3304      	adds	r3, #4
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e00c      	b.n	800660e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 020f 	and.w	r2, r3, #15
 80065fa:	4613      	mov	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	4618      	mov	r0, r3
 8006616:	f002 ff85 	bl	8009524 <USB_EPStopXfer>
 800661a:	4603      	mov	r3, r0
 800661c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800661e:	7afb      	ldrb	r3, [r7, #11]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	4613      	mov	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	3338      	adds	r3, #56	; 0x38
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4413      	add	r3, r2
 800664c:	3304      	adds	r3, #4
 800664e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	d901      	bls.n	8006660 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e06c      	b.n	800673a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	699a      	ldr	r2, [r3, #24]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	429a      	cmp	r2, r3
 8006674:	d902      	bls.n	800667c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3303      	adds	r3, #3
 8006680:	089b      	lsrs	r3, r3, #2
 8006682:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006684:	e02b      	b.n	80066de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	429a      	cmp	r2, r3
 800669a:	d902      	bls.n	80066a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	3303      	adds	r3, #3
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6919      	ldr	r1, [r3, #16]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4603      	mov	r3, r0
 80066c0:	6978      	ldr	r0, [r7, #20]
 80066c2:	f002 ffd9 	bl	8009678 <USB_WritePacket>

    ep->xfer_buff  += len;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	441a      	add	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d809      	bhi.n	8006708 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d203      	bcs.n	8006708 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1be      	bne.n	8006686 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	429a      	cmp	r2, r3
 8006712:	d811      	bhi.n	8006738 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	2201      	movs	r2, #1
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	43db      	mvns	r3, r3
 800672e:	6939      	ldr	r1, [r7, #16]
 8006730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006734:	4013      	ands	r3, r2
 8006736:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	333c      	adds	r3, #60	; 0x3c
 800675c:	3304      	adds	r3, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d17b      	bne.n	8006872 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d015      	beq.n	80067b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	4a61      	ldr	r2, [pc, #388]	; (800690c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	f240 80b9 	bls.w	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80b3 	beq.w	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ac:	6093      	str	r3, [r2, #8]
 80067ae:	e0a7      	b.n	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	2320      	movs	r3, #32
 80067ca:	6093      	str	r3, [r2, #8]
 80067cc:	e098      	b.n	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 8093 	bne.w	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4a4b      	ldr	r2, [pc, #300]	; (800690c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d90f      	bls.n	8006802 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	461a      	mov	r2, r3
 80067fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fe:	6093      	str	r3, [r2, #8]
 8006800:	e07e      	b.n	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	3304      	adds	r3, #4
 8006816:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	0159      	lsls	r1, r3, #5
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	440b      	add	r3, r1
 8006824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d114      	bne.n	8006864 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800684c:	461a      	mov	r2, r3
 800684e:	2101      	movs	r1, #1
 8006850:	f003 f9a8 	bl	8009ba4 <USB_EP0_OutStart>
 8006854:	e006      	b.n	8006864 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f005 f906 	bl	800ba7c <HAL_PCD_DataOutStageCallback>
 8006870:	e046      	b.n	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d124      	bne.n	80068c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	461a      	mov	r2, r3
 8006892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006896:	6093      	str	r3, [r2, #8]
 8006898:	e032      	b.n	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	461a      	mov	r2, r3
 80068b2:	2320      	movs	r3, #32
 80068b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f005 f8dd 	bl	800ba7c <HAL_PCD_DataOutStageCallback>
 80068c2:	e01d      	b.n	8006900 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d114      	bne.n	80068f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	4613      	mov	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d108      	bne.n	80068f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068ec:	461a      	mov	r2, r3
 80068ee:	2100      	movs	r1, #0
 80068f0:	f003 f958 	bl	8009ba4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f005 f8be 	bl	800ba7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	4f54300a 	.word	0x4f54300a
 8006910:	4f54310a 	.word	0x4f54310a

08006914 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	333c      	adds	r3, #60	; 0x3c
 800692c:	3304      	adds	r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <PCD_EP_OutSetupPacket_int+0x88>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d90e      	bls.n	8006968 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006966:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f005 f875 	bl	800ba58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <PCD_EP_OutSetupPacket_int+0x88>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d90c      	bls.n	8006990 <PCD_EP_OutSetupPacket_int+0x7c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d108      	bne.n	8006990 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006988:	461a      	mov	r2, r3
 800698a:	2101      	movs	r1, #1
 800698c:	f003 f90a 	bl	8009ba4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	4f54300a 	.word	0x4f54300a

080069a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
 80069ac:	4613      	mov	r3, r2
 80069ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d107      	bne.n	80069ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069be:	883b      	ldrh	r3, [r7, #0]
 80069c0:	0419      	lsls	r1, r3, #16
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28
 80069cc:	e028      	b.n	8006a20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4413      	add	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
 80069e0:	e00d      	b.n	80069fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	3340      	adds	r3, #64	; 0x40
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	0c1b      	lsrs	r3, r3, #16
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4413      	add	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	3301      	adds	r3, #1
 80069fc:	73fb      	strb	r3, [r7, #15]
 80069fe:	7bfa      	ldrb	r2, [r7, #15]
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d3ec      	bcc.n	80069e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a08:	883b      	ldrh	r3, [r7, #0]
 8006a0a:	0418      	lsls	r0, r3, #16
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	4302      	orrs	r2, r0
 8006a18:	3340      	adds	r3, #64	; 0x40
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	887a      	ldrh	r2, [r7, #2]
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e267      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d075      	beq.n	8006b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a86:	4b88      	ldr	r3, [pc, #544]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d00c      	beq.n	8006aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a92:	4b85      	ldr	r3, [pc, #532]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d112      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9e:	4b82      	ldr	r3, [pc, #520]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aaa:	d10b      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	4b7e      	ldr	r3, [pc, #504]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05b      	beq.n	8006b70 <HAL_RCC_OscConfig+0x108>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d157      	bne.n	8006b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e242      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d106      	bne.n	8006adc <HAL_RCC_OscConfig+0x74>
 8006ace:	4b76      	ldr	r3, [pc, #472]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a75      	ldr	r2, [pc, #468]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e01d      	b.n	8006b18 <HAL_RCC_OscConfig+0xb0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCC_OscConfig+0x98>
 8006ae6:	4b70      	ldr	r3, [pc, #448]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6f      	ldr	r2, [pc, #444]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4b6d      	ldr	r3, [pc, #436]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6c      	ldr	r2, [pc, #432]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e00b      	b.n	8006b18 <HAL_RCC_OscConfig+0xb0>
 8006b00:	4b69      	ldr	r3, [pc, #420]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a68      	ldr	r2, [pc, #416]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a65      	ldr	r2, [pc, #404]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d013      	beq.n	8006b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b20:	f7fb fa1c 	bl	8001f5c <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b28:	f7fb fa18 	bl	8001f5c <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b64      	cmp	r3, #100	; 0x64
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e207      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCC_OscConfig+0xc0>
 8006b46:	e014      	b.n	8006b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fb fa08 	bl	8001f5c <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fb fa04 	bl	8001f5c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	; 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e1f3      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b62:	4b51      	ldr	r3, [pc, #324]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0xe8>
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d063      	beq.n	8006c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b8a:	4b47      	ldr	r3, [pc, #284]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d11c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b96:	4b44      	ldr	r3, [pc, #272]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d116      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_RCC_OscConfig+0x152>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d001      	beq.n	8006bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e1c7      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bba:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4937      	ldr	r1, [pc, #220]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bce:	e03a      	b.n	8006c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d020      	beq.n	8006c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd8:	4b34      	ldr	r3, [pc, #208]	; (8006cac <HAL_RCC_OscConfig+0x244>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fb f9bd 	bl	8001f5c <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006be6:	f7fb f9b9 	bl	8001f5c <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e1a8      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf8:	4b2b      	ldr	r3, [pc, #172]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c04:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4925      	ldr	r1, [pc, #148]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	600b      	str	r3, [r1, #0]
 8006c18:	e015      	b.n	8006c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <HAL_RCC_OscConfig+0x244>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fb f99c 	bl	8001f5c <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c28:	f7fb f998 	bl	8001f5c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e187      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d036      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <HAL_RCC_OscConfig+0x248>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c60:	f7fb f97c 	bl	8001f5c <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c68:	f7fb f978 	bl	8001f5c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e167      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x200>
 8006c86:	e01b      	b.n	8006cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <HAL_RCC_OscConfig+0x248>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8e:	f7fb f965 	bl	8001f5c <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c94:	e00e      	b.n	8006cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c96:	f7fb f961 	bl	8001f5c <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d907      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e150      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	42470000 	.word	0x42470000
 8006cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb4:	4b88      	ldr	r3, [pc, #544]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ea      	bne.n	8006c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8097 	beq.w	8006dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd2:	4b81      	ldr	r3, [pc, #516]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	4b7d      	ldr	r3, [pc, #500]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a7c      	ldr	r2, [pc, #496]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b7a      	ldr	r3, [pc, #488]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfe:	4b77      	ldr	r3, [pc, #476]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d118      	bne.n	8006d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d0a:	4b74      	ldr	r3, [pc, #464]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a73      	ldr	r2, [pc, #460]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d16:	f7fb f921 	bl	8001f5c <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1e:	f7fb f91d 	bl	8001f5c <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e10c      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d106      	bne.n	8006d52 <HAL_RCC_OscConfig+0x2ea>
 8006d44:	4b64      	ldr	r3, [pc, #400]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	4a63      	ldr	r2, [pc, #396]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d50:	e01c      	b.n	8006d8c <HAL_RCC_OscConfig+0x324>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2b05      	cmp	r3, #5
 8006d58:	d10c      	bne.n	8006d74 <HAL_RCC_OscConfig+0x30c>
 8006d5a:	4b5f      	ldr	r3, [pc, #380]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a5e      	ldr	r2, [pc, #376]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d60:	f043 0304 	orr.w	r3, r3, #4
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	4b5c      	ldr	r3, [pc, #368]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	4a5b      	ldr	r2, [pc, #364]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6713      	str	r3, [r2, #112]	; 0x70
 8006d72:	e00b      	b.n	8006d8c <HAL_RCC_OscConfig+0x324>
 8006d74:	4b58      	ldr	r3, [pc, #352]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a57      	ldr	r2, [pc, #348]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d80:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d84:	4a54      	ldr	r2, [pc, #336]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d86:	f023 0304 	bic.w	r3, r3, #4
 8006d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d015      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d94:	f7fb f8e2 	bl	8001f5c <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9a:	e00a      	b.n	8006db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d9c:	f7fb f8de 	bl	8001f5c <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e0cb      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db2:	4b49      	ldr	r3, [pc, #292]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0ee      	beq.n	8006d9c <HAL_RCC_OscConfig+0x334>
 8006dbe:	e014      	b.n	8006dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc0:	f7fb f8cc 	bl	8001f5c <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc6:	e00a      	b.n	8006dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dc8:	f7fb f8c8 	bl	8001f5c <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e0b5      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dde:	4b3e      	ldr	r3, [pc, #248]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1ee      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d105      	bne.n	8006dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df0:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	4a38      	ldr	r2, [pc, #224]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80a1 	beq.w	8006f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e06:	4b34      	ldr	r3, [pc, #208]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d05c      	beq.n	8006ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d141      	bne.n	8006e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCC_OscConfig+0x478>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e20:	f7fb f89c 	bl	8001f5c <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fb f898 	bl	8001f5c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e087      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3a:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f0      	bne.n	8006e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69da      	ldr	r2, [r3, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	019b      	lsls	r3, r3, #6
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	061b      	lsls	r3, r3, #24
 8006e6a:	491b      	ldr	r1, [pc, #108]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <HAL_RCC_OscConfig+0x478>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e76:	f7fb f871 	bl	8001f5c <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e7e:	f7fb f86d 	bl	8001f5c <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e05c      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e90:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x416>
 8006e9c:	e054      	b.n	8006f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <HAL_RCC_OscConfig+0x478>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea4:	f7fb f85a 	bl	8001f5c <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eac:	f7fb f856 	bl	8001f5c <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e045      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x444>
 8006eca:	e03d      	b.n	8006f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e038      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	40007000 	.word	0x40007000
 8006ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <HAL_RCC_OscConfig+0x4ec>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d028      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d121      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d11a      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d111      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d107      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40023800 	.word	0x40023800

08006f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e0cc      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f6c:	4b68      	ldr	r3, [pc, #416]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d90c      	bls.n	8006f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7a:	4b65      	ldr	r3, [pc, #404]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	4b63      	ldr	r3, [pc, #396]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0b8      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d020      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fac:	4b59      	ldr	r3, [pc, #356]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a58      	ldr	r2, [pc, #352]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fc4:	4b53      	ldr	r3, [pc, #332]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4a52      	ldr	r2, [pc, #328]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fd0:	4b50      	ldr	r3, [pc, #320]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	494d      	ldr	r1, [pc, #308]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d044      	beq.n	8007078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d107      	bne.n	8007006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	4b47      	ldr	r3, [pc, #284]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d119      	bne.n	8007036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e07f      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d003      	beq.n	8007016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007012:	2b03      	cmp	r3, #3
 8007014:	d107      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007016:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e06f      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007026:	4b3b      	ldr	r3, [pc, #236]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e067      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007036:	4b37      	ldr	r3, [pc, #220]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f023 0203 	bic.w	r2, r3, #3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4934      	ldr	r1, [pc, #208]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	4313      	orrs	r3, r2
 8007046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007048:	f7fa ff88 	bl	8001f5c <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704e:	e00a      	b.n	8007066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007050:	f7fa ff84 	bl	8001f5c <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	f241 3288 	movw	r2, #5000	; 0x1388
 800705e:	4293      	cmp	r3, r2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e04f      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007066:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 020c 	and.w	r2, r3, #12
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	429a      	cmp	r2, r3
 8007076:	d1eb      	bne.n	8007050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d20c      	bcs.n	80070a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	4b22      	ldr	r3, [pc, #136]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b20      	ldr	r3, [pc, #128]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e032      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ac:	4b19      	ldr	r3, [pc, #100]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4916      	ldr	r1, [pc, #88]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	490e      	ldr	r1, [pc, #56]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070de:	f000 f821 	bl	8007124 <HAL_RCC_GetSysClockFreq>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	091b      	lsrs	r3, r3, #4
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	490a      	ldr	r1, [pc, #40]	; (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 80070f0:	5ccb      	ldrb	r3, [r1, r3]
 80070f2:	fa22 f303 	lsr.w	r3, r2, r3
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <HAL_RCC_ClockConfig+0x1c4>)
 80070f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <HAL_RCC_ClockConfig+0x1c8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fa fee8 	bl	8001ed4 <HAL_InitTick>

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40023c00 	.word	0x40023c00
 8007114:	40023800 	.word	0x40023800
 8007118:	0800dae4 	.word	0x0800dae4
 800711c:	2000001c 	.word	0x2000001c
 8007120:	20000020 	.word	0x20000020

08007124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007128:	b094      	sub	sp, #80	; 0x50
 800712a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	647b      	str	r3, [r7, #68]	; 0x44
 8007130:	2300      	movs	r3, #0
 8007132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007134:	2300      	movs	r3, #0
 8007136:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800713c:	4b79      	ldr	r3, [pc, #484]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 030c 	and.w	r3, r3, #12
 8007144:	2b08      	cmp	r3, #8
 8007146:	d00d      	beq.n	8007164 <HAL_RCC_GetSysClockFreq+0x40>
 8007148:	2b08      	cmp	r3, #8
 800714a:	f200 80e1 	bhi.w	8007310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x34>
 8007152:	2b04      	cmp	r3, #4
 8007154:	d003      	beq.n	800715e <HAL_RCC_GetSysClockFreq+0x3a>
 8007156:	e0db      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007158:	4b73      	ldr	r3, [pc, #460]	; (8007328 <HAL_RCC_GetSysClockFreq+0x204>)
 800715a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800715c:	e0db      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800715e:	4b73      	ldr	r3, [pc, #460]	; (800732c <HAL_RCC_GetSysClockFreq+0x208>)
 8007160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007162:	e0d8      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007164:	4b6f      	ldr	r3, [pc, #444]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800716c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800716e:	4b6d      	ldr	r3, [pc, #436]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d063      	beq.n	8007242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800717a:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	099b      	lsrs	r3, r3, #6
 8007180:	2200      	movs	r2, #0
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38
 8007184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	633b      	str	r3, [r7, #48]	; 0x30
 800718e:	2300      	movs	r3, #0
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
 8007192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	f04f 0000 	mov.w	r0, #0
 800719e:	f04f 0100 	mov.w	r1, #0
 80071a2:	0159      	lsls	r1, r3, #5
 80071a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071a8:	0150      	lsls	r0, r2, #5
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4621      	mov	r1, r4
 80071b0:	1a51      	subs	r1, r2, r1
 80071b2:	6139      	str	r1, [r7, #16]
 80071b4:	4629      	mov	r1, r5
 80071b6:	eb63 0301 	sbc.w	r3, r3, r1
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071c8:	4659      	mov	r1, fp
 80071ca:	018b      	lsls	r3, r1, #6
 80071cc:	4651      	mov	r1, sl
 80071ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071d2:	4651      	mov	r1, sl
 80071d4:	018a      	lsls	r2, r1, #6
 80071d6:	4651      	mov	r1, sl
 80071d8:	ebb2 0801 	subs.w	r8, r2, r1
 80071dc:	4659      	mov	r1, fp
 80071de:	eb63 0901 	sbc.w	r9, r3, r1
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071f6:	4690      	mov	r8, r2
 80071f8:	4699      	mov	r9, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	eb18 0303 	adds.w	r3, r8, r3
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	462b      	mov	r3, r5
 8007204:	eb49 0303 	adc.w	r3, r9, r3
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007216:	4629      	mov	r1, r5
 8007218:	024b      	lsls	r3, r1, #9
 800721a:	4621      	mov	r1, r4
 800721c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007220:	4621      	mov	r1, r4
 8007222:	024a      	lsls	r2, r1, #9
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800722a:	2200      	movs	r2, #0
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
 800722e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007234:	f7f9 f81c 	bl	8000270 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4613      	mov	r3, r2
 800723e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007240:	e058      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007242:	4b38      	ldr	r3, [pc, #224]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	2200      	movs	r2, #0
 800724a:	4618      	mov	r0, r3
 800724c:	4611      	mov	r1, r2
 800724e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007252:	623b      	str	r3, [r7, #32]
 8007254:	2300      	movs	r3, #0
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
 8007258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	f04f 0000 	mov.w	r0, #0
 8007264:	f04f 0100 	mov.w	r1, #0
 8007268:	0159      	lsls	r1, r3, #5
 800726a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800726e:	0150      	lsls	r0, r2, #5
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4641      	mov	r1, r8
 8007276:	ebb2 0a01 	subs.w	sl, r2, r1
 800727a:	4649      	mov	r1, r9
 800727c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800728c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007294:	ebb2 040a 	subs.w	r4, r2, sl
 8007298:	eb63 050b 	sbc.w	r5, r3, fp
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	00eb      	lsls	r3, r5, #3
 80072a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072aa:	00e2      	lsls	r2, r4, #3
 80072ac:	4614      	mov	r4, r2
 80072ae:	461d      	mov	r5, r3
 80072b0:	4643      	mov	r3, r8
 80072b2:	18e3      	adds	r3, r4, r3
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	464b      	mov	r3, r9
 80072b8:	eb45 0303 	adc.w	r3, r5, r3
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ca:	4629      	mov	r1, r5
 80072cc:	028b      	lsls	r3, r1, #10
 80072ce:	4621      	mov	r1, r4
 80072d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072d4:	4621      	mov	r1, r4
 80072d6:	028a      	lsls	r2, r1, #10
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072de:	2200      	movs	r2, #0
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	61fa      	str	r2, [r7, #28]
 80072e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072e8:	f7f8 ffc2 	bl	8000270 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	3301      	adds	r3, #1
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800730e:	e002      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <HAL_RCC_GetSysClockFreq+0x204>)
 8007312:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007318:	4618      	mov	r0, r3
 800731a:	3750      	adds	r7, #80	; 0x50
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007322:	bf00      	nop
 8007324:	40023800 	.word	0x40023800
 8007328:	00f42400 	.word	0x00f42400
 800732c:	007a1200 	.word	0x007a1200

08007330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <HAL_RCC_GetHCLKFreq+0x14>)
 8007336:	681b      	ldr	r3, [r3, #0]
}
 8007338:	4618      	mov	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	2000001c 	.word	0x2000001c

08007348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800734c:	f7ff fff0 	bl	8007330 <HAL_RCC_GetHCLKFreq>
 8007350:	4602      	mov	r2, r0
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	0a9b      	lsrs	r3, r3, #10
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	4903      	ldr	r1, [pc, #12]	; (800736c <HAL_RCC_GetPCLK1Freq+0x24>)
 800735e:	5ccb      	ldrb	r3, [r1, r3]
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40023800 	.word	0x40023800
 800736c:	0800daf4 	.word	0x0800daf4

08007370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e07b      	b.n	800747a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d108      	bne.n	800739c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007392:	d009      	beq.n	80073a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	61da      	str	r2, [r3, #28]
 800739a:	e005      	b.n	80073a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fa fbcc 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742c:	ea42 0103 	orr.w	r1, r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	f003 0104 	and.w	r1, r3, #4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f003 0210 	and.w	r2, r3, #16
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b088      	sub	sp, #32
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_SPI_Transmit+0x22>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e126      	b.n	80076f2 <HAL_SPI_Transmit+0x270>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ac:	f7fa fd56 	bl	8001f5c <HAL_GetTick>
 80074b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d002      	beq.n	80074c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074c2:	2302      	movs	r3, #2
 80074c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074c6:	e10b      	b.n	80076e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_SPI_Transmit+0x52>
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074d8:	e102      	b.n	80076e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2203      	movs	r2, #3
 80074de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	d10f      	bne.n	8007542 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d007      	beq.n	8007560 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800755e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007568:	d14b      	bne.n	8007602 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Transmit+0xf6>
 8007572:	8afb      	ldrh	r3, [r7, #22]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d13e      	bne.n	80075f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	881a      	ldrh	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	1c9a      	adds	r2, r3, #2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800759c:	e02b      	b.n	80075f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d112      	bne.n	80075d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	1c9a      	adds	r2, r3, #2
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80075d0:	e011      	b.n	80075f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d2:	f7fa fcc3 	bl	8001f5c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d803      	bhi.n	80075ea <HAL_SPI_Transmit+0x168>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e8:	d102      	bne.n	80075f0 <HAL_SPI_Transmit+0x16e>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075f4:	e074      	b.n	80076e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1ce      	bne.n	800759e <HAL_SPI_Transmit+0x11c>
 8007600:	e04c      	b.n	800769c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Transmit+0x18e>
 800760a:	8afb      	ldrh	r3, [r7, #22]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d140      	bne.n	8007692 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007636:	e02c      	b.n	8007692 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b02      	cmp	r3, #2
 8007644:	d113      	bne.n	800766e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	86da      	strh	r2, [r3, #54]	; 0x36
 800766c:	e011      	b.n	8007692 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766e:	f7fa fc75 	bl	8001f5c <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d803      	bhi.n	8007686 <HAL_SPI_Transmit+0x204>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007684:	d102      	bne.n	800768c <HAL_SPI_Transmit+0x20a>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007690:	e026      	b.n	80076e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1cd      	bne.n	8007638 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f9ff 	bl	8007aa4 <SPI_EndRxTxTransaction>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ba:	2300      	movs	r3, #0
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e000      	b.n	80076e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80076de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_SPI_Transmit_DMA+0x20>
 8007718:	2302      	movs	r3, #2
 800771a:	e09b      	b.n	8007854 <HAL_SPI_Transmit_DMA+0x158>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d002      	beq.n	8007736 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007730:	2302      	movs	r3, #2
 8007732:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007734:	e089      	b.n	800784a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_SPI_Transmit_DMA+0x46>
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007746:	e080      	b.n	800784a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2203      	movs	r2, #3
 800774c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778e:	d10f      	bne.n	80077b0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b4:	4a29      	ldr	r2, [pc, #164]	; (800785c <HAL_SPI_Transmit_DMA+0x160>)
 80077b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077bc:	4a28      	ldr	r2, [pc, #160]	; (8007860 <HAL_SPI_Transmit_DMA+0x164>)
 80077be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c4:	4a27      	ldr	r2, [pc, #156]	; (8007864 <HAL_SPI_Transmit_DMA+0x168>)
 80077c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077cc:	2200      	movs	r2, #0
 80077ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	4619      	mov	r1, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	330c      	adds	r3, #12
 80077e0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80077e8:	f7fa fda8 	bl	800233c <HAL_DMA_Start_IT>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00c      	beq.n	800780c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f6:	f043 0210 	orr.w	r2, r3, #16
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800780a:	e01e      	b.n	800784a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d007      	beq.n	800782a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007828:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0220 	orr.w	r2, r2, #32
 8007838:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0202 	orr.w	r2, r2, #2
 8007848:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08007939 	.word	0x08007939
 8007860:	08007891 	.word	0x08007891
 8007864:	08007955 	.word	0x08007955

08007868 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800789e:	f7fa fb5d 	bl	8001f5c <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b2:	d03b      	beq.n	800792c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0220 	bic.w	r2, r2, #32
 80078c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0202 	bic.w	r2, r2, #2
 80078d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	2164      	movs	r1, #100	; 0x64
 80078d8:	6978      	ldr	r0, [r7, #20]
 80078da:	f000 f8e3 	bl	8007aa4 <SPI_EndRxTxTransaction>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007924:	6978      	ldr	r0, [r7, #20]
 8007926:	f7ff ffa9 	bl	800787c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800792a:	e002      	b.n	8007932 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800792c:	6978      	ldr	r0, [r7, #20]
 800792e:	f7f8 fedf 	bl	80006f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f7ff ff8e 	bl	8007868 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0203 	bic.w	r2, r2, #3
 8007970:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	f043 0210 	orr.w	r2, r3, #16
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ff78 	bl	800787c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079a4:	f7fa fada 	bl	8001f5c <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4413      	add	r3, r2
 80079b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079b4:	f7fa fad2 	bl	8001f5c <HAL_GetTick>
 80079b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ba:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	015b      	lsls	r3, r3, #5
 80079c0:	0d1b      	lsrs	r3, r3, #20
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ca:	e054      	b.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d2:	d050      	beq.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079d4:	f7fa fac2 	bl	8001f5c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d902      	bls.n	80079ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d13d      	bne.n	8007a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a02:	d111      	bne.n	8007a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0c:	d004      	beq.n	8007a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a16:	d107      	bne.n	8007a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a30:	d10f      	bne.n	8007a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e017      	b.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	bf0c      	ite	eq
 8007a86:	2301      	moveq	r3, #1
 8007a88:	2300      	movne	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d19b      	bne.n	80079cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	2000001c 	.word	0x2000001c

08007aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ab0:	4b1b      	ldr	r3, [pc, #108]	; (8007b20 <SPI_EndRxTxTransaction+0x7c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	; (8007b24 <SPI_EndRxTxTransaction+0x80>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	0d5b      	lsrs	r3, r3, #21
 8007abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ac0:	fb02 f303 	mul.w	r3, r2, r3
 8007ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ace:	d112      	bne.n	8007af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2180      	movs	r1, #128	; 0x80
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff ff5a 	bl	8007994 <SPI_WaitFlagStateUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d016      	beq.n	8007b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	f043 0220 	orr.w	r2, r3, #32
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e00f      	b.n	8007b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d0f2      	beq.n	8007af6 <SPI_EndRxTxTransaction+0x52>
 8007b10:	e000      	b.n	8007b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b12:	bf00      	nop
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000001c 	.word	0x2000001c
 8007b24:	165e9f81 	.word	0x165e9f81

08007b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e041      	b.n	8007bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fa f880 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f000 fa96 	bl	8008098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d001      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e04e      	b.n	8007c7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a23      	ldr	r2, [pc, #140]	; (8007c8c <HAL_TIM_Base_Start_IT+0xc4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d022      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0a:	d01d      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d018      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a1e      	ldr	r2, [pc, #120]	; (8007c94 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d013      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00e      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d009      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a19      	ldr	r2, [pc, #100]	; (8007ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d004      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a18      	ldr	r2, [pc, #96]	; (8007ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d111      	bne.n	8007c6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b06      	cmp	r3, #6
 8007c58:	d010      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6a:	e007      	b.n	8007c7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40000800 	.word	0x40000800
 8007c98:	40000c00 	.word	0x40000c00
 8007c9c:	40010400 	.word	0x40010400
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	40001800 	.word	0x40001800

08007ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d122      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d11b      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0202 	mvn.w	r2, #2
 8007cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9b5 	bl	800805a <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f9a7 	bl	8008046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9b8 	bl	800806e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d122      	bne.n	8007d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d11b      	bne.n	8007d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0204 	mvn.w	r2, #4
 8007d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f98b 	bl	800805a <HAL_TIM_IC_CaptureCallback>
 8007d44:	e005      	b.n	8007d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f97d 	bl	8008046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f98e 	bl	800806e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d122      	bne.n	8007dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d11b      	bne.n	8007dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0208 	mvn.w	r2, #8
 8007d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2204      	movs	r2, #4
 8007d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f961 	bl	800805a <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f953 	bl	8008046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f964 	bl	800806e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d122      	bne.n	8007e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b10      	cmp	r3, #16
 8007dc6:	d11b      	bne.n	8007e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0210 	mvn.w	r2, #16
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2208      	movs	r2, #8
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f937 	bl	800805a <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f929 	bl	8008046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f93a 	bl	800806e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d10e      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d107      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0201 	mvn.w	r2, #1
 8007e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7f9 fdf0 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d10e      	bne.n	8007e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e44:	2b80      	cmp	r3, #128	; 0x80
 8007e46:	d107      	bne.n	8007e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fae0 	bl	8008418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d10e      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e70:	2b40      	cmp	r3, #64	; 0x40
 8007e72:	d107      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f8ff 	bl	8008082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d10e      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d107      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0220 	mvn.w	r2, #32
 8007ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 faaa 	bl	8008404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e0b4      	b.n	800803e <HAL_TIM_ConfigClockSource+0x186>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007efa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f0c:	d03e      	beq.n	8007f8c <HAL_TIM_ConfigClockSource+0xd4>
 8007f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f12:	f200 8087 	bhi.w	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1a:	f000 8086 	beq.w	800802a <HAL_TIM_ConfigClockSource+0x172>
 8007f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f22:	d87f      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f24:	2b70      	cmp	r3, #112	; 0x70
 8007f26:	d01a      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0xa6>
 8007f28:	2b70      	cmp	r3, #112	; 0x70
 8007f2a:	d87b      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f2c:	2b60      	cmp	r3, #96	; 0x60
 8007f2e:	d050      	beq.n	8007fd2 <HAL_TIM_ConfigClockSource+0x11a>
 8007f30:	2b60      	cmp	r3, #96	; 0x60
 8007f32:	d877      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f34:	2b50      	cmp	r3, #80	; 0x50
 8007f36:	d03c      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0xfa>
 8007f38:	2b50      	cmp	r3, #80	; 0x50
 8007f3a:	d873      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f3c:	2b40      	cmp	r3, #64	; 0x40
 8007f3e:	d058      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x13a>
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d86f      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f44:	2b30      	cmp	r3, #48	; 0x30
 8007f46:	d064      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0x15a>
 8007f48:	2b30      	cmp	r3, #48	; 0x30
 8007f4a:	d86b      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d060      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0x15a>
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d867      	bhi.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d05c      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0x15a>
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d05a      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0x15a>
 8007f5c:	e062      	b.n	8008024 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	6899      	ldr	r1, [r3, #8]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f000 f9ad 	bl	80082cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	609a      	str	r2, [r3, #8]
      break;
 8007f8a:	e04f      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	6899      	ldr	r1, [r3, #8]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f000 f996 	bl	80082cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fae:	609a      	str	r2, [r3, #8]
      break;
 8007fb0:	e03c      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6859      	ldr	r1, [r3, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f000 f90a 	bl	80081d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2150      	movs	r1, #80	; 0x50
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f963 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8007fd0:	e02c      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6859      	ldr	r1, [r3, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f000 f929 	bl	8008236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2160      	movs	r1, #96	; 0x60
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f953 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8007ff0:	e01c      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6859      	ldr	r1, [r3, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	461a      	mov	r2, r3
 8008000:	f000 f8ea 	bl	80081d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2140      	movs	r1, #64	; 0x40
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f943 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8008010:	e00c      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f000 f93a 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8008022:	e003      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	73fb      	strb	r3, [r7, #15]
      break;
 8008028:	e000      	b.n	800802c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800802a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a40      	ldr	r2, [pc, #256]	; (80081ac <TIM_Base_SetConfig+0x114>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d013      	beq.n	80080d8 <TIM_Base_SetConfig+0x40>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b6:	d00f      	beq.n	80080d8 <TIM_Base_SetConfig+0x40>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a3d      	ldr	r2, [pc, #244]	; (80081b0 <TIM_Base_SetConfig+0x118>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00b      	beq.n	80080d8 <TIM_Base_SetConfig+0x40>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a3c      	ldr	r2, [pc, #240]	; (80081b4 <TIM_Base_SetConfig+0x11c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d007      	beq.n	80080d8 <TIM_Base_SetConfig+0x40>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a3b      	ldr	r2, [pc, #236]	; (80081b8 <TIM_Base_SetConfig+0x120>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_Base_SetConfig+0x40>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a3a      	ldr	r2, [pc, #232]	; (80081bc <TIM_Base_SetConfig+0x124>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d108      	bne.n	80080ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a2f      	ldr	r2, [pc, #188]	; (80081ac <TIM_Base_SetConfig+0x114>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d02b      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d027      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a2c      	ldr	r2, [pc, #176]	; (80081b0 <TIM_Base_SetConfig+0x118>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d023      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a2b      	ldr	r2, [pc, #172]	; (80081b4 <TIM_Base_SetConfig+0x11c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01f      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <TIM_Base_SetConfig+0x120>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d01b      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a29      	ldr	r2, [pc, #164]	; (80081bc <TIM_Base_SetConfig+0x124>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d017      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a28      	ldr	r2, [pc, #160]	; (80081c0 <TIM_Base_SetConfig+0x128>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a27      	ldr	r2, [pc, #156]	; (80081c4 <TIM_Base_SetConfig+0x12c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00f      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a26      	ldr	r2, [pc, #152]	; (80081c8 <TIM_Base_SetConfig+0x130>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00b      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a25      	ldr	r2, [pc, #148]	; (80081cc <TIM_Base_SetConfig+0x134>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a24      	ldr	r2, [pc, #144]	; (80081d0 <TIM_Base_SetConfig+0x138>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d003      	beq.n	800814a <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a23      	ldr	r2, [pc, #140]	; (80081d4 <TIM_Base_SetConfig+0x13c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d108      	bne.n	800815c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <TIM_Base_SetConfig+0x114>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <TIM_Base_SetConfig+0xf8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a0c      	ldr	r2, [pc, #48]	; (80081bc <TIM_Base_SetConfig+0x124>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d103      	bne.n	8008198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	615a      	str	r2, [r3, #20]
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40010000 	.word	0x40010000
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	40010400 	.word	0x40010400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40014400 	.word	0x40014400
 80081c8:	40014800 	.word	0x40014800
 80081cc:	40001800 	.word	0x40001800
 80081d0:	40001c00 	.word	0x40001c00
 80081d4:	40002000 	.word	0x40002000

080081d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	f023 0201 	bic.w	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f023 030a 	bic.w	r3, r3, #10
 8008214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008236:	b480      	push	{r7}
 8008238:	b087      	sub	sp, #28
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	f023 0210 	bic.w	r2, r3, #16
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	031b      	lsls	r3, r3, #12
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	4313      	orrs	r3, r2
 800826a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	4313      	orrs	r3, r2
 800827c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	621a      	str	r2, [r3, #32]
}
 800828a:	bf00      	nop
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	f043 0307 	orr.w	r3, r3, #7
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	609a      	str	r2, [r3, #8]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	021a      	lsls	r2, r3, #8
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	609a      	str	r2, [r3, #8]
}
 8008300:	bf00      	nop
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008320:	2302      	movs	r3, #2
 8008322:	e05a      	b.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d022      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d01d      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1d      	ldr	r2, [pc, #116]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d018      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d013      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00e      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d009      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a17      	ldr	r2, [pc, #92]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d004      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a15      	ldr	r2, [pc, #84]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d10c      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40001800 	.word	0x40001800

08008404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800842c:	b084      	sub	sp, #16
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	f107 001c 	add.w	r0, r7, #28
 800843a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2b01      	cmp	r3, #1
 8008442:	d122      	bne.n	800848a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800846c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846e:	2b01      	cmp	r3, #1
 8008470:	d105      	bne.n	800847e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fbee 	bl	8009c60 <USB_CoreReset>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
 8008488:	e01a      	b.n	80084c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 fbe2 	bl	8009c60 <USB_CoreReset>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	639a      	str	r2, [r3, #56]	; 0x38
 80084b2:	e005      	b.n	80084c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d10b      	bne.n	80084de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f043 0206 	orr.w	r2, r3, #6
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f043 0220 	orr.w	r2, r3, #32
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084ea:	b004      	add	sp, #16
 80084ec:	4770      	bx	lr
	...

080084f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	2b02      	cmp	r3, #2
 8008502:	d165      	bne.n	80085d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4a41      	ldr	r2, [pc, #260]	; (800860c <USB_SetTurnaroundTime+0x11c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d906      	bls.n	800851a <USB_SetTurnaroundTime+0x2a>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4a40      	ldr	r2, [pc, #256]	; (8008610 <USB_SetTurnaroundTime+0x120>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d202      	bcs.n	800851a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008514:	230f      	movs	r3, #15
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e062      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4a3c      	ldr	r2, [pc, #240]	; (8008610 <USB_SetTurnaroundTime+0x120>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d306      	bcc.n	8008530 <USB_SetTurnaroundTime+0x40>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a3b      	ldr	r2, [pc, #236]	; (8008614 <USB_SetTurnaroundTime+0x124>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d202      	bcs.n	8008530 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800852a:	230e      	movs	r3, #14
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e057      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a38      	ldr	r2, [pc, #224]	; (8008614 <USB_SetTurnaroundTime+0x124>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d306      	bcc.n	8008546 <USB_SetTurnaroundTime+0x56>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4a37      	ldr	r2, [pc, #220]	; (8008618 <USB_SetTurnaroundTime+0x128>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d202      	bcs.n	8008546 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008540:	230d      	movs	r3, #13
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e04c      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4a33      	ldr	r2, [pc, #204]	; (8008618 <USB_SetTurnaroundTime+0x128>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d306      	bcc.n	800855c <USB_SetTurnaroundTime+0x6c>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4a32      	ldr	r2, [pc, #200]	; (800861c <USB_SetTurnaroundTime+0x12c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d802      	bhi.n	800855c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008556:	230c      	movs	r3, #12
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	e041      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a2f      	ldr	r2, [pc, #188]	; (800861c <USB_SetTurnaroundTime+0x12c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d906      	bls.n	8008572 <USB_SetTurnaroundTime+0x82>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4a2e      	ldr	r2, [pc, #184]	; (8008620 <USB_SetTurnaroundTime+0x130>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d802      	bhi.n	8008572 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800856c:	230b      	movs	r3, #11
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e036      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <USB_SetTurnaroundTime+0x130>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d906      	bls.n	8008588 <USB_SetTurnaroundTime+0x98>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	4a29      	ldr	r2, [pc, #164]	; (8008624 <USB_SetTurnaroundTime+0x134>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d802      	bhi.n	8008588 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008582:	230a      	movs	r3, #10
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e02b      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a26      	ldr	r2, [pc, #152]	; (8008624 <USB_SetTurnaroundTime+0x134>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d906      	bls.n	800859e <USB_SetTurnaroundTime+0xae>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4a25      	ldr	r2, [pc, #148]	; (8008628 <USB_SetTurnaroundTime+0x138>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d202      	bcs.n	800859e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008598:	2309      	movs	r3, #9
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	e020      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a21      	ldr	r2, [pc, #132]	; (8008628 <USB_SetTurnaroundTime+0x138>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d306      	bcc.n	80085b4 <USB_SetTurnaroundTime+0xc4>
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4a20      	ldr	r2, [pc, #128]	; (800862c <USB_SetTurnaroundTime+0x13c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d802      	bhi.n	80085b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085ae:	2308      	movs	r3, #8
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e015      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a1d      	ldr	r2, [pc, #116]	; (800862c <USB_SetTurnaroundTime+0x13c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d906      	bls.n	80085ca <USB_SetTurnaroundTime+0xda>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4a1c      	ldr	r2, [pc, #112]	; (8008630 <USB_SetTurnaroundTime+0x140>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d202      	bcs.n	80085ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085c4:	2307      	movs	r3, #7
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	e00a      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085ca:	2306      	movs	r3, #6
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e007      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085d6:	2309      	movs	r3, #9
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e001      	b.n	80085e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085dc:	2309      	movs	r3, #9
 80085de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	029b      	lsls	r3, r3, #10
 80085f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80085f8:	431a      	orrs	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	00d8acbf 	.word	0x00d8acbf
 8008610:	00e4e1c0 	.word	0x00e4e1c0
 8008614:	00f42400 	.word	0x00f42400
 8008618:	01067380 	.word	0x01067380
 800861c:	011a499f 	.word	0x011a499f
 8008620:	01312cff 	.word	0x01312cff
 8008624:	014ca43f 	.word	0x014ca43f
 8008628:	016e3600 	.word	0x016e3600
 800862c:	01a6ab1f 	.word	0x01a6ab1f
 8008630:	01e84800 	.word	0x01e84800

08008634 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f043 0201 	orr.w	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f023 0201 	bic.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d115      	bne.n	80086c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086a6:	2001      	movs	r0, #1
 80086a8:	f7f9 fc64 	bl	8001f74 <HAL_Delay>
      ms++;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fa45 	bl	8009b42 <USB_GetMode>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d01e      	beq.n	80086fc <USB_SetCurrentMode+0x84>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b31      	cmp	r3, #49	; 0x31
 80086c2:	d9f0      	bls.n	80086a6 <USB_SetCurrentMode+0x2e>
 80086c4:	e01a      	b.n	80086fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d115      	bne.n	80086f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086d8:	2001      	movs	r0, #1
 80086da:	f7f9 fc4b 	bl	8001f74 <HAL_Delay>
      ms++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fa2c 	bl	8009b42 <USB_GetMode>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <USB_SetCurrentMode+0x84>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b31      	cmp	r3, #49	; 0x31
 80086f4:	d9f0      	bls.n	80086d8 <USB_SetCurrentMode+0x60>
 80086f6:	e001      	b.n	80086fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e005      	b.n	8008708 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b32      	cmp	r3, #50	; 0x32
 8008700:	d101      	bne.n	8008706 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e000      	b.n	8008708 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008710:	b084      	sub	sp, #16
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800871e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800872a:	2300      	movs	r3, #0
 800872c:	613b      	str	r3, [r7, #16]
 800872e:	e009      	b.n	8008744 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3340      	adds	r3, #64	; 0x40
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	2200      	movs	r2, #0
 800873c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	3301      	adds	r3, #1
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b0e      	cmp	r3, #14
 8008748:	d9f2      	bls.n	8008730 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800874a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11c      	bne.n	800878a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800875e:	f043 0302 	orr.w	r3, r3, #2
 8008762:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	639a      	str	r2, [r3, #56]	; 0x38
 8008788:	e00b      	b.n	80087a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087a8:	461a      	mov	r2, r3
 80087aa:	2300      	movs	r3, #0
 80087ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b4:	4619      	mov	r1, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087bc:	461a      	mov	r2, r3
 80087be:	680b      	ldr	r3, [r1, #0]
 80087c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d10c      	bne.n	80087e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d104      	bne.n	80087d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087ce:	2100      	movs	r1, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f965 	bl	8008aa0 <USB_SetDevSpeed>
 80087d6:	e008      	b.n	80087ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087d8:	2101      	movs	r1, #1
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f960 	bl	8008aa0 <USB_SetDevSpeed>
 80087e0:	e003      	b.n	80087ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087e2:	2103      	movs	r1, #3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f95b 	bl	8008aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087ea:	2110      	movs	r1, #16
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f8f3 	bl	80089d8 <USB_FlushTxFifo>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f91f 	bl	8008a40 <USB_FlushRxFifo>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008812:	461a      	mov	r2, r3
 8008814:	2300      	movs	r3, #0
 8008816:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881e:	461a      	mov	r2, r3
 8008820:	2300      	movs	r3, #0
 8008822:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882a:	461a      	mov	r2, r3
 800882c:	2300      	movs	r3, #0
 800882e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	e043      	b.n	80088be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800884c:	d118      	bne.n	8008880 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008860:	461a      	mov	r2, r3
 8008862:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e013      	b.n	8008892 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008876:	461a      	mov	r2, r3
 8008878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	e008      	b.n	8008892 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	461a      	mov	r2, r3
 800888e:	2300      	movs	r3, #0
 8008890:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889e:	461a      	mov	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b0:	461a      	mov	r2, r3
 80088b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3301      	adds	r3, #1
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d3b7      	bcc.n	8008836 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	e043      	b.n	8008954 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e2:	d118      	bne.n	8008916 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f6:	461a      	mov	r2, r3
 80088f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e013      	b.n	8008928 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890c:	461a      	mov	r2, r3
 800890e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e008      	b.n	8008928 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	2300      	movs	r3, #0
 8008926:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	461a      	mov	r2, r3
 8008936:	2300      	movs	r3, #0
 8008938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008946:	461a      	mov	r2, r3
 8008948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800894c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	429a      	cmp	r2, r3
 800895a:	d3b7      	bcc.n	80088cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800896e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800897c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f043 0210 	orr.w	r2, r3, #16
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699a      	ldr	r2, [r3, #24]
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <USB_DevInit+0x2c4>)
 8008996:	4313      	orrs	r3, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f043 0208 	orr.w	r2, r3, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d107      	bne.n	80089c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089bc:	f043 0304 	orr.w	r3, r3, #4
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089d0:	b004      	add	sp, #16
 80089d2:	4770      	bx	lr
 80089d4:	803c3800 	.word	0x803c3800

080089d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4a13      	ldr	r2, [pc, #76]	; (8008a3c <USB_FlushTxFifo+0x64>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d901      	bls.n	80089f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e01b      	b.n	8008a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	daf2      	bge.n	80089e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	019b      	lsls	r3, r3, #6
 8008a08:	f043 0220 	orr.w	r2, r3, #32
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <USB_FlushTxFifo+0x64>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d901      	bls.n	8008a22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e006      	b.n	8008a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d0f0      	beq.n	8008a10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	00030d40 	.word	0x00030d40

08008a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <USB_FlushRxFifo+0x5c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d901      	bls.n	8008a5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e018      	b.n	8008a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	daf2      	bge.n	8008a4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2210      	movs	r2, #16
 8008a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4a08      	ldr	r2, [pc, #32]	; (8008a9c <USB_FlushRxFifo+0x5c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d901      	bls.n	8008a82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e006      	b.n	8008a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d0f0      	beq.n	8008a70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	00030d40 	.word	0x00030d40

08008aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	68f9      	ldr	r1, [r7, #12]
 8008abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b087      	sub	sp, #28
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0306 	and.w	r3, r3, #6
 8008aea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
 8008af6:	e00a      	b.n	8008b0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d002      	beq.n	8008b04 <USB_GetDevSpeed+0x32>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b06      	cmp	r3, #6
 8008b02:	d102      	bne.n	8008b0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b04:	2302      	movs	r3, #2
 8008b06:	75fb      	strb	r3, [r7, #23]
 8008b08:	e001      	b.n	8008b0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b0a:	230f      	movs	r3, #15
 8008b0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d13a      	bne.n	8008bae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	2101      	movs	r1, #1
 8008b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	68f9      	ldr	r1, [r7, #12]
 8008b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b56:	4313      	orrs	r3, r2
 8008b58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d155      	bne.n	8008c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	791b      	ldrb	r3, [r3, #4]
 8008b8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	059b      	lsls	r3, r3, #22
 8008b92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b94:	4313      	orrs	r3, r2
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	0151      	lsls	r1, r2, #5
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	e036      	b.n	8008c1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc4:	041b      	lsls	r3, r3, #16
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d11a      	bne.n	8008c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	791b      	ldrb	r3, [r3, #4]
 8008c00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c02:	430b      	orrs	r3, r1
 8008c04:	4313      	orrs	r3, r2
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
	...

08008c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d161      	bne.n	8008d0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c5e:	d11f      	bne.n	8008ca0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cca:	69da      	ldr	r2, [r3, #28]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	0159      	lsls	r1, r3, #5
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	440b      	add	r3, r1
 8008cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d02:	4619      	mov	r1, r3
 8008d04:	4b35      	ldr	r3, [pc, #212]	; (8008ddc <USB_DeactivateEndpoint+0x1b0>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	600b      	str	r3, [r1, #0]
 8008d0a:	e060      	b.n	8008dce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d22:	d11f      	bne.n	8008d64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	0151      	lsls	r1, r2, #5
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	440a      	add	r2, r1
 8008d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	2101      	movs	r1, #1
 8008d76:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7a:	041b      	lsls	r3, r3, #16
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	68f9      	ldr	r1, [r7, #12]
 8008d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d84:	4013      	ands	r3, r2
 8008d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8e:	69da      	ldr	r2, [r3, #28]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	2101      	movs	r1, #1
 8008d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9e:	041b      	lsls	r3, r3, #16
 8008da0:	43db      	mvns	r3, r3
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da8:	4013      	ands	r3, r2
 8008daa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	0159      	lsls	r1, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	440b      	add	r3, r1
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <USB_DeactivateEndpoint+0x1b4>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	ec337800 	.word	0xec337800
 8008de0:	eff37800 	.word	0xeff37800

08008de4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	785b      	ldrb	r3, [r3, #1]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	f040 815c 	bne.w	80090be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d132      	bne.n	8008e74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	0151      	lsls	r1, r2, #5
 8008e20:	69fa      	ldr	r2, [r7, #28]
 8008e22:	440a      	add	r2, r1
 8008e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	0151      	lsls	r1, r2, #5
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	440a      	add	r2, r1
 8008e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	0cdb      	lsrs	r3, r3, #19
 8008e6e:	04db      	lsls	r3, r3, #19
 8008e70:	6113      	str	r3, [r2, #16]
 8008e72:	e074      	b.n	8008f5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8e:	0cdb      	lsrs	r3, r3, #19
 8008e90:	04db      	lsls	r3, r3, #19
 8008e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	6999      	ldr	r1, [r3, #24]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	440b      	add	r3, r1
 8008ed0:	1e59      	subs	r1, r3, #1
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008eda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008edc:	4b9d      	ldr	r3, [pc, #628]	; (8009154 <USB_EPStartXfer+0x370>)
 8008ede:	400b      	ands	r3, r1
 8008ee0:	69b9      	ldr	r1, [r7, #24]
 8008ee2:	0148      	lsls	r0, r1, #5
 8008ee4:	69f9      	ldr	r1, [r7, #28]
 8008ee6:	4401      	add	r1, r0
 8008ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008eec:	4313      	orrs	r3, r2
 8008eee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	691a      	ldr	r2, [r3, #16]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f06:	69b9      	ldr	r1, [r7, #24]
 8008f08:	0148      	lsls	r0, r1, #5
 8008f0a:	69f9      	ldr	r1, [r7, #28]
 8008f0c:	4401      	add	r1, r0
 8008f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f12:	4313      	orrs	r3, r2
 8008f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	791b      	ldrb	r3, [r3, #4]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d11f      	bne.n	8008f5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	0151      	lsls	r1, r2, #5
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	440a      	add	r2, r1
 8008f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d14b      	bne.n	8008ffc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d009      	beq.n	8008f80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	791b      	ldrb	r3, [r3, #4]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d128      	bne.n	8008fda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d110      	bne.n	8008fba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	0151      	lsls	r1, r2, #5
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	440a      	add	r2, r1
 8008fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	e00f      	b.n	8008fda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	0151      	lsls	r1, r2, #5
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	440a      	add	r2, r1
 8008ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	e133      	b.n	8009264 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	0151      	lsls	r1, r2, #5
 800900e:	69fa      	ldr	r2, [r7, #28]
 8009010:	440a      	add	r2, r1
 8009012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800901a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	791b      	ldrb	r3, [r3, #4]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d015      	beq.n	8009050 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 811b 	beq.w	8009264 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	2101      	movs	r1, #1
 8009040:	fa01 f303 	lsl.w	r3, r1, r3
 8009044:	69f9      	ldr	r1, [r7, #28]
 8009046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800904a:	4313      	orrs	r3, r2
 800904c:	634b      	str	r3, [r1, #52]	; 0x34
 800904e:	e109      	b.n	8009264 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800905c:	2b00      	cmp	r3, #0
 800905e:	d110      	bne.n	8009082 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	0151      	lsls	r1, r2, #5
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	440a      	add	r2, r1
 8009076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800907a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e00f      	b.n	80090a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	0151      	lsls	r1, r2, #5
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	440a      	add	r2, r1
 8009098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800909c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6919      	ldr	r1, [r3, #16]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	781a      	ldrb	r2, [r3, #0]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	b298      	uxth	r0, r3
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	4603      	mov	r3, r0
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 fade 	bl	8009678 <USB_WritePacket>
 80090bc:	e0d2      	b.n	8009264 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d8:	0cdb      	lsrs	r3, r3, #19
 80090da:	04db      	lsls	r3, r3, #19
 80090dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	0151      	lsls	r1, r2, #5
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	440a      	add	r2, r1
 80090f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d126      	bne.n	8009158 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	0148      	lsls	r0, r1, #5
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	4401      	add	r1, r0
 8009128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800912c:	4313      	orrs	r3, r2
 800912e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	440a      	add	r2, r1
 8009146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800914a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800914e:	6113      	str	r3, [r2, #16]
 8009150:	e03a      	b.n	80091c8 <USB_EPStartXfer+0x3e4>
 8009152:	bf00      	nop
 8009154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	4413      	add	r3, r2
 8009162:	1e5a      	subs	r2, r3, #1
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	8afa      	ldrh	r2, [r7, #22]
 8009174:	fb03 f202 	mul.w	r2, r3, r2
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	8afb      	ldrh	r3, [r7, #22]
 800918c:	04d9      	lsls	r1, r3, #19
 800918e:	4b38      	ldr	r3, [pc, #224]	; (8009270 <USB_EPStartXfer+0x48c>)
 8009190:	400b      	ands	r3, r1
 8009192:	69b9      	ldr	r1, [r7, #24]
 8009194:	0148      	lsls	r0, r1, #5
 8009196:	69f9      	ldr	r1, [r7, #28]
 8009198:	4401      	add	r1, r0
 800919a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800919e:	4313      	orrs	r3, r2
 80091a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b8:	69b9      	ldr	r1, [r7, #24]
 80091ba:	0148      	lsls	r0, r1, #5
 80091bc:	69f9      	ldr	r1, [r7, #28]
 80091be:	4401      	add	r1, r0
 80091c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091c4:	4313      	orrs	r3, r2
 80091c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d10d      	bne.n	80091ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6919      	ldr	r1, [r3, #16]
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e6:	460a      	mov	r2, r1
 80091e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d128      	bne.n	8009244 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d110      	bne.n	8009224 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	0151      	lsls	r1, r2, #5
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	440a      	add	r2, r1
 8009218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	e00f      	b.n	8009244 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800923e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009242:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	4413      	add	r3, r2
 800924c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	0151      	lsls	r1, r2, #5
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	440a      	add	r2, r1
 800925a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	1ff80000 	.word	0x1ff80000

08009274 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 80ce 	bne.w	8009432 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d132      	bne.n	8009304 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fc:	0cdb      	lsrs	r3, r3, #19
 80092fe:	04db      	lsls	r3, r3, #19
 8009300:	6113      	str	r3, [r2, #16]
 8009302:	e04e      	b.n	80093a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931e:	0cdb      	lsrs	r3, r3, #19
 8009320:	04db      	lsls	r3, r3, #19
 8009322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009342:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009346:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	699a      	ldr	r2, [r3, #24]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	429a      	cmp	r2, r3
 8009352:	d903      	bls.n	800935c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800937a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009392:	6939      	ldr	r1, [r7, #16]
 8009394:	0148      	lsls	r0, r1, #5
 8009396:	6979      	ldr	r1, [r7, #20]
 8009398:	4401      	add	r1, r0
 800939a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800939e:	4313      	orrs	r3, r2
 80093a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d11e      	bne.n	80093e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	461a      	mov	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	e097      	b.n	8009516 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	0151      	lsls	r1, r2, #5
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	440a      	add	r2, r1
 80093fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009400:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009404:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8083 	beq.w	8009516 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 030f 	and.w	r3, r3, #15
 8009420:	2101      	movs	r1, #1
 8009422:	fa01 f303 	lsl.w	r3, r1, r3
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800942c:	4313      	orrs	r3, r2
 800942e:	634b      	str	r3, [r1, #52]	; 0x34
 8009430:	e071      	b.n	8009516 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944c:	0cdb      	lsrs	r3, r3, #19
 800944e:	04db      	lsls	r3, r3, #19
 8009450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009474:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	0151      	lsls	r1, r2, #5
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	440a      	add	r2, r1
 80094a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ba:	691a      	ldr	r2, [r3, #16]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094c4:	6939      	ldr	r1, [r7, #16]
 80094c6:	0148      	lsls	r0, r1, #5
 80094c8:	6979      	ldr	r1, [r7, #20]
 80094ca:	4401      	add	r1, r0
 80094cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094d0:	4313      	orrs	r3, r2
 80094d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d10d      	bne.n	80094f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6919      	ldr	r1, [r3, #16]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f2:	460a      	mov	r2, r1
 80094f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d14a      	bne.n	80095d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800955a:	f040 8086 	bne.w	800966a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	7812      	ldrb	r2, [r2, #0]
 8009596:	0151      	lsls	r1, r2, #5
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	440a      	add	r2, r1
 800959c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d902      	bls.n	80095bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
          break;
 80095ba:	e056      	b.n	800966a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d4:	d0e7      	beq.n	80095a6 <USB_EPStopXfer+0x82>
 80095d6:	e048      	b.n	800966a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f0:	d13b      	bne.n	800966a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	7812      	ldrb	r2, [r2, #0]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	0151      	lsls	r1, r2, #5
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	440a      	add	r2, r1
 8009630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f242 7210 	movw	r2, #10000	; 0x2710
 8009646:	4293      	cmp	r3, r2
 8009648:	d902      	bls.n	8009650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	75fb      	strb	r3, [r7, #23]
          break;
 800964e:	e00c      	b.n	800966a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009668:	d0e7      	beq.n	800963a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
}
 800966c:	4618      	mov	r0, r3
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009678:	b480      	push	{r7}
 800967a:	b089      	sub	sp, #36	; 0x24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4611      	mov	r1, r2
 8009684:	461a      	mov	r2, r3
 8009686:	460b      	mov	r3, r1
 8009688:	71fb      	strb	r3, [r7, #7]
 800968a:	4613      	mov	r3, r2
 800968c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d123      	bne.n	80096e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800969e:	88bb      	ldrh	r3, [r7, #4]
 80096a0:	3303      	adds	r3, #3
 80096a2:	089b      	lsrs	r3, r3, #2
 80096a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096a6:	2300      	movs	r3, #0
 80096a8:	61bb      	str	r3, [r7, #24]
 80096aa:	e018      	b.n	80096de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	031a      	lsls	r2, r3, #12
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b8:	461a      	mov	r2, r3
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	3301      	adds	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	3301      	adds	r3, #1
 80096ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	3301      	adds	r3, #1
 80096d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	3301      	adds	r3, #1
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d3e2      	bcc.n	80096ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3724      	adds	r7, #36	; 0x24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b08b      	sub	sp, #44	; 0x2c
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	089b      	lsrs	r3, r3, #2
 800970e:	b29b      	uxth	r3, r3
 8009710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800971a:	2300      	movs	r3, #0
 800971c:	623b      	str	r3, [r7, #32]
 800971e:	e014      	b.n	800974a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	601a      	str	r2, [r3, #0]
    pDest++;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	3301      	adds	r3, #1
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	3301      	adds	r3, #1
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	3301      	adds	r3, #1
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	3301      	adds	r3, #1
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	3301      	adds	r3, #1
 8009748:	623b      	str	r3, [r7, #32]
 800974a:	6a3a      	ldr	r2, [r7, #32]
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	429a      	cmp	r2, r3
 8009750:	d3e6      	bcc.n	8009720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009752:	8bfb      	ldrh	r3, [r7, #30]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01e      	beq.n	8009796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009762:	461a      	mov	r2, r3
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	fa22 f303 	lsr.w	r3, r2, r3
 8009778:	b2da      	uxtb	r2, r3
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	701a      	strb	r2, [r3, #0]
      i++;
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	3301      	adds	r3, #1
 8009782:	623b      	str	r3, [r7, #32]
      pDest++;
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	3301      	adds	r3, #1
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800978a:	8bfb      	ldrh	r3, [r7, #30]
 800978c:	3b01      	subs	r3, #1
 800978e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009790:	8bfb      	ldrh	r3, [r7, #30]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1ea      	bne.n	800976c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009798:	4618      	mov	r0, r3
 800979a:	372c      	adds	r7, #44	; 0x2c
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	785b      	ldrb	r3, [r3, #1]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d12c      	bne.n	800981a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	db12      	blt.n	80097f8 <USB_EPSetStall+0x54>
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00f      	beq.n	80097f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	0151      	lsls	r1, r2, #5
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	440a      	add	r2, r1
 80097ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	0151      	lsls	r1, r2, #5
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	440a      	add	r2, r1
 800980e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e02b      	b.n	8009872 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	db12      	blt.n	8009852 <USB_EPSetStall+0xae>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00f      	beq.n	8009852 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	440a      	add	r2, r1
 8009848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800984c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009850:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	0151      	lsls	r1, r2, #5
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	440a      	add	r2, r1
 8009868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800986c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d128      	bne.n	80098ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	0151      	lsls	r1, r2, #5
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	440a      	add	r2, r1
 80098b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	791b      	ldrb	r3, [r3, #4]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d003      	beq.n	80098cc <USB_EPClearStall+0x4c>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	791b      	ldrb	r3, [r3, #4]
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d138      	bne.n	800993e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	e027      	b.n	800993e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	440a      	add	r2, r1
 8009904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009908:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800990c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	791b      	ldrb	r3, [r3, #4]
 8009912:	2b03      	cmp	r3, #3
 8009914:	d003      	beq.n	800991e <USB_EPClearStall+0x9e>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	791b      	ldrb	r3, [r3, #4]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d10f      	bne.n	800993e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800993c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800996e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009980:	68f9      	ldr	r1, [r7, #12]
 8009982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009986:	4313      	orrs	r3, r2
 8009988:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c6:	f023 0302 	bic.w	r3, r3, #2
 80099ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4013      	ands	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a34:	68fb      	ldr	r3, [r7, #12]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b085      	sub	sp, #20
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	4013      	ands	r3, r2
 8009a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	0c1b      	lsrs	r3, r3, #16
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b085      	sub	sp, #20
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	4013      	ands	r3, r2
 8009a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	b29b      	uxth	r3, r3
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b087      	sub	sp, #28
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	460b      	mov	r3, r1
 8009af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	f003 030f 	and.w	r3, r3, #15
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	fa22 f303 	lsr.w	r3, r2, r3
 8009b16:	01db      	lsls	r3, r3, #7
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4013      	ands	r3, r2
 8009b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b34:	68bb      	ldr	r3, [r7, #8]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	371c      	adds	r7, #28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b085      	sub	sp, #20
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b7c:	f023 0307 	bic.w	r3, r3, #7
 8009b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	460b      	mov	r3, r1
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	333c      	adds	r3, #60	; 0x3c
 8009bba:	3304      	adds	r3, #4
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4a26      	ldr	r2, [pc, #152]	; (8009c5c <USB_EP0_OutStart+0xb8>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d90a      	bls.n	8009bde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bd8:	d101      	bne.n	8009bde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e037      	b.n	8009c4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	461a      	mov	r2, r3
 8009be6:	2300      	movs	r3, #0
 8009be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c0c:	f043 0318 	orr.w	r3, r3, #24
 8009c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c26:	7afb      	ldrb	r3, [r7, #11]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d10f      	bne.n	8009c4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c32:	461a      	mov	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	4f54300a 	.word	0x4f54300a

08009c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <USB_CoreReset+0x64>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d901      	bls.n	8009c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e01b      	b.n	8009cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	daf2      	bge.n	8009c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f043 0201 	orr.w	r2, r3, #1
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4a09      	ldr	r2, [pc, #36]	; (8009cc4 <USB_CoreReset+0x64>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d901      	bls.n	8009ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e006      	b.n	8009cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d0f0      	beq.n	8009c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	00030d40 	.word	0x00030d40

08009cc8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009cd4:	2010      	movs	r0, #16
 8009cd6:	f002 f929 	bl	800bf2c <USBD_static_malloc>
 8009cda:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	32b0      	adds	r2, #176	; 0xb0
 8009cec:	2100      	movs	r1, #0
 8009cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e048      	b.n	8009d88 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	32b0      	adds	r2, #176	; 0xb0
 8009d00:	68f9      	ldr	r1, [r7, #12]
 8009d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	32b0      	adds	r2, #176	; 0xb0
 8009d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7c1b      	ldrb	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10d      	bne.n	8009d3e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009d22:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <USBD_HID_Init+0xc8>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 020f 	and.w	r2, r3, #15
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	440b      	add	r3, r1
 8009d36:	3326      	adds	r3, #38	; 0x26
 8009d38:	2207      	movs	r2, #7
 8009d3a:	801a      	strh	r2, [r3, #0]
 8009d3c:	e00c      	b.n	8009d58 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009d3e:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <USBD_HID_Init+0xc8>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	3326      	adds	r3, #38	; 0x26
 8009d54:	220a      	movs	r2, #10
 8009d56:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <USBD_HID_Init+0xc8>)
 8009d5a:	7819      	ldrb	r1, [r3, #0]
 8009d5c:	2304      	movs	r3, #4
 8009d5e:	2203      	movs	r2, #3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 ffd2 	bl	800bd0a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009d66:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <USBD_HID_Init+0xc8>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 020f 	and.w	r2, r3, #15
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	440b      	add	r3, r1
 8009d7a:	3324      	adds	r3, #36	; 0x24
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	200000db 	.word	0x200000db

08009d94 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009da0:	4b1f      	ldr	r3, [pc, #124]	; (8009e20 <USBD_HID_DeInit+0x8c>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 ffd5 	bl	800bd56 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009dac:	4b1c      	ldr	r3, [pc, #112]	; (8009e20 <USBD_HID_DeInit+0x8c>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 020f 	and.w	r2, r3, #15
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3324      	adds	r3, #36	; 0x24
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009dc6:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <USBD_HID_DeInit+0x8c>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	f003 020f 	and.w	r2, r3, #15
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	440b      	add	r3, r1
 8009dda:	3326      	adds	r3, #38	; 0x26
 8009ddc:	2200      	movs	r2, #0
 8009dde:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	32b0      	adds	r2, #176	; 0xb0
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d011      	beq.n	8009e16 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	32b0      	adds	r2, #176	; 0xb0
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 f8a1 	bl	800bf48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	32b0      	adds	r2, #176	; 0xb0
 8009e10:	2100      	movs	r1, #0
 8009e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	200000db 	.word	0x200000db

08009e24 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	32b0      	adds	r2, #176	; 0xb0
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e0e8      	b.n	800a022 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d046      	beq.n	8009eea <USBD_HID_Setup+0xc6>
 8009e5c:	2b20      	cmp	r3, #32
 8009e5e:	f040 80d8 	bne.w	800a012 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	3b02      	subs	r3, #2
 8009e68:	2b09      	cmp	r3, #9
 8009e6a:	d836      	bhi.n	8009eda <USBD_HID_Setup+0xb6>
 8009e6c:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <USBD_HID_Setup+0x50>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	08009ecb 	.word	0x08009ecb
 8009e78:	08009eab 	.word	0x08009eab
 8009e7c:	08009edb 	.word	0x08009edb
 8009e80:	08009edb 	.word	0x08009edb
 8009e84:	08009edb 	.word	0x08009edb
 8009e88:	08009edb 	.word	0x08009edb
 8009e8c:	08009edb 	.word	0x08009edb
 8009e90:	08009edb 	.word	0x08009edb
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009e9d 	.word	0x08009e9d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	885b      	ldrh	r3, [r3, #2]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	601a      	str	r2, [r3, #0]
          break;
 8009ea8:	e01e      	b.n	8009ee8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2201      	movs	r2, #1
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 fbd5 	bl	800b660 <USBD_CtlSendData>
          break;
 8009eb6:	e017      	b.n	8009ee8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	885b      	ldrh	r3, [r3, #2]
 8009ebc:	0a1b      	lsrs	r3, r3, #8
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	605a      	str	r2, [r3, #4]
          break;
 8009ec8:	e00e      	b.n	8009ee8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 fbc4 	bl	800b660 <USBD_CtlSendData>
          break;
 8009ed8:	e006      	b.n	8009ee8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 fb4e 	bl	800b57e <USBD_CtlError>
          ret = USBD_FAIL;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ee6:	bf00      	nop
      }
      break;
 8009ee8:	e09a      	b.n	800a020 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b0b      	cmp	r3, #11
 8009ef0:	f200 8086 	bhi.w	800a000 <USBD_HID_Setup+0x1dc>
 8009ef4:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <USBD_HID_Setup+0xd8>)
 8009ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efa:	bf00      	nop
 8009efc:	08009f2d 	.word	0x08009f2d
 8009f00:	0800a00f 	.word	0x0800a00f
 8009f04:	0800a001 	.word	0x0800a001
 8009f08:	0800a001 	.word	0x0800a001
 8009f0c:	0800a001 	.word	0x0800a001
 8009f10:	0800a001 	.word	0x0800a001
 8009f14:	08009f57 	.word	0x08009f57
 8009f18:	0800a001 	.word	0x0800a001
 8009f1c:	0800a001 	.word	0x0800a001
 8009f20:	0800a001 	.word	0x0800a001
 8009f24:	08009faf 	.word	0x08009faf
 8009f28:	08009fd9 	.word	0x08009fd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d107      	bne.n	8009f48 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f38:	f107 030a 	add.w	r3, r7, #10
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 fb8d 	bl	800b660 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f46:	e063      	b.n	800a010 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fb17 	bl	800b57e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	75fb      	strb	r3, [r7, #23]
          break;
 8009f54:	e05c      	b.n	800a010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	885b      	ldrh	r3, [r3, #2]
 8009f5a:	0a1b      	lsrs	r3, r3, #8
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2b22      	cmp	r3, #34	; 0x22
 8009f60:	d108      	bne.n	8009f74 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	2b3f      	cmp	r3, #63	; 0x3f
 8009f68:	bf28      	it	cs
 8009f6a:	233f      	movcs	r3, #63	; 0x3f
 8009f6c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009f6e:	4b2f      	ldr	r3, [pc, #188]	; (800a02c <USBD_HID_Setup+0x208>)
 8009f70:	613b      	str	r3, [r7, #16]
 8009f72:	e015      	b.n	8009fa0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	885b      	ldrh	r3, [r3, #2]
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	2b21      	cmp	r3, #33	; 0x21
 8009f7e:	d108      	bne.n	8009f92 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009f80:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <USBD_HID_Setup+0x20c>)
 8009f82:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	88db      	ldrh	r3, [r3, #6]
 8009f88:	2b09      	cmp	r3, #9
 8009f8a:	bf28      	it	cs
 8009f8c:	2309      	movcs	r3, #9
 8009f8e:	82bb      	strh	r3, [r7, #20]
 8009f90:	e006      	b.n	8009fa0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 faf2 	bl	800b57e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	75fb      	strb	r3, [r7, #23]
            break;
 8009f9e:	e037      	b.n	800a010 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fa0:	8abb      	ldrh	r3, [r7, #20]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	6939      	ldr	r1, [r7, #16]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fb5a 	bl	800b660 <USBD_CtlSendData>
          break;
 8009fac:	e030      	b.n	800a010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d107      	bne.n	8009fca <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fb4c 	bl	800b660 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fc8:	e022      	b.n	800a010 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fad6 	bl	800b57e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fd6:	e01b      	b.n	800a010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d106      	bne.n	8009ff2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	885b      	ldrh	r3, [r3, #2]
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ff0:	e00e      	b.n	800a010 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fac2 	bl	800b57e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ffe:	e007      	b.n	800a010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fabb 	bl	800b57e <USBD_CtlError>
          ret = USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	75fb      	strb	r3, [r7, #23]
          break;
 800a00c:	e000      	b.n	800a010 <USBD_HID_Setup+0x1ec>
          break;
 800a00e:	bf00      	nop
      }
      break;
 800a010:	e006      	b.n	800a020 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 fab2 	bl	800b57e <USBD_CtlError>
      ret = USBD_FAIL;
 800a01a:	2303      	movs	r3, #3
 800a01c:	75fb      	strb	r3, [r7, #23]
      break;
 800a01e:	bf00      	nop
  }

  return (uint8_t)ret;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	2000009c 	.word	0x2000009c
 800a030:	20000084 	.word	0x20000084

0800a034 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	4613      	mov	r3, r2
 800a040:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	32b0      	adds	r2, #176	; 0xb0
 800a04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a050:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	e014      	b.n	800a086 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b03      	cmp	r3, #3
 800a066:	d10d      	bne.n	800a084 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	7b1b      	ldrb	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	2201      	movs	r2, #1
 800a074:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <USBD_HID_SendReport+0x5c>)
 800a078:	7819      	ldrb	r1, [r3, #0]
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f001 ff11 	bl	800bea6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	200000db 	.word	0x200000db

0800a094 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a09c:	2181      	movs	r1, #129	; 0x81
 800a09e:	4809      	ldr	r0, [pc, #36]	; (800a0c4 <USBD_HID_GetFSCfgDesc+0x30>)
 800a0a0:	f000 fc35 	bl	800a90e <USBD_GetEpDesc>
 800a0a4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	220a      	movs	r2, #10
 800a0b0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2222      	movs	r2, #34	; 0x22
 800a0b6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a0b8:	4b02      	ldr	r3, [pc, #8]	; (800a0c4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000060 	.word	0x20000060

0800a0c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a0d0:	2181      	movs	r1, #129	; 0x81
 800a0d2:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <USBD_HID_GetHSCfgDesc+0x30>)
 800a0d4:	f000 fc1b 	bl	800a90e <USBD_GetEpDesc>
 800a0d8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2207      	movs	r2, #7
 800a0e4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2222      	movs	r2, #34	; 0x22
 800a0ea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a0ec:	4b02      	ldr	r3, [pc, #8]	; (800a0f8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20000060 	.word	0x20000060

0800a0fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a104:	2181      	movs	r1, #129	; 0x81
 800a106:	4809      	ldr	r0, [pc, #36]	; (800a12c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a108:	f000 fc01 	bl	800a90e <USBD_GetEpDesc>
 800a10c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	220a      	movs	r2, #10
 800a118:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2222      	movs	r2, #34	; 0x22
 800a11e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a120:	4b02      	ldr	r3, [pc, #8]	; (800a12c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000060 	.word	0x20000060

0800a130 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	32b0      	adds	r2, #176	; 0xb0
 800a146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14a:	2200      	movs	r2, #0
 800a14c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	220a      	movs	r2, #10
 800a168:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20000090 	.word	0x20000090

0800a17c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	e01f      	b.n	800a1d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	79fa      	ldrb	r2, [r7, #7]
 800a1c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f001 fd37 	bl	800bc3c <USBD_LL_Init>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e025      	b.n	800a240 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32ae      	adds	r2, #174	; 0xae
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00f      	beq.n	800a230 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	32ae      	adds	r2, #174	; 0xae
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	f107 020e 	add.w	r2, r7, #14
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	4602      	mov	r2, r0
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 fd3f 	bl	800bcd4 <USBD_LL_Start>
 800a256:	4603      	mov	r3, r0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	460b      	mov	r3, r1
 800a280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d009      	beq.n	800a2a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	4611      	mov	r1, r2
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	4798      	blx	r3
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b084      	sub	sp, #16
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	78fa      	ldrb	r2, [r7, #3]
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f001 f908 	bl	800b50a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a308:	461a      	mov	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a316:	f003 031f 	and.w	r3, r3, #31
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d01a      	beq.n	800a354 <USBD_LL_SetupStage+0x72>
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d822      	bhi.n	800a368 <USBD_LL_SetupStage+0x86>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <USBD_LL_SetupStage+0x4a>
 800a326:	2b01      	cmp	r3, #1
 800a328:	d00a      	beq.n	800a340 <USBD_LL_SetupStage+0x5e>
 800a32a:	e01d      	b.n	800a368 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fb5f 	bl	800a9f8 <USBD_StdDevReq>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73fb      	strb	r3, [r7, #15]
      break;
 800a33e:	e020      	b.n	800a382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fbc7 	bl	800aadc <USBD_StdItfReq>
 800a34e:	4603      	mov	r3, r0
 800a350:	73fb      	strb	r3, [r7, #15]
      break;
 800a352:	e016      	b.n	800a382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fc29 	bl	800abb4 <USBD_StdEPReq>
 800a362:	4603      	mov	r3, r0
 800a364:	73fb      	strb	r3, [r7, #15]
      break;
 800a366:	e00c      	b.n	800a382 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a36e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a372:	b2db      	uxtb	r3, r3
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 fd0c 	bl	800bd94 <USBD_LL_StallEP>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]
      break;
 800a380:	bf00      	nop
  }

  return ret;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	460b      	mov	r3, r1
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a39e:	7afb      	ldrb	r3, [r7, #11]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d16e      	bne.n	800a482 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	f040 8098 	bne.w	800a4e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d913      	bls.n	800a3ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	1ad2      	subs	r2, r2, r3
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	bf28      	it	cs
 800a3de:	4613      	movcs	r3, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f001 f967 	bl	800b6b8 <USBD_CtlContinueRx>
 800a3ea:	e07d      	b.n	800a4e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3f2:	f003 031f 	and.w	r3, r3, #31
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d014      	beq.n	800a424 <USBD_LL_DataOutStage+0x98>
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d81d      	bhi.n	800a43a <USBD_LL_DataOutStage+0xae>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <USBD_LL_DataOutStage+0x7c>
 800a402:	2b01      	cmp	r3, #1
 800a404:	d003      	beq.n	800a40e <USBD_LL_DataOutStage+0x82>
 800a406:	e018      	b.n	800a43a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	75bb      	strb	r3, [r7, #22]
            break;
 800a40c:	e018      	b.n	800a440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 fa5e 	bl	800a8da <USBD_CoreFindIF>
 800a41e:	4603      	mov	r3, r0
 800a420:	75bb      	strb	r3, [r7, #22]
            break;
 800a422:	e00d      	b.n	800a440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	4619      	mov	r1, r3
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fa60 	bl	800a8f4 <USBD_CoreFindEP>
 800a434:	4603      	mov	r3, r0
 800a436:	75bb      	strb	r3, [r7, #22]
            break;
 800a438:	e002      	b.n	800a440 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	75bb      	strb	r3, [r7, #22]
            break;
 800a43e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a440:	7dbb      	ldrb	r3, [r7, #22]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d119      	bne.n	800a47a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d113      	bne.n	800a47a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a452:	7dba      	ldrb	r2, [r7, #22]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	32ae      	adds	r2, #174	; 0xae
 800a458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00b      	beq.n	800a47a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a462:	7dba      	ldrb	r2, [r7, #22]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a46a:	7dba      	ldrb	r2, [r7, #22]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	32ae      	adds	r2, #174	; 0xae
 800a470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f001 f92d 	bl	800b6da <USBD_CtlSendStatus>
 800a480:	e032      	b.n	800a4e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a482:	7afb      	ldrb	r3, [r7, #11]
 800a484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 fa31 	bl	800a8f4 <USBD_CoreFindEP>
 800a492:	4603      	mov	r3, r0
 800a494:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a496:	7dbb      	ldrb	r3, [r7, #22]
 800a498:	2bff      	cmp	r3, #255	; 0xff
 800a49a:	d025      	beq.n	800a4e8 <USBD_LL_DataOutStage+0x15c>
 800a49c:	7dbb      	ldrb	r3, [r7, #22]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d122      	bne.n	800a4e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d117      	bne.n	800a4de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a4ae:	7dba      	ldrb	r2, [r7, #22]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	32ae      	adds	r2, #174	; 0xae
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00f      	beq.n	800a4de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a4be:	7dba      	ldrb	r2, [r7, #22]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a4c6:	7dba      	ldrb	r2, [r7, #22]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	32ae      	adds	r2, #174	; 0xae
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	7afa      	ldrb	r2, [r7, #11]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	4798      	blx	r3
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	e000      	b.n	800a4ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b086      	sub	sp, #24
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d16f      	bne.n	800a5e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3314      	adds	r3, #20
 800a50a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a512:	2b02      	cmp	r3, #2
 800a514:	d15a      	bne.n	800a5cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d914      	bls.n	800a54c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	1ad2      	subs	r2, r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	461a      	mov	r2, r3
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f001 f8ac 	bl	800b696 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a53e:	2300      	movs	r3, #0
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f001 fccf 	bl	800bee8 <USBD_LL_PrepareReceive>
 800a54a:	e03f      	b.n	800a5cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	68da      	ldr	r2, [r3, #12]
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	d11c      	bne.n	800a592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a560:	429a      	cmp	r2, r3
 800a562:	d316      	bcc.n	800a592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a56e:	429a      	cmp	r2, r3
 800a570:	d20f      	bcs.n	800a592 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a572:	2200      	movs	r2, #0
 800a574:	2100      	movs	r1, #0
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f001 f88d 	bl	800b696 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a584:	2300      	movs	r3, #0
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f001 fcac 	bl	800bee8 <USBD_LL_PrepareReceive>
 800a590:	e01c      	b.n	800a5cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d10f      	bne.n	800a5be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d009      	beq.n	800a5be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5be:	2180      	movs	r1, #128	; 0x80
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f001 fbe7 	bl	800bd94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f001 f89a 	bl	800b700 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d03a      	beq.n	800a64c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff fe42 	bl	800a260 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5e4:	e032      	b.n	800a64c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a5e6:	7afb      	ldrb	r3, [r7, #11]
 800a5e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f97f 	bl	800a8f4 <USBD_CoreFindEP>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	2bff      	cmp	r3, #255	; 0xff
 800a5fe:	d025      	beq.n	800a64c <USBD_LL_DataInStage+0x15a>
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d122      	bne.n	800a64c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d11c      	bne.n	800a64c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a612:	7dfa      	ldrb	r2, [r7, #23]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	32ae      	adds	r2, #174	; 0xae
 800a618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d014      	beq.n	800a64c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a622:	7dfa      	ldrb	r2, [r7, #23]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a62a:	7dfa      	ldrb	r2, [r7, #23]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	32ae      	adds	r2, #174	; 0xae
 800a630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	7afa      	ldrb	r2, [r7, #11]
 800a638:	4611      	mov	r1, r2
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a642:	7dbb      	ldrb	r3, [r7, #22]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a648:	7dbb      	ldrb	r3, [r7, #22]
 800a64a:	e000      	b.n	800a64e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d014      	beq.n	800a6bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00e      	beq.n	800a6bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	6852      	ldr	r2, [r2, #4]
 800a6aa:	b2d2      	uxtb	r2, r2
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6bc:	2340      	movs	r3, #64	; 0x40
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fb21 	bl	800bd0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2240      	movs	r2, #64	; 0x40
 800a6d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6d8:	2340      	movs	r3, #64	; 0x40
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2180      	movs	r1, #128	; 0x80
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f001 fb13 	bl	800bd0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2240      	movs	r2, #64	; 0x40
 800a6ee:	621a      	str	r2, [r3, #32]

  return ret;
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2204      	movs	r2, #4
 800a734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b04      	cmp	r3, #4
 800a758:	d106      	bne.n	800a768 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a760:	b2da      	uxtb	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b03      	cmp	r3, #3
 800a788:	d110      	bne.n	800a7ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00b      	beq.n	800a7ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	32ae      	adds	r2, #174	; 0xae
 800a7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e01c      	b.n	800a812 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d115      	bne.n	800a810 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	32ae      	adds	r2, #174	; 0xae
 800a7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00b      	beq.n	800a810 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	32ae      	adds	r2, #174	; 0xae
 800a802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	78fa      	ldrb	r2, [r7, #3]
 800a80a:	4611      	mov	r1, r2
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	32ae      	adds	r2, #174	; 0xae
 800a830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a838:	2303      	movs	r3, #3
 800a83a:	e01c      	b.n	800a876 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b03      	cmp	r3, #3
 800a846:	d115      	bne.n	800a874 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	32ae      	adds	r2, #174	; 0xae
 800a852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32ae      	adds	r2, #174	; 0xae
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	4611      	mov	r1, r2
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00e      	beq.n	800a8d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	6852      	ldr	r2, [r2, #4]
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a8e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a900:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	885b      	ldrh	r3, [r3, #2]
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	429a      	cmp	r2, r3
 800a934:	d920      	bls.n	800a978 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a93e:	e013      	b.n	800a968 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a940:	f107 030a 	add.w	r3, r7, #10
 800a944:	4619      	mov	r1, r3
 800a946:	6978      	ldr	r0, [r7, #20]
 800a948:	f000 f81b 	bl	800a982 <USBD_GetNextDesc>
 800a94c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	785b      	ldrb	r3, [r3, #1]
 800a952:	2b05      	cmp	r3, #5
 800a954:	d108      	bne.n	800a968 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	789b      	ldrb	r3, [r3, #2]
 800a95e:	78fa      	ldrb	r2, [r7, #3]
 800a960:	429a      	cmp	r2, r3
 800a962:	d008      	beq.n	800a976 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a964:	2300      	movs	r3, #0
 800a966:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	885b      	ldrh	r3, [r3, #2]
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	897b      	ldrh	r3, [r7, #10]
 800a970:	429a      	cmp	r2, r3
 800a972:	d8e5      	bhi.n	800a940 <USBD_GetEpDesc+0x32>
 800a974:	e000      	b.n	800a978 <USBD_GetEpDesc+0x6a>
          break;
 800a976:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a978:	693b      	ldr	r3, [r7, #16]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a982:	b480      	push	{r7}
 800a984:	b085      	sub	sp, #20
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	881a      	ldrh	r2, [r3, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	4413      	add	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9da:	8a3b      	ldrh	r3, [r7, #16]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	b21a      	sxth	r2, r3
 800a9e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	b21b      	sxth	r3, r3
 800a9e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9ea:	89fb      	ldrh	r3, [r7, #14]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	371c      	adds	r7, #28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa0e:	2b40      	cmp	r3, #64	; 0x40
 800aa10:	d005      	beq.n	800aa1e <USBD_StdDevReq+0x26>
 800aa12:	2b40      	cmp	r3, #64	; 0x40
 800aa14:	d857      	bhi.n	800aac6 <USBD_StdDevReq+0xce>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00f      	beq.n	800aa3a <USBD_StdDevReq+0x42>
 800aa1a:	2b20      	cmp	r3, #32
 800aa1c:	d153      	bne.n	800aac6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	32ae      	adds	r2, #174	; 0xae
 800aa28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	4798      	blx	r3
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
      break;
 800aa38:	e04a      	b.n	800aad0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2b09      	cmp	r3, #9
 800aa40:	d83b      	bhi.n	800aaba <USBD_StdDevReq+0xc2>
 800aa42:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <USBD_StdDevReq+0x50>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aa9d 	.word	0x0800aa9d
 800aa4c:	0800aab1 	.word	0x0800aab1
 800aa50:	0800aabb 	.word	0x0800aabb
 800aa54:	0800aaa7 	.word	0x0800aaa7
 800aa58:	0800aabb 	.word	0x0800aabb
 800aa5c:	0800aa7b 	.word	0x0800aa7b
 800aa60:	0800aa71 	.word	0x0800aa71
 800aa64:	0800aabb 	.word	0x0800aabb
 800aa68:	0800aa93 	.word	0x0800aa93
 800aa6c:	0800aa85 	.word	0x0800aa85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa3c 	bl	800aef0 <USBD_GetDescriptor>
          break;
 800aa78:	e024      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fba1 	bl	800b1c4 <USBD_SetAddress>
          break;
 800aa82:	e01f      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fbe0 	bl	800b24c <USBD_SetConfig>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]
          break;
 800aa90:	e018      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fc83 	bl	800b3a0 <USBD_GetConfig>
          break;
 800aa9a:	e013      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fcb4 	bl	800b40c <USBD_GetStatus>
          break;
 800aaa4:	e00e      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fce3 	bl	800b474 <USBD_SetFeature>
          break;
 800aaae:	e009      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fd07 	bl	800b4c6 <USBD_ClrFeature>
          break;
 800aab8:	e004      	b.n	800aac4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fd5e 	bl	800b57e <USBD_CtlError>
          break;
 800aac2:	bf00      	nop
      }
      break;
 800aac4:	e004      	b.n	800aad0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fd58 	bl	800b57e <USBD_CtlError>
      break;
 800aace:	bf00      	nop
  }

  return ret;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop

0800aadc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d005      	beq.n	800ab02 <USBD_StdItfReq+0x26>
 800aaf6:	2b40      	cmp	r3, #64	; 0x40
 800aaf8:	d852      	bhi.n	800aba0 <USBD_StdItfReq+0xc4>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <USBD_StdItfReq+0x26>
 800aafe:	2b20      	cmp	r3, #32
 800ab00:	d14e      	bne.n	800aba0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d840      	bhi.n	800ab92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	889b      	ldrh	r3, [r3, #4]
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d836      	bhi.n	800ab88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	889b      	ldrh	r3, [r3, #4]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff fed9 	bl	800a8da <USBD_CoreFindIF>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	2bff      	cmp	r3, #255	; 0xff
 800ab30:	d01d      	beq.n	800ab6e <USBD_StdItfReq+0x92>
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d11a      	bne.n	800ab6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ab38:	7bba      	ldrb	r2, [r7, #14]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	32ae      	adds	r2, #174	; 0xae
 800ab3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00f      	beq.n	800ab68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ab48:	7bba      	ldrb	r2, [r7, #14]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab50:	7bba      	ldrb	r2, [r7, #14]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	32ae      	adds	r2, #174	; 0xae
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab66:	e004      	b.n	800ab72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab6c:	e001      	b.n	800ab72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88db      	ldrh	r3, [r3, #6]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d110      	bne.n	800ab9c <USBD_StdItfReq+0xc0>
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10d      	bne.n	800ab9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fdaa 	bl	800b6da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab86:	e009      	b.n	800ab9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fcf7 	bl	800b57e <USBD_CtlError>
          break;
 800ab90:	e004      	b.n	800ab9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fcf2 	bl	800b57e <USBD_CtlError>
          break;
 800ab9a:	e000      	b.n	800ab9e <USBD_StdItfReq+0xc2>
          break;
 800ab9c:	bf00      	nop
      }
      break;
 800ab9e:	e004      	b.n	800abaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fceb 	bl	800b57e <USBD_CtlError>
      break;
 800aba8:	bf00      	nop
  }

  return ret;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	889b      	ldrh	r3, [r3, #4]
 800abc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abd0:	2b40      	cmp	r3, #64	; 0x40
 800abd2:	d007      	beq.n	800abe4 <USBD_StdEPReq+0x30>
 800abd4:	2b40      	cmp	r3, #64	; 0x40
 800abd6:	f200 817f 	bhi.w	800aed8 <USBD_StdEPReq+0x324>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d02a      	beq.n	800ac34 <USBD_StdEPReq+0x80>
 800abde:	2b20      	cmp	r3, #32
 800abe0:	f040 817a 	bne.w	800aed8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff fe83 	bl	800a8f4 <USBD_CoreFindEP>
 800abee:	4603      	mov	r3, r0
 800abf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abf2:	7b7b      	ldrb	r3, [r7, #13]
 800abf4:	2bff      	cmp	r3, #255	; 0xff
 800abf6:	f000 8174 	beq.w	800aee2 <USBD_StdEPReq+0x32e>
 800abfa:	7b7b      	ldrb	r3, [r7, #13]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 8170 	bne.w	800aee2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac02:	7b7a      	ldrb	r2, [r7, #13]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac0a:	7b7a      	ldrb	r2, [r7, #13]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	32ae      	adds	r2, #174	; 0xae
 800ac10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8163 	beq.w	800aee2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac1c:	7b7a      	ldrb	r2, [r7, #13]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	32ae      	adds	r2, #174	; 0xae
 800ac22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
 800ac2e:	4603      	mov	r3, r0
 800ac30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac32:	e156      	b.n	800aee2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d008      	beq.n	800ac4e <USBD_StdEPReq+0x9a>
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	f300 8145 	bgt.w	800aecc <USBD_StdEPReq+0x318>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 809b 	beq.w	800ad7e <USBD_StdEPReq+0x1ca>
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d03c      	beq.n	800acc6 <USBD_StdEPReq+0x112>
 800ac4c:	e13e      	b.n	800aecc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d002      	beq.n	800ac60 <USBD_StdEPReq+0xac>
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d016      	beq.n	800ac8c <USBD_StdEPReq+0xd8>
 800ac5e:	e02c      	b.n	800acba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00d      	beq.n	800ac82 <USBD_StdEPReq+0xce>
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b80      	cmp	r3, #128	; 0x80
 800ac6a:	d00a      	beq.n	800ac82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f88f 	bl	800bd94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac76:	2180      	movs	r1, #128	; 0x80
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 f88b 	bl	800bd94 <USBD_LL_StallEP>
 800ac7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac80:	e020      	b.n	800acc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fc7a 	bl	800b57e <USBD_CtlError>
              break;
 800ac8a:	e01b      	b.n	800acc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	885b      	ldrh	r3, [r3, #2]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10e      	bne.n	800acb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00b      	beq.n	800acb2 <USBD_StdEPReq+0xfe>
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	2b80      	cmp	r3, #128	; 0x80
 800ac9e:	d008      	beq.n	800acb2 <USBD_StdEPReq+0xfe>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	88db      	ldrh	r3, [r3, #6]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d104      	bne.n	800acb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 f871 	bl	800bd94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fd11 	bl	800b6da <USBD_CtlSendStatus>

              break;
 800acb8:	e004      	b.n	800acc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fc5e 	bl	800b57e <USBD_CtlError>
              break;
 800acc2:	bf00      	nop
          }
          break;
 800acc4:	e107      	b.n	800aed6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d002      	beq.n	800acd8 <USBD_StdEPReq+0x124>
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d016      	beq.n	800ad04 <USBD_StdEPReq+0x150>
 800acd6:	e04b      	b.n	800ad70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00d      	beq.n	800acfa <USBD_StdEPReq+0x146>
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	2b80      	cmp	r3, #128	; 0x80
 800ace2:	d00a      	beq.n	800acfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f853 	bl	800bd94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acee:	2180      	movs	r1, #128	; 0x80
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 f84f 	bl	800bd94 <USBD_LL_StallEP>
 800acf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acf8:	e040      	b.n	800ad7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fc3e 	bl	800b57e <USBD_CtlError>
              break;
 800ad02:	e03b      	b.n	800ad7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	885b      	ldrh	r3, [r3, #2]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d136      	bne.n	800ad7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f001 f859 	bl	800bdd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fcda 	bl	800b6da <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fde2 	bl	800a8f4 <USBD_CoreFindEP>
 800ad30:	4603      	mov	r3, r0
 800ad32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad34:	7b7b      	ldrb	r3, [r7, #13]
 800ad36:	2bff      	cmp	r3, #255	; 0xff
 800ad38:	d01f      	beq.n	800ad7a <USBD_StdEPReq+0x1c6>
 800ad3a:	7b7b      	ldrb	r3, [r7, #13]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d11c      	bne.n	800ad7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ad40:	7b7a      	ldrb	r2, [r7, #13]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad48:	7b7a      	ldrb	r2, [r7, #13]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	32ae      	adds	r2, #174	; 0xae
 800ad4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d010      	beq.n	800ad7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad58:	7b7a      	ldrb	r2, [r7, #13]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	32ae      	adds	r2, #174	; 0xae
 800ad5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	4798      	blx	r3
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ad6e:	e004      	b.n	800ad7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fc03 	bl	800b57e <USBD_CtlError>
              break;
 800ad78:	e000      	b.n	800ad7c <USBD_StdEPReq+0x1c8>
              break;
 800ad7a:	bf00      	nop
          }
          break;
 800ad7c:	e0ab      	b.n	800aed6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d002      	beq.n	800ad90 <USBD_StdEPReq+0x1dc>
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d032      	beq.n	800adf4 <USBD_StdEPReq+0x240>
 800ad8e:	e097      	b.n	800aec0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d007      	beq.n	800ada6 <USBD_StdEPReq+0x1f2>
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b80      	cmp	r3, #128	; 0x80
 800ad9a:	d004      	beq.n	800ada6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fbed 	bl	800b57e <USBD_CtlError>
                break;
 800ada4:	e091      	b.n	800aeca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ada6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da0b      	bge.n	800adc6 <USBD_StdEPReq+0x212>
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adb4:	4613      	mov	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	3310      	adds	r3, #16
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	4413      	add	r3, r2
 800adc2:	3304      	adds	r3, #4
 800adc4:	e00b      	b.n	800adde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adc6:	7bbb      	ldrb	r3, [r7, #14]
 800adc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	4413      	add	r3, r2
 800addc:	3304      	adds	r3, #4
 800adde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2202      	movs	r2, #2
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fc37 	bl	800b660 <USBD_CtlSendData>
              break;
 800adf2:	e06a      	b.n	800aeca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	da11      	bge.n	800ae20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	f003 020f 	and.w	r2, r3, #15
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	440b      	add	r3, r1
 800ae0e:	3324      	adds	r3, #36	; 0x24
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d117      	bne.n	800ae46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fbb0 	bl	800b57e <USBD_CtlError>
                  break;
 800ae1e:	e054      	b.n	800aeca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	f003 020f 	and.w	r2, r3, #15
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	440b      	add	r3, r1
 800ae32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fb9d 	bl	800b57e <USBD_CtlError>
                  break;
 800ae44:	e041      	b.n	800aeca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da0b      	bge.n	800ae66 <USBD_StdEPReq+0x2b2>
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	3310      	adds	r3, #16
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	4413      	add	r3, r2
 800ae62:	3304      	adds	r3, #4
 800ae64:	e00b      	b.n	800ae7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <USBD_StdEPReq+0x2d8>
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	2b80      	cmp	r3, #128	; 0x80
 800ae8a:	d103      	bne.n	800ae94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
 800ae92:	e00e      	b.n	800aeb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 ffb9 	bl	800be10 <USBD_LL_IsStallEP>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2201      	movs	r2, #1
 800aea8:	601a      	str	r2, [r3, #0]
 800aeaa:	e002      	b.n	800aeb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fbd1 	bl	800b660 <USBD_CtlSendData>
              break;
 800aebe:	e004      	b.n	800aeca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fb5b 	bl	800b57e <USBD_CtlError>
              break;
 800aec8:	bf00      	nop
          }
          break;
 800aeca:	e004      	b.n	800aed6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fb55 	bl	800b57e <USBD_CtlError>
          break;
 800aed4:	bf00      	nop
      }
      break;
 800aed6:	e005      	b.n	800aee4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fb4f 	bl	800b57e <USBD_CtlError>
      break;
 800aee0:	e000      	b.n	800aee4 <USBD_StdEPReq+0x330>
      break;
 800aee2:	bf00      	nop
  }

  return ret;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	0a1b      	lsrs	r3, r3, #8
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	2b06      	cmp	r3, #6
 800af12:	f200 8128 	bhi.w	800b166 <USBD_GetDescriptor+0x276>
 800af16:	a201      	add	r2, pc, #4	; (adr r2, 800af1c <USBD_GetDescriptor+0x2c>)
 800af18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1c:	0800af39 	.word	0x0800af39
 800af20:	0800af51 	.word	0x0800af51
 800af24:	0800af91 	.word	0x0800af91
 800af28:	0800b167 	.word	0x0800b167
 800af2c:	0800b167 	.word	0x0800b167
 800af30:	0800b107 	.word	0x0800b107
 800af34:	0800b133 	.word	0x0800b133
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	7c12      	ldrb	r2, [r2, #16]
 800af44:	f107 0108 	add.w	r1, r7, #8
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
 800af4c:	60f8      	str	r0, [r7, #12]
      break;
 800af4e:	e112      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7c1b      	ldrb	r3, [r3, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10d      	bne.n	800af74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af60:	f107 0208 	add.w	r2, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	2202      	movs	r2, #2
 800af70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af72:	e100      	b.n	800b176 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	f107 0208 	add.w	r2, r7, #8
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3301      	adds	r3, #1
 800af8a:	2202      	movs	r2, #2
 800af8c:	701a      	strb	r2, [r3, #0]
      break;
 800af8e:	e0f2      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b05      	cmp	r3, #5
 800af98:	f200 80ac 	bhi.w	800b0f4 <USBD_GetDescriptor+0x204>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBD_GetDescriptor+0xb4>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afbd 	.word	0x0800afbd
 800afa8:	0800aff1 	.word	0x0800aff1
 800afac:	0800b025 	.word	0x0800b025
 800afb0:	0800b059 	.word	0x0800b059
 800afb4:	0800b08d 	.word	0x0800b08d
 800afb8:	0800b0c1 	.word	0x0800b0c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	7c12      	ldrb	r2, [r2, #16]
 800afd4:	f107 0108 	add.w	r1, r7, #8
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
 800afdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afde:	e091      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 facb 	bl	800b57e <USBD_CtlError>
            err++;
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	3301      	adds	r3, #1
 800afec:	72fb      	strb	r3, [r7, #11]
          break;
 800afee:	e089      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	7c12      	ldrb	r2, [r2, #16]
 800b008:	f107 0108 	add.w	r1, r7, #8
 800b00c:	4610      	mov	r0, r2
 800b00e:	4798      	blx	r3
 800b010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b012:	e077      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fab1 	bl	800b57e <USBD_CtlError>
            err++;
 800b01c:	7afb      	ldrb	r3, [r7, #11]
 800b01e:	3301      	adds	r3, #1
 800b020:	72fb      	strb	r3, [r7, #11]
          break;
 800b022:	e06f      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00b      	beq.n	800b048 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	7c12      	ldrb	r2, [r2, #16]
 800b03c:	f107 0108 	add.w	r1, r7, #8
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b046:	e05d      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa97 	bl	800b57e <USBD_CtlError>
            err++;
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	3301      	adds	r3, #1
 800b054:	72fb      	strb	r3, [r7, #11]
          break;
 800b056:	e055      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	7c12      	ldrb	r2, [r2, #16]
 800b070:	f107 0108 	add.w	r1, r7, #8
 800b074:	4610      	mov	r0, r2
 800b076:	4798      	blx	r3
 800b078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b07a:	e043      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa7d 	bl	800b57e <USBD_CtlError>
            err++;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	3301      	adds	r3, #1
 800b088:	72fb      	strb	r3, [r7, #11]
          break;
 800b08a:	e03b      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00b      	beq.n	800b0b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	7c12      	ldrb	r2, [r2, #16]
 800b0a4:	f107 0108 	add.w	r1, r7, #8
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	4798      	blx	r3
 800b0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ae:	e029      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa63 	bl	800b57e <USBD_CtlError>
            err++;
 800b0b8:	7afb      	ldrb	r3, [r7, #11]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0be:	e021      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00b      	beq.n	800b0e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	7c12      	ldrb	r2, [r2, #16]
 800b0d8:	f107 0108 	add.w	r1, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0e2:	e00f      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa49 	bl	800b57e <USBD_CtlError>
            err++;
 800b0ec:	7afb      	ldrb	r3, [r7, #11]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0f2:	e007      	b.n	800b104 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa41 	bl	800b57e <USBD_CtlError>
          err++;
 800b0fc:	7afb      	ldrb	r3, [r7, #11]
 800b0fe:	3301      	adds	r3, #1
 800b100:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b102:	bf00      	nop
      }
      break;
 800b104:	e037      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7c1b      	ldrb	r3, [r3, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b116:	f107 0208 	add.w	r2, r7, #8
 800b11a:	4610      	mov	r0, r2
 800b11c:	4798      	blx	r3
 800b11e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b120:	e029      	b.n	800b176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa2a 	bl	800b57e <USBD_CtlError>
        err++;
 800b12a:	7afb      	ldrb	r3, [r7, #11]
 800b12c:	3301      	adds	r3, #1
 800b12e:	72fb      	strb	r3, [r7, #11]
      break;
 800b130:	e021      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	7c1b      	ldrb	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10d      	bne.n	800b156 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f107 0208 	add.w	r2, r7, #8
 800b146:	4610      	mov	r0, r2
 800b148:	4798      	blx	r3
 800b14a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3301      	adds	r3, #1
 800b150:	2207      	movs	r2, #7
 800b152:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b154:	e00f      	b.n	800b176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fa10 	bl	800b57e <USBD_CtlError>
        err++;
 800b15e:	7afb      	ldrb	r3, [r7, #11]
 800b160:	3301      	adds	r3, #1
 800b162:	72fb      	strb	r3, [r7, #11]
      break;
 800b164:	e007      	b.n	800b176 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fa08 	bl	800b57e <USBD_CtlError>
      err++;
 800b16e:	7afb      	ldrb	r3, [r7, #11]
 800b170:	3301      	adds	r3, #1
 800b172:	72fb      	strb	r3, [r7, #11]
      break;
 800b174:	bf00      	nop
  }

  if (err != 0U)
 800b176:	7afb      	ldrb	r3, [r7, #11]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d11e      	bne.n	800b1ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	88db      	ldrh	r3, [r3, #6]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d016      	beq.n	800b1b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b184:	893b      	ldrh	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00e      	beq.n	800b1a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	88da      	ldrh	r2, [r3, #6]
 800b18e:	893b      	ldrh	r3, [r7, #8]
 800b190:	4293      	cmp	r3, r2
 800b192:	bf28      	it	cs
 800b194:	4613      	movcs	r3, r2
 800b196:	b29b      	uxth	r3, r3
 800b198:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b19a:	893b      	ldrh	r3, [r7, #8]
 800b19c:	461a      	mov	r2, r3
 800b19e:	68f9      	ldr	r1, [r7, #12]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fa5d 	bl	800b660 <USBD_CtlSendData>
 800b1a6:	e009      	b.n	800b1bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9e7 	bl	800b57e <USBD_CtlError>
 800b1b0:	e004      	b.n	800b1bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fa91 	bl	800b6da <USBD_CtlSendStatus>
 800b1b8:	e000      	b.n	800b1bc <USBD_GetDescriptor+0x2cc>
    return;
 800b1ba:	bf00      	nop
  }
}
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop

0800b1c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	889b      	ldrh	r3, [r3, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d131      	bne.n	800b23a <USBD_SetAddress+0x76>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	88db      	ldrh	r3, [r3, #6]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d12d      	bne.n	800b23a <USBD_SetAddress+0x76>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	885b      	ldrh	r3, [r3, #2]
 800b1e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b1e4:	d829      	bhi.n	800b23a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	885b      	ldrh	r3, [r3, #2]
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d104      	bne.n	800b208 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f9bc 	bl	800b57e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b206:	e01d      	b.n	800b244 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7bfa      	ldrb	r2, [r7, #15]
 800b20c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fe27 	bl	800be68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa5d 	bl	800b6da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d004      	beq.n	800b230 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2202      	movs	r2, #2
 800b22a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22e:	e009      	b.n	800b244 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b238:	e004      	b.n	800b244 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f99e 	bl	800b57e <USBD_CtlError>
  }
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	885b      	ldrh	r3, [r3, #2]
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	4b4e      	ldr	r3, [pc, #312]	; (800b39c <USBD_SetConfig+0x150>)
 800b262:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b264:	4b4d      	ldr	r3, [pc, #308]	; (800b39c <USBD_SetConfig+0x150>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d905      	bls.n	800b278 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f985 	bl	800b57e <USBD_CtlError>
    return USBD_FAIL;
 800b274:	2303      	movs	r3, #3
 800b276:	e08c      	b.n	800b392 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b02      	cmp	r3, #2
 800b282:	d002      	beq.n	800b28a <USBD_SetConfig+0x3e>
 800b284:	2b03      	cmp	r3, #3
 800b286:	d029      	beq.n	800b2dc <USBD_SetConfig+0x90>
 800b288:	e075      	b.n	800b376 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b28a:	4b44      	ldr	r3, [pc, #272]	; (800b39c <USBD_SetConfig+0x150>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d020      	beq.n	800b2d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b292:	4b42      	ldr	r3, [pc, #264]	; (800b39c <USBD_SetConfig+0x150>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b29c:	4b3f      	ldr	r3, [pc, #252]	; (800b39c <USBD_SetConfig+0x150>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7fe ffe7 	bl	800a276 <USBD_SetClassConfig>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d008      	beq.n	800b2c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f962 	bl	800b57e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2202      	movs	r2, #2
 800b2be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2c2:	e065      	b.n	800b390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa08 	bl	800b6da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2203      	movs	r2, #3
 800b2ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2d2:	e05d      	b.n	800b390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fa00 	bl	800b6da <USBD_CtlSendStatus>
      break;
 800b2da:	e059      	b.n	800b390 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b2dc:	4b2f      	ldr	r3, [pc, #188]	; (800b39c <USBD_SetConfig+0x150>)
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d112      	bne.n	800b30a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b2ec:	4b2b      	ldr	r3, [pc, #172]	; (800b39c <USBD_SetConfig+0x150>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2f6:	4b29      	ldr	r3, [pc, #164]	; (800b39c <USBD_SetConfig+0x150>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7fe ffd6 	bl	800a2ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f9e9 	bl	800b6da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b308:	e042      	b.n	800b390 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b30a:	4b24      	ldr	r3, [pc, #144]	; (800b39c <USBD_SetConfig+0x150>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	429a      	cmp	r2, r3
 800b316:	d02a      	beq.n	800b36e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7fe ffc4 	bl	800a2ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b326:	4b1d      	ldr	r3, [pc, #116]	; (800b39c <USBD_SetConfig+0x150>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b330:	4b1a      	ldr	r3, [pc, #104]	; (800b39c <USBD_SetConfig+0x150>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7fe ff9d 	bl	800a276 <USBD_SetClassConfig>
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00f      	beq.n	800b366 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f918 	bl	800b57e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	4619      	mov	r1, r3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7fe ffa9 	bl	800a2ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2202      	movs	r2, #2
 800b360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b364:	e014      	b.n	800b390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f9b7 	bl	800b6da <USBD_CtlSendStatus>
      break;
 800b36c:	e010      	b.n	800b390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f9b3 	bl	800b6da <USBD_CtlSendStatus>
      break;
 800b374:	e00c      	b.n	800b390 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f900 	bl	800b57e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b37e:	4b07      	ldr	r3, [pc, #28]	; (800b39c <USBD_SetConfig+0x150>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7fe ff92 	bl	800a2ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b38a:	2303      	movs	r3, #3
 800b38c:	73fb      	strb	r3, [r7, #15]
      break;
 800b38e:	bf00      	nop
  }

  return ret;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	200003a0 	.word	0x200003a0

0800b3a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	88db      	ldrh	r3, [r3, #6]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d004      	beq.n	800b3bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f8e2 	bl	800b57e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3ba:	e023      	b.n	800b404 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	dc02      	bgt.n	800b3ce <USBD_GetConfig+0x2e>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dc03      	bgt.n	800b3d4 <USBD_GetConfig+0x34>
 800b3cc:	e015      	b.n	800b3fa <USBD_GetConfig+0x5a>
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d00b      	beq.n	800b3ea <USBD_GetConfig+0x4a>
 800b3d2:	e012      	b.n	800b3fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3308      	adds	r3, #8
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f93c 	bl	800b660 <USBD_CtlSendData>
        break;
 800b3e8:	e00c      	b.n	800b404 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f934 	bl	800b660 <USBD_CtlSendData>
        break;
 800b3f8:	e004      	b.n	800b404 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f8be 	bl	800b57e <USBD_CtlError>
        break;
 800b402:	bf00      	nop
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	2b02      	cmp	r3, #2
 800b422:	d81e      	bhi.n	800b462 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	88db      	ldrh	r3, [r3, #6]
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d004      	beq.n	800b436 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f8a5 	bl	800b57e <USBD_CtlError>
        break;
 800b434:	e01a      	b.n	800b46c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b442:	2b00      	cmp	r3, #0
 800b444:	d005      	beq.n	800b452 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f043 0202 	orr.w	r2, r3, #2
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	330c      	adds	r3, #12
 800b456:	2202      	movs	r2, #2
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f900 	bl	800b660 <USBD_CtlSendData>
      break;
 800b460:	e004      	b.n	800b46c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f88a 	bl	800b57e <USBD_CtlError>
      break;
 800b46a:	bf00      	nop
  }
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	885b      	ldrh	r3, [r3, #2]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d107      	bne.n	800b496 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f923 	bl	800b6da <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b494:	e013      	b.n	800b4be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d10b      	bne.n	800b4b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	889b      	ldrh	r3, [r3, #4]
 800b4a2:	0a1b      	lsrs	r3, r3, #8
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f913 	bl	800b6da <USBD_CtlSendStatus>
}
 800b4b4:	e003      	b.n	800b4be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f860 	bl	800b57e <USBD_CtlError>
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d80b      	bhi.n	800b4f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	885b      	ldrh	r3, [r3, #2]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d10c      	bne.n	800b500 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f8f3 	bl	800b6da <USBD_CtlSendStatus>
      }
      break;
 800b4f4:	e004      	b.n	800b500 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f840 	bl	800b57e <USBD_CtlError>
      break;
 800b4fe:	e000      	b.n	800b502 <USBD_ClrFeature+0x3c>
      break;
 800b500:	bf00      	nop
  }
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3301      	adds	r3, #1
 800b524:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3301      	adds	r3, #1
 800b532:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff fa41 	bl	800a9bc <SWAPBYTE>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3301      	adds	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f7ff fa34 	bl	800a9bc <SWAPBYTE>
 800b554:	4603      	mov	r3, r0
 800b556:	461a      	mov	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3301      	adds	r3, #1
 800b560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3301      	adds	r3, #1
 800b566:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7ff fa27 	bl	800a9bc <SWAPBYTE>
 800b56e:	4603      	mov	r3, r0
 800b570:	461a      	mov	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	80da      	strh	r2, [r3, #6]
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b588:	2180      	movs	r1, #128	; 0x80
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fc02 	bl	800bd94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b590:	2100      	movs	r1, #0
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fbfe 	bl	800bd94 <USBD_LL_StallEP>
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d036      	beq.n	800b624 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b5ba:	6938      	ldr	r0, [r7, #16]
 800b5bc:	f000 f836 	bl	800b62c <USBD_GetLen>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5ea:	7dfb      	ldrb	r3, [r7, #23]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b5f0:	e013      	b.n	800b61a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	7812      	ldrb	r2, [r2, #0]
 800b5fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	3301      	adds	r3, #1
 800b602:	613b      	str	r3, [r7, #16]
    idx++;
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	3301      	adds	r3, #1
 800b608:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	4413      	add	r3, r2
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
    idx++;
 800b614:	7dfb      	ldrb	r3, [r7, #23]
 800b616:	3301      	adds	r3, #1
 800b618:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1e7      	bne.n	800b5f2 <USBD_GetString+0x52>
 800b622:	e000      	b.n	800b626 <USBD_GetString+0x86>
    return;
 800b624:	bf00      	nop
  }
}
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b63c:	e005      	b.n	800b64a <USBD_GetLen+0x1e>
  {
    len++;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
 800b640:	3301      	adds	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	3301      	adds	r3, #1
 800b648:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f5      	bne.n	800b63e <USBD_GetLen+0x12>
  }

  return len;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2202      	movs	r2, #2
 800b670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	2100      	movs	r1, #0
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 fc0d 	bl	800bea6 <USBD_LL_Transmit>

  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 fbfc 	bl	800bea6 <USBD_LL_Transmit>

  return USBD_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 fc0c 	bl	800bee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fbd8 	bl	800bea6 <USBD_LL_Transmit>

  return USBD_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2205      	movs	r2, #5
 800b70c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b710:	2300      	movs	r3, #0
 800b712:	2200      	movs	r2, #0
 800b714:	2100      	movs	r1, #0
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fbe6 	bl	800bee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b72c:	2200      	movs	r2, #0
 800b72e:	490e      	ldr	r1, [pc, #56]	; (800b768 <MX_USB_DEVICE_Init+0x40>)
 800b730:	480e      	ldr	r0, [pc, #56]	; (800b76c <MX_USB_DEVICE_Init+0x44>)
 800b732:	f7fe fd23 	bl	800a17c <USBD_Init>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b73c:	f7f6 f98a 	bl	8001a54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b740:	490b      	ldr	r1, [pc, #44]	; (800b770 <MX_USB_DEVICE_Init+0x48>)
 800b742:	480a      	ldr	r0, [pc, #40]	; (800b76c <MX_USB_DEVICE_Init+0x44>)
 800b744:	f7fe fd4a 	bl	800a1dc <USBD_RegisterClass>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b74e:	f7f6 f981 	bl	8001a54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b752:	4806      	ldr	r0, [pc, #24]	; (800b76c <MX_USB_DEVICE_Init+0x44>)
 800b754:	f7fe fd78 	bl	800a248 <USBD_Start>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b75e:	f7f6 f979 	bl	8001a54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b762:	bf00      	nop
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	200000dc 	.word	0x200000dc
 800b76c:	200003a4 	.word	0x200003a4
 800b770:	20000028 	.word	0x20000028

0800b774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	6039      	str	r1, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	2212      	movs	r2, #18
 800b784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b786:	4b03      	ldr	r3, [pc, #12]	; (800b794 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	200000f8 	.word	0x200000f8

0800b798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	6039      	str	r1, [r7, #0]
 800b7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7aa:	4b03      	ldr	r3, [pc, #12]	; (800b7b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	2000010c 	.word	0x2000010c

0800b7bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d105      	bne.n	800b7da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	4907      	ldr	r1, [pc, #28]	; (800b7f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7d2:	4808      	ldr	r0, [pc, #32]	; (800b7f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7d4:	f7ff fee4 	bl	800b5a0 <USBD_GetString>
 800b7d8:	e004      	b.n	800b7e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	4904      	ldr	r1, [pc, #16]	; (800b7f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7de:	4805      	ldr	r0, [pc, #20]	; (800b7f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7e0:	f7ff fede 	bl	800b5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7e4:	4b02      	ldr	r3, [pc, #8]	; (800b7f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000680 	.word	0x20000680
 800b7f4:	0800c910 	.word	0x0800c910

0800b7f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	4904      	ldr	r1, [pc, #16]	; (800b818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b808:	4804      	ldr	r0, [pc, #16]	; (800b81c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b80a:	f7ff fec9 	bl	800b5a0 <USBD_GetString>
  return USBD_StrDesc;
 800b80e:	4b02      	ldr	r3, [pc, #8]	; (800b818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20000680 	.word	0x20000680
 800b81c:	0800c918 	.word	0x0800c918

0800b820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	221a      	movs	r2, #26
 800b830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b832:	f000 f843 	bl	800b8bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b836:	4b02      	ldr	r3, [pc, #8]	; (800b840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000110 	.word	0x20000110

0800b844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	6039      	str	r1, [r7, #0]
 800b84e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d105      	bne.n	800b862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	4907      	ldr	r1, [pc, #28]	; (800b878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b85a:	4808      	ldr	r0, [pc, #32]	; (800b87c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b85c:	f7ff fea0 	bl	800b5a0 <USBD_GetString>
 800b860:	e004      	b.n	800b86c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	4904      	ldr	r1, [pc, #16]	; (800b878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b866:	4805      	ldr	r0, [pc, #20]	; (800b87c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b868:	f7ff fe9a 	bl	800b5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b86c:	4b02      	ldr	r3, [pc, #8]	; (800b878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20000680 	.word	0x20000680
 800b87c:	0800c92c 	.word	0x0800c92c

0800b880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	6039      	str	r1, [r7, #0]
 800b88a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d105      	bne.n	800b89e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	4907      	ldr	r1, [pc, #28]	; (800b8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b896:	4808      	ldr	r0, [pc, #32]	; (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b898:	f7ff fe82 	bl	800b5a0 <USBD_GetString>
 800b89c:	e004      	b.n	800b8a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	4904      	ldr	r1, [pc, #16]	; (800b8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8a2:	4805      	ldr	r0, [pc, #20]	; (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8a4:	f7ff fe7c 	bl	800b5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8a8:	4b02      	ldr	r3, [pc, #8]	; (800b8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000680 	.word	0x20000680
 800b8b8:	0800c938 	.word	0x0800c938

0800b8bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	; (800b900 <Get_SerialNum+0x44>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8c8:	4b0e      	ldr	r3, [pc, #56]	; (800b904 <Get_SerialNum+0x48>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8ce:	4b0e      	ldr	r3, [pc, #56]	; (800b908 <Get_SerialNum+0x4c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4413      	add	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d009      	beq.n	800b8f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b8e2:	2208      	movs	r2, #8
 800b8e4:	4909      	ldr	r1, [pc, #36]	; (800b90c <Get_SerialNum+0x50>)
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 f814 	bl	800b914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	4908      	ldr	r1, [pc, #32]	; (800b910 <Get_SerialNum+0x54>)
 800b8f0:	68b8      	ldr	r0, [r7, #8]
 800b8f2:	f000 f80f 	bl	800b914 <IntToUnicode>
  }
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	1fff7a10 	.word	0x1fff7a10
 800b904:	1fff7a14 	.word	0x1fff7a14
 800b908:	1fff7a18 	.word	0x1fff7a18
 800b90c:	20000112 	.word	0x20000112
 800b910:	20000122 	.word	0x20000122

0800b914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b914:	b480      	push	{r7}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	4613      	mov	r3, r2
 800b920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
 800b92a:	e027      	b.n	800b97c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	0f1b      	lsrs	r3, r3, #28
 800b930:	2b09      	cmp	r3, #9
 800b932:	d80b      	bhi.n	800b94c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	0f1b      	lsrs	r3, r3, #28
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	4619      	mov	r1, r3
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	440b      	add	r3, r1
 800b944:	3230      	adds	r2, #48	; 0x30
 800b946:	b2d2      	uxtb	r2, r2
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	e00a      	b.n	800b962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	0f1b      	lsrs	r3, r3, #28
 800b950:	b2da      	uxtb	r2, r3
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	4619      	mov	r1, r3
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	440b      	add	r3, r1
 800b95c:	3237      	adds	r2, #55	; 0x37
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	3301      	adds	r3, #1
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	4413      	add	r3, r2
 800b972:	2200      	movs	r2, #0
 800b974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	3301      	adds	r3, #1
 800b97a:	75fb      	strb	r3, [r7, #23]
 800b97c:	7dfa      	ldrb	r2, [r7, #23]
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	429a      	cmp	r2, r3
 800b982:	d3d3      	bcc.n	800b92c <IntToUnicode+0x18>
  }
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
	...

0800b994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08a      	sub	sp, #40	; 0x28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b99c:	f107 0314 	add.w	r3, r7, #20
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	605a      	str	r2, [r3, #4]
 800b9a6:	609a      	str	r2, [r3, #8]
 800b9a8:	60da      	str	r2, [r3, #12]
 800b9aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9b4:	d147      	bne.n	800ba46 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	4b25      	ldr	r3, [pc, #148]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	4a24      	ldr	r2, [pc, #144]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800b9c0:	f043 0301 	orr.w	r3, r3, #1
 800b9c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b9c6:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800b9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	613b      	str	r3, [r7, #16]
 800b9d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b9d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9e0:	f107 0314 	add.w	r3, r7, #20
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	481b      	ldr	r0, [pc, #108]	; (800ba54 <HAL_PCD_MspInit+0xc0>)
 800b9e8:	f7f6 ff9a 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b9ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b9f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b9fe:	230a      	movs	r3, #10
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba02:	f107 0314 	add.w	r3, r7, #20
 800ba06:	4619      	mov	r1, r3
 800ba08:	4812      	ldr	r0, [pc, #72]	; (800ba54 <HAL_PCD_MspInit+0xc0>)
 800ba0a:	f7f6 ff89 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba0e:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800ba10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba12:	4a0f      	ldr	r2, [pc, #60]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800ba14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba18:	6353      	str	r3, [r2, #52]	; 0x34
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800ba20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba22:	4a0b      	ldr	r2, [pc, #44]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800ba24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba28:	6453      	str	r3, [r2, #68]	; 0x44
 800ba2a:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <HAL_PCD_MspInit+0xbc>)
 800ba2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba32:	60fb      	str	r3, [r7, #12]
 800ba34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba36:	2200      	movs	r2, #0
 800ba38:	2100      	movs	r1, #0
 800ba3a:	2043      	movs	r0, #67	; 0x43
 800ba3c:	f7f6 fb99 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba40:	2043      	movs	r0, #67	; 0x43
 800ba42:	f7f6 fbb2 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba46:	bf00      	nop
 800ba48:	3728      	adds	r7, #40	; 0x28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	40023800 	.word	0x40023800
 800ba54:	40020000 	.word	0x40020000

0800ba58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f7fe fc37 	bl	800a2e2 <USBD_LL_SetupStage>
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba8e:	78fa      	ldrb	r2, [r7, #3]
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	4613      	mov	r3, r2
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	4413      	add	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	440b      	add	r3, r1
 800ba9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	78fb      	ldrb	r3, [r7, #3]
 800baa4:	4619      	mov	r1, r3
 800baa6:	f7fe fc71 	bl	800a38c <USBD_LL_DataOutStage>
}
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b082      	sub	sp, #8
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	460b      	mov	r3, r1
 800babc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bac4:	78fa      	ldrb	r2, [r7, #3]
 800bac6:	6879      	ldr	r1, [r7, #4]
 800bac8:	4613      	mov	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	440b      	add	r3, r1
 800bad2:	334c      	adds	r3, #76	; 0x4c
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	78fb      	ldrb	r3, [r7, #3]
 800bad8:	4619      	mov	r1, r3
 800bada:	f7fe fd0a 	bl	800a4f2 <USBD_LL_DataInStage>
}
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fe3e 	bl	800a776 <USBD_LL_SOF>
}
 800bafa:	bf00      	nop
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d102      	bne.n	800bb1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]
 800bb1a:	e008      	b.n	800bb2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d102      	bne.n	800bb2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb24:	2301      	movs	r3, #1
 800bb26:	73fb      	strb	r3, [r7, #15]
 800bb28:	e001      	b.n	800bb2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb2a:	f7f5 ff93 	bl	8001a54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb34:	7bfa      	ldrb	r2, [r7, #15]
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fdde 	bl	800a6fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fd86 	bl	800a656 <USBD_LL_Reset>
}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
	...

0800bb54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe fdd9 	bl	800a71a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6812      	ldr	r2, [r2, #0]
 800bb76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb7a:	f043 0301 	orr.w	r3, r3, #1
 800bb7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a1b      	ldr	r3, [r3, #32]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb88:	4b04      	ldr	r3, [pc, #16]	; (800bb9c <HAL_PCD_SuspendCallback+0x48>)
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	4a03      	ldr	r2, [pc, #12]	; (800bb9c <HAL_PCD_SuspendCallback+0x48>)
 800bb8e:	f043 0306 	orr.w	r3, r3, #6
 800bb92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	e000ed00 	.word	0xe000ed00

0800bba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fdc9 	bl	800a746 <USBD_LL_Resume>
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fe21 	bl	800a81a <USBD_LL_IsoOUTIncomplete>
}
 800bbd8:	bf00      	nop
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe fddd 	bl	800a7b6 <USBD_LL_IsoINIncomplete>
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fe fe33 	bl	800a87e <USBD_LL_DevConnected>
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fe30 	bl	800a894 <USBD_LL_DevDisconnected>
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d13c      	bne.n	800bcc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc4c:	4a20      	ldr	r2, [pc, #128]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a1e      	ldr	r2, [pc, #120]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc5c:	4b1c      	ldr	r3, [pc, #112]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bc62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bc64:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc66:	2204      	movs	r2, #4
 800bc68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bc6a:	4b19      	ldr	r3, [pc, #100]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc70:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc76:	4b16      	ldr	r3, [pc, #88]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc78:	2202      	movs	r2, #2
 800bc7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc7c:	4b14      	ldr	r3, [pc, #80]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc82:	4b13      	ldr	r3, [pc, #76]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 800bc88:	4b11      	ldr	r3, [pc, #68]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bc8e:	4b10      	ldr	r3, [pc, #64]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc90:	2201      	movs	r2, #1
 800bc92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc94:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bc9a:	480d      	ldr	r0, [pc, #52]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bc9c:	f7f9 fc7e 	bl	800559c <HAL_PCD_Init>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bca6:	f7f5 fed5 	bl	8001a54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bcaa:	2180      	movs	r1, #128	; 0x80
 800bcac:	4808      	ldr	r0, [pc, #32]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bcae:	f7fa febe 	bl	8006a2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bcb2:	2240      	movs	r2, #64	; 0x40
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	4806      	ldr	r0, [pc, #24]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bcb8:	f7fa fe72 	bl	80069a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bcbc:	2280      	movs	r2, #128	; 0x80
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	4803      	ldr	r0, [pc, #12]	; (800bcd0 <USBD_LL_Init+0x94>)
 800bcc2:	f7fa fe6d 	bl	80069a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	20000a80 	.word	0x20000a80

0800bcd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7f9 fd73 	bl	80057d6 <HAL_PCD_Start>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 f930 	bl	800bf5c <USBD_Get_USB_Status>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	4608      	mov	r0, r1
 800bd14:	4611      	mov	r1, r2
 800bd16:	461a      	mov	r2, r3
 800bd18:	4603      	mov	r3, r0
 800bd1a:	70fb      	strb	r3, [r7, #3]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70bb      	strb	r3, [r7, #2]
 800bd20:	4613      	mov	r3, r2
 800bd22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd32:	78bb      	ldrb	r3, [r7, #2]
 800bd34:	883a      	ldrh	r2, [r7, #0]
 800bd36:	78f9      	ldrb	r1, [r7, #3]
 800bd38:	f7fa fa44 	bl	80061c4 <HAL_PCD_EP_Open>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f90a 	bl	800bf5c <USBD_Get_USB_Status>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd70:	78fa      	ldrb	r2, [r7, #3]
 800bd72:	4611      	mov	r1, r2
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fa fa8d 	bl	8006294 <HAL_PCD_EP_Close>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 f8eb 	bl	800bf5c <USBD_Get_USB_Status>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fa fb4d 	bl	8006452 <HAL_PCD_EP_SetStall>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f8cc 	bl	800bf5c <USBD_Get_USB_Status>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	460b      	mov	r3, r1
 800bddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdec:	78fa      	ldrb	r2, [r7, #3]
 800bdee:	4611      	mov	r1, r2
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fa fb92 	bl	800651a <HAL_PCD_EP_ClrStall>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f8ad 	bl	800bf5c <USBD_Get_USB_Status>
 800be02:	4603      	mov	r3, r0
 800be04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be06:	7bbb      	ldrb	r3, [r7, #14]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da0b      	bge.n	800be44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be32:	68f9      	ldr	r1, [r7, #12]
 800be34:	4613      	mov	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	440b      	add	r3, r1
 800be3e:	333e      	adds	r3, #62	; 0x3e
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	e00b      	b.n	800be5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800be5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be82:	78fa      	ldrb	r2, [r7, #3]
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7fa f977 	bl	800617a <HAL_PCD_SetAddress>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	4618      	mov	r0, r3
 800be94:	f000 f862 	bl	800bf5c <USBD_Get_USB_Status>
 800be98:	4603      	mov	r3, r0
 800be9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b086      	sub	sp, #24
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	460b      	mov	r3, r1
 800beb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bec4:	7af9      	ldrb	r1, [r7, #11]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	f7fa fa78 	bl	80063be <HAL_PCD_EP_Transmit>
 800bece:	4603      	mov	r3, r0
 800bed0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 f841 	bl	800bf5c <USBD_Get_USB_Status>
 800beda:	4603      	mov	r3, r0
 800bedc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bede:	7dbb      	ldrb	r3, [r7, #22]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	603b      	str	r3, [r7, #0]
 800bef4:	460b      	mov	r3, r1
 800bef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf06:	7af9      	ldrb	r1, [r7, #11]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	f7fa fa0c 	bl	8006328 <HAL_PCD_EP_Receive>
 800bf10:	4603      	mov	r3, r0
 800bf12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 f820 	bl	800bf5c <USBD_Get_USB_Status>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf20:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf34:	4b03      	ldr	r3, [pc, #12]	; (800bf44 <USBD_static_malloc+0x18>)
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	20000f8c 	.word	0x20000f8c

0800bf48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]

}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf66:	2300      	movs	r3, #0
 800bf68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d817      	bhi.n	800bfa0 <USBD_Get_USB_Status+0x44>
 800bf70:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <USBD_Get_USB_Status+0x1c>)
 800bf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf76:	bf00      	nop
 800bf78:	0800bf89 	.word	0x0800bf89
 800bf7c:	0800bf8f 	.word	0x0800bf8f
 800bf80:	0800bf95 	.word	0x0800bf95
 800bf84:	0800bf9b 	.word	0x0800bf9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf8c:	e00b      	b.n	800bfa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	73fb      	strb	r3, [r7, #15]
    break;
 800bf92:	e008      	b.n	800bfa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf94:	2301      	movs	r3, #1
 800bf96:	73fb      	strb	r3, [r7, #15]
    break;
 800bf98:	e005      	b.n	800bfa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf9e:	e002      	b.n	800bfa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa4:	bf00      	nop
  }
  return usb_status;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <__errno>:
 800bfb4:	4b01      	ldr	r3, [pc, #4]	; (800bfbc <__errno+0x8>)
 800bfb6:	6818      	ldr	r0, [r3, #0]
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	2000012c 	.word	0x2000012c

0800bfc0 <__libc_init_array>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	4d0d      	ldr	r5, [pc, #52]	; (800bff8 <__libc_init_array+0x38>)
 800bfc4:	4c0d      	ldr	r4, [pc, #52]	; (800bffc <__libc_init_array+0x3c>)
 800bfc6:	1b64      	subs	r4, r4, r5
 800bfc8:	10a4      	asrs	r4, r4, #2
 800bfca:	2600      	movs	r6, #0
 800bfcc:	42a6      	cmp	r6, r4
 800bfce:	d109      	bne.n	800bfe4 <__libc_init_array+0x24>
 800bfd0:	4d0b      	ldr	r5, [pc, #44]	; (800c000 <__libc_init_array+0x40>)
 800bfd2:	4c0c      	ldr	r4, [pc, #48]	; (800c004 <__libc_init_array+0x44>)
 800bfd4:	f000 fc8e 	bl	800c8f4 <_init>
 800bfd8:	1b64      	subs	r4, r4, r5
 800bfda:	10a4      	asrs	r4, r4, #2
 800bfdc:	2600      	movs	r6, #0
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	d105      	bne.n	800bfee <__libc_init_array+0x2e>
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe8:	4798      	blx	r3
 800bfea:	3601      	adds	r6, #1
 800bfec:	e7ee      	b.n	800bfcc <__libc_init_array+0xc>
 800bfee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff2:	4798      	blx	r3
 800bff4:	3601      	adds	r6, #1
 800bff6:	e7f2      	b.n	800bfde <__libc_init_array+0x1e>
 800bff8:	0800db40 	.word	0x0800db40
 800bffc:	0800db40 	.word	0x0800db40
 800c000:	0800db40 	.word	0x0800db40
 800c004:	0800db44 	.word	0x0800db44

0800c008 <memset>:
 800c008:	4402      	add	r2, r0
 800c00a:	4603      	mov	r3, r0
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d100      	bne.n	800c012 <memset+0xa>
 800c010:	4770      	bx	lr
 800c012:	f803 1b01 	strb.w	r1, [r3], #1
 800c016:	e7f9      	b.n	800c00c <memset+0x4>

0800c018 <siprintf>:
 800c018:	b40e      	push	{r1, r2, r3}
 800c01a:	b500      	push	{lr}
 800c01c:	b09c      	sub	sp, #112	; 0x70
 800c01e:	ab1d      	add	r3, sp, #116	; 0x74
 800c020:	9002      	str	r0, [sp, #8]
 800c022:	9006      	str	r0, [sp, #24]
 800c024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c028:	4809      	ldr	r0, [pc, #36]	; (800c050 <siprintf+0x38>)
 800c02a:	9107      	str	r1, [sp, #28]
 800c02c:	9104      	str	r1, [sp, #16]
 800c02e:	4909      	ldr	r1, [pc, #36]	; (800c054 <siprintf+0x3c>)
 800c030:	f853 2b04 	ldr.w	r2, [r3], #4
 800c034:	9105      	str	r1, [sp, #20]
 800c036:	6800      	ldr	r0, [r0, #0]
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	a902      	add	r1, sp, #8
 800c03c:	f000 f868 	bl	800c110 <_svfiprintf_r>
 800c040:	9b02      	ldr	r3, [sp, #8]
 800c042:	2200      	movs	r2, #0
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	b01c      	add	sp, #112	; 0x70
 800c048:	f85d eb04 	ldr.w	lr, [sp], #4
 800c04c:	b003      	add	sp, #12
 800c04e:	4770      	bx	lr
 800c050:	2000012c 	.word	0x2000012c
 800c054:	ffff0208 	.word	0xffff0208

0800c058 <__ssputs_r>:
 800c058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c05c:	688e      	ldr	r6, [r1, #8]
 800c05e:	429e      	cmp	r6, r3
 800c060:	4682      	mov	sl, r0
 800c062:	460c      	mov	r4, r1
 800c064:	4690      	mov	r8, r2
 800c066:	461f      	mov	r7, r3
 800c068:	d838      	bhi.n	800c0dc <__ssputs_r+0x84>
 800c06a:	898a      	ldrh	r2, [r1, #12]
 800c06c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c070:	d032      	beq.n	800c0d8 <__ssputs_r+0x80>
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	6909      	ldr	r1, [r1, #16]
 800c076:	eba5 0901 	sub.w	r9, r5, r1
 800c07a:	6965      	ldr	r5, [r4, #20]
 800c07c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c084:	3301      	adds	r3, #1
 800c086:	444b      	add	r3, r9
 800c088:	106d      	asrs	r5, r5, #1
 800c08a:	429d      	cmp	r5, r3
 800c08c:	bf38      	it	cc
 800c08e:	461d      	movcc	r5, r3
 800c090:	0553      	lsls	r3, r2, #21
 800c092:	d531      	bpl.n	800c0f8 <__ssputs_r+0xa0>
 800c094:	4629      	mov	r1, r5
 800c096:	f000 fb63 	bl	800c760 <_malloc_r>
 800c09a:	4606      	mov	r6, r0
 800c09c:	b950      	cbnz	r0, 800c0b4 <__ssputs_r+0x5c>
 800c09e:	230c      	movs	r3, #12
 800c0a0:	f8ca 3000 	str.w	r3, [sl]
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0aa:	81a3      	strh	r3, [r4, #12]
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b4:	6921      	ldr	r1, [r4, #16]
 800c0b6:	464a      	mov	r2, r9
 800c0b8:	f000 fabe 	bl	800c638 <memcpy>
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c6:	81a3      	strh	r3, [r4, #12]
 800c0c8:	6126      	str	r6, [r4, #16]
 800c0ca:	6165      	str	r5, [r4, #20]
 800c0cc:	444e      	add	r6, r9
 800c0ce:	eba5 0509 	sub.w	r5, r5, r9
 800c0d2:	6026      	str	r6, [r4, #0]
 800c0d4:	60a5      	str	r5, [r4, #8]
 800c0d6:	463e      	mov	r6, r7
 800c0d8:	42be      	cmp	r6, r7
 800c0da:	d900      	bls.n	800c0de <__ssputs_r+0x86>
 800c0dc:	463e      	mov	r6, r7
 800c0de:	6820      	ldr	r0, [r4, #0]
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	f000 fab6 	bl	800c654 <memmove>
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	1b9b      	subs	r3, r3, r6
 800c0ec:	60a3      	str	r3, [r4, #8]
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	4433      	add	r3, r6
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7db      	b.n	800c0b0 <__ssputs_r+0x58>
 800c0f8:	462a      	mov	r2, r5
 800c0fa:	f000 fba5 	bl	800c848 <_realloc_r>
 800c0fe:	4606      	mov	r6, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	d1e1      	bne.n	800c0c8 <__ssputs_r+0x70>
 800c104:	6921      	ldr	r1, [r4, #16]
 800c106:	4650      	mov	r0, sl
 800c108:	f000 fabe 	bl	800c688 <_free_r>
 800c10c:	e7c7      	b.n	800c09e <__ssputs_r+0x46>
	...

0800c110 <_svfiprintf_r>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	4698      	mov	r8, r3
 800c116:	898b      	ldrh	r3, [r1, #12]
 800c118:	061b      	lsls	r3, r3, #24
 800c11a:	b09d      	sub	sp, #116	; 0x74
 800c11c:	4607      	mov	r7, r0
 800c11e:	460d      	mov	r5, r1
 800c120:	4614      	mov	r4, r2
 800c122:	d50e      	bpl.n	800c142 <_svfiprintf_r+0x32>
 800c124:	690b      	ldr	r3, [r1, #16]
 800c126:	b963      	cbnz	r3, 800c142 <_svfiprintf_r+0x32>
 800c128:	2140      	movs	r1, #64	; 0x40
 800c12a:	f000 fb19 	bl	800c760 <_malloc_r>
 800c12e:	6028      	str	r0, [r5, #0]
 800c130:	6128      	str	r0, [r5, #16]
 800c132:	b920      	cbnz	r0, 800c13e <_svfiprintf_r+0x2e>
 800c134:	230c      	movs	r3, #12
 800c136:	603b      	str	r3, [r7, #0]
 800c138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c13c:	e0d1      	b.n	800c2e2 <_svfiprintf_r+0x1d2>
 800c13e:	2340      	movs	r3, #64	; 0x40
 800c140:	616b      	str	r3, [r5, #20]
 800c142:	2300      	movs	r3, #0
 800c144:	9309      	str	r3, [sp, #36]	; 0x24
 800c146:	2320      	movs	r3, #32
 800c148:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c14c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c150:	2330      	movs	r3, #48	; 0x30
 800c152:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2fc <_svfiprintf_r+0x1ec>
 800c156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c15a:	f04f 0901 	mov.w	r9, #1
 800c15e:	4623      	mov	r3, r4
 800c160:	469a      	mov	sl, r3
 800c162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c166:	b10a      	cbz	r2, 800c16c <_svfiprintf_r+0x5c>
 800c168:	2a25      	cmp	r2, #37	; 0x25
 800c16a:	d1f9      	bne.n	800c160 <_svfiprintf_r+0x50>
 800c16c:	ebba 0b04 	subs.w	fp, sl, r4
 800c170:	d00b      	beq.n	800c18a <_svfiprintf_r+0x7a>
 800c172:	465b      	mov	r3, fp
 800c174:	4622      	mov	r2, r4
 800c176:	4629      	mov	r1, r5
 800c178:	4638      	mov	r0, r7
 800c17a:	f7ff ff6d 	bl	800c058 <__ssputs_r>
 800c17e:	3001      	adds	r0, #1
 800c180:	f000 80aa 	beq.w	800c2d8 <_svfiprintf_r+0x1c8>
 800c184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c186:	445a      	add	r2, fp
 800c188:	9209      	str	r2, [sp, #36]	; 0x24
 800c18a:	f89a 3000 	ldrb.w	r3, [sl]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 80a2 	beq.w	800c2d8 <_svfiprintf_r+0x1c8>
 800c194:	2300      	movs	r3, #0
 800c196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c19a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c19e:	f10a 0a01 	add.w	sl, sl, #1
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	9307      	str	r3, [sp, #28]
 800c1a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ac:	4654      	mov	r4, sl
 800c1ae:	2205      	movs	r2, #5
 800c1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b4:	4851      	ldr	r0, [pc, #324]	; (800c2fc <_svfiprintf_r+0x1ec>)
 800c1b6:	f7f4 f80b 	bl	80001d0 <memchr>
 800c1ba:	9a04      	ldr	r2, [sp, #16]
 800c1bc:	b9d8      	cbnz	r0, 800c1f6 <_svfiprintf_r+0xe6>
 800c1be:	06d0      	lsls	r0, r2, #27
 800c1c0:	bf44      	itt	mi
 800c1c2:	2320      	movmi	r3, #32
 800c1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1c8:	0711      	lsls	r1, r2, #28
 800c1ca:	bf44      	itt	mi
 800c1cc:	232b      	movmi	r3, #43	; 0x2b
 800c1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c1d8:	d015      	beq.n	800c206 <_svfiprintf_r+0xf6>
 800c1da:	9a07      	ldr	r2, [sp, #28]
 800c1dc:	4654      	mov	r4, sl
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f04f 0c0a 	mov.w	ip, #10
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ea:	3b30      	subs	r3, #48	; 0x30
 800c1ec:	2b09      	cmp	r3, #9
 800c1ee:	d94e      	bls.n	800c28e <_svfiprintf_r+0x17e>
 800c1f0:	b1b0      	cbz	r0, 800c220 <_svfiprintf_r+0x110>
 800c1f2:	9207      	str	r2, [sp, #28]
 800c1f4:	e014      	b.n	800c220 <_svfiprintf_r+0x110>
 800c1f6:	eba0 0308 	sub.w	r3, r0, r8
 800c1fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c1fe:	4313      	orrs	r3, r2
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	46a2      	mov	sl, r4
 800c204:	e7d2      	b.n	800c1ac <_svfiprintf_r+0x9c>
 800c206:	9b03      	ldr	r3, [sp, #12]
 800c208:	1d19      	adds	r1, r3, #4
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	9103      	str	r1, [sp, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfbb      	ittet	lt
 800c212:	425b      	neglt	r3, r3
 800c214:	f042 0202 	orrlt.w	r2, r2, #2
 800c218:	9307      	strge	r3, [sp, #28]
 800c21a:	9307      	strlt	r3, [sp, #28]
 800c21c:	bfb8      	it	lt
 800c21e:	9204      	strlt	r2, [sp, #16]
 800c220:	7823      	ldrb	r3, [r4, #0]
 800c222:	2b2e      	cmp	r3, #46	; 0x2e
 800c224:	d10c      	bne.n	800c240 <_svfiprintf_r+0x130>
 800c226:	7863      	ldrb	r3, [r4, #1]
 800c228:	2b2a      	cmp	r3, #42	; 0x2a
 800c22a:	d135      	bne.n	800c298 <_svfiprintf_r+0x188>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	1d1a      	adds	r2, r3, #4
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	9203      	str	r2, [sp, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	bfb8      	it	lt
 800c238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c23c:	3402      	adds	r4, #2
 800c23e:	9305      	str	r3, [sp, #20]
 800c240:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c30c <_svfiprintf_r+0x1fc>
 800c244:	7821      	ldrb	r1, [r4, #0]
 800c246:	2203      	movs	r2, #3
 800c248:	4650      	mov	r0, sl
 800c24a:	f7f3 ffc1 	bl	80001d0 <memchr>
 800c24e:	b140      	cbz	r0, 800c262 <_svfiprintf_r+0x152>
 800c250:	2340      	movs	r3, #64	; 0x40
 800c252:	eba0 000a 	sub.w	r0, r0, sl
 800c256:	fa03 f000 	lsl.w	r0, r3, r0
 800c25a:	9b04      	ldr	r3, [sp, #16]
 800c25c:	4303      	orrs	r3, r0
 800c25e:	3401      	adds	r4, #1
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c266:	4826      	ldr	r0, [pc, #152]	; (800c300 <_svfiprintf_r+0x1f0>)
 800c268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c26c:	2206      	movs	r2, #6
 800c26e:	f7f3 ffaf 	bl	80001d0 <memchr>
 800c272:	2800      	cmp	r0, #0
 800c274:	d038      	beq.n	800c2e8 <_svfiprintf_r+0x1d8>
 800c276:	4b23      	ldr	r3, [pc, #140]	; (800c304 <_svfiprintf_r+0x1f4>)
 800c278:	bb1b      	cbnz	r3, 800c2c2 <_svfiprintf_r+0x1b2>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	3307      	adds	r3, #7
 800c27e:	f023 0307 	bic.w	r3, r3, #7
 800c282:	3308      	adds	r3, #8
 800c284:	9303      	str	r3, [sp, #12]
 800c286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c288:	4433      	add	r3, r6
 800c28a:	9309      	str	r3, [sp, #36]	; 0x24
 800c28c:	e767      	b.n	800c15e <_svfiprintf_r+0x4e>
 800c28e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c292:	460c      	mov	r4, r1
 800c294:	2001      	movs	r0, #1
 800c296:	e7a5      	b.n	800c1e4 <_svfiprintf_r+0xd4>
 800c298:	2300      	movs	r3, #0
 800c29a:	3401      	adds	r4, #1
 800c29c:	9305      	str	r3, [sp, #20]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	f04f 0c0a 	mov.w	ip, #10
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2aa:	3a30      	subs	r2, #48	; 0x30
 800c2ac:	2a09      	cmp	r2, #9
 800c2ae:	d903      	bls.n	800c2b8 <_svfiprintf_r+0x1a8>
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0c5      	beq.n	800c240 <_svfiprintf_r+0x130>
 800c2b4:	9105      	str	r1, [sp, #20]
 800c2b6:	e7c3      	b.n	800c240 <_svfiprintf_r+0x130>
 800c2b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2bc:	4604      	mov	r4, r0
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e7f0      	b.n	800c2a4 <_svfiprintf_r+0x194>
 800c2c2:	ab03      	add	r3, sp, #12
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	462a      	mov	r2, r5
 800c2c8:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <_svfiprintf_r+0x1f8>)
 800c2ca:	a904      	add	r1, sp, #16
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	f3af 8000 	nop.w
 800c2d2:	1c42      	adds	r2, r0, #1
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	d1d6      	bne.n	800c286 <_svfiprintf_r+0x176>
 800c2d8:	89ab      	ldrh	r3, [r5, #12]
 800c2da:	065b      	lsls	r3, r3, #25
 800c2dc:	f53f af2c 	bmi.w	800c138 <_svfiprintf_r+0x28>
 800c2e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2e2:	b01d      	add	sp, #116	; 0x74
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	ab03      	add	r3, sp, #12
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	462a      	mov	r2, r5
 800c2ee:	4b06      	ldr	r3, [pc, #24]	; (800c308 <_svfiprintf_r+0x1f8>)
 800c2f0:	a904      	add	r1, sp, #16
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f000 f87a 	bl	800c3ec <_printf_i>
 800c2f8:	e7eb      	b.n	800c2d2 <_svfiprintf_r+0x1c2>
 800c2fa:	bf00      	nop
 800c2fc:	0800db04 	.word	0x0800db04
 800c300:	0800db0e 	.word	0x0800db0e
 800c304:	00000000 	.word	0x00000000
 800c308:	0800c059 	.word	0x0800c059
 800c30c:	0800db0a 	.word	0x0800db0a

0800c310 <_printf_common>:
 800c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c314:	4616      	mov	r6, r2
 800c316:	4699      	mov	r9, r3
 800c318:	688a      	ldr	r2, [r1, #8]
 800c31a:	690b      	ldr	r3, [r1, #16]
 800c31c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c320:	4293      	cmp	r3, r2
 800c322:	bfb8      	it	lt
 800c324:	4613      	movlt	r3, r2
 800c326:	6033      	str	r3, [r6, #0]
 800c328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c32c:	4607      	mov	r7, r0
 800c32e:	460c      	mov	r4, r1
 800c330:	b10a      	cbz	r2, 800c336 <_printf_common+0x26>
 800c332:	3301      	adds	r3, #1
 800c334:	6033      	str	r3, [r6, #0]
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	0699      	lsls	r1, r3, #26
 800c33a:	bf42      	ittt	mi
 800c33c:	6833      	ldrmi	r3, [r6, #0]
 800c33e:	3302      	addmi	r3, #2
 800c340:	6033      	strmi	r3, [r6, #0]
 800c342:	6825      	ldr	r5, [r4, #0]
 800c344:	f015 0506 	ands.w	r5, r5, #6
 800c348:	d106      	bne.n	800c358 <_printf_common+0x48>
 800c34a:	f104 0a19 	add.w	sl, r4, #25
 800c34e:	68e3      	ldr	r3, [r4, #12]
 800c350:	6832      	ldr	r2, [r6, #0]
 800c352:	1a9b      	subs	r3, r3, r2
 800c354:	42ab      	cmp	r3, r5
 800c356:	dc26      	bgt.n	800c3a6 <_printf_common+0x96>
 800c358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c35c:	1e13      	subs	r3, r2, #0
 800c35e:	6822      	ldr	r2, [r4, #0]
 800c360:	bf18      	it	ne
 800c362:	2301      	movne	r3, #1
 800c364:	0692      	lsls	r2, r2, #26
 800c366:	d42b      	bmi.n	800c3c0 <_printf_common+0xb0>
 800c368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c36c:	4649      	mov	r1, r9
 800c36e:	4638      	mov	r0, r7
 800c370:	47c0      	blx	r8
 800c372:	3001      	adds	r0, #1
 800c374:	d01e      	beq.n	800c3b4 <_printf_common+0xa4>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	68e5      	ldr	r5, [r4, #12]
 800c37a:	6832      	ldr	r2, [r6, #0]
 800c37c:	f003 0306 	and.w	r3, r3, #6
 800c380:	2b04      	cmp	r3, #4
 800c382:	bf08      	it	eq
 800c384:	1aad      	subeq	r5, r5, r2
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	6922      	ldr	r2, [r4, #16]
 800c38a:	bf0c      	ite	eq
 800c38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c390:	2500      	movne	r5, #0
 800c392:	4293      	cmp	r3, r2
 800c394:	bfc4      	itt	gt
 800c396:	1a9b      	subgt	r3, r3, r2
 800c398:	18ed      	addgt	r5, r5, r3
 800c39a:	2600      	movs	r6, #0
 800c39c:	341a      	adds	r4, #26
 800c39e:	42b5      	cmp	r5, r6
 800c3a0:	d11a      	bne.n	800c3d8 <_printf_common+0xc8>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e008      	b.n	800c3b8 <_printf_common+0xa8>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4652      	mov	r2, sl
 800c3aa:	4649      	mov	r1, r9
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	47c0      	blx	r8
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d103      	bne.n	800c3bc <_printf_common+0xac>
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	3501      	adds	r5, #1
 800c3be:	e7c6      	b.n	800c34e <_printf_common+0x3e>
 800c3c0:	18e1      	adds	r1, r4, r3
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	2030      	movs	r0, #48	; 0x30
 800c3c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3ca:	4422      	add	r2, r4
 800c3cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3d4:	3302      	adds	r3, #2
 800c3d6:	e7c7      	b.n	800c368 <_printf_common+0x58>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4622      	mov	r2, r4
 800c3dc:	4649      	mov	r1, r9
 800c3de:	4638      	mov	r0, r7
 800c3e0:	47c0      	blx	r8
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d0e6      	beq.n	800c3b4 <_printf_common+0xa4>
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7d9      	b.n	800c39e <_printf_common+0x8e>
	...

0800c3ec <_printf_i>:
 800c3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	7e0f      	ldrb	r7, [r1, #24]
 800c3f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3f4:	2f78      	cmp	r7, #120	; 0x78
 800c3f6:	4691      	mov	r9, r2
 800c3f8:	4680      	mov	r8, r0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	469a      	mov	sl, r3
 800c3fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c402:	d807      	bhi.n	800c414 <_printf_i+0x28>
 800c404:	2f62      	cmp	r7, #98	; 0x62
 800c406:	d80a      	bhi.n	800c41e <_printf_i+0x32>
 800c408:	2f00      	cmp	r7, #0
 800c40a:	f000 80d8 	beq.w	800c5be <_printf_i+0x1d2>
 800c40e:	2f58      	cmp	r7, #88	; 0x58
 800c410:	f000 80a3 	beq.w	800c55a <_printf_i+0x16e>
 800c414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c41c:	e03a      	b.n	800c494 <_printf_i+0xa8>
 800c41e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c422:	2b15      	cmp	r3, #21
 800c424:	d8f6      	bhi.n	800c414 <_printf_i+0x28>
 800c426:	a101      	add	r1, pc, #4	; (adr r1, 800c42c <_printf_i+0x40>)
 800c428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c42c:	0800c485 	.word	0x0800c485
 800c430:	0800c499 	.word	0x0800c499
 800c434:	0800c415 	.word	0x0800c415
 800c438:	0800c415 	.word	0x0800c415
 800c43c:	0800c415 	.word	0x0800c415
 800c440:	0800c415 	.word	0x0800c415
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c415 	.word	0x0800c415
 800c44c:	0800c415 	.word	0x0800c415
 800c450:	0800c415 	.word	0x0800c415
 800c454:	0800c415 	.word	0x0800c415
 800c458:	0800c5a5 	.word	0x0800c5a5
 800c45c:	0800c4c9 	.word	0x0800c4c9
 800c460:	0800c587 	.word	0x0800c587
 800c464:	0800c415 	.word	0x0800c415
 800c468:	0800c415 	.word	0x0800c415
 800c46c:	0800c5c7 	.word	0x0800c5c7
 800c470:	0800c415 	.word	0x0800c415
 800c474:	0800c4c9 	.word	0x0800c4c9
 800c478:	0800c415 	.word	0x0800c415
 800c47c:	0800c415 	.word	0x0800c415
 800c480:	0800c58f 	.word	0x0800c58f
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	1d1a      	adds	r2, r3, #4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	602a      	str	r2, [r5, #0]
 800c48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c494:	2301      	movs	r3, #1
 800c496:	e0a3      	b.n	800c5e0 <_printf_i+0x1f4>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	6829      	ldr	r1, [r5, #0]
 800c49c:	0606      	lsls	r6, r0, #24
 800c49e:	f101 0304 	add.w	r3, r1, #4
 800c4a2:	d50a      	bpl.n	800c4ba <_printf_i+0xce>
 800c4a4:	680e      	ldr	r6, [r1, #0]
 800c4a6:	602b      	str	r3, [r5, #0]
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	da03      	bge.n	800c4b4 <_printf_i+0xc8>
 800c4ac:	232d      	movs	r3, #45	; 0x2d
 800c4ae:	4276      	negs	r6, r6
 800c4b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4b4:	485e      	ldr	r0, [pc, #376]	; (800c630 <_printf_i+0x244>)
 800c4b6:	230a      	movs	r3, #10
 800c4b8:	e019      	b.n	800c4ee <_printf_i+0x102>
 800c4ba:	680e      	ldr	r6, [r1, #0]
 800c4bc:	602b      	str	r3, [r5, #0]
 800c4be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4c2:	bf18      	it	ne
 800c4c4:	b236      	sxthne	r6, r6
 800c4c6:	e7ef      	b.n	800c4a8 <_printf_i+0xbc>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	6820      	ldr	r0, [r4, #0]
 800c4cc:	1d19      	adds	r1, r3, #4
 800c4ce:	6029      	str	r1, [r5, #0]
 800c4d0:	0601      	lsls	r1, r0, #24
 800c4d2:	d501      	bpl.n	800c4d8 <_printf_i+0xec>
 800c4d4:	681e      	ldr	r6, [r3, #0]
 800c4d6:	e002      	b.n	800c4de <_printf_i+0xf2>
 800c4d8:	0646      	lsls	r6, r0, #25
 800c4da:	d5fb      	bpl.n	800c4d4 <_printf_i+0xe8>
 800c4dc:	881e      	ldrh	r6, [r3, #0]
 800c4de:	4854      	ldr	r0, [pc, #336]	; (800c630 <_printf_i+0x244>)
 800c4e0:	2f6f      	cmp	r7, #111	; 0x6f
 800c4e2:	bf0c      	ite	eq
 800c4e4:	2308      	moveq	r3, #8
 800c4e6:	230a      	movne	r3, #10
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4ee:	6865      	ldr	r5, [r4, #4]
 800c4f0:	60a5      	str	r5, [r4, #8]
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	bfa2      	ittt	ge
 800c4f6:	6821      	ldrge	r1, [r4, #0]
 800c4f8:	f021 0104 	bicge.w	r1, r1, #4
 800c4fc:	6021      	strge	r1, [r4, #0]
 800c4fe:	b90e      	cbnz	r6, 800c504 <_printf_i+0x118>
 800c500:	2d00      	cmp	r5, #0
 800c502:	d04d      	beq.n	800c5a0 <_printf_i+0x1b4>
 800c504:	4615      	mov	r5, r2
 800c506:	fbb6 f1f3 	udiv	r1, r6, r3
 800c50a:	fb03 6711 	mls	r7, r3, r1, r6
 800c50e:	5dc7      	ldrb	r7, [r0, r7]
 800c510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c514:	4637      	mov	r7, r6
 800c516:	42bb      	cmp	r3, r7
 800c518:	460e      	mov	r6, r1
 800c51a:	d9f4      	bls.n	800c506 <_printf_i+0x11a>
 800c51c:	2b08      	cmp	r3, #8
 800c51e:	d10b      	bne.n	800c538 <_printf_i+0x14c>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	07de      	lsls	r6, r3, #31
 800c524:	d508      	bpl.n	800c538 <_printf_i+0x14c>
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	6861      	ldr	r1, [r4, #4]
 800c52a:	4299      	cmp	r1, r3
 800c52c:	bfde      	ittt	le
 800c52e:	2330      	movle	r3, #48	; 0x30
 800c530:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c534:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c538:	1b52      	subs	r2, r2, r5
 800c53a:	6122      	str	r2, [r4, #16]
 800c53c:	f8cd a000 	str.w	sl, [sp]
 800c540:	464b      	mov	r3, r9
 800c542:	aa03      	add	r2, sp, #12
 800c544:	4621      	mov	r1, r4
 800c546:	4640      	mov	r0, r8
 800c548:	f7ff fee2 	bl	800c310 <_printf_common>
 800c54c:	3001      	adds	r0, #1
 800c54e:	d14c      	bne.n	800c5ea <_printf_i+0x1fe>
 800c550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c554:	b004      	add	sp, #16
 800c556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55a:	4835      	ldr	r0, [pc, #212]	; (800c630 <_printf_i+0x244>)
 800c55c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c560:	6829      	ldr	r1, [r5, #0]
 800c562:	6823      	ldr	r3, [r4, #0]
 800c564:	f851 6b04 	ldr.w	r6, [r1], #4
 800c568:	6029      	str	r1, [r5, #0]
 800c56a:	061d      	lsls	r5, r3, #24
 800c56c:	d514      	bpl.n	800c598 <_printf_i+0x1ac>
 800c56e:	07df      	lsls	r7, r3, #31
 800c570:	bf44      	itt	mi
 800c572:	f043 0320 	orrmi.w	r3, r3, #32
 800c576:	6023      	strmi	r3, [r4, #0]
 800c578:	b91e      	cbnz	r6, 800c582 <_printf_i+0x196>
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	f023 0320 	bic.w	r3, r3, #32
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	2310      	movs	r3, #16
 800c584:	e7b0      	b.n	800c4e8 <_printf_i+0xfc>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	f043 0320 	orr.w	r3, r3, #32
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	2378      	movs	r3, #120	; 0x78
 800c590:	4828      	ldr	r0, [pc, #160]	; (800c634 <_printf_i+0x248>)
 800c592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c596:	e7e3      	b.n	800c560 <_printf_i+0x174>
 800c598:	0659      	lsls	r1, r3, #25
 800c59a:	bf48      	it	mi
 800c59c:	b2b6      	uxthmi	r6, r6
 800c59e:	e7e6      	b.n	800c56e <_printf_i+0x182>
 800c5a0:	4615      	mov	r5, r2
 800c5a2:	e7bb      	b.n	800c51c <_printf_i+0x130>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	6826      	ldr	r6, [r4, #0]
 800c5a8:	6961      	ldr	r1, [r4, #20]
 800c5aa:	1d18      	adds	r0, r3, #4
 800c5ac:	6028      	str	r0, [r5, #0]
 800c5ae:	0635      	lsls	r5, r6, #24
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	d501      	bpl.n	800c5b8 <_printf_i+0x1cc>
 800c5b4:	6019      	str	r1, [r3, #0]
 800c5b6:	e002      	b.n	800c5be <_printf_i+0x1d2>
 800c5b8:	0670      	lsls	r0, r6, #25
 800c5ba:	d5fb      	bpl.n	800c5b4 <_printf_i+0x1c8>
 800c5bc:	8019      	strh	r1, [r3, #0]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6123      	str	r3, [r4, #16]
 800c5c2:	4615      	mov	r5, r2
 800c5c4:	e7ba      	b.n	800c53c <_printf_i+0x150>
 800c5c6:	682b      	ldr	r3, [r5, #0]
 800c5c8:	1d1a      	adds	r2, r3, #4
 800c5ca:	602a      	str	r2, [r5, #0]
 800c5cc:	681d      	ldr	r5, [r3, #0]
 800c5ce:	6862      	ldr	r2, [r4, #4]
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f7f3 fdfc 	bl	80001d0 <memchr>
 800c5d8:	b108      	cbz	r0, 800c5de <_printf_i+0x1f2>
 800c5da:	1b40      	subs	r0, r0, r5
 800c5dc:	6060      	str	r0, [r4, #4]
 800c5de:	6863      	ldr	r3, [r4, #4]
 800c5e0:	6123      	str	r3, [r4, #16]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5e8:	e7a8      	b.n	800c53c <_printf_i+0x150>
 800c5ea:	6923      	ldr	r3, [r4, #16]
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	47d0      	blx	sl
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d0ab      	beq.n	800c550 <_printf_i+0x164>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	079b      	lsls	r3, r3, #30
 800c5fc:	d413      	bmi.n	800c626 <_printf_i+0x23a>
 800c5fe:	68e0      	ldr	r0, [r4, #12]
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	4298      	cmp	r0, r3
 800c604:	bfb8      	it	lt
 800c606:	4618      	movlt	r0, r3
 800c608:	e7a4      	b.n	800c554 <_printf_i+0x168>
 800c60a:	2301      	movs	r3, #1
 800c60c:	4632      	mov	r2, r6
 800c60e:	4649      	mov	r1, r9
 800c610:	4640      	mov	r0, r8
 800c612:	47d0      	blx	sl
 800c614:	3001      	adds	r0, #1
 800c616:	d09b      	beq.n	800c550 <_printf_i+0x164>
 800c618:	3501      	adds	r5, #1
 800c61a:	68e3      	ldr	r3, [r4, #12]
 800c61c:	9903      	ldr	r1, [sp, #12]
 800c61e:	1a5b      	subs	r3, r3, r1
 800c620:	42ab      	cmp	r3, r5
 800c622:	dcf2      	bgt.n	800c60a <_printf_i+0x21e>
 800c624:	e7eb      	b.n	800c5fe <_printf_i+0x212>
 800c626:	2500      	movs	r5, #0
 800c628:	f104 0619 	add.w	r6, r4, #25
 800c62c:	e7f5      	b.n	800c61a <_printf_i+0x22e>
 800c62e:	bf00      	nop
 800c630:	0800db15 	.word	0x0800db15
 800c634:	0800db26 	.word	0x0800db26

0800c638 <memcpy>:
 800c638:	440a      	add	r2, r1
 800c63a:	4291      	cmp	r1, r2
 800c63c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c640:	d100      	bne.n	800c644 <memcpy+0xc>
 800c642:	4770      	bx	lr
 800c644:	b510      	push	{r4, lr}
 800c646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c64a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c64e:	4291      	cmp	r1, r2
 800c650:	d1f9      	bne.n	800c646 <memcpy+0xe>
 800c652:	bd10      	pop	{r4, pc}

0800c654 <memmove>:
 800c654:	4288      	cmp	r0, r1
 800c656:	b510      	push	{r4, lr}
 800c658:	eb01 0402 	add.w	r4, r1, r2
 800c65c:	d902      	bls.n	800c664 <memmove+0x10>
 800c65e:	4284      	cmp	r4, r0
 800c660:	4623      	mov	r3, r4
 800c662:	d807      	bhi.n	800c674 <memmove+0x20>
 800c664:	1e43      	subs	r3, r0, #1
 800c666:	42a1      	cmp	r1, r4
 800c668:	d008      	beq.n	800c67c <memmove+0x28>
 800c66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c66e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c672:	e7f8      	b.n	800c666 <memmove+0x12>
 800c674:	4402      	add	r2, r0
 800c676:	4601      	mov	r1, r0
 800c678:	428a      	cmp	r2, r1
 800c67a:	d100      	bne.n	800c67e <memmove+0x2a>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c686:	e7f7      	b.n	800c678 <memmove+0x24>

0800c688 <_free_r>:
 800c688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c68a:	2900      	cmp	r1, #0
 800c68c:	d044      	beq.n	800c718 <_free_r+0x90>
 800c68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c692:	9001      	str	r0, [sp, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f1a1 0404 	sub.w	r4, r1, #4
 800c69a:	bfb8      	it	lt
 800c69c:	18e4      	addlt	r4, r4, r3
 800c69e:	f000 f913 	bl	800c8c8 <__malloc_lock>
 800c6a2:	4a1e      	ldr	r2, [pc, #120]	; (800c71c <_free_r+0x94>)
 800c6a4:	9801      	ldr	r0, [sp, #4]
 800c6a6:	6813      	ldr	r3, [r2, #0]
 800c6a8:	b933      	cbnz	r3, 800c6b8 <_free_r+0x30>
 800c6aa:	6063      	str	r3, [r4, #4]
 800c6ac:	6014      	str	r4, [r2, #0]
 800c6ae:	b003      	add	sp, #12
 800c6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6b4:	f000 b90e 	b.w	800c8d4 <__malloc_unlock>
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	d908      	bls.n	800c6ce <_free_r+0x46>
 800c6bc:	6825      	ldr	r5, [r4, #0]
 800c6be:	1961      	adds	r1, r4, r5
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	bf01      	itttt	eq
 800c6c4:	6819      	ldreq	r1, [r3, #0]
 800c6c6:	685b      	ldreq	r3, [r3, #4]
 800c6c8:	1949      	addeq	r1, r1, r5
 800c6ca:	6021      	streq	r1, [r4, #0]
 800c6cc:	e7ed      	b.n	800c6aa <_free_r+0x22>
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	b10b      	cbz	r3, 800c6d8 <_free_r+0x50>
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d9fa      	bls.n	800c6ce <_free_r+0x46>
 800c6d8:	6811      	ldr	r1, [r2, #0]
 800c6da:	1855      	adds	r5, r2, r1
 800c6dc:	42a5      	cmp	r5, r4
 800c6de:	d10b      	bne.n	800c6f8 <_free_r+0x70>
 800c6e0:	6824      	ldr	r4, [r4, #0]
 800c6e2:	4421      	add	r1, r4
 800c6e4:	1854      	adds	r4, r2, r1
 800c6e6:	42a3      	cmp	r3, r4
 800c6e8:	6011      	str	r1, [r2, #0]
 800c6ea:	d1e0      	bne.n	800c6ae <_free_r+0x26>
 800c6ec:	681c      	ldr	r4, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	6053      	str	r3, [r2, #4]
 800c6f2:	4421      	add	r1, r4
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	e7da      	b.n	800c6ae <_free_r+0x26>
 800c6f8:	d902      	bls.n	800c700 <_free_r+0x78>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	6003      	str	r3, [r0, #0]
 800c6fe:	e7d6      	b.n	800c6ae <_free_r+0x26>
 800c700:	6825      	ldr	r5, [r4, #0]
 800c702:	1961      	adds	r1, r4, r5
 800c704:	428b      	cmp	r3, r1
 800c706:	bf04      	itt	eq
 800c708:	6819      	ldreq	r1, [r3, #0]
 800c70a:	685b      	ldreq	r3, [r3, #4]
 800c70c:	6063      	str	r3, [r4, #4]
 800c70e:	bf04      	itt	eq
 800c710:	1949      	addeq	r1, r1, r5
 800c712:	6021      	streq	r1, [r4, #0]
 800c714:	6054      	str	r4, [r2, #4]
 800c716:	e7ca      	b.n	800c6ae <_free_r+0x26>
 800c718:	b003      	add	sp, #12
 800c71a:	bd30      	pop	{r4, r5, pc}
 800c71c:	20000fa0 	.word	0x20000fa0

0800c720 <sbrk_aligned>:
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	4e0e      	ldr	r6, [pc, #56]	; (800c75c <sbrk_aligned+0x3c>)
 800c724:	460c      	mov	r4, r1
 800c726:	6831      	ldr	r1, [r6, #0]
 800c728:	4605      	mov	r5, r0
 800c72a:	b911      	cbnz	r1, 800c732 <sbrk_aligned+0x12>
 800c72c:	f000 f8bc 	bl	800c8a8 <_sbrk_r>
 800c730:	6030      	str	r0, [r6, #0]
 800c732:	4621      	mov	r1, r4
 800c734:	4628      	mov	r0, r5
 800c736:	f000 f8b7 	bl	800c8a8 <_sbrk_r>
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	d00a      	beq.n	800c754 <sbrk_aligned+0x34>
 800c73e:	1cc4      	adds	r4, r0, #3
 800c740:	f024 0403 	bic.w	r4, r4, #3
 800c744:	42a0      	cmp	r0, r4
 800c746:	d007      	beq.n	800c758 <sbrk_aligned+0x38>
 800c748:	1a21      	subs	r1, r4, r0
 800c74a:	4628      	mov	r0, r5
 800c74c:	f000 f8ac 	bl	800c8a8 <_sbrk_r>
 800c750:	3001      	adds	r0, #1
 800c752:	d101      	bne.n	800c758 <sbrk_aligned+0x38>
 800c754:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c758:	4620      	mov	r0, r4
 800c75a:	bd70      	pop	{r4, r5, r6, pc}
 800c75c:	20000fa4 	.word	0x20000fa4

0800c760 <_malloc_r>:
 800c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	1ccd      	adds	r5, r1, #3
 800c766:	f025 0503 	bic.w	r5, r5, #3
 800c76a:	3508      	adds	r5, #8
 800c76c:	2d0c      	cmp	r5, #12
 800c76e:	bf38      	it	cc
 800c770:	250c      	movcc	r5, #12
 800c772:	2d00      	cmp	r5, #0
 800c774:	4607      	mov	r7, r0
 800c776:	db01      	blt.n	800c77c <_malloc_r+0x1c>
 800c778:	42a9      	cmp	r1, r5
 800c77a:	d905      	bls.n	800c788 <_malloc_r+0x28>
 800c77c:	230c      	movs	r3, #12
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	2600      	movs	r6, #0
 800c782:	4630      	mov	r0, r6
 800c784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c788:	4e2e      	ldr	r6, [pc, #184]	; (800c844 <_malloc_r+0xe4>)
 800c78a:	f000 f89d 	bl	800c8c8 <__malloc_lock>
 800c78e:	6833      	ldr	r3, [r6, #0]
 800c790:	461c      	mov	r4, r3
 800c792:	bb34      	cbnz	r4, 800c7e2 <_malloc_r+0x82>
 800c794:	4629      	mov	r1, r5
 800c796:	4638      	mov	r0, r7
 800c798:	f7ff ffc2 	bl	800c720 <sbrk_aligned>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	4604      	mov	r4, r0
 800c7a0:	d14d      	bne.n	800c83e <_malloc_r+0xde>
 800c7a2:	6834      	ldr	r4, [r6, #0]
 800c7a4:	4626      	mov	r6, r4
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	d140      	bne.n	800c82c <_malloc_r+0xcc>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	eb04 0803 	add.w	r8, r4, r3
 800c7b4:	f000 f878 	bl	800c8a8 <_sbrk_r>
 800c7b8:	4580      	cmp	r8, r0
 800c7ba:	d13a      	bne.n	800c832 <_malloc_r+0xd2>
 800c7bc:	6821      	ldr	r1, [r4, #0]
 800c7be:	3503      	adds	r5, #3
 800c7c0:	1a6d      	subs	r5, r5, r1
 800c7c2:	f025 0503 	bic.w	r5, r5, #3
 800c7c6:	3508      	adds	r5, #8
 800c7c8:	2d0c      	cmp	r5, #12
 800c7ca:	bf38      	it	cc
 800c7cc:	250c      	movcc	r5, #12
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	f7ff ffa5 	bl	800c720 <sbrk_aligned>
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d02b      	beq.n	800c832 <_malloc_r+0xd2>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	442b      	add	r3, r5
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	e00e      	b.n	800c800 <_malloc_r+0xa0>
 800c7e2:	6822      	ldr	r2, [r4, #0]
 800c7e4:	1b52      	subs	r2, r2, r5
 800c7e6:	d41e      	bmi.n	800c826 <_malloc_r+0xc6>
 800c7e8:	2a0b      	cmp	r2, #11
 800c7ea:	d916      	bls.n	800c81a <_malloc_r+0xba>
 800c7ec:	1961      	adds	r1, r4, r5
 800c7ee:	42a3      	cmp	r3, r4
 800c7f0:	6025      	str	r5, [r4, #0]
 800c7f2:	bf18      	it	ne
 800c7f4:	6059      	strne	r1, [r3, #4]
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	bf08      	it	eq
 800c7fa:	6031      	streq	r1, [r6, #0]
 800c7fc:	5162      	str	r2, [r4, r5]
 800c7fe:	604b      	str	r3, [r1, #4]
 800c800:	4638      	mov	r0, r7
 800c802:	f104 060b 	add.w	r6, r4, #11
 800c806:	f000 f865 	bl	800c8d4 <__malloc_unlock>
 800c80a:	f026 0607 	bic.w	r6, r6, #7
 800c80e:	1d23      	adds	r3, r4, #4
 800c810:	1af2      	subs	r2, r6, r3
 800c812:	d0b6      	beq.n	800c782 <_malloc_r+0x22>
 800c814:	1b9b      	subs	r3, r3, r6
 800c816:	50a3      	str	r3, [r4, r2]
 800c818:	e7b3      	b.n	800c782 <_malloc_r+0x22>
 800c81a:	6862      	ldr	r2, [r4, #4]
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	bf0c      	ite	eq
 800c820:	6032      	streq	r2, [r6, #0]
 800c822:	605a      	strne	r2, [r3, #4]
 800c824:	e7ec      	b.n	800c800 <_malloc_r+0xa0>
 800c826:	4623      	mov	r3, r4
 800c828:	6864      	ldr	r4, [r4, #4]
 800c82a:	e7b2      	b.n	800c792 <_malloc_r+0x32>
 800c82c:	4634      	mov	r4, r6
 800c82e:	6876      	ldr	r6, [r6, #4]
 800c830:	e7b9      	b.n	800c7a6 <_malloc_r+0x46>
 800c832:	230c      	movs	r3, #12
 800c834:	603b      	str	r3, [r7, #0]
 800c836:	4638      	mov	r0, r7
 800c838:	f000 f84c 	bl	800c8d4 <__malloc_unlock>
 800c83c:	e7a1      	b.n	800c782 <_malloc_r+0x22>
 800c83e:	6025      	str	r5, [r4, #0]
 800c840:	e7de      	b.n	800c800 <_malloc_r+0xa0>
 800c842:	bf00      	nop
 800c844:	20000fa0 	.word	0x20000fa0

0800c848 <_realloc_r>:
 800c848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84c:	4680      	mov	r8, r0
 800c84e:	4614      	mov	r4, r2
 800c850:	460e      	mov	r6, r1
 800c852:	b921      	cbnz	r1, 800c85e <_realloc_r+0x16>
 800c854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	4611      	mov	r1, r2
 800c85a:	f7ff bf81 	b.w	800c760 <_malloc_r>
 800c85e:	b92a      	cbnz	r2, 800c86c <_realloc_r+0x24>
 800c860:	f7ff ff12 	bl	800c688 <_free_r>
 800c864:	4625      	mov	r5, r4
 800c866:	4628      	mov	r0, r5
 800c868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c86c:	f000 f838 	bl	800c8e0 <_malloc_usable_size_r>
 800c870:	4284      	cmp	r4, r0
 800c872:	4607      	mov	r7, r0
 800c874:	d802      	bhi.n	800c87c <_realloc_r+0x34>
 800c876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c87a:	d812      	bhi.n	800c8a2 <_realloc_r+0x5a>
 800c87c:	4621      	mov	r1, r4
 800c87e:	4640      	mov	r0, r8
 800c880:	f7ff ff6e 	bl	800c760 <_malloc_r>
 800c884:	4605      	mov	r5, r0
 800c886:	2800      	cmp	r0, #0
 800c888:	d0ed      	beq.n	800c866 <_realloc_r+0x1e>
 800c88a:	42bc      	cmp	r4, r7
 800c88c:	4622      	mov	r2, r4
 800c88e:	4631      	mov	r1, r6
 800c890:	bf28      	it	cs
 800c892:	463a      	movcs	r2, r7
 800c894:	f7ff fed0 	bl	800c638 <memcpy>
 800c898:	4631      	mov	r1, r6
 800c89a:	4640      	mov	r0, r8
 800c89c:	f7ff fef4 	bl	800c688 <_free_r>
 800c8a0:	e7e1      	b.n	800c866 <_realloc_r+0x1e>
 800c8a2:	4635      	mov	r5, r6
 800c8a4:	e7df      	b.n	800c866 <_realloc_r+0x1e>
	...

0800c8a8 <_sbrk_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d06      	ldr	r5, [pc, #24]	; (800c8c4 <_sbrk_r+0x1c>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f5 fa7a 	bl	8001dac <_sbrk>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_sbrk_r+0x1a>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_sbrk_r+0x1a>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20000fa8 	.word	0x20000fa8

0800c8c8 <__malloc_lock>:
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <__malloc_lock+0x8>)
 800c8ca:	f000 b811 	b.w	800c8f0 <__retarget_lock_acquire_recursive>
 800c8ce:	bf00      	nop
 800c8d0:	20000fac 	.word	0x20000fac

0800c8d4 <__malloc_unlock>:
 800c8d4:	4801      	ldr	r0, [pc, #4]	; (800c8dc <__malloc_unlock+0x8>)
 800c8d6:	f000 b80c 	b.w	800c8f2 <__retarget_lock_release_recursive>
 800c8da:	bf00      	nop
 800c8dc:	20000fac 	.word	0x20000fac

0800c8e0 <_malloc_usable_size_r>:
 800c8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8e4:	1f18      	subs	r0, r3, #4
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bfbc      	itt	lt
 800c8ea:	580b      	ldrlt	r3, [r1, r0]
 800c8ec:	18c0      	addlt	r0, r0, r3
 800c8ee:	4770      	bx	lr

0800c8f0 <__retarget_lock_acquire_recursive>:
 800c8f0:	4770      	bx	lr

0800c8f2 <__retarget_lock_release_recursive>:
 800c8f2:	4770      	bx	lr

0800c8f4 <_init>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	bf00      	nop
 800c8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fa:	bc08      	pop	{r3}
 800c8fc:	469e      	mov	lr, r3
 800c8fe:	4770      	bx	lr

0800c900 <_fini>:
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c902:	bf00      	nop
 800c904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c906:	bc08      	pop	{r3}
 800c908:	469e      	mov	lr, r3
 800c90a:	4770      	bx	lr
