
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b18  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf0  08006bf0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf0  08006bf0  00016bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bf8  08006bf8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000018c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d923  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020dd  00000000  00000000  0002d9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c48  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bd5  00000000  00000000  00031460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e900  00000000  00000000  00052035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8fd7  00000000  00000000  00060935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012990c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b58  00000000  00000000  0012995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050c0 	.word	0x080050c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080050c0 	.word	0x080050c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	4604      	mov	r4, r0
 800057c:	4608      	mov	r0, r1
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	4623      	mov	r3, r4
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	4603      	mov	r3, r0
 8000588:	80bb      	strh	r3, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	807b      	strh	r3, [r7, #2]
 800058e:	4613      	mov	r3, r2
 8000590:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	3b01      	subs	r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
	int dy = 1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 80005ae:	e08d      	b.n	80006cc <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	4413      	add	r3, r2
 80005b8:	b298      	uxth	r0, r3
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	88bb      	ldrh	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	883a      	ldrh	r2, [r7, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 fdc8 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	4413      	add	r3, r2
 80005d4:	b298      	uxth	r0, r3
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	b29b      	uxth	r3, r3
 80005e0:	883a      	ldrh	r2, [r7, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	f000 fdba 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	88fa      	ldrh	r2, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b298      	uxth	r0, r3
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	883a      	ldrh	r2, [r7, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	f000 fdac 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	b29b      	uxth	r3, r3
 8000608:	88fa      	ldrh	r2, [r7, #6]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	b298      	uxth	r0, r3
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	b29a      	uxth	r2, r3
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	b29b      	uxth	r3, r3
 8000618:	883a      	ldrh	r2, [r7, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	f000 fd9e 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	b29b      	uxth	r3, r3
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	b298      	uxth	r0, r3
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	b29b      	uxth	r3, r3
 800062e:	88ba      	ldrh	r2, [r7, #4]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	b29b      	uxth	r3, r3
 8000634:	883a      	ldrh	r2, [r7, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	f000 fd90 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	b29b      	uxth	r3, r3
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	b298      	uxth	r0, r3
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	b29b      	uxth	r3, r3
 800064a:	88ba      	ldrh	r2, [r7, #4]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	b29b      	uxth	r3, r3
 8000650:	883a      	ldrh	r2, [r7, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	f000 fd82 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	b29a      	uxth	r2, r3
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	4413      	add	r3, r2
 8000660:	b298      	uxth	r0, r3
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	b29b      	uxth	r3, r3
 8000666:	88ba      	ldrh	r2, [r7, #4]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	b29b      	uxth	r3, r3
 800066c:	883a      	ldrh	r2, [r7, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	f000 fd74 	bl	800115c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	b29a      	uxth	r2, r3
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4413      	add	r3, r2
 800067c:	b298      	uxth	r0, r3
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	b29b      	uxth	r3, r3
 8000682:	88ba      	ldrh	r2, [r7, #4]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	b29b      	uxth	r3, r3
 8000688:	883a      	ldrh	r2, [r7, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	f000 fd66 	bl	800115c <ILI9341_DrawPixel>

		if (err <= 0)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b00      	cmp	r3, #0
 8000694:	dc09      	bgt.n	80006aa <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	3301      	adds	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
			err += dy;
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4413      	add	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
			dy += 2;
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	3302      	adds	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd0d      	ble.n	80006cc <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
			dx += 2;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3302      	adds	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	425b      	negs	r3, r3
 80006c0:	005a      	lsls	r2, r3, #1
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	4413      	add	r3, r2
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 80006cc:	69fa      	ldr	r2, [r7, #28]
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	f6bf af6d 	bge.w	80005b0 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3724      	adds	r7, #36	; 0x24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b08b      	sub	sp, #44	; 0x2c
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4604      	mov	r4, r0
 80006e8:	4608      	mov	r0, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	4603      	mov	r3, r0
 80006f4:	80bb      	strh	r3, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	807b      	strh	r3, [r7, #2]
 80006fa:	4613      	mov	r3, r2
 80006fc:	803b      	strh	r3, [r7, #0]

	int x = radius;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	f1c3 0301 	rsb	r3, r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000718:	e061      	b.n	80007de <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	e018      	b.n	8000756 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	b298      	uxth	r0, r3
 8000728:	6a3b      	ldr	r3, [r7, #32]
 800072a:	b29a      	uxth	r2, r3
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	883a      	ldrh	r2, [r7, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f000 fd11 	bl	800115c <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	b298      	uxth	r0, r3
 800073e:	6a3b      	ldr	r3, [r7, #32]
 8000740:	b29b      	uxth	r3, r3
 8000742:	88ba      	ldrh	r2, [r7, #4]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	883a      	ldrh	r2, [r7, #0]
 800074a:	4619      	mov	r1, r3
 800074c:	f000 fd06 	bl	800115c <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	3301      	adds	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	88fa      	ldrh	r2, [r7, #6]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	4413      	add	r3, r2
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	429a      	cmp	r2, r3
 8000760:	dde0      	ble.n	8000724 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	6a3b      	ldr	r3, [r7, #32]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e018      	b.n	800079e <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b298      	uxth	r0, r3
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	b29a      	uxth	r2, r3
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	b29b      	uxth	r3, r3
 800077a:	883a      	ldrh	r2, [r7, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f000 fced 	bl	800115c <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	b298      	uxth	r0, r3
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	b29b      	uxth	r3, r3
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	b29b      	uxth	r3, r3
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	f000 fce2 	bl	800115c <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	4413      	add	r3, r2
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dde0      	ble.n	800076c <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80007aa:	6a3b      	ldr	r3, [r7, #32]
 80007ac:	3301      	adds	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	4413      	add	r3, r2
 80007b6:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	3302      	adds	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	005a      	lsls	r2, r3, #1
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	4413      	add	r3, r2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dd09      	ble.n	80007de <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007cc:	3b01      	subs	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	3302      	adds	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 80007de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	da99      	bge.n	800071a <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	372c      	adds	r7, #44	; 0x2c
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800081e:	f04f 0300 	mov.w	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000824:	887a      	ldrh	r2, [r7, #2]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	ee07 3a90 	vmov	s15, r3
 800082e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000832:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 8000836:	edd7 7a03 	vldr	s15, [r7, #12]
 800083a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000842:	d501      	bpl.n	8000848 <ILI9341_DrawHollowRectangleCoord+0x58>
 8000844:	2301      	movs	r3, #1
 8000846:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000848:	f04f 0300 	mov.w	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800084e:	883a      	ldrh	r2, [r7, #0]
 8000850:	88bb      	ldrh	r3, [r7, #4]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	ee07 3a90 	vmov	s15, r3
 8000858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800085c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 8000860:	edd7 7a03 	vldr	s15, [r7, #12]
 8000864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	d501      	bpl.n	8000872 <ILI9341_DrawHollowRectangleCoord+0x82>
 800086e:	2301      	movs	r3, #1
 8000870:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8000872:	7cfb      	ldrb	r3, [r7, #19]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8000878:	887a      	ldrh	r2, [r7, #2]
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	82fb      	strh	r3, [r7, #22]
 8000880:	e003      	b.n	800088a <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8000882:	88fa      	ldrh	r2, [r7, #6]
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 800088a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800088c:	8afa      	ldrh	r2, [r7, #22]
 800088e:	88b9      	ldrh	r1, [r7, #4]
 8000890:	88f8      	ldrh	r0, [r7, #6]
 8000892:	f000 fd25 	bl	80012e0 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8000896:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000898:	8afa      	ldrh	r2, [r7, #22]
 800089a:	8839      	ldrh	r1, [r7, #0]
 800089c:	88f8      	ldrh	r0, [r7, #6]
 800089e:	f000 fd1f 	bl	80012e0 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80008a2:	7cbb      	ldrb	r3, [r7, #18]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80008a8:	883a      	ldrh	r2, [r7, #0]
 80008aa:	88bb      	ldrh	r3, [r7, #4]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	82bb      	strh	r3, [r7, #20]
 80008b0:	e003      	b.n	80008ba <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80008b2:	88ba      	ldrh	r2, [r7, #4]
 80008b4:	883b      	ldrh	r3, [r7, #0]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80008ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008bc:	8aba      	ldrh	r2, [r7, #20]
 80008be:	88b9      	ldrh	r1, [r7, #4]
 80008c0:	88f8      	ldrh	r0, [r7, #6]
 80008c2:	f000 fd51 	bl	8001368 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80008c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008c8:	8aba      	ldrh	r2, [r7, #20]
 80008ca:	88b9      	ldrh	r1, [r7, #4]
 80008cc:	8878      	ldrh	r0, [r7, #2]
 80008ce:	f000 fd4b 	bl	8001368 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80008d2:	8afb      	ldrh	r3, [r7, #22]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <ILI9341_DrawHollowRectangleCoord+0xee>
 80008d8:	8abb      	ldrh	r3, [r7, #20]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d005      	beq.n	80008ea <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80008de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008e0:	8839      	ldrh	r1, [r7, #0]
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fc39 	bl	800115c <ILI9341_DrawPixel>
	}
}
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd90      	pop	{r4, r7, pc}

080008f2 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80008f2:	b590      	push	{r4, r7, lr}
 80008f4:	b08d      	sub	sp, #52	; 0x34
 80008f6:	af02      	add	r7, sp, #8
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	4611      	mov	r1, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4603      	mov	r3, r0
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	460b      	mov	r3, r1
 8000904:	81bb      	strh	r3, [r7, #12]
 8000906:	4613      	mov	r3, r2
 8000908:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	2b1e      	cmp	r3, #30
 800090e:	d961      	bls.n	80009d4 <ILI9341_DrawChar+0xe2>
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db5d      	blt.n	80009d4 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	78db      	ldrb	r3, [r3, #3]
 800092e:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	3b20      	subs	r3, #32
 8000934:	7ffa      	ldrb	r2, [r7, #31]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	3304      	adds	r3, #4
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	4413      	add	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000942:	7fbb      	ldrb	r3, [r7, #30]
 8000944:	b29a      	uxth	r2, r3
 8000946:	7f7b      	ldrb	r3, [r7, #29]
 8000948:	b29c      	uxth	r4, r3
 800094a:	88f9      	ldrh	r1, [r7, #6]
 800094c:	89b8      	ldrh	r0, [r7, #12]
 800094e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	4623      	mov	r3, r4
 8000954:	f000 fc68 	bl	8001228 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
 800095c:	e035      	b.n	80009ca <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
 8000962:	e02b      	b.n	80009bc <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000964:	7f3b      	ldrb	r3, [r7, #28]
 8000966:	6a3a      	ldr	r2, [r7, #32]
 8000968:	fb03 f202 	mul.w	r2, r3, r2
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	10db      	asrs	r3, r3, #3
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	4413      	add	r3, r2
 8000976:	3301      	adds	r3, #1
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	2201      	movs	r2, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800098e:	7dfa      	ldrb	r2, [r7, #23]
 8000990:	7dbb      	ldrb	r3, [r7, #22]
 8000992:	4013      	ands	r3, r2
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00d      	beq.n	80009b6 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	b29a      	uxth	r2, r3
 800099e:	89bb      	ldrh	r3, [r7, #12]
 80009a0:	4413      	add	r3, r2
 80009a2:	b298      	uxth	r0, r3
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	4413      	add	r3, r2
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80009b0:	4619      	mov	r1, r3
 80009b2:	f000 fbd3 	bl	800115c <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	3301      	adds	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	7fbb      	ldrb	r3, [r7, #30]
 80009be:	6a3a      	ldr	r2, [r7, #32]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbcf      	blt.n	8000964 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	3301      	adds	r3, #1
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
 80009ca:	7f7b      	ldrb	r3, [r7, #29]
 80009cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbc5      	blt.n	800095e <ILI9341_DrawChar+0x6c>
 80009d2:	e000      	b.n	80009d6 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80009d4:	bf00      	nop
			}
		}
	}
}
 80009d6:	372c      	adds	r7, #44	; 0x2c
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd90      	pop	{r4, r7, pc}

080009dc <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	460b      	mov	r3, r1
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4613      	mov	r3, r2
 80009f0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80009fe:	e02d      	b.n	8000a5c <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	7818      	ldrb	r0, [r3, #0]
 8000a04:	88b9      	ldrh	r1, [r7, #4]
 8000a06:	88fa      	ldrh	r2, [r7, #6]
 8000a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	460b      	mov	r3, r1
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	f7ff ff6d 	bl	80008f2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3b20      	subs	r3, #32
 8000a1e:	7ffa      	ldrb	r2, [r7, #31]
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	3304      	adds	r3, #4
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	1c9a      	adds	r2, r3, #2
 8000a36:	7fbb      	ldrb	r3, [r7, #30]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	da07      	bge.n	8000a4c <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3302      	adds	r3, #2
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	e004      	b.n	8000a56 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8000a4c:	7fbb      	ldrb	r3, [r7, #30]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	4413      	add	r3, r2
 8000a54:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1cd      	bne.n	8000a00 <ILI9341_DrawText+0x24>
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_SPI_TxCpltCallback>:
uint16_t LCD_DC_PIN = LCD1_DC_PIN;
GPIO_TypeDef* LCD_RST_PORT = LCD1_RST_PORT;
uint16_t LCD_RST_PIN = LCD1_RST_PIN;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_SPI_TxCpltCallback+0x28>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d107      	bne.n	8000a90 <HAL_SPI_TxCpltCallback+0x20>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_SPI_TxCpltCallback+0x2c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_SPI_TxCpltCallback+0x30>)
 8000a86:	8811      	ldrh	r1, [r2, #0]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f9c2 	bl	8002e14 <HAL_GPIO_WritePin>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000a8 	.word	0x200000a8
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000aae:	bf00      	nop
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <ILI9341_SPI_Tx+0x30>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d1f8      	bne.n	8000ab0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <ILI9341_SPI_Tx+0x30>)
 8000ac6:	f002 ffc3 	bl	8003a50 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000a8 	.word	0x200000a8

08000ad8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ae4:	bf00      	nop
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <ILI9341_SPI_TxBuffer+0x30>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d1f8      	bne.n	8000ae6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	461a      	mov	r2, r3
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <ILI9341_SPI_TxBuffer+0x30>)
 8000afc:	f002 ffa8 	bl	8003a50 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000a8 	.word	0x200000a8

08000b0c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <ILI9341_WriteCommand+0x3c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <ILI9341_WriteCommand+0x40>)
 8000b1c:	8811      	ldrh	r1, [r2, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 f977 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <ILI9341_WriteCommand+0x44>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <ILI9341_WriteCommand+0x48>)
 8000b2c:	8811      	ldrh	r1, [r2, #0]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 f96f 	bl	8002e14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffb3 	bl	8000aa4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	20000004 	.word	0x20000004
 8000b54:	20000008 	.word	0x20000008

08000b58 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <ILI9341_WriteData+0x3c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <ILI9341_WriteData+0x40>)
 8000b68:	8811      	ldrh	r1, [r2, #0]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f951 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <ILI9341_WriteData+0x44>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <ILI9341_WriteData+0x48>)
 8000b78:	8811      	ldrh	r1, [r2, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f949 	bl	8002e14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff8d 	bl	8000aa4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <ILI9341_WriteBuffer+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <ILI9341_WriteBuffer+0x44>)
 8000bb6:	8811      	ldrh	r1, [r2, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 f92a 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <ILI9341_WriteBuffer+0x48>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <ILI9341_WriteBuffer+0x4c>)
 8000bc6:	8811      	ldrh	r1, [r2, #0]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 f922 	bl	8002e14 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff7f 	bl	8000ad8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000000c 	.word	0x2000000c
 8000be8:	20000010 	.word	0x20000010
 8000bec:	20000004 	.word	0x20000004
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000c32:	202a      	movs	r0, #42	; 0x2a
 8000c34:	f7ff ff6a 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffb0 	bl	8000ba4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000c54:	883b      	ldrh	r3, [r7, #0]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000c5e:	883b      	ldrh	r3, [r7, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000c64:	202b      	movs	r0, #43	; 0x2b
 8000c66:	f7ff ff51 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2104      	movs	r1, #4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff97 	bl	8000ba4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000c76:	202c      	movs	r0, #44	; 0x2c
 8000c78:	f7ff ff48 	bl	8000b0c <ILI9341_WriteCommand>
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <ILI9341_Reset+0x54>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <ILI9341_Reset+0x58>)
 8000c8e:	8811      	ldrh	r1, [r2, #0]
 8000c90:	2200      	movs	r2, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f8be 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f001 fa61 	bl	8002160 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <ILI9341_Reset+0x5c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <ILI9341_Reset+0x60>)
 8000ca4:	8811      	ldrh	r1, [r2, #0]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f8b3 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 fa56 	bl	8002160 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <ILI9341_Reset+0x54>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <ILI9341_Reset+0x58>)
 8000cba:	8811      	ldrh	r1, [r2, #0]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 f8a8 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <ILI9341_Reset+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <ILI9341_Reset+0x60>)
 8000cca:	8811      	ldrh	r1, [r2, #0]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 f8a0 	bl	8002e14 <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	20000018 	.word	0x20000018
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <ILI9341_Enable+0x18>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <ILI9341_Enable+0x1c>)
 8000cf2:	8811      	ldrh	r1, [r2, #0]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 f88c 	bl	8002e14 <HAL_GPIO_WritePin>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000014 	.word	0x20000014
 8000d04:	20000018 	.word	0x20000018

08000d08 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000d0c:	f7ff ffec 	bl	8000ce8 <ILI9341_Enable>
	ILI9341_Reset();
 8000d10:	f7ff ffb8 	bl	8000c84 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fef9 	bl	8000b0c <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f001 fa20 	bl	8002160 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000d20:	20cb      	movs	r0, #203	; 0xcb
 8000d22:	f7ff fef3 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000d26:	2039      	movs	r0, #57	; 0x39
 8000d28:	f7ff ff16 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000d2c:	202c      	movs	r0, #44	; 0x2c
 8000d2e:	f7ff ff13 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ff10 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000d38:	2034      	movs	r0, #52	; 0x34
 8000d3a:	f7ff ff0d 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff ff0a 	bl	8000b58 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000d44:	20cf      	movs	r0, #207	; 0xcf
 8000d46:	f7ff fee1 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff ff04 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000d50:	20c1      	movs	r0, #193	; 0xc1
 8000d52:	f7ff ff01 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000d56:	2030      	movs	r0, #48	; 0x30
 8000d58:	f7ff fefe 	bl	8000b58 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000d5c:	20e8      	movs	r0, #232	; 0xe8
 8000d5e:	f7ff fed5 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000d62:	2085      	movs	r0, #133	; 0x85
 8000d64:	f7ff fef8 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fef5 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000d6e:	2078      	movs	r0, #120	; 0x78
 8000d70:	f7ff fef2 	bl	8000b58 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000d74:	20ea      	movs	r0, #234	; 0xea
 8000d76:	f7ff fec9 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff feec 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fee9 	bl	8000b58 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000d86:	20ed      	movs	r0, #237	; 0xed
 8000d88:	f7ff fec0 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000d8c:	2064      	movs	r0, #100	; 0x64
 8000d8e:	f7ff fee3 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff fee0 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000d98:	2012      	movs	r0, #18
 8000d9a:	f7ff fedd 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000d9e:	2081      	movs	r0, #129	; 0x81
 8000da0:	f7ff feda 	bl	8000b58 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000da4:	20f7      	movs	r0, #247	; 0xf7
 8000da6:	f7ff feb1 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000daa:	2020      	movs	r0, #32
 8000dac:	f7ff fed4 	bl	8000b58 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000db0:	20c0      	movs	r0, #192	; 0xc0
 8000db2:	f7ff feab 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000db6:	2023      	movs	r0, #35	; 0x23
 8000db8:	f7ff fece 	bl	8000b58 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000dbc:	20c1      	movs	r0, #193	; 0xc1
 8000dbe:	f7ff fea5 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000dc2:	2010      	movs	r0, #16
 8000dc4:	f7ff fec8 	bl	8000b58 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000dc8:	20c5      	movs	r0, #197	; 0xc5
 8000dca:	f7ff fe9f 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000dce:	203e      	movs	r0, #62	; 0x3e
 8000dd0:	f7ff fec2 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000dd4:	2028      	movs	r0, #40	; 0x28
 8000dd6:	f7ff febf 	bl	8000b58 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000dda:	20c7      	movs	r0, #199	; 0xc7
 8000ddc:	f7ff fe96 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000de0:	2086      	movs	r0, #134	; 0x86
 8000de2:	f7ff feb9 	bl	8000b58 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000de6:	2036      	movs	r0, #54	; 0x36
 8000de8:	f7ff fe90 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000dec:	2048      	movs	r0, #72	; 0x48
 8000dee:	f7ff feb3 	bl	8000b58 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000df2:	203a      	movs	r0, #58	; 0x3a
 8000df4:	f7ff fe8a 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000df8:	2055      	movs	r0, #85	; 0x55
 8000dfa:	f7ff fead 	bl	8000b58 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000dfe:	20b1      	movs	r0, #177	; 0xb1
 8000e00:	f7ff fe84 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fea7 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000e0a:	2018      	movs	r0, #24
 8000e0c:	f7ff fea4 	bl	8000b58 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000e10:	20b6      	movs	r0, #182	; 0xb6
 8000e12:	f7ff fe7b 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000e16:	2008      	movs	r0, #8
 8000e18:	f7ff fe9e 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000e1c:	2082      	movs	r0, #130	; 0x82
 8000e1e:	f7ff fe9b 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000e22:	2027      	movs	r0, #39	; 0x27
 8000e24:	f7ff fe98 	bl	8000b58 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000e28:	20f2      	movs	r0, #242	; 0xf2
 8000e2a:	f7ff fe6f 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff fe92 	bl	8000b58 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000e34:	2026      	movs	r0, #38	; 0x26
 8000e36:	f7ff fe69 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff fe8c 	bl	8000b58 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000e40:	20e0      	movs	r0, #224	; 0xe0
 8000e42:	f7ff fe63 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f7ff fe86 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e4c:	2031      	movs	r0, #49	; 0x31
 8000e4e:	f7ff fe83 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000e52:	202b      	movs	r0, #43	; 0x2b
 8000e54:	f7ff fe80 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000e58:	200c      	movs	r0, #12
 8000e5a:	f7ff fe7d 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e5e:	200e      	movs	r0, #14
 8000e60:	f7ff fe7a 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000e64:	2008      	movs	r0, #8
 8000e66:	f7ff fe77 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000e6a:	204e      	movs	r0, #78	; 0x4e
 8000e6c:	f7ff fe74 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000e70:	20f1      	movs	r0, #241	; 0xf1
 8000e72:	f7ff fe71 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000e76:	2037      	movs	r0, #55	; 0x37
 8000e78:	f7ff fe6e 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e7c:	2007      	movs	r0, #7
 8000e7e:	f7ff fe6b 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000e82:	2010      	movs	r0, #16
 8000e84:	f7ff fe68 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f7ff fe65 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e8e:	200e      	movs	r0, #14
 8000e90:	f7ff fe62 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000e94:	2009      	movs	r0, #9
 8000e96:	f7ff fe5f 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fe5c 	bl	8000b58 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000ea0:	20e1      	movs	r0, #225	; 0xe1
 8000ea2:	f7ff fe33 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fe56 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000eac:	200e      	movs	r0, #14
 8000eae:	f7ff fe53 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f7ff fe50 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f7ff fe4d 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000ebe:	2011      	movs	r0, #17
 8000ec0:	f7ff fe4a 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000ec4:	2007      	movs	r0, #7
 8000ec6:	f7ff fe47 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000eca:	2031      	movs	r0, #49	; 0x31
 8000ecc:	f7ff fe44 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000ed0:	20c1      	movs	r0, #193	; 0xc1
 8000ed2:	f7ff fe41 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000ed6:	2048      	movs	r0, #72	; 0x48
 8000ed8:	f7ff fe3e 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000edc:	2008      	movs	r0, #8
 8000ede:	f7ff fe3b 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f7ff fe38 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f7ff fe35 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000eee:	2031      	movs	r0, #49	; 0x31
 8000ef0:	f7ff fe32 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000ef4:	2036      	movs	r0, #54	; 0x36
 8000ef6:	f7ff fe2f 	bl	8000b58 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f7ff fe2c 	bl	8000b58 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000f00:	2011      	movs	r0, #17
 8000f02:	f7ff fe03 	bl	8000b0c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f001 f92a 	bl	8002160 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000f0c:	2029      	movs	r0, #41	; 0x29
 8000f0e:	f7ff fdfd 	bl	8000b0c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f802 	bl	8000f1c <ILI9341_SetRotation>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000f26:	2036      	movs	r0, #54	; 0x36
 8000f28:	f7ff fdf0 	bl	8000b0c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f001 f917 	bl	8002160 <HAL_Delay>

	switch(rotation)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d837      	bhi.n	8000fa8 <ILI9341_SetRotation+0x8c>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <ILI9341_SetRotation+0x24>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f67 	.word	0x08000f67
 8000f48:	08000f7d 	.word	0x08000f7d
 8000f4c:	08000f93 	.word	0x08000f93
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000f50:	2048      	movs	r0, #72	; 0x48
 8000f52:	f7ff fe01 	bl	8000b58 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <ILI9341_SetRotation+0x98>)
 8000f58:	22f0      	movs	r2, #240	; 0xf0
 8000f5a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <ILI9341_SetRotation+0x9c>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
		break;
 8000f64:	e021      	b.n	8000faa <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f7ff fdf6 	bl	8000b58 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <ILI9341_SetRotation+0x98>)
 8000f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f72:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <ILI9341_SetRotation+0x9c>)
 8000f76:	22f0      	movs	r2, #240	; 0xf0
 8000f78:	801a      	strh	r2, [r3, #0]
		break;
 8000f7a:	e016      	b.n	8000faa <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000f7c:	2088      	movs	r0, #136	; 0x88
 8000f7e:	f7ff fdeb 	bl	8000b58 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <ILI9341_SetRotation+0x98>)
 8000f84:	22f0      	movs	r2, #240	; 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <ILI9341_SetRotation+0x9c>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f8e:	801a      	strh	r2, [r3, #0]
		break;
 8000f90:	e00b      	b.n	8000faa <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000f92:	20e8      	movs	r0, #232	; 0xe8
 8000f94:	f7ff fde0 	bl	8000b58 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <ILI9341_SetRotation+0x98>)
 8000f9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f9e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <ILI9341_SetRotation+0x9c>)
 8000fa2:	22f0      	movs	r2, #240	; 0xf0
 8000fa4:	801a      	strh	r2, [r3, #0]
		break;
 8000fa6:	e000      	b.n	8000faa <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000fa8:	bf00      	nop
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000002 	.word	0x20000002
 8000fb8:	20000000 	.word	0x20000000

08000fbc <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fc0:	b08d      	sub	sp, #52	; 0x34
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	6039      	str	r1, [r7, #0]
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	466b      	mov	r3, sp
 8000fcc:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fda:	d202      	bcs.n	8000fe2 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe0:	e002      	b.n	8000fe8 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000fe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000fe8:	4b44      	ldr	r3, [pc, #272]	; (80010fc <ILI9341_DrawColorBurst+0x140>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a44      	ldr	r2, [pc, #272]	; (8001100 <ILI9341_DrawColorBurst+0x144>)
 8000fee:	8811      	ldrh	r1, [r2, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 ff0e 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <ILI9341_DrawColorBurst+0x148>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a42      	ldr	r2, [pc, #264]	; (8001108 <ILI9341_DrawColorBurst+0x14c>)
 8000ffe:	8811      	ldrh	r1, [r2, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f001 ff06 	bl	8002e14 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8001012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001014:	460b      	mov	r3, r1
 8001016:	3b01      	subs	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	2300      	movs	r3, #0
 800101c:	4688      	mov	r8, r1
 800101e:	4699      	mov	r9, r3
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800102c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001030:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001034:	2300      	movs	r3, #0
 8001036:	460c      	mov	r4, r1
 8001038:	461d      	mov	r5, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	00eb      	lsls	r3, r5, #3
 8001044:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001048:	00e2      	lsls	r2, r4, #3
 800104a:	1dcb      	adds	r3, r1, #7
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	ebad 0d03 	sub.w	sp, sp, r3
 8001054:	466b      	mov	r3, sp
 8001056:	3300      	adds	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
 800105e:	e00e      	b.n	800107e <ILI9341_DrawColorBurst+0xc2>
	{
		BurstBuffer[j] = chifted;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	4413      	add	r3, r2
 8001066:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800106a:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	3301      	adds	r3, #1
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	b2d1      	uxtb	r1, r2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	3302      	adds	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
 800107e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	429a      	cmp	r2, r3
 8001084:	d3ec      	bcc.n	8001060 <ILI9341_DrawColorBurst+0xa4>
	}

	uint32_t SendingSize = size * 2;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	fbb2 f3f3 	udiv	r3, r2, r3
 8001094:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109a:	fbb3 f2f2 	udiv	r2, r3, r2
 800109e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a0:	fb01 f202 	mul.w	r2, r1, r2
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d010      	beq.n	80010d0 <ILI9341_DrawColorBurst+0x114>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b2:	e009      	b.n	80010c8 <ILI9341_DrawColorBurst+0x10c>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	230a      	movs	r3, #10
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <ILI9341_DrawColorBurst+0x150>)
 80010be:	f002 fb8a 	bl	80037d6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	3301      	adds	r3, #1
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3f1      	bcc.n	80010b4 <ILI9341_DrawColorBurst+0xf8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	230a      	movs	r3, #10
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <ILI9341_DrawColorBurst+0x150>)
 80010da:	f002 fb7c 	bl	80037d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <ILI9341_DrawColorBurst+0x148>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <ILI9341_DrawColorBurst+0x14c>)
 80010e4:	8811      	ldrh	r1, [r2, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fe93 	bl	8002e14 <HAL_GPIO_WritePin>
 80010ee:	46b5      	mov	sp, r6
}
 80010f0:	bf00      	nop
 80010f2:	3734      	adds	r7, #52	; 0x34
 80010f4:	46bd      	mov	sp, r7
 80010f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010fa:	bf00      	nop
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	20000010 	.word	0x20000010
 8001104:	20000004 	.word	0x20000004
 8001108:	20000008 	.word	0x20000008
 800110c:	200000a8 	.word	0x200000a8

08001110 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <ILI9341_FillScreen+0x44>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <ILI9341_FillScreen+0x48>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	2100      	movs	r1, #0
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fd63 	bl	8000bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <ILI9341_FillScreen+0x44>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <ILI9341_FillScreen+0x48>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	461a      	mov	r2, r3
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff38 	bl	8000fbc <ILI9341_DrawColorBurst>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000002 	.word	0x20000002
 8001158:	20000000 	.word	0x20000000

0800115c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	460b      	mov	r3, r1
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <ILI9341_DrawPixel+0xc4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	88fa      	ldrh	r2, [r7, #6]
 8001176:	429a      	cmp	r2, r3
 8001178:	d24d      	bcs.n	8001216 <ILI9341_DrawPixel+0xba>
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <ILI9341_DrawPixel+0xc8>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d247      	bcs.n	8001216 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	b29b      	uxth	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	753b      	strb	r3, [r7, #20]
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	757b      	strb	r3, [r7, #21]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	3301      	adds	r3, #1
 800119a:	121b      	asrs	r3, r3, #8
 800119c:	b2db      	uxtb	r3, r3
 800119e:	75bb      	strb	r3, [r7, #22]
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	743b      	strb	r3, [r7, #16]
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	747b      	strb	r3, [r7, #17]
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	3301      	adds	r3, #1
 80011be:	121b      	asrs	r3, r3, #8
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	733b      	strb	r3, [r7, #12]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80011de:	202a      	movs	r0, #42	; 0x2a
 80011e0:	f7ff fc94 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2104      	movs	r1, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fcda 	bl	8000ba4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80011f0:	202b      	movs	r0, #43	; 0x2b
 80011f2:	f7ff fc8b 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2104      	movs	r1, #4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fcd1 	bl	8000ba4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001202:	202c      	movs	r0, #44	; 0x2c
 8001204:	f7ff fc82 	bl	8000b0c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fcc8 	bl	8000ba4 <ILI9341_WriteBuffer>
 8001214:	e000      	b.n	8001218 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001216:	bf00      	nop
}
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000002 	.word	0x20000002
 8001224:	20000000 	.word	0x20000000

08001228 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	4603      	mov	r3, r0
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
 8001242:	4613      	mov	r3, r2
 8001244:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <ILI9341_DrawRectangle+0xb0>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	429a      	cmp	r2, r3
 8001250:	d23d      	bcs.n	80012ce <ILI9341_DrawRectangle+0xa6>
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <ILI9341_DrawRectangle+0xb4>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	88ba      	ldrh	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d237      	bcs.n	80012ce <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 800125e:	88fa      	ldrh	r2, [r7, #6]
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	4413      	add	r3, r2
 8001264:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <ILI9341_DrawRectangle+0xb0>)
 8001266:	8812      	ldrh	r2, [r2, #0]
 8001268:	b292      	uxth	r2, r2
 800126a:	4293      	cmp	r3, r2
 800126c:	dd05      	ble.n	800127a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <ILI9341_DrawRectangle+0xb0>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b29a      	uxth	r2, r3
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 800127a:	88ba      	ldrh	r2, [r7, #4]
 800127c:	883b      	ldrh	r3, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <ILI9341_DrawRectangle+0xb4>)
 8001282:	8812      	ldrh	r2, [r2, #0]
 8001284:	b292      	uxth	r2, r2
 8001286:	4293      	cmp	r3, r2
 8001288:	dd05      	ble.n	8001296 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <ILI9341_DrawRectangle+0xb4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b29a      	uxth	r2, r3
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001296:	88fa      	ldrh	r2, [r7, #6]
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29c      	uxth	r4, r3
 80012a2:	88ba      	ldrh	r2, [r7, #4]
 80012a4:	883b      	ldrh	r3, [r7, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	88b9      	ldrh	r1, [r7, #4]
 80012b0:	88f8      	ldrh	r0, [r7, #6]
 80012b2:	4622      	mov	r2, r4
 80012b4:	f7ff fc9e 	bl	8000bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	8b3b      	ldrh	r3, [r7, #24]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe78 	bl	8000fbc <ILI9341_DrawColorBurst>
 80012cc:	e000      	b.n	80012d0 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012ce:	bf00      	nop
}
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000002 	.word	0x20000002
 80012dc:	20000000 	.word	0x20000000

080012e0 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4623      	mov	r3, r4
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	4603      	mov	r3, r0
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]
 80012fa:	4613      	mov	r3, r2
 80012fc:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <ILI9341_DrawHLine+0x80>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	429a      	cmp	r2, r3
 8001308:	d225      	bcs.n	8001356 <ILI9341_DrawHLine+0x76>
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <ILI9341_DrawHLine+0x84>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d21f      	bcs.n	8001356 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	4413      	add	r3, r2
 800131c:	4a10      	ldr	r2, [pc, #64]	; (8001360 <ILI9341_DrawHLine+0x80>)
 800131e:	8812      	ldrh	r2, [r2, #0]
 8001320:	b292      	uxth	r2, r2
 8001322:	4293      	cmp	r3, r2
 8001324:	dd05      	ble.n	8001332 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <ILI9341_DrawHLine+0x80>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	88b9      	ldrh	r1, [r7, #4]
 8001342:	88f8      	ldrh	r0, [r7, #6]
 8001344:	f7ff fc56 	bl	8000bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	883b      	ldrh	r3, [r7, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe34 	bl	8000fbc <ILI9341_DrawColorBurst>
 8001354:	e000      	b.n	8001358 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001356:	bf00      	nop
}
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	20000002 	.word	0x20000002
 8001364:	20000000 	.word	0x20000000

08001368 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4604      	mov	r4, r0
 8001370:	4608      	mov	r0, r1
 8001372:	4611      	mov	r1, r2
 8001374:	461a      	mov	r2, r3
 8001376:	4623      	mov	r3, r4
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	4603      	mov	r3, r0
 800137c:	80bb      	strh	r3, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]
 8001382:	4613      	mov	r3, r2
 8001384:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <ILI9341_DrawVLine+0x80>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	429a      	cmp	r2, r3
 8001390:	d225      	bcs.n	80013de <ILI9341_DrawVLine+0x76>
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <ILI9341_DrawVLine+0x84>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d21f      	bcs.n	80013de <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a11      	ldr	r2, [pc, #68]	; (80013ec <ILI9341_DrawVLine+0x84>)
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	b292      	uxth	r2, r2
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd05      	ble.n	80013ba <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <ILI9341_DrawVLine+0x84>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	88bb      	ldrh	r3, [r7, #4]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	88fa      	ldrh	r2, [r7, #6]
 80013c8:	88b9      	ldrh	r1, [r7, #4]
 80013ca:	88f8      	ldrh	r0, [r7, #6]
 80013cc:	f7ff fc12 	bl	8000bf4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fdf0 	bl	8000fbc <ILI9341_DrawColorBurst>
 80013dc:	e000      	b.n	80013e0 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013de:	bf00      	nop
}
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000002 	.word	0x20000002
 80013ec:	20000000 	.word	0x20000000

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f000 fe41 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f97d 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f000 fa89 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 8001402:	f000 fa67 	bl	80018d4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001406:	f000 fa15 	bl	8001834 <MX_TIM1_Init>
  MX_SPI1_Init();
 800140a:	f000 f9dd 	bl	80017c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // SCREEN 1
  ILI9341_Init();
 800140e:	f7ff fc7b 	bl	8000d08 <ILI9341_Init>

   // Simple Text writing (Text, Font, X, Y, Color, BackColor)
   // Available Fonts are FONT1, FONT2, FONT3 and FONT4
   ILI9341_FillScreen(WHITE);
 8001412:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001416:	f7ff fe7b 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff fd7e 	bl	8000f1c <ILI9341_SetRotation>
   ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	236e      	movs	r3, #110	; 0x6e
 800142c:	225a      	movs	r2, #90	; 0x5a
 800142e:	49a0      	ldr	r1, [pc, #640]	; (80016b0 <main+0x2c0>)
 8001430:	48a0      	ldr	r0, [pc, #640]	; (80016b4 <main+0x2c4>)
 8001432:	f7ff fad3 	bl	80009dc <ILI9341_DrawText>
   HAL_Delay(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143a:	f000 fe91 	bl	8002160 <HAL_Delay>

   //Writing numbers
   ILI9341_FillScreen(WHITE);
 800143e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001442:	f7ff fe65 	bl	8001110 <ILI9341_FillScreen>
   static char BufferText[30];
   for(uint8_t i = 0; i <= 5; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e07b      	b.n	8001544 <main+0x154>
   {
     sprintf(BufferText, "COUNT : %d", i);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	461a      	mov	r2, r3
 8001450:	4999      	ldr	r1, [pc, #612]	; (80016b8 <main+0x2c8>)
 8001452:	489a      	ldr	r0, [pc, #616]	; (80016bc <main+0x2cc>)
 8001454:	f003 f9c6 	bl	80047e4 <siprintf>
     ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 8001458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	230a      	movs	r3, #10
 8001464:	220a      	movs	r2, #10
 8001466:	4996      	ldr	r1, [pc, #600]	; (80016c0 <main+0x2d0>)
 8001468:	4894      	ldr	r0, [pc, #592]	; (80016bc <main+0x2cc>)
 800146a:	f7ff fab7 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 800146e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	231f      	movs	r3, #31
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	231e      	movs	r3, #30
 800147a:	220a      	movs	r2, #10
 800147c:	4990      	ldr	r1, [pc, #576]	; (80016c0 <main+0x2d0>)
 800147e:	488f      	ldr	r0, [pc, #572]	; (80016bc <main+0x2cc>)
 8001480:	f7ff faac 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 8001484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2332      	movs	r3, #50	; 0x32
 8001492:	220a      	movs	r2, #10
 8001494:	498a      	ldr	r1, [pc, #552]	; (80016c0 <main+0x2d0>)
 8001496:	4889      	ldr	r0, [pc, #548]	; (80016bc <main+0x2cc>)
 8001498:	f7ff faa0 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 800149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2346      	movs	r3, #70	; 0x46
 80014aa:	220a      	movs	r2, #10
 80014ac:	4984      	ldr	r1, [pc, #528]	; (80016c0 <main+0x2d0>)
 80014ae:	4883      	ldr	r0, [pc, #524]	; (80016bc <main+0x2cc>)
 80014b0:	f7ff fa94 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 80014b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	235a      	movs	r3, #90	; 0x5a
 80014c2:	220a      	movs	r2, #10
 80014c4:	497e      	ldr	r1, [pc, #504]	; (80016c0 <main+0x2d0>)
 80014c6:	487d      	ldr	r0, [pc, #500]	; (80016bc <main+0x2cc>)
 80014c8:	f7ff fa88 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 80014cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f647 030f 	movw	r3, #30735	; 0x780f
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	236e      	movs	r3, #110	; 0x6e
 80014da:	220a      	movs	r2, #10
 80014dc:	4978      	ldr	r1, [pc, #480]	; (80016c0 <main+0x2d0>)
 80014de:	4877      	ldr	r0, [pc, #476]	; (80016bc <main+0x2cc>)
 80014e0:	f7ff fa7c 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 80014e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2382      	movs	r3, #130	; 0x82
 80014f2:	220a      	movs	r2, #10
 80014f4:	4972      	ldr	r1, [pc, #456]	; (80016c0 <main+0x2d0>)
 80014f6:	4871      	ldr	r0, [pc, #452]	; (80016bc <main+0x2cc>)
 80014f8:	f7ff fa70 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 80014fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2396      	movs	r3, #150	; 0x96
 800150a:	220a      	movs	r2, #10
 800150c:	496c      	ldr	r1, [pc, #432]	; (80016c0 <main+0x2d0>)
 800150e:	486b      	ldr	r0, [pc, #428]	; (80016bc <main+0x2cc>)
 8001510:	f7ff fa64 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	23aa      	movs	r3, #170	; 0xaa
 8001520:	220a      	movs	r2, #10
 8001522:	4967      	ldr	r1, [pc, #412]	; (80016c0 <main+0x2d0>)
 8001524:	4865      	ldr	r0, [pc, #404]	; (80016bc <main+0x2cc>)
 8001526:	f7ff fa59 	bl	80009dc <ILI9341_DrawText>
     ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 800152a:	2300      	movs	r3, #0
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	231f      	movs	r3, #31
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	23be      	movs	r3, #190	; 0xbe
 8001534:	220a      	movs	r2, #10
 8001536:	4962      	ldr	r1, [pc, #392]	; (80016c0 <main+0x2d0>)
 8001538:	4860      	ldr	r0, [pc, #384]	; (80016bc <main+0x2cc>)
 800153a:	f7ff fa4f 	bl	80009dc <ILI9341_DrawText>
   for(uint8_t i = 0; i <= 5; i++)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3301      	adds	r3, #1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d980      	bls.n	800144c <main+0x5c>
   }

   // Horizontal Line (X, Y, Length, Color)
   ILI9341_FillScreen(WHITE);
 800154a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800154e:	f7ff fddf 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawHLine(50, 120, 200, NAVY);
 8001552:	230f      	movs	r3, #15
 8001554:	22c8      	movs	r2, #200	; 0xc8
 8001556:	2178      	movs	r1, #120	; 0x78
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f7ff fec1 	bl	80012e0 <ILI9341_DrawHLine>
   HAL_Delay(1000);
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	f000 fdfd 	bl	8002160 <HAL_Delay>

   // Vertical Line (X, Y, Length, Color)
   ILI9341_FillScreen(WHITE);
 8001566:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800156a:	f7ff fdd1 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 800156e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001572:	2296      	movs	r2, #150	; 0x96
 8001574:	2128      	movs	r1, #40	; 0x28
 8001576:	20a0      	movs	r0, #160	; 0xa0
 8001578:	f7ff fef6 	bl	8001368 <ILI9341_DrawVLine>
   HAL_Delay(1000);
 800157c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001580:	f000 fdee 	bl	8002160 <HAL_Delay>

   // Hollow Circle (Centre X, Centre Y, Radius, Color)
   ILI9341_FillScreen(WHITE);
 8001584:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001588:	f7ff fdc2 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 800158c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001590:	2250      	movs	r2, #80	; 0x50
 8001592:	2178      	movs	r1, #120	; 0x78
 8001594:	20a0      	movs	r0, #160	; 0xa0
 8001596:	f7fe ffed 	bl	8000574 <ILI9341_DrawHollowCircle>
   HAL_Delay(1000);
 800159a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159e:	f000 fddf 	bl	8002160 <HAL_Delay>

   // Filled Circle (Centre X, Centre Y, Radius, Color)
   ILI9341_FillScreen(WHITE);
 80015a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015a6:	f7ff fdb3 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 80015aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015ae:	2232      	movs	r2, #50	; 0x32
 80015b0:	2178      	movs	r1, #120	; 0x78
 80015b2:	20a0      	movs	r0, #160	; 0xa0
 80015b4:	f7ff f894 	bl	80006e0 <ILI9341_DrawFilledCircle>
   HAL_Delay(1000);
 80015b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015bc:	f000 fdd0 	bl	8002160 <HAL_Delay>

   // Filled Rectangle (Start X, Start Y, Length X, Length Y)
   ILI9341_FillScreen(WHITE);
 80015c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015c4:	f7ff fda4 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 80015c8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	238c      	movs	r3, #140	; 0x8c
 80015d0:	22dc      	movs	r2, #220	; 0xdc
 80015d2:	2132      	movs	r1, #50	; 0x32
 80015d4:	2032      	movs	r0, #50	; 0x32
 80015d6:	f7ff fe27 	bl	8001228 <ILI9341_DrawRectangle>
   HAL_Delay(1000);
 80015da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015de:	f000 fdbf 	bl	8002160 <HAL_Delay>

   // Hollow Rectangle (Start X, Start Y, End X, End Y)
   ILI9341_FillScreen(WHITE);
 80015e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015e6:	f7ff fd93 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 80015ea:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	23be      	movs	r3, #190	; 0xbe
 80015f2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80015f6:	2132      	movs	r1, #50	; 0x32
 80015f8:	2032      	movs	r0, #50	; 0x32
 80015fa:	f7ff f8f9 	bl	80007f0 <ILI9341_DrawHollowRectangleCoord>
   HAL_Delay(1000);
 80015fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001602:	f000 fdad 	bl	8002160 <HAL_Delay>

   // Simple Pixel Only (X, Y, Color)
   ILI9341_FillScreen(WHITE);
 8001606:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800160a:	f7ff fd81 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawPixel(100, 100, BLACK);
 800160e:	2200      	movs	r2, #0
 8001610:	2164      	movs	r1, #100	; 0x64
 8001612:	2064      	movs	r0, #100	; 0x64
 8001614:	f7ff fda2 	bl	800115c <ILI9341_DrawPixel>
   HAL_Delay(1000);
 8001618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161c:	f000 fda0 	bl	8002160 <HAL_Delay>

   // Simple Text writing (Text, Font, X, Y, Color, BackColor)
   // Available Fonts are FONT1, FONT2, FONT3 and FONT4
   ILI9341_FillScreen(WHITE);
 8001620:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001624:	f7ff fd74 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	236e      	movs	r3, #110	; 0x6e
 8001634:	225a      	movs	r2, #90	; 0x5a
 8001636:	491e      	ldr	r1, [pc, #120]	; (80016b0 <main+0x2c0>)
 8001638:	481e      	ldr	r0, [pc, #120]	; (80016b4 <main+0x2c4>)
 800163a:	f7ff f9cf 	bl	80009dc <ILI9341_DrawText>
//   HAL_Delay(10000);

   LCD_CS_PORT = LCD2_CS_PORT;
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <main+0x2d4>)
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <main+0x2d8>)
 8001642:	601a      	str	r2, [r3, #0]
   LCD_CS_PIN = LCD2_CS_PIN;
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <main+0x2dc>)
 8001646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164a:	801a      	strh	r2, [r3, #0]
   LCD_DC_PORT = LCD2_DC_PORT;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <main+0x2e0>)
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <main+0x2e4>)
 8001650:	601a      	str	r2, [r3, #0]
   LCD_DC_PIN = LCD2_DC_PIN;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <main+0x2e8>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	801a      	strh	r2, [r3, #0]
   LCD_RST_PORT = LCD2_RST_PORT;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <main+0x2ec>)
 800165c:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <main+0x2d8>)
 800165e:	601a      	str	r2, [r3, #0]
   LCD_RST_PIN = LCD2_RST_PIN;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <main+0x2f0>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	801a      	strh	r2, [r3, #0]
   ILI9341_Init();
 8001668:	f7ff fb4e 	bl	8000d08 <ILI9341_Init>
   ILI9341_FillScreen(WHITE);
 800166c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001670:	f7ff fd4e 	bl	8001110 <ILI9341_FillScreen>
   ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001674:	2003      	movs	r0, #3
 8001676:	f7ff fc51 	bl	8000f1c <ILI9341_SetRotation>
   ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 800167a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2300      	movs	r3, #0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	236e      	movs	r3, #110	; 0x6e
 8001686:	225a      	movs	r2, #90	; 0x5a
 8001688:	4909      	ldr	r1, [pc, #36]	; (80016b0 <main+0x2c0>)
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <main+0x2c4>)
 800168c:	f7ff f9a6 	bl	80009dc <ILI9341_DrawText>

  // start the timer
  HAL_TIM_Base_Start_IT(&htim1);
 8001690:	4814      	ldr	r0, [pc, #80]	; (80016e4 <main+0x2f4>)
 8001692:	f002 fc43 	bl	8003f1c <HAL_TIM_Base_Start_IT>

  counter = 0;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <main+0x2f8>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
  debounceLock = 0;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <main+0x2fc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  state = 1;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <main+0x300>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
  lastState = 1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <main+0x304>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <main+0x2be>
 80016b0:	08005a60 	.word	0x08005a60
 80016b4:	080050d8 	.word	0x080050d8
 80016b8:	080050e4 	.word	0x080050e4
 80016bc:	200001e0 	.word	0x200001e0
 80016c0:	080050fc 	.word	0x080050fc
 80016c4:	20000004 	.word	0x20000004
 80016c8:	40020000 	.word	0x40020000
 80016cc:	20000008 	.word	0x20000008
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	40020800 	.word	0x40020800
 80016d8:	20000010 	.word	0x20000010
 80016dc:	20000014 	.word	0x20000014
 80016e0:	20000018 	.word	0x20000018
 80016e4:	20000160 	.word	0x20000160
 80016e8:	200001a8 	.word	0x200001a8
 80016ec:	200001b8 	.word	0x200001b8
 80016f0:	200001bc 	.word	0x200001bc
 80016f4:	200001c0 	.word	0x200001c0

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	; 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2230      	movs	r2, #48	; 0x30
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f864 	bl	80047d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <SystemClock_Config+0xc8>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <SystemClock_Config+0xc8>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <SystemClock_Config+0xc8>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <SystemClock_Config+0xcc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <SystemClock_Config+0xcc>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <SystemClock_Config+0xcc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175c:	2310      	movs	r3, #16
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001760:	2302      	movs	r3, #2
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800176c:	2348      	movs	r3, #72	; 0x48
 800176e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001770:	2302      	movs	r3, #2
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001774:	2305      	movs	r3, #5
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fb7d 	bl	8002e7c <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001788:	f000 fae4 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178c:	230f      	movs	r3, #15
 800178e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001790:	2302      	movs	r3, #2
 8001792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2102      	movs	r1, #2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fddf 	bl	800336c <HAL_RCC_ClockConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017b4:	f000 face 	bl	8001d54 <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	; 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000

080017c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2208      	movs	r2, #8
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_SPI1_Init+0x64>)
 800181a:	f001 ff53 	bl	80036c4 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001824:	f000 fa96 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200000a8 	.word	0x200000a8
 8001830:	40013000 	.word	0x40013000

08001834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MX_TIM1_Init+0x98>)
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <MX_TIM1_Init+0x9c>)
 8001854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_TIM1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM1_Init+0x98>)
 8001864:	f242 720f 	movw	r2, #9999	; 0x270f
 8001868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_TIM1_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <MX_TIM1_Init+0x98>)
 800187e:	f002 fafd 	bl	8003e7c <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001888:	f000 fa64 	bl	8001d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM1_Init+0x98>)
 800189a:	f002 fcb7 	bl	800420c <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018a4:	f000 fa56 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM1_Init+0x98>)
 80018b6:	f002 fed3 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018c0:	f000 fa48 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000160 	.word	0x20000160
 80018d0:	40010000 	.word	0x40010000

080018d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_DMA_Init+0x3c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <MX_DMA_Init+0x3c>)
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_DMA_Init+0x3c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	203b      	movs	r0, #59	; 0x3b
 80018fc:	f000 fd2f 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001900:	203b      	movs	r0, #59	; 0x3b
 8001902:	f000 fd48 	bl	8002396 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <MX_GPIO_Init+0x158>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <MX_GPIO_Init+0x158>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <MX_GPIO_Init+0x158>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a39      	ldr	r2, [pc, #228]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <MX_GPIO_Init+0x158>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a32      	ldr	r2, [pc, #200]	; (8001a6c <MX_GPIO_Init+0x158>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <MX_GPIO_Init+0x158>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA4_Pin|PA5_Pin|PA6_Pin|PA7_Pin
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80019bc:	482c      	ldr	r0, [pc, #176]	; (8001a70 <MX_GPIO_Init+0x15c>)
 80019be:	f001 fa29 	bl	8002e14 <HAL_GPIO_WritePin>
                          |LCD2_CS_Pin|LCD2_RESET_Pin|LCD1_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE7_Pin|PE11_Pin|PE12_Pin|PE13_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 80019c8:	482a      	ldr	r0, [pc, #168]	; (8001a74 <MX_GPIO_Init+0x160>)
 80019ca:	f001 fa23 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80019d4:	4828      	ldr	r0, [pc, #160]	; (8001a78 <MX_GPIO_Init+0x164>)
 80019d6:	f001 fa1d 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0_Pin PC1_Pin PC2_Pin */
  GPIO_InitStruct.Pin = PC0_Pin|PC1_Pin|PC2_Pin;
 80019da:	2307      	movs	r3, #7
 80019dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4822      	ldr	r0, [pc, #136]	; (8001a78 <MX_GPIO_Init+0x164>)
 80019ee:	f001 f85d 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA1_Pin PA2_Pin PA3_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA1_Pin|PA2_Pin|PA3_Pin;
 80019f2:	230f      	movs	r3, #15
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	481a      	ldr	r0, [pc, #104]	; (8001a70 <MX_GPIO_Init+0x15c>)
 8001a06:	f001 f851 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4_Pin PA5_Pin PA6_Pin PA7_Pin
                           LCD2_CS_Pin LCD2_RESET_Pin LCD1_RESET_Pin */
  GPIO_InitStruct.Pin = PA4_Pin|PA5_Pin|PA6_Pin|PA7_Pin
 8001a0a:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8001a0e:	617b      	str	r3, [r7, #20]
                          |LCD2_CS_Pin|LCD2_RESET_Pin|LCD1_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_GPIO_Init+0x15c>)
 8001a24:	f001 f842 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7_Pin PE11_Pin PE12_Pin PE13_Pin */
  GPIO_InitStruct.Pin = PE7_Pin|PE11_Pin|PE12_Pin|PE13_Pin;
 8001a28:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_GPIO_Init+0x160>)
 8001a42:	f001 f833 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DC_Pin LCD1_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin;
 8001a46:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_GPIO_Init+0x164>)
 8001a60:	f001 f824 	bl	8002aac <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40020800 	.word	0x40020800

08001a7c <drive_column>:
uint8_t col;
char queue[2];
int qin;
int qout;

void drive_column(int c) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    GPIOC->BSRR = 0xf00000 | (1 << (c + 4));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	2201      	movs	r2, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	f443 0270 	orr.w	r2, r3, #15728640	; 0xf00000
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <drive_column+0x28>)
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <read_rows>:

int read_rows() {
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    return GPIOC->IDR & 0xf;
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <read_rows+0x18>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40020800 	.word	0x40020800

08001ac4 <push_queue>:

void push_queue(int n) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    n = (n & 0xff) | 0x80;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	607b      	str	r3, [r7, #4]
    queue[qin] = n;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <push_queue+0x38>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	b2d1      	uxtb	r1, r2
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <push_queue+0x3c>)
 8001ae0:	54d1      	strb	r1, [r2, r3]
    qin ^= 1;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <push_queue+0x38>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f083 0301 	eor.w	r3, r3, #1
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <push_queue+0x38>)
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200001dc 	.word	0x200001dc
 8001b00:	200001d8 	.word	0x200001d8

08001b04 <update_history>:
    queue[qout] = 0;
    qout ^= 1;
    return tmp;
}

void update_history(int c, int rows) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 4; i++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e029      	b.n	8001b68 <update_history+0x64>
        hist[4*c+i] = (hist[4*c+i]<<1) + ((rows>>i)&1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	009a      	lsls	r2, r3, #2
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <update_history+0x74>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	b2d9      	uxtb	r1, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	fa42 f303 	asr.w	r3, r2, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0098      	lsls	r0, r3, #2
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4403      	add	r3, r0
 8001b3c:	440a      	add	r2, r1
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <update_history+0x74>)
 8001b42:	54d1      	strb	r1, [r2, r3]
        if (hist[4*c+i] == 1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	009a      	lsls	r2, r3, #2
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <update_history+0x74>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <update_history+0x5e>
          push_queue(4*c+i);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ffb1 	bl	8001ac4 <push_queue>
    for(int i = 0; i < 4; i++) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	ddd2      	ble.n	8001b14 <update_history+0x10>
    }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200001c4 	.word	0x200001c4

08001b7c <TIM6_DAC_IRQHandler>:
    TIM6->DIER |= TIM_DIER_UIE;
    TIM6->CR1 |= TIM_CR1_CEN;
    NVIC->ISER[0] |= 1 << TIM6_DAC_IRQn;
}

void TIM6_DAC_IRQHandler(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
    TIM6->SR &= ~TIM_SR_UIF;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <TIM6_DAC_IRQHandler+0x48>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <TIM6_DAC_IRQHandler+0x48>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6113      	str	r3, [r2, #16]
    int rows = read_rows();
 8001b8e:	f7ff ff8b 	bl	8001aa8 <read_rows>
 8001b92:	6078      	str	r0, [r7, #4]
    update_history(col, rows);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <TIM6_DAC_IRQHandler+0x4c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ffb2 	bl	8001b04 <update_history>
    col = (col + 1) & 3;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <TIM6_DAC_IRQHandler+0x4c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <TIM6_DAC_IRQHandler+0x4c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
    drive_column(col);
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <TIM6_DAC_IRQHandler+0x4c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff60 	bl	8001a7c <drive_column>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40001000 	.word	0x40001000
 8001bc8:	200001d4 	.word	0x200001d4

08001bcc <HAL_TIM_PeriodElapsedCallback>:
    msg[7] = (msg[7] & ~0xff) | val;
}


// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

	// Check which version of the timer triggered this callback
	if (htim == &htim1) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f040 80a3 	bne.w	8001d24 <HAL_TIM_PeriodElapsedCallback+0x158>
		// get the state of PC0
		lastState = state;
 8001bde:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001be4:	6013      	str	r3, [r2, #0]
		state = HAL_GPIO_ReadPin(GPIOC, PC0_Pin);
 8001be6:	2101      	movs	r1, #1
 8001be8:	4853      	ldr	r0, [pc, #332]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bea:	f001 f8fb 	bl	8002de4 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001bf4:	601a      	str	r2, [r3, #0]

		// if the state is low (default is high), turn toggle the LED
		// debounce the button press
		if (state == 0 && state != lastState) {
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11b      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d015      	beq.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x6a>
			HAL_GPIO_TogglePin(GPIOE, PE7_Pin);
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	484b      	ldr	r0, [pc, #300]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001c0e:	f001 f91a 	bl	8002e46 <HAL_GPIO_TogglePin>
			debounceLock++;
 8001c12:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c1a:	6013      	str	r3, [r2, #0]

		    // turn off the rotate-LEDs
		  	HAL_GPIO_WritePin(GPIOE, PE11_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c22:	4846      	ldr	r0, [pc, #280]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001c24:	f001 f8f6 	bl	8002e14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, PE13_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2e:	4843      	ldr	r0, [pc, #268]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001c30:	f001 f8f0 	bl	8002e14 <HAL_GPIO_WritePin>
 8001c34:	e010      	b.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x8c>
		}
		else if (debounceLock >= 250) {
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2bf9      	cmp	r3, #249	; 0xf9
 8001c3c:	dd03      	ble.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x7a>
			debounceLock = 0;
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e008      	b.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x8c>
		}
		else if (debounceLock) {
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x8c>
			debounceLock++;
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c56:	6013      	str	r3, [r2, #0]
		}

		// rotary encoder logic
		currentStateCLK = HAL_GPIO_ReadPin(GPIOC, PC1_Pin);
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4837      	ldr	r0, [pc, #220]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c5c:	f001 f8c2 	bl	8002de4 <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c66:	601a      	str	r2, [r3, #0]

		// if CLK pin has changed, then the rotary encoder has turned
		if (currentStateCLK != lastStateCLK && currentStateCLK == 1) {
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d049      	beq.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001c74:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d145      	bne.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x13c>
			// if the DT state is different, then the encoder is rotating clockwise
			currentStateDT = HAL_GPIO_ReadPin(GPIOC, PC2_Pin);
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	482e      	ldr	r0, [pc, #184]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c80:	f001 f8b0 	bl	8002de4 <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001c8a:	601a      	str	r2, [r3, #0]
			if (currentStateDT != currentStateCLK) {
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d01b      	beq.n	8001cd0 <HAL_TIM_PeriodElapsedCallback+0x104>
				// turn on the left LED (PE11)
				HAL_GPIO_WritePin(GPIOE, PE11_Pin, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c9e:	4827      	ldr	r0, [pc, #156]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ca0:	f001 f8b8 	bl	8002e14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, PE12_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	4824      	ldr	r0, [pc, #144]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cac:	f001 f8b2 	bl	8002e14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, PE13_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cb8:	f001 f8ac 	bl	8002e14 <HAL_GPIO_WritePin>
				if (counter < 10) {
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	dc21      	bgt.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x13c>
					counter++;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01b      	b.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x13c>
				}
			}
			// otherwise, it is turning counter-clockwise
			else {
				// turn on the right LED (PE13)
				HAL_GPIO_WritePin(GPIOE, PE11_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd6:	4819      	ldr	r0, [pc, #100]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cd8:	f001 f89c 	bl	8002e14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, PE12_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce2:	4816      	ldr	r0, [pc, #88]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ce4:	f001 f896 	bl	8002e14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, PE13_Pin, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cee:	4813      	ldr	r0, [pc, #76]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001cf0:	f001 f890 	bl	8002e14 <HAL_GPIO_WritePin>
				if (counter > -10) {
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f113 0f09 	cmn.w	r3, #9
 8001cfc:	db04      	blt.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x13c>
					counter--;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d06:	6013      	str	r3, [r2, #0]
				}
			}
		}

		lastStateCLK = currentStateCLK;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d0e:	6013      	str	r3, [r2, #0]

		if(counter > 0) {
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	dd05      	ble.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x158>
			HAL_GPIO_WritePin(GPIOE, PE12_Pin, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d20:	f001 f878 	bl	8002e14 <HAL_GPIO_WritePin>
		}
	}


}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000160 	.word	0x20000160
 8001d30:	200001bc 	.word	0x200001bc
 8001d34:	200001c0 	.word	0x200001c0
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	200001b8 	.word	0x200001b8
 8001d44:	200001ac 	.word	0x200001ac
 8001d48:	200001b0 	.word	0x200001b0
 8001d4c:	200001b4 	.word	0x200001b4
 8001d50:	200001a8 	.word	0x200001a8

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <Error_Handler+0x8>
	...

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_MspInit+0x4c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_MspInit+0x4c>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x4c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_SPI_MspInit+0xe0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d159      	bne.n	8001e86 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_SPI_MspInit+0xe4>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a2e      	ldr	r2, [pc, #184]	; (8001e94 <HAL_SPI_MspInit+0xe4>)
 8001ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_SPI_MspInit+0xe4>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_SPI_MspInit+0xe4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_SPI_MspInit+0xe4>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_SPI_MspInit+0xe4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001e0a:	2328      	movs	r3, #40	; 0x28
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	481c      	ldr	r0, [pc, #112]	; (8001e98 <HAL_SPI_MspInit+0xe8>)
 8001e26:	f000 fe41 	bl	8002aac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_SPI_MspInit+0xf0>)
 8001e2e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e32:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e36:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e6a:	480c      	ldr	r0, [pc, #48]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e6c:	f000 faae 	bl	80023cc <HAL_DMA_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001e76:	f7ff ff6d 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e7e:	649a      	str	r2, [r3, #72]	; 0x48
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <HAL_SPI_MspInit+0xec>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40013000 	.word	0x40013000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	20000100 	.word	0x20000100
 8001ea0:	40026458 	.word	0x40026458

08001ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_TIM_Base_MspInit+0x48>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d115      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2019      	movs	r0, #25
 8001ed8:	f000 fa41 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001edc:	2019      	movs	r0, #25
 8001ede:	f000 fa5a 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f8ee 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ILI9341_FillScreen(RED);
 8001f4e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f52:	f7ff f8dd 	bl	8001110 <ILI9341_FillScreen>
	ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, RED);
 8001f56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	236e      	movs	r3, #110	; 0x6e
 8001f62:	225a      	movs	r2, #90	; 0x5a
 8001f64:	4904      	ldr	r1, [pc, #16]	; (8001f78 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001f68:	f7fe fd38 	bl	80009dc <ILI9341_DrawText>

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001f6e:	f002 f845 	bl	8003ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	08005a60 	.word	0x08005a60
 8001f7c:	080050f0 	.word	0x080050f0
 8001f80:	20000160 	.word	0x20000160

08001f84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <DMA2_Stream3_IRQHandler+0x10>)
 8001f8a:	f000 fb25 	bl	80025d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000100 	.word	0x20000100

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f002 fbda 	bl	8004780 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20020000 	.word	0x20020000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000200 	.word	0x20000200
 8002000:	20000218 	.word	0x20000218

08002004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002052:	f7ff ffd7 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f002 fb99 	bl	800478c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff f9c9 	bl	80013f0 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800206c:	08006c00 	.word	0x08006c00
  ldr r2, =_sbss
 8002070:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002074:	20000218 	.word	0x20000218

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_Init+0x40>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_Init+0x40>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_Init+0x40>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 f94f 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fe56 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f967 	bl	80023b2 <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f92f 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000001c 	.word	0x2000001c
 8002118:	20000024 	.word	0x20000024
 800211c:	20000020 	.word	0x20000020

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000024 	.word	0x20000024
 8002144:	20000204 	.word	0x20000204

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000204 	.word	0x20000204

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000024 	.word	0x20000024

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <__NVIC_EnableIRQ+0x38>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff29 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff3e 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff8e 	bl	800229c <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff31 	bl	800220c <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff feb6 	bl	8002148 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e099      	b.n	800251c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002408:	e00f      	b.n	800242a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800240a:	f7ff fe9d 	bl	8002148 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b05      	cmp	r3, #5
 8002416:	d908      	bls.n	800242a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2203      	movs	r2, #3
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e078      	b.n	800251c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e8      	bne.n	800240a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4b38      	ldr	r3, [pc, #224]	; (8002524 <HAL_DMA_Init+0x158>)
 8002444:	4013      	ands	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2b04      	cmp	r3, #4
 8002482:	d107      	bne.n	8002494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4313      	orrs	r3, r2
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f023 0307 	bic.w	r3, r3, #7
 80024aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d117      	bne.n	80024ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fa6f 	bl	80029b4 <DMA_CheckFifoParam>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ea:	2301      	movs	r3, #1
 80024ec:	e016      	b.n	800251c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa26 	bl	8002948 <DMA_CalcBaseAndBitshift>
 80024fc:	4603      	mov	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	223f      	movs	r2, #63	; 0x3f
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	f010803f 	.word	0xf010803f

08002528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_DMA_Start_IT+0x26>
 800254a:	2302      	movs	r3, #2
 800254c:	e040      	b.n	80025d0 <HAL_DMA_Start_IT+0xa8>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d12f      	bne.n	80025c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f9b8 	bl	80028ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	223f      	movs	r2, #63	; 0x3f
 8002582:	409a      	lsls	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0216 	orr.w	r2, r2, #22
 8002596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0208 	orr.w	r2, r2, #8
 80025ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e005      	b.n	80025ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e4:	4b8e      	ldr	r3, [pc, #568]	; (8002820 <HAL_DMA_IRQHandler+0x248>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a8e      	ldr	r2, [pc, #568]	; (8002824 <HAL_DMA_IRQHandler+0x24c>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2208      	movs	r2, #8
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01a      	beq.n	8002644 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2208      	movs	r2, #8
 8002632:	409a      	lsls	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2201      	movs	r2, #1
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	2201      	movs	r2, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f043 0202 	orr.w	r2, r3, #2
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2204      	movs	r2, #4
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2210      	movs	r2, #16
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d043      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03c      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	2210      	movs	r2, #16
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d024      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
 8002706:	e01f      	b.n	8002748 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
 8002718:	e016      	b.n	8002748 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0208 	bic.w	r2, r2, #8
 8002736:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2220      	movs	r2, #32
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 808f 	beq.w	8002878 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8087 	beq.w	8002878 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	2220      	movs	r2, #32
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b05      	cmp	r3, #5
 8002780:	d136      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0216 	bic.w	r2, r2, #22
 8002790:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x1da>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0208 	bic.w	r2, r2, #8
 80027c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	223f      	movs	r2, #63	; 0x3f
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
        }
        return;
 80027ee:	e079      	b.n	80028e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	2b00      	cmp	r3, #0
 8002812:	d031      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
 800281c:	e02c      	b.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
 800281e:	bf00      	nop
 8002820:	2000001c 	.word	0x2000001c
 8002824:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d023      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e01e      	b.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0210 	bic.w	r2, r2, #16
 8002856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2205      	movs	r2, #5
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d307      	bcc.n	80028c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f2      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x2cc>
 80028be:	e000      	b.n	80028c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	e000      	b.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e4:	bf00      	nop
    }
  }
}
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002908:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d108      	bne.n	800292c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800292a:	e007      	b.n	800293c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3b10      	subs	r3, #16
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <DMA_CalcBaseAndBitshift+0x64>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d909      	bls.n	800298a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	1d1a      	adds	r2, r3, #4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58
 8002988:	e007      	b.n	800299a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	aaaaaaab 	.word	0xaaaaaaab
 80029b0:	08006bb4 	.word	0x08006bb4

080029b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11f      	bne.n	8002a0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d856      	bhi.n	8002a82 <DMA_CheckFifoParam+0xce>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <DMA_CheckFifoParam+0x28>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029ff 	.word	0x080029ff
 80029e4:	080029ed 	.word	0x080029ed
 80029e8:	08002a83 	.word	0x08002a83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d046      	beq.n	8002a86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e043      	b.n	8002a86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a06:	d140      	bne.n	8002a8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0c:	e03d      	b.n	8002a8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	d121      	bne.n	8002a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d837      	bhi.n	8002a8e <DMA_CheckFifoParam+0xda>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <DMA_CheckFifoParam+0x70>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a3b 	.word	0x08002a3b
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002a4d 	.word	0x08002a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e030      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d025      	beq.n	8002a92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4a:	e022      	b.n	8002a92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a54:	d11f      	bne.n	8002a96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a5a:	e01c      	b.n	8002a96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d903      	bls.n	8002a6a <DMA_CheckFifoParam+0xb6>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d003      	beq.n	8002a70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a68:	e018      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6e:	e015      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00e      	beq.n	8002a9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e00b      	b.n	8002a9a <DMA_CheckFifoParam+0xe6>
      break;
 8002a82:	bf00      	nop
 8002a84:	e00a      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e008      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e006      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e004      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a92:	bf00      	nop
 8002a94:	e002      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e16b      	b.n	8002da0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 815a 	bne.w	8002d9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d005      	beq.n	8002afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d130      	bne.n	8002b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 0201 	and.w	r2, r3, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d017      	beq.n	8002b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d123      	bne.n	8002bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80b4 	beq.w	8002d9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <HAL_GPIO_Init+0x30c>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a5f      	ldr	r2, [pc, #380]	; (8002db8 <HAL_GPIO_Init+0x30c>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_GPIO_Init+0x30c>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_GPIO_Init+0x310>)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_GPIO_Init+0x314>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d02b      	beq.n	8002cd2 <HAL_GPIO_Init+0x226>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_GPIO_Init+0x318>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d025      	beq.n	8002cce <HAL_GPIO_Init+0x222>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_GPIO_Init+0x31c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01f      	beq.n	8002cca <HAL_GPIO_Init+0x21e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_GPIO_Init+0x320>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d019      	beq.n	8002cc6 <HAL_GPIO_Init+0x21a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4e      	ldr	r2, [pc, #312]	; (8002dd0 <HAL_GPIO_Init+0x324>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_GPIO_Init+0x216>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_GPIO_Init+0x328>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00d      	beq.n	8002cbe <HAL_GPIO_Init+0x212>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4c      	ldr	r2, [pc, #304]	; (8002dd8 <HAL_GPIO_Init+0x32c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <HAL_GPIO_Init+0x20e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <HAL_GPIO_Init+0x330>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_GPIO_Init+0x20a>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e00e      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cba:	2306      	movs	r3, #6
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x228>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <HAL_GPIO_Init+0x310>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d16:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d1c:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d40:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <HAL_GPIO_Init+0x334>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	f67f ae90 	bls.w	8002ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40021800 	.word	0x40021800
 8002ddc:	40021c00 	.word	0x40021c00
 8002de0:	40013c00 	.word	0x40013c00

08002de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e001      	b.n	8002e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e58:	887a      	ldrh	r2, [r7, #2]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	400b      	ands	r3, r1
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	619a      	str	r2, [r3, #24]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7ff f908 	bl	8002148 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7ff f904 	bl	8002148 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff f8f4 	bl	8002148 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7ff f8f0 	bl	8002148 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f92:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7ff f8a9 	bl	8002148 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7ff f8a5 	bl	8002148 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7ff f888 	bl	8002148 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303c:	f7ff f884 	bl	8002148 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7ff f868 	bl	8002148 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307c:	f7ff f864 	bl	8002148 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7ff f851 	bl	8002148 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030aa:	f7ff f84d 	bl	8002148 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	; (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	; (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	; (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7ff f80d 	bl	8002148 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7ff f809 	bl	8002148 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe ffce 	bl	8002148 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe ffca 	bl	8002148 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fe ffb8 	bl	8002148 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe ffb4 	bl	8002148 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe ff88 	bl	8002148 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe ff84 	bl	8002148 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe ff5d 	bl	8002148 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe ff59 	bl	8002148 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe ff46 	bl	8002148 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe ff42 	bl	8002148 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	; (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	; (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fe fe74 	bl	8002148 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe fe70 	bl	8002148 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	; (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fdd4 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	08006ba4 	.word	0x08006ba4
 8003530:	2000001c 	.word	0x2000001c
 8003534:	20000020 	.word	0x20000020

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b090      	sub	sp, #64	; 0x40
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
 8003544:	2300      	movs	r3, #0
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	2300      	movs	r3, #0
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80a1 	bhi.w	80036a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_GetSysClockFreq+0x184>)
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003570:	e09b      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003576:	e098      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b4f      	ldr	r3, [pc, #316]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	627a      	str	r2, [r7, #36]	; 0x24
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035a0:	2100      	movs	r1, #0
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a4:	fb03 f201 	mul.w	r2, r3, r1
 80035a8:	2300      	movs	r3, #0
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b2:	fba0 1202 	umull	r1, r2, r0, r2
 80035b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b8:	460a      	mov	r2, r1
 80035ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80035bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035be:	4413      	add	r3, r2
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	2200      	movs	r2, #0
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	61fa      	str	r2, [r7, #28]
 80035ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035d2:	f7fc fe4d 	bl	8000270 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4613      	mov	r3, r2
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035de:	e053      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	617a      	str	r2, [r7, #20]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035f2:	f04f 0b00 	mov.w	fp, #0
 80035f6:	4652      	mov	r2, sl
 80035f8:	465b      	mov	r3, fp
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	0159      	lsls	r1, r3, #5
 8003604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003608:	0150      	lsls	r0, r2, #5
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	ebb2 080a 	subs.w	r8, r2, sl
 8003612:	eb63 090b 	sbc.w	r9, r3, fp
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800362a:	ebb2 0408 	subs.w	r4, r2, r8
 800362e:	eb63 0509 	sbc.w	r5, r3, r9
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	00eb      	lsls	r3, r5, #3
 800363c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003640:	00e2      	lsls	r2, r4, #3
 8003642:	4614      	mov	r4, r2
 8003644:	461d      	mov	r5, r3
 8003646:	eb14 030a 	adds.w	r3, r4, sl
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	eb45 030b 	adc.w	r3, r5, fp
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800365e:	4629      	mov	r1, r5
 8003660:	028b      	lsls	r3, r1, #10
 8003662:	4621      	mov	r1, r4
 8003664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003668:	4621      	mov	r1, r4
 800366a:	028a      	lsls	r2, r1, #10
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	2200      	movs	r2, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	60fa      	str	r2, [r7, #12]
 8003678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800367c:	f7fc fdf8 	bl	8000270 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a2:	e002      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetSysClockFreq+0x184>)
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3740      	adds	r7, #64	; 0x40
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	017d7840 	.word	0x017d7840

080036c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07b      	b.n	80037ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d009      	beq.n	80036fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
 80036ee:	e005      	b.n	80036fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe fb4a 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	ea42 0103 	orr.w	r1, r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0104 	and.w	r1, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f003 0210 	and.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b088      	sub	sp, #32
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_SPI_Transmit+0x22>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e126      	b.n	8003a46 <HAL_SPI_Transmit+0x270>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003800:	f7fe fca2 	bl	8002148 <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d002      	beq.n	800381c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
    goto error;
 800381a:	e10b      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Transmit+0x52>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800382c:	e102      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2203      	movs	r2, #3
 8003832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003874:	d10f      	bne.n	8003896 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d007      	beq.n	80038b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	d14b      	bne.n	8003956 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Transmit+0xf6>
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d13e      	bne.n	800394a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f0:	e02b      	b.n	800394a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d112      	bne.n	8003926 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	86da      	strh	r2, [r3, #54]	; 0x36
 8003924:	e011      	b.n	800394a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003926:	f7fe fc0f 	bl	8002148 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d803      	bhi.n	800393e <HAL_SPI_Transmit+0x168>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d102      	bne.n	8003944 <HAL_SPI_Transmit+0x16e>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003948:	e074      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ce      	bne.n	80038f2 <HAL_SPI_Transmit+0x11c>
 8003954:	e04c      	b.n	80039f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x18e>
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d140      	bne.n	80039e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	7812      	ldrb	r2, [r2, #0]
 8003970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800398a:	e02c      	b.n	80039e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d113      	bne.n	80039c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c0:	e011      	b.n	80039e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c2:	f7fe fbc1 	bl	8002148 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d803      	bhi.n	80039da <HAL_SPI_Transmit+0x204>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Transmit+0x20a>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039e4:	e026      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1cd      	bne.n	800398c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f9ff 	bl	8003df8 <SPI_EndRxTxTransaction>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e000      	b.n	8003a34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_SPI_Transmit_DMA+0x20>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e09b      	b.n	8003ba8 <HAL_SPI_Transmit_DMA+0x158>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a88:	e089      	b.n	8003b9e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Transmit_DMA+0x46>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a9a:	e080      	b.n	8003b9e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae2:	d10f      	bne.n	8003b04 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_SPI_Transmit_DMA+0x160>)
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <HAL_SPI_Transmit_DMA+0x164>)
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <HAL_SPI_Transmit_DMA+0x168>)
 8003b1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	2200      	movs	r2, #0
 8003b22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b3c:	f7fe fcf4 	bl	8002528 <HAL_DMA_Start_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00c      	beq.n	8003b60 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003b5e:	e01e      	b.n	8003b9e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d007      	beq.n	8003b7e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0220 	orr.w	r2, r2, #32
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0202 	orr.w	r2, r2, #2
 8003b9c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08003c8d 	.word	0x08003c8d
 8003bb4:	08003be5 	.word	0x08003be5
 8003bb8:	08003ca9 	.word	0x08003ca9

08003bbc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf2:	f7fe faa9 	bl	8002148 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c06:	d03b      	beq.n	8003c80 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0220 	bic.w	r2, r2, #32
 8003c16:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0202 	bic.w	r2, r2, #2
 8003c26:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	2164      	movs	r1, #100	; 0x64
 8003c2c:	6978      	ldr	r0, [r7, #20]
 8003c2e:	f000 f8e3 	bl	8003df8 <SPI_EndRxTxTransaction>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	f7ff ffa9 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c7e:	e002      	b.n	8003c86 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003c80:	6978      	ldr	r0, [r7, #20]
 8003c82:	f7fc fef5 	bl	8000a70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff ff8e 	bl	8003bbc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0203 	bic.w	r2, r2, #3
 8003cc4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff ff78 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cf8:	f7fe fa26 	bl	8002148 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d08:	f7fe fa1e 	bl	8002148 <HAL_GetTick>
 8003d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	015b      	lsls	r3, r3, #5
 8003d14:	0d1b      	lsrs	r3, r3, #20
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1e:	e054      	b.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d050      	beq.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d28:	f7fe fa0e 	bl	8002148 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d902      	bls.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d13d      	bne.n	8003dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d56:	d111      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d60:	d004      	beq.n	8003d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d107      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d10f      	bne.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e017      	b.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d19b      	bne.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2000001c 	.word	0x2000001c

08003df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <SPI_EndRxTxTransaction+0x7c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <SPI_EndRxTxTransaction+0x80>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0d5b      	lsrs	r3, r3, #21
 8003e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d112      	bne.n	8003e4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ff5a 	bl	8003ce8 <SPI_WaitFlagStateUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00f      	b.n	8003e6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d0f2      	beq.n	8003e4a <SPI_EndRxTxTransaction+0x52>
 8003e64:	e000      	b.n	8003e68 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e66:	bf00      	nop
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000001c 	.word	0x2000001c
 8003e78:	165e9f81 	.word	0x165e9f81

08003e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e041      	b.n	8003f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd fffe 	bl	8001ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f000 fa96 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e04e      	b.n	8003fd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d022      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d01d      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d018      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <HAL_TIM_Base_Start_IT+0xd0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00e      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d009      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x80>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d111      	bne.n	8003fc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d010      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbe:	e007      	b.n	8003fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40010400 	.word	0x40010400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40001800 	.word	0x40001800

08003ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0202 	mvn.w	r2, #2
 8004028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9b5 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9a7 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9b8 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b04      	cmp	r3, #4
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0204 	mvn.w	r2, #4
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f98b 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f97d 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f98e 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0208 	mvn.w	r2, #8
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f961 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f953 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f964 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b10      	cmp	r3, #16
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0210 	mvn.w	r2, #16
 8004124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2208      	movs	r2, #8
 800412a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f937 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f929 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f93a 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0201 	mvn.w	r2, #1
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd fd26 	bl	8001bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fae0 	bl	800476c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8ff 	bl	80043d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0220 	mvn.w	r2, #32
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 faaa 	bl	8004758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x1c>
 8004224:	2302      	movs	r3, #2
 8004226:	e0b4      	b.n	8004392 <HAL_TIM_ConfigClockSource+0x186>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d03e      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	f200 8087 	bhi.w	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	f000 8086 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x172>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d87f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d01a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xa6>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d87b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d050      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x11a>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d877      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d03c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xfa>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d873      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d058      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x13a>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d86f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d064      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d867      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d05a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	e062      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 f9ad 	bl	8004620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	609a      	str	r2, [r3, #8]
      break;
 80042de:	e04f      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 f996 	bl	8004620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 f90a 	bl	800452c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f963 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004324:	e02c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 f929 	bl	800458a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f953 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004344:	e01c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 f8ea 	bl	800452c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f943 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004364:	e00c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 f93a 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004376:	e003      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e000      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800437e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <TIM_Base_SetConfig+0x114>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <TIM_Base_SetConfig+0x118>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <TIM_Base_SetConfig+0x11c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a3b      	ldr	r2, [pc, #236]	; (800450c <TIM_Base_SetConfig+0x120>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a3a      	ldr	r2, [pc, #232]	; (8004510 <TIM_Base_SetConfig+0x124>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <TIM_Base_SetConfig+0x114>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d027      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <TIM_Base_SetConfig+0x118>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d023      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <TIM_Base_SetConfig+0x11c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2a      	ldr	r2, [pc, #168]	; (800450c <TIM_Base_SetConfig+0x120>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a29      	ldr	r2, [pc, #164]	; (8004510 <TIM_Base_SetConfig+0x124>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d017      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <TIM_Base_SetConfig+0x128>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <TIM_Base_SetConfig+0x12c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <TIM_Base_SetConfig+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a25      	ldr	r2, [pc, #148]	; (8004520 <TIM_Base_SetConfig+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a24      	ldr	r2, [pc, #144]	; (8004524 <TIM_Base_SetConfig+0x138>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a23      	ldr	r2, [pc, #140]	; (8004528 <TIM_Base_SetConfig+0x13c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <TIM_Base_SetConfig+0x114>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <TIM_Base_SetConfig+0x124>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40010400 	.word	0x40010400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800
 8004520:	40001800 	.word	0x40001800
 8004524:	40001c00 	.word	0x40001c00
 8004528:	40002000 	.word	0x40002000

0800452c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 030a 	bic.w	r3, r3, #10
 8004568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0210 	bic.w	r2, r3, #16
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	031b      	lsls	r3, r3, #12
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	f043 0307 	orr.w	r3, r3, #7
 800460c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	431a      	orrs	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004674:	2302      	movs	r3, #2
 8004676:	e05a      	b.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a21      	ldr	r2, [pc, #132]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c4:	d01d      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10c      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4313      	orrs	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40001800 	.word	0x40001800

08004758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <__errno>:
 8004780:	4b01      	ldr	r3, [pc, #4]	; (8004788 <__errno+0x8>)
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000028 	.word	0x20000028

0800478c <__libc_init_array>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	4d0d      	ldr	r5, [pc, #52]	; (80047c4 <__libc_init_array+0x38>)
 8004790:	4c0d      	ldr	r4, [pc, #52]	; (80047c8 <__libc_init_array+0x3c>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	2600      	movs	r6, #0
 8004798:	42a6      	cmp	r6, r4
 800479a:	d109      	bne.n	80047b0 <__libc_init_array+0x24>
 800479c:	4d0b      	ldr	r5, [pc, #44]	; (80047cc <__libc_init_array+0x40>)
 800479e:	4c0c      	ldr	r4, [pc, #48]	; (80047d0 <__libc_init_array+0x44>)
 80047a0:	f000 fc8e 	bl	80050c0 <_init>
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	2600      	movs	r6, #0
 80047aa:	42a6      	cmp	r6, r4
 80047ac:	d105      	bne.n	80047ba <__libc_init_array+0x2e>
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
 80047b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b4:	4798      	blx	r3
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7ee      	b.n	8004798 <__libc_init_array+0xc>
 80047ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80047be:	4798      	blx	r3
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7f2      	b.n	80047aa <__libc_init_array+0x1e>
 80047c4:	08006bf8 	.word	0x08006bf8
 80047c8:	08006bf8 	.word	0x08006bf8
 80047cc:	08006bf8 	.word	0x08006bf8
 80047d0:	08006bfc 	.word	0x08006bfc

080047d4 <memset>:
 80047d4:	4402      	add	r2, r0
 80047d6:	4603      	mov	r3, r0
 80047d8:	4293      	cmp	r3, r2
 80047da:	d100      	bne.n	80047de <memset+0xa>
 80047dc:	4770      	bx	lr
 80047de:	f803 1b01 	strb.w	r1, [r3], #1
 80047e2:	e7f9      	b.n	80047d8 <memset+0x4>

080047e4 <siprintf>:
 80047e4:	b40e      	push	{r1, r2, r3}
 80047e6:	b500      	push	{lr}
 80047e8:	b09c      	sub	sp, #112	; 0x70
 80047ea:	ab1d      	add	r3, sp, #116	; 0x74
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	9006      	str	r0, [sp, #24]
 80047f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047f4:	4809      	ldr	r0, [pc, #36]	; (800481c <siprintf+0x38>)
 80047f6:	9107      	str	r1, [sp, #28]
 80047f8:	9104      	str	r1, [sp, #16]
 80047fa:	4909      	ldr	r1, [pc, #36]	; (8004820 <siprintf+0x3c>)
 80047fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	a902      	add	r1, sp, #8
 8004808:	f000 f868 	bl	80048dc <_svfiprintf_r>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	b01c      	add	sp, #112	; 0x70
 8004814:	f85d eb04 	ldr.w	lr, [sp], #4
 8004818:	b003      	add	sp, #12
 800481a:	4770      	bx	lr
 800481c:	20000028 	.word	0x20000028
 8004820:	ffff0208 	.word	0xffff0208

08004824 <__ssputs_r>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	688e      	ldr	r6, [r1, #8]
 800482a:	429e      	cmp	r6, r3
 800482c:	4682      	mov	sl, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4690      	mov	r8, r2
 8004832:	461f      	mov	r7, r3
 8004834:	d838      	bhi.n	80048a8 <__ssputs_r+0x84>
 8004836:	898a      	ldrh	r2, [r1, #12]
 8004838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800483c:	d032      	beq.n	80048a4 <__ssputs_r+0x80>
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	6909      	ldr	r1, [r1, #16]
 8004842:	eba5 0901 	sub.w	r9, r5, r1
 8004846:	6965      	ldr	r5, [r4, #20]
 8004848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800484c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004850:	3301      	adds	r3, #1
 8004852:	444b      	add	r3, r9
 8004854:	106d      	asrs	r5, r5, #1
 8004856:	429d      	cmp	r5, r3
 8004858:	bf38      	it	cc
 800485a:	461d      	movcc	r5, r3
 800485c:	0553      	lsls	r3, r2, #21
 800485e:	d531      	bpl.n	80048c4 <__ssputs_r+0xa0>
 8004860:	4629      	mov	r1, r5
 8004862:	f000 fb63 	bl	8004f2c <_malloc_r>
 8004866:	4606      	mov	r6, r0
 8004868:	b950      	cbnz	r0, 8004880 <__ssputs_r+0x5c>
 800486a:	230c      	movs	r3, #12
 800486c:	f8ca 3000 	str.w	r3, [sl]
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	6921      	ldr	r1, [r4, #16]
 8004882:	464a      	mov	r2, r9
 8004884:	f000 fabe 	bl	8004e04 <memcpy>
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	6126      	str	r6, [r4, #16]
 8004896:	6165      	str	r5, [r4, #20]
 8004898:	444e      	add	r6, r9
 800489a:	eba5 0509 	sub.w	r5, r5, r9
 800489e:	6026      	str	r6, [r4, #0]
 80048a0:	60a5      	str	r5, [r4, #8]
 80048a2:	463e      	mov	r6, r7
 80048a4:	42be      	cmp	r6, r7
 80048a6:	d900      	bls.n	80048aa <__ssputs_r+0x86>
 80048a8:	463e      	mov	r6, r7
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	4632      	mov	r2, r6
 80048ae:	4641      	mov	r1, r8
 80048b0:	f000 fab6 	bl	8004e20 <memmove>
 80048b4:	68a3      	ldr	r3, [r4, #8]
 80048b6:	1b9b      	subs	r3, r3, r6
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	4433      	add	r3, r6
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	2000      	movs	r0, #0
 80048c2:	e7db      	b.n	800487c <__ssputs_r+0x58>
 80048c4:	462a      	mov	r2, r5
 80048c6:	f000 fba5 	bl	8005014 <_realloc_r>
 80048ca:	4606      	mov	r6, r0
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1e1      	bne.n	8004894 <__ssputs_r+0x70>
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	4650      	mov	r0, sl
 80048d4:	f000 fabe 	bl	8004e54 <_free_r>
 80048d8:	e7c7      	b.n	800486a <__ssputs_r+0x46>
	...

080048dc <_svfiprintf_r>:
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	4698      	mov	r8, r3
 80048e2:	898b      	ldrh	r3, [r1, #12]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	b09d      	sub	sp, #116	; 0x74
 80048e8:	4607      	mov	r7, r0
 80048ea:	460d      	mov	r5, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	d50e      	bpl.n	800490e <_svfiprintf_r+0x32>
 80048f0:	690b      	ldr	r3, [r1, #16]
 80048f2:	b963      	cbnz	r3, 800490e <_svfiprintf_r+0x32>
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	f000 fb19 	bl	8004f2c <_malloc_r>
 80048fa:	6028      	str	r0, [r5, #0]
 80048fc:	6128      	str	r0, [r5, #16]
 80048fe:	b920      	cbnz	r0, 800490a <_svfiprintf_r+0x2e>
 8004900:	230c      	movs	r3, #12
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e0d1      	b.n	8004aae <_svfiprintf_r+0x1d2>
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	616b      	str	r3, [r5, #20]
 800490e:	2300      	movs	r3, #0
 8004910:	9309      	str	r3, [sp, #36]	; 0x24
 8004912:	2320      	movs	r3, #32
 8004914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004918:	f8cd 800c 	str.w	r8, [sp, #12]
 800491c:	2330      	movs	r3, #48	; 0x30
 800491e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ac8 <_svfiprintf_r+0x1ec>
 8004922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004926:	f04f 0901 	mov.w	r9, #1
 800492a:	4623      	mov	r3, r4
 800492c:	469a      	mov	sl, r3
 800492e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004932:	b10a      	cbz	r2, 8004938 <_svfiprintf_r+0x5c>
 8004934:	2a25      	cmp	r2, #37	; 0x25
 8004936:	d1f9      	bne.n	800492c <_svfiprintf_r+0x50>
 8004938:	ebba 0b04 	subs.w	fp, sl, r4
 800493c:	d00b      	beq.n	8004956 <_svfiprintf_r+0x7a>
 800493e:	465b      	mov	r3, fp
 8004940:	4622      	mov	r2, r4
 8004942:	4629      	mov	r1, r5
 8004944:	4638      	mov	r0, r7
 8004946:	f7ff ff6d 	bl	8004824 <__ssputs_r>
 800494a:	3001      	adds	r0, #1
 800494c:	f000 80aa 	beq.w	8004aa4 <_svfiprintf_r+0x1c8>
 8004950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004952:	445a      	add	r2, fp
 8004954:	9209      	str	r2, [sp, #36]	; 0x24
 8004956:	f89a 3000 	ldrb.w	r3, [sl]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a2 	beq.w	8004aa4 <_svfiprintf_r+0x1c8>
 8004960:	2300      	movs	r3, #0
 8004962:	f04f 32ff 	mov.w	r2, #4294967295
 8004966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800496a:	f10a 0a01 	add.w	sl, sl, #1
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	9307      	str	r3, [sp, #28]
 8004972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004976:	931a      	str	r3, [sp, #104]	; 0x68
 8004978:	4654      	mov	r4, sl
 800497a:	2205      	movs	r2, #5
 800497c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004980:	4851      	ldr	r0, [pc, #324]	; (8004ac8 <_svfiprintf_r+0x1ec>)
 8004982:	f7fb fc25 	bl	80001d0 <memchr>
 8004986:	9a04      	ldr	r2, [sp, #16]
 8004988:	b9d8      	cbnz	r0, 80049c2 <_svfiprintf_r+0xe6>
 800498a:	06d0      	lsls	r0, r2, #27
 800498c:	bf44      	itt	mi
 800498e:	2320      	movmi	r3, #32
 8004990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004994:	0711      	lsls	r1, r2, #28
 8004996:	bf44      	itt	mi
 8004998:	232b      	movmi	r3, #43	; 0x2b
 800499a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499e:	f89a 3000 	ldrb.w	r3, [sl]
 80049a2:	2b2a      	cmp	r3, #42	; 0x2a
 80049a4:	d015      	beq.n	80049d2 <_svfiprintf_r+0xf6>
 80049a6:	9a07      	ldr	r2, [sp, #28]
 80049a8:	4654      	mov	r4, sl
 80049aa:	2000      	movs	r0, #0
 80049ac:	f04f 0c0a 	mov.w	ip, #10
 80049b0:	4621      	mov	r1, r4
 80049b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b6:	3b30      	subs	r3, #48	; 0x30
 80049b8:	2b09      	cmp	r3, #9
 80049ba:	d94e      	bls.n	8004a5a <_svfiprintf_r+0x17e>
 80049bc:	b1b0      	cbz	r0, 80049ec <_svfiprintf_r+0x110>
 80049be:	9207      	str	r2, [sp, #28]
 80049c0:	e014      	b.n	80049ec <_svfiprintf_r+0x110>
 80049c2:	eba0 0308 	sub.w	r3, r0, r8
 80049c6:	fa09 f303 	lsl.w	r3, r9, r3
 80049ca:	4313      	orrs	r3, r2
 80049cc:	9304      	str	r3, [sp, #16]
 80049ce:	46a2      	mov	sl, r4
 80049d0:	e7d2      	b.n	8004978 <_svfiprintf_r+0x9c>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	1d19      	adds	r1, r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	9103      	str	r1, [sp, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bfbb      	ittet	lt
 80049de:	425b      	neglt	r3, r3
 80049e0:	f042 0202 	orrlt.w	r2, r2, #2
 80049e4:	9307      	strge	r3, [sp, #28]
 80049e6:	9307      	strlt	r3, [sp, #28]
 80049e8:	bfb8      	it	lt
 80049ea:	9204      	strlt	r2, [sp, #16]
 80049ec:	7823      	ldrb	r3, [r4, #0]
 80049ee:	2b2e      	cmp	r3, #46	; 0x2e
 80049f0:	d10c      	bne.n	8004a0c <_svfiprintf_r+0x130>
 80049f2:	7863      	ldrb	r3, [r4, #1]
 80049f4:	2b2a      	cmp	r3, #42	; 0x2a
 80049f6:	d135      	bne.n	8004a64 <_svfiprintf_r+0x188>
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	9203      	str	r2, [sp, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bfb8      	it	lt
 8004a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a08:	3402      	adds	r4, #2
 8004a0a:	9305      	str	r3, [sp, #20]
 8004a0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ad8 <_svfiprintf_r+0x1fc>
 8004a10:	7821      	ldrb	r1, [r4, #0]
 8004a12:	2203      	movs	r2, #3
 8004a14:	4650      	mov	r0, sl
 8004a16:	f7fb fbdb 	bl	80001d0 <memchr>
 8004a1a:	b140      	cbz	r0, 8004a2e <_svfiprintf_r+0x152>
 8004a1c:	2340      	movs	r3, #64	; 0x40
 8004a1e:	eba0 000a 	sub.w	r0, r0, sl
 8004a22:	fa03 f000 	lsl.w	r0, r3, r0
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	4303      	orrs	r3, r0
 8004a2a:	3401      	adds	r4, #1
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a32:	4826      	ldr	r0, [pc, #152]	; (8004acc <_svfiprintf_r+0x1f0>)
 8004a34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a38:	2206      	movs	r2, #6
 8004a3a:	f7fb fbc9 	bl	80001d0 <memchr>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d038      	beq.n	8004ab4 <_svfiprintf_r+0x1d8>
 8004a42:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <_svfiprintf_r+0x1f4>)
 8004a44:	bb1b      	cbnz	r3, 8004a8e <_svfiprintf_r+0x1b2>
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	3308      	adds	r3, #8
 8004a50:	9303      	str	r3, [sp, #12]
 8004a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a54:	4433      	add	r3, r6
 8004a56:	9309      	str	r3, [sp, #36]	; 0x24
 8004a58:	e767      	b.n	800492a <_svfiprintf_r+0x4e>
 8004a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a5e:	460c      	mov	r4, r1
 8004a60:	2001      	movs	r0, #1
 8004a62:	e7a5      	b.n	80049b0 <_svfiprintf_r+0xd4>
 8004a64:	2300      	movs	r3, #0
 8004a66:	3401      	adds	r4, #1
 8004a68:	9305      	str	r3, [sp, #20]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4620      	mov	r0, r4
 8004a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a76:	3a30      	subs	r2, #48	; 0x30
 8004a78:	2a09      	cmp	r2, #9
 8004a7a:	d903      	bls.n	8004a84 <_svfiprintf_r+0x1a8>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0c5      	beq.n	8004a0c <_svfiprintf_r+0x130>
 8004a80:	9105      	str	r1, [sp, #20]
 8004a82:	e7c3      	b.n	8004a0c <_svfiprintf_r+0x130>
 8004a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a88:	4604      	mov	r4, r0
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e7f0      	b.n	8004a70 <_svfiprintf_r+0x194>
 8004a8e:	ab03      	add	r3, sp, #12
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	462a      	mov	r2, r5
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <_svfiprintf_r+0x1f8>)
 8004a96:	a904      	add	r1, sp, #16
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f3af 8000 	nop.w
 8004a9e:	1c42      	adds	r2, r0, #1
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	d1d6      	bne.n	8004a52 <_svfiprintf_r+0x176>
 8004aa4:	89ab      	ldrh	r3, [r5, #12]
 8004aa6:	065b      	lsls	r3, r3, #25
 8004aa8:	f53f af2c 	bmi.w	8004904 <_svfiprintf_r+0x28>
 8004aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aae:	b01d      	add	sp, #116	; 0x74
 8004ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab4:	ab03      	add	r3, sp, #12
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	462a      	mov	r2, r5
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <_svfiprintf_r+0x1f8>)
 8004abc:	a904      	add	r1, sp, #16
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f000 f87a 	bl	8004bb8 <_printf_i>
 8004ac4:	e7eb      	b.n	8004a9e <_svfiprintf_r+0x1c2>
 8004ac6:	bf00      	nop
 8004ac8:	08006bbc 	.word	0x08006bbc
 8004acc:	08006bc6 	.word	0x08006bc6
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	08004825 	.word	0x08004825
 8004ad8:	08006bc2 	.word	0x08006bc2

08004adc <_printf_common>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	4699      	mov	r9, r3
 8004ae4:	688a      	ldr	r2, [r1, #8]
 8004ae6:	690b      	ldr	r3, [r1, #16]
 8004ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	bfb8      	it	lt
 8004af0:	4613      	movlt	r3, r2
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af8:	4607      	mov	r7, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	b10a      	cbz	r2, 8004b02 <_printf_common+0x26>
 8004afe:	3301      	adds	r3, #1
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	0699      	lsls	r1, r3, #26
 8004b06:	bf42      	ittt	mi
 8004b08:	6833      	ldrmi	r3, [r6, #0]
 8004b0a:	3302      	addmi	r3, #2
 8004b0c:	6033      	strmi	r3, [r6, #0]
 8004b0e:	6825      	ldr	r5, [r4, #0]
 8004b10:	f015 0506 	ands.w	r5, r5, #6
 8004b14:	d106      	bne.n	8004b24 <_printf_common+0x48>
 8004b16:	f104 0a19 	add.w	sl, r4, #25
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	6832      	ldr	r2, [r6, #0]
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	dc26      	bgt.n	8004b72 <_printf_common+0x96>
 8004b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b28:	1e13      	subs	r3, r2, #0
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	bf18      	it	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	0692      	lsls	r2, r2, #26
 8004b32:	d42b      	bmi.n	8004b8c <_printf_common+0xb0>
 8004b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b38:	4649      	mov	r1, r9
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d01e      	beq.n	8004b80 <_printf_common+0xa4>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	68e5      	ldr	r5, [r4, #12]
 8004b46:	6832      	ldr	r2, [r6, #0]
 8004b48:	f003 0306 	and.w	r3, r3, #6
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	bf08      	it	eq
 8004b50:	1aad      	subeq	r5, r5, r2
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	bf0c      	ite	eq
 8004b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b5c:	2500      	movne	r5, #0
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bfc4      	itt	gt
 8004b62:	1a9b      	subgt	r3, r3, r2
 8004b64:	18ed      	addgt	r5, r5, r3
 8004b66:	2600      	movs	r6, #0
 8004b68:	341a      	adds	r4, #26
 8004b6a:	42b5      	cmp	r5, r6
 8004b6c:	d11a      	bne.n	8004ba4 <_printf_common+0xc8>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e008      	b.n	8004b84 <_printf_common+0xa8>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4652      	mov	r2, sl
 8004b76:	4649      	mov	r1, r9
 8004b78:	4638      	mov	r0, r7
 8004b7a:	47c0      	blx	r8
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d103      	bne.n	8004b88 <_printf_common+0xac>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	3501      	adds	r5, #1
 8004b8a:	e7c6      	b.n	8004b1a <_printf_common+0x3e>
 8004b8c:	18e1      	adds	r1, r4, r3
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	2030      	movs	r0, #48	; 0x30
 8004b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b96:	4422      	add	r2, r4
 8004b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	e7c7      	b.n	8004b34 <_printf_common+0x58>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c0      	blx	r8
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0e6      	beq.n	8004b80 <_printf_common+0xa4>
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7d9      	b.n	8004b6a <_printf_common+0x8e>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	7e0f      	ldrb	r7, [r1, #24]
 8004bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bc0:	2f78      	cmp	r7, #120	; 0x78
 8004bc2:	4691      	mov	r9, r2
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	469a      	mov	sl, r3
 8004bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bce:	d807      	bhi.n	8004be0 <_printf_i+0x28>
 8004bd0:	2f62      	cmp	r7, #98	; 0x62
 8004bd2:	d80a      	bhi.n	8004bea <_printf_i+0x32>
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	f000 80d8 	beq.w	8004d8a <_printf_i+0x1d2>
 8004bda:	2f58      	cmp	r7, #88	; 0x58
 8004bdc:	f000 80a3 	beq.w	8004d26 <_printf_i+0x16e>
 8004be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be8:	e03a      	b.n	8004c60 <_printf_i+0xa8>
 8004bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bee:	2b15      	cmp	r3, #21
 8004bf0:	d8f6      	bhi.n	8004be0 <_printf_i+0x28>
 8004bf2:	a101      	add	r1, pc, #4	; (adr r1, 8004bf8 <_printf_i+0x40>)
 8004bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004be1 	.word	0x08004be1
 8004c04:	08004be1 	.word	0x08004be1
 8004c08:	08004be1 	.word	0x08004be1
 8004c0c:	08004be1 	.word	0x08004be1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004be1 	.word	0x08004be1
 8004c18:	08004be1 	.word	0x08004be1
 8004c1c:	08004be1 	.word	0x08004be1
 8004c20:	08004be1 	.word	0x08004be1
 8004c24:	08004d71 	.word	0x08004d71
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004d53 	.word	0x08004d53
 8004c30:	08004be1 	.word	0x08004be1
 8004c34:	08004be1 	.word	0x08004be1
 8004c38:	08004d93 	.word	0x08004d93
 8004c3c:	08004be1 	.word	0x08004be1
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004be1 	.word	0x08004be1
 8004c48:	08004be1 	.word	0x08004be1
 8004c4c:	08004d5b 	.word	0x08004d5b
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	602a      	str	r2, [r5, #0]
 8004c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0a3      	b.n	8004dac <_printf_i+0x1f4>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	6829      	ldr	r1, [r5, #0]
 8004c68:	0606      	lsls	r6, r0, #24
 8004c6a:	f101 0304 	add.w	r3, r1, #4
 8004c6e:	d50a      	bpl.n	8004c86 <_printf_i+0xce>
 8004c70:	680e      	ldr	r6, [r1, #0]
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	2e00      	cmp	r6, #0
 8004c76:	da03      	bge.n	8004c80 <_printf_i+0xc8>
 8004c78:	232d      	movs	r3, #45	; 0x2d
 8004c7a:	4276      	negs	r6, r6
 8004c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c80:	485e      	ldr	r0, [pc, #376]	; (8004dfc <_printf_i+0x244>)
 8004c82:	230a      	movs	r3, #10
 8004c84:	e019      	b.n	8004cba <_printf_i+0x102>
 8004c86:	680e      	ldr	r6, [r1, #0]
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c8e:	bf18      	it	ne
 8004c90:	b236      	sxthne	r6, r6
 8004c92:	e7ef      	b.n	8004c74 <_printf_i+0xbc>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	1d19      	adds	r1, r3, #4
 8004c9a:	6029      	str	r1, [r5, #0]
 8004c9c:	0601      	lsls	r1, r0, #24
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0xec>
 8004ca0:	681e      	ldr	r6, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0xf2>
 8004ca4:	0646      	lsls	r6, r0, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0xe8>
 8004ca8:	881e      	ldrh	r6, [r3, #0]
 8004caa:	4854      	ldr	r0, [pc, #336]	; (8004dfc <_printf_i+0x244>)
 8004cac:	2f6f      	cmp	r7, #111	; 0x6f
 8004cae:	bf0c      	ite	eq
 8004cb0:	2308      	moveq	r3, #8
 8004cb2:	230a      	movne	r3, #10
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cba:	6865      	ldr	r5, [r4, #4]
 8004cbc:	60a5      	str	r5, [r4, #8]
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	bfa2      	ittt	ge
 8004cc2:	6821      	ldrge	r1, [r4, #0]
 8004cc4:	f021 0104 	bicge.w	r1, r1, #4
 8004cc8:	6021      	strge	r1, [r4, #0]
 8004cca:	b90e      	cbnz	r6, 8004cd0 <_printf_i+0x118>
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	d04d      	beq.n	8004d6c <_printf_i+0x1b4>
 8004cd0:	4615      	mov	r5, r2
 8004cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8004cda:	5dc7      	ldrb	r7, [r0, r7]
 8004cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ce0:	4637      	mov	r7, r6
 8004ce2:	42bb      	cmp	r3, r7
 8004ce4:	460e      	mov	r6, r1
 8004ce6:	d9f4      	bls.n	8004cd2 <_printf_i+0x11a>
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d10b      	bne.n	8004d04 <_printf_i+0x14c>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	07de      	lsls	r6, r3, #31
 8004cf0:	d508      	bpl.n	8004d04 <_printf_i+0x14c>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	6861      	ldr	r1, [r4, #4]
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	bfde      	ittt	le
 8004cfa:	2330      	movle	r3, #48	; 0x30
 8004cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d04:	1b52      	subs	r2, r2, r5
 8004d06:	6122      	str	r2, [r4, #16]
 8004d08:	f8cd a000 	str.w	sl, [sp]
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	aa03      	add	r2, sp, #12
 8004d10:	4621      	mov	r1, r4
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fee2 	bl	8004adc <_printf_common>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d14c      	bne.n	8004db6 <_printf_i+0x1fe>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	b004      	add	sp, #16
 8004d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d26:	4835      	ldr	r0, [pc, #212]	; (8004dfc <_printf_i+0x244>)
 8004d28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d2c:	6829      	ldr	r1, [r5, #0]
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d34:	6029      	str	r1, [r5, #0]
 8004d36:	061d      	lsls	r5, r3, #24
 8004d38:	d514      	bpl.n	8004d64 <_printf_i+0x1ac>
 8004d3a:	07df      	lsls	r7, r3, #31
 8004d3c:	bf44      	itt	mi
 8004d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d42:	6023      	strmi	r3, [r4, #0]
 8004d44:	b91e      	cbnz	r6, 8004d4e <_printf_i+0x196>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f023 0320 	bic.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	2310      	movs	r3, #16
 8004d50:	e7b0      	b.n	8004cb4 <_printf_i+0xfc>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f043 0320 	orr.w	r3, r3, #32
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	2378      	movs	r3, #120	; 0x78
 8004d5c:	4828      	ldr	r0, [pc, #160]	; (8004e00 <_printf_i+0x248>)
 8004d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d62:	e7e3      	b.n	8004d2c <_printf_i+0x174>
 8004d64:	0659      	lsls	r1, r3, #25
 8004d66:	bf48      	it	mi
 8004d68:	b2b6      	uxthmi	r6, r6
 8004d6a:	e7e6      	b.n	8004d3a <_printf_i+0x182>
 8004d6c:	4615      	mov	r5, r2
 8004d6e:	e7bb      	b.n	8004ce8 <_printf_i+0x130>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	6826      	ldr	r6, [r4, #0]
 8004d74:	6961      	ldr	r1, [r4, #20]
 8004d76:	1d18      	adds	r0, r3, #4
 8004d78:	6028      	str	r0, [r5, #0]
 8004d7a:	0635      	lsls	r5, r6, #24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	d501      	bpl.n	8004d84 <_printf_i+0x1cc>
 8004d80:	6019      	str	r1, [r3, #0]
 8004d82:	e002      	b.n	8004d8a <_printf_i+0x1d2>
 8004d84:	0670      	lsls	r0, r6, #25
 8004d86:	d5fb      	bpl.n	8004d80 <_printf_i+0x1c8>
 8004d88:	8019      	strh	r1, [r3, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6123      	str	r3, [r4, #16]
 8004d8e:	4615      	mov	r5, r2
 8004d90:	e7ba      	b.n	8004d08 <_printf_i+0x150>
 8004d92:	682b      	ldr	r3, [r5, #0]
 8004d94:	1d1a      	adds	r2, r3, #4
 8004d96:	602a      	str	r2, [r5, #0]
 8004d98:	681d      	ldr	r5, [r3, #0]
 8004d9a:	6862      	ldr	r2, [r4, #4]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f7fb fa16 	bl	80001d0 <memchr>
 8004da4:	b108      	cbz	r0, 8004daa <_printf_i+0x1f2>
 8004da6:	1b40      	subs	r0, r0, r5
 8004da8:	6060      	str	r0, [r4, #4]
 8004daa:	6863      	ldr	r3, [r4, #4]
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	2300      	movs	r3, #0
 8004db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db4:	e7a8      	b.n	8004d08 <_printf_i+0x150>
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	462a      	mov	r2, r5
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	47d0      	blx	sl
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d0ab      	beq.n	8004d1c <_printf_i+0x164>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	079b      	lsls	r3, r3, #30
 8004dc8:	d413      	bmi.n	8004df2 <_printf_i+0x23a>
 8004dca:	68e0      	ldr	r0, [r4, #12]
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	bfb8      	it	lt
 8004dd2:	4618      	movlt	r0, r3
 8004dd4:	e7a4      	b.n	8004d20 <_printf_i+0x168>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	47d0      	blx	sl
 8004de0:	3001      	adds	r0, #1
 8004de2:	d09b      	beq.n	8004d1c <_printf_i+0x164>
 8004de4:	3501      	adds	r5, #1
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	9903      	ldr	r1, [sp, #12]
 8004dea:	1a5b      	subs	r3, r3, r1
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	dcf2      	bgt.n	8004dd6 <_printf_i+0x21e>
 8004df0:	e7eb      	b.n	8004dca <_printf_i+0x212>
 8004df2:	2500      	movs	r5, #0
 8004df4:	f104 0619 	add.w	r6, r4, #25
 8004df8:	e7f5      	b.n	8004de6 <_printf_i+0x22e>
 8004dfa:	bf00      	nop
 8004dfc:	08006bcd 	.word	0x08006bcd
 8004e00:	08006bde 	.word	0x08006bde

08004e04 <memcpy>:
 8004e04:	440a      	add	r2, r1
 8004e06:	4291      	cmp	r1, r2
 8004e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	4770      	bx	lr
 8004e10:	b510      	push	{r4, lr}
 8004e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	d1f9      	bne.n	8004e12 <memcpy+0xe>
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <memmove>:
 8004e20:	4288      	cmp	r0, r1
 8004e22:	b510      	push	{r4, lr}
 8004e24:	eb01 0402 	add.w	r4, r1, r2
 8004e28:	d902      	bls.n	8004e30 <memmove+0x10>
 8004e2a:	4284      	cmp	r4, r0
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	d807      	bhi.n	8004e40 <memmove+0x20>
 8004e30:	1e43      	subs	r3, r0, #1
 8004e32:	42a1      	cmp	r1, r4
 8004e34:	d008      	beq.n	8004e48 <memmove+0x28>
 8004e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e3e:	e7f8      	b.n	8004e32 <memmove+0x12>
 8004e40:	4402      	add	r2, r0
 8004e42:	4601      	mov	r1, r0
 8004e44:	428a      	cmp	r2, r1
 8004e46:	d100      	bne.n	8004e4a <memmove+0x2a>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e52:	e7f7      	b.n	8004e44 <memmove+0x24>

08004e54 <_free_r>:
 8004e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d044      	beq.n	8004ee4 <_free_r+0x90>
 8004e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5e:	9001      	str	r0, [sp, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f1a1 0404 	sub.w	r4, r1, #4
 8004e66:	bfb8      	it	lt
 8004e68:	18e4      	addlt	r4, r4, r3
 8004e6a:	f000 f913 	bl	8005094 <__malloc_lock>
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <_free_r+0x94>)
 8004e70:	9801      	ldr	r0, [sp, #4]
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	b933      	cbnz	r3, 8004e84 <_free_r+0x30>
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	6014      	str	r4, [r2, #0]
 8004e7a:	b003      	add	sp, #12
 8004e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e80:	f000 b90e 	b.w	80050a0 <__malloc_unlock>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d908      	bls.n	8004e9a <_free_r+0x46>
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1949      	addeq	r1, r1, r5
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	e7ed      	b.n	8004e76 <_free_r+0x22>
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b10b      	cbz	r3, 8004ea4 <_free_r+0x50>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d9fa      	bls.n	8004e9a <_free_r+0x46>
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	1855      	adds	r5, r2, r1
 8004ea8:	42a5      	cmp	r5, r4
 8004eaa:	d10b      	bne.n	8004ec4 <_free_r+0x70>
 8004eac:	6824      	ldr	r4, [r4, #0]
 8004eae:	4421      	add	r1, r4
 8004eb0:	1854      	adds	r4, r2, r1
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	d1e0      	bne.n	8004e7a <_free_r+0x26>
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6053      	str	r3, [r2, #4]
 8004ebe:	4421      	add	r1, r4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	e7da      	b.n	8004e7a <_free_r+0x26>
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x78>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	6003      	str	r3, [r0, #0]
 8004eca:	e7d6      	b.n	8004e7a <_free_r+0x26>
 8004ecc:	6825      	ldr	r5, [r4, #0]
 8004ece:	1961      	adds	r1, r4, r5
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf04      	itt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	bf04      	itt	eq
 8004edc:	1949      	addeq	r1, r1, r5
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	6054      	str	r4, [r2, #4]
 8004ee2:	e7ca      	b.n	8004e7a <_free_r+0x26>
 8004ee4:	b003      	add	sp, #12
 8004ee6:	bd30      	pop	{r4, r5, pc}
 8004ee8:	20000208 	.word	0x20000208

08004eec <sbrk_aligned>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4e0e      	ldr	r6, [pc, #56]	; (8004f28 <sbrk_aligned+0x3c>)
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	6831      	ldr	r1, [r6, #0]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	b911      	cbnz	r1, 8004efe <sbrk_aligned+0x12>
 8004ef8:	f000 f8bc 	bl	8005074 <_sbrk_r>
 8004efc:	6030      	str	r0, [r6, #0]
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 f8b7 	bl	8005074 <_sbrk_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d00a      	beq.n	8004f20 <sbrk_aligned+0x34>
 8004f0a:	1cc4      	adds	r4, r0, #3
 8004f0c:	f024 0403 	bic.w	r4, r4, #3
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d007      	beq.n	8004f24 <sbrk_aligned+0x38>
 8004f14:	1a21      	subs	r1, r4, r0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f8ac 	bl	8005074 <_sbrk_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d101      	bne.n	8004f24 <sbrk_aligned+0x38>
 8004f20:	f04f 34ff 	mov.w	r4, #4294967295
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	2000020c 	.word	0x2000020c

08004f2c <_malloc_r>:
 8004f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f30:	1ccd      	adds	r5, r1, #3
 8004f32:	f025 0503 	bic.w	r5, r5, #3
 8004f36:	3508      	adds	r5, #8
 8004f38:	2d0c      	cmp	r5, #12
 8004f3a:	bf38      	it	cc
 8004f3c:	250c      	movcc	r5, #12
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	4607      	mov	r7, r0
 8004f42:	db01      	blt.n	8004f48 <_malloc_r+0x1c>
 8004f44:	42a9      	cmp	r1, r5
 8004f46:	d905      	bls.n	8004f54 <_malloc_r+0x28>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	4e2e      	ldr	r6, [pc, #184]	; (8005010 <_malloc_r+0xe4>)
 8004f56:	f000 f89d 	bl	8005094 <__malloc_lock>
 8004f5a:	6833      	ldr	r3, [r6, #0]
 8004f5c:	461c      	mov	r4, r3
 8004f5e:	bb34      	cbnz	r4, 8004fae <_malloc_r+0x82>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff ffc2 	bl	8004eec <sbrk_aligned>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	d14d      	bne.n	800500a <_malloc_r+0xde>
 8004f6e:	6834      	ldr	r4, [r6, #0]
 8004f70:	4626      	mov	r6, r4
 8004f72:	2e00      	cmp	r6, #0
 8004f74:	d140      	bne.n	8004ff8 <_malloc_r+0xcc>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	eb04 0803 	add.w	r8, r4, r3
 8004f80:	f000 f878 	bl	8005074 <_sbrk_r>
 8004f84:	4580      	cmp	r8, r0
 8004f86:	d13a      	bne.n	8004ffe <_malloc_r+0xd2>
 8004f88:	6821      	ldr	r1, [r4, #0]
 8004f8a:	3503      	adds	r5, #3
 8004f8c:	1a6d      	subs	r5, r5, r1
 8004f8e:	f025 0503 	bic.w	r5, r5, #3
 8004f92:	3508      	adds	r5, #8
 8004f94:	2d0c      	cmp	r5, #12
 8004f96:	bf38      	it	cc
 8004f98:	250c      	movcc	r5, #12
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff ffa5 	bl	8004eec <sbrk_aligned>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d02b      	beq.n	8004ffe <_malloc_r+0xd2>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	442b      	add	r3, r5
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	e00e      	b.n	8004fcc <_malloc_r+0xa0>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	1b52      	subs	r2, r2, r5
 8004fb2:	d41e      	bmi.n	8004ff2 <_malloc_r+0xc6>
 8004fb4:	2a0b      	cmp	r2, #11
 8004fb6:	d916      	bls.n	8004fe6 <_malloc_r+0xba>
 8004fb8:	1961      	adds	r1, r4, r5
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	6025      	str	r5, [r4, #0]
 8004fbe:	bf18      	it	ne
 8004fc0:	6059      	strne	r1, [r3, #4]
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	bf08      	it	eq
 8004fc6:	6031      	streq	r1, [r6, #0]
 8004fc8:	5162      	str	r2, [r4, r5]
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f104 060b 	add.w	r6, r4, #11
 8004fd2:	f000 f865 	bl	80050a0 <__malloc_unlock>
 8004fd6:	f026 0607 	bic.w	r6, r6, #7
 8004fda:	1d23      	adds	r3, r4, #4
 8004fdc:	1af2      	subs	r2, r6, r3
 8004fde:	d0b6      	beq.n	8004f4e <_malloc_r+0x22>
 8004fe0:	1b9b      	subs	r3, r3, r6
 8004fe2:	50a3      	str	r3, [r4, r2]
 8004fe4:	e7b3      	b.n	8004f4e <_malloc_r+0x22>
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	bf0c      	ite	eq
 8004fec:	6032      	streq	r2, [r6, #0]
 8004fee:	605a      	strne	r2, [r3, #4]
 8004ff0:	e7ec      	b.n	8004fcc <_malloc_r+0xa0>
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	6864      	ldr	r4, [r4, #4]
 8004ff6:	e7b2      	b.n	8004f5e <_malloc_r+0x32>
 8004ff8:	4634      	mov	r4, r6
 8004ffa:	6876      	ldr	r6, [r6, #4]
 8004ffc:	e7b9      	b.n	8004f72 <_malloc_r+0x46>
 8004ffe:	230c      	movs	r3, #12
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	4638      	mov	r0, r7
 8005004:	f000 f84c 	bl	80050a0 <__malloc_unlock>
 8005008:	e7a1      	b.n	8004f4e <_malloc_r+0x22>
 800500a:	6025      	str	r5, [r4, #0]
 800500c:	e7de      	b.n	8004fcc <_malloc_r+0xa0>
 800500e:	bf00      	nop
 8005010:	20000208 	.word	0x20000208

08005014 <_realloc_r>:
 8005014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005018:	4680      	mov	r8, r0
 800501a:	4614      	mov	r4, r2
 800501c:	460e      	mov	r6, r1
 800501e:	b921      	cbnz	r1, 800502a <_realloc_r+0x16>
 8005020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	4611      	mov	r1, r2
 8005026:	f7ff bf81 	b.w	8004f2c <_malloc_r>
 800502a:	b92a      	cbnz	r2, 8005038 <_realloc_r+0x24>
 800502c:	f7ff ff12 	bl	8004e54 <_free_r>
 8005030:	4625      	mov	r5, r4
 8005032:	4628      	mov	r0, r5
 8005034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005038:	f000 f838 	bl	80050ac <_malloc_usable_size_r>
 800503c:	4284      	cmp	r4, r0
 800503e:	4607      	mov	r7, r0
 8005040:	d802      	bhi.n	8005048 <_realloc_r+0x34>
 8005042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005046:	d812      	bhi.n	800506e <_realloc_r+0x5a>
 8005048:	4621      	mov	r1, r4
 800504a:	4640      	mov	r0, r8
 800504c:	f7ff ff6e 	bl	8004f2c <_malloc_r>
 8005050:	4605      	mov	r5, r0
 8005052:	2800      	cmp	r0, #0
 8005054:	d0ed      	beq.n	8005032 <_realloc_r+0x1e>
 8005056:	42bc      	cmp	r4, r7
 8005058:	4622      	mov	r2, r4
 800505a:	4631      	mov	r1, r6
 800505c:	bf28      	it	cs
 800505e:	463a      	movcs	r2, r7
 8005060:	f7ff fed0 	bl	8004e04 <memcpy>
 8005064:	4631      	mov	r1, r6
 8005066:	4640      	mov	r0, r8
 8005068:	f7ff fef4 	bl	8004e54 <_free_r>
 800506c:	e7e1      	b.n	8005032 <_realloc_r+0x1e>
 800506e:	4635      	mov	r5, r6
 8005070:	e7df      	b.n	8005032 <_realloc_r+0x1e>
	...

08005074 <_sbrk_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4d06      	ldr	r5, [pc, #24]	; (8005090 <_sbrk_r+0x1c>)
 8005078:	2300      	movs	r3, #0
 800507a:	4604      	mov	r4, r0
 800507c:	4608      	mov	r0, r1
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	f7fc ff8a 	bl	8001f98 <_sbrk>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_sbrk_r+0x1a>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b103      	cbz	r3, 800508e <_sbrk_r+0x1a>
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	20000210 	.word	0x20000210

08005094 <__malloc_lock>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__malloc_lock+0x8>)
 8005096:	f000 b811 	b.w	80050bc <__retarget_lock_acquire_recursive>
 800509a:	bf00      	nop
 800509c:	20000214 	.word	0x20000214

080050a0 <__malloc_unlock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_unlock+0x8>)
 80050a2:	f000 b80c 	b.w	80050be <__retarget_lock_release_recursive>
 80050a6:	bf00      	nop
 80050a8:	20000214 	.word	0x20000214

080050ac <_malloc_usable_size_r>:
 80050ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b0:	1f18      	subs	r0, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bfbc      	itt	lt
 80050b6:	580b      	ldrlt	r3, [r1, r0]
 80050b8:	18c0      	addlt	r0, r0, r3
 80050ba:	4770      	bx	lr

080050bc <__retarget_lock_acquire_recursive>:
 80050bc:	4770      	bx	lr

080050be <__retarget_lock_release_recursive>:
 80050be:	4770      	bx	lr

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
