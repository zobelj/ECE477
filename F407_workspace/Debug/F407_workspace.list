
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007530  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007718  08007718  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007720  08007720  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007724  08007724  00017724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08007728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000ce4  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d17  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d66  00000000  00000000  00032e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00035bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  00036c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023777  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a39  00000000  00000000  0005b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc76c  00000000  00000000  0006ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b47c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004480  00000000  00000000  0013b4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076a0 	.word	0x080076a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	080076a0 	.word	0x080076a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <set_rows>:
{
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 return(ch);
}
void set_rows() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  // update row value
  row = (row + 1) % 4;
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <set_rows+0x98>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	425a      	negs	r2, r3
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	f002 0203 	and.w	r2, r2, #3
 80004e0:	bf58      	it	pl
 80004e2:	4253      	negpl	r3, r2
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <set_rows+0x98>)
 80004e6:	6013      	str	r3, [r2, #0]
  // set all rows to high
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2101      	movs	r1, #1
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <set_rows+0x9c>)
 80004ee:	f000 ff77 	bl	80013e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <set_rows+0x9c>)
 80004f8:	f000 ff72 	bl	80013e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4819      	ldr	r0, [pc, #100]	; (8000568 <set_rows+0x9c>)
 8000502:	f000 ff6d 	bl	80013e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4817      	ldr	r0, [pc, #92]	; (8000568 <set_rows+0x9c>)
 800050c:	f000 ff68 	bl	80013e0 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low
  switch(row) {
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <set_rows+0x98>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d823      	bhi.n	8000560 <set_rows+0x94>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <set_rows+0x54>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	0800053d 	.word	0x0800053d
 8000528:	08000549 	.word	0x08000549
 800052c:	08000555 	.word	0x08000555
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <set_rows+0x9c>)
 8000536:	f000 ff53 	bl	80013e0 <HAL_GPIO_WritePin>
      break;
 800053a:	e011      	b.n	8000560 <set_rows+0x94>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <set_rows+0x9c>)
 8000542:	f000 ff4d 	bl	80013e0 <HAL_GPIO_WritePin>
      break;
 8000546:	e00b      	b.n	8000560 <set_rows+0x94>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2104      	movs	r1, #4
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <set_rows+0x9c>)
 800054e:	f000 ff47 	bl	80013e0 <HAL_GPIO_WritePin>
      break;
 8000552:	e005      	b.n	8000560 <set_rows+0x94>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <set_rows+0x9c>)
 800055a:	f000 ff41 	bl	80013e0 <HAL_GPIO_WritePin>
      break;
 800055e:	bf00      	nop
  }

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200001d0 	.word	0x200001d0
 8000568:	40020c00 	.word	0x40020c00

0800056c <get_cols>:

int get_cols() {
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  return ~(GPIOD->IDR >> 4) & 0xF;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <get_cols+0x1c>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	43db      	mvns	r3, r3
 8000578:	f003 030f 	and.w	r3, r3, #15
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00

0800058c <add_keypress>:

void add_keypress(char key) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if(keycodeNum <= KEYCODE_LIMIT) {
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <add_keypress+0x84>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b06      	cmp	r3, #6
 800059c:	dc31      	bgt.n	8000602 <add_keypress+0x76>
	  switch(keycodeNum) {
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <add_keypress+0x84>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	d827      	bhi.n	80005f8 <add_keypress+0x6c>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <add_keypress+0x24>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	080005d1 	.word	0x080005d1
 80005b8:	080005d9 	.word	0x080005d9
 80005bc:	080005e1 	.word	0x080005e1
 80005c0:	080005e9 	.word	0x080005e9
 80005c4:	080005f1 	.word	0x080005f1
		case 1:
		  keyboardhid.KEYCODE1 = key;
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <add_keypress+0x88>)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	7093      	strb	r3, [r2, #2]
		  break;
 80005ce:	e013      	b.n	80005f8 <add_keypress+0x6c>
		case 2:
		  keyboardhid.KEYCODE2 = key;
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <add_keypress+0x88>)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	70d3      	strb	r3, [r2, #3]
		  break;
 80005d6:	e00f      	b.n	80005f8 <add_keypress+0x6c>
		case 3:
		  keyboardhid.KEYCODE3 = key;
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <add_keypress+0x88>)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	7113      	strb	r3, [r2, #4]
		  break;
 80005de:	e00b      	b.n	80005f8 <add_keypress+0x6c>
		case 4:
		  keyboardhid.KEYCODE4 = key;
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <add_keypress+0x88>)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	7153      	strb	r3, [r2, #5]
		  break;
 80005e6:	e007      	b.n	80005f8 <add_keypress+0x6c>
		case 5:
		  keyboardhid.KEYCODE5 = key;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <add_keypress+0x88>)
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	7193      	strb	r3, [r2, #6]
		  break;
 80005ee:	e003      	b.n	80005f8 <add_keypress+0x6c>
		case 6:
		  keyboardhid.KEYCODE6 = key;
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <add_keypress+0x88>)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	71d3      	strb	r3, [r2, #7]
		  break;
 80005f6:	bf00      	nop
	  }
	  keycodeNum++;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <add_keypress+0x84>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <add_keypress+0x84>)
 8000600:	6013      	str	r3, [r2, #0]
	}

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200001cc 	.word	0x200001cc
 8000614:	200001e8 	.word	0x200001e8

08000618 <record_keys>:

void record_keys() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 800061e:	2208      	movs	r2, #8
 8000620:	2100      	movs	r1, #0
 8000622:	4818      	ldr	r0, [pc, #96]	; (8000684 <record_keys+0x6c>)
 8000624:	f007 f834 	bl	8007690 <memset>
  keycodeNum = 1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <record_keys+0x70>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]

  // add currently pressed keys to the keyboardhid keypresses
  for(int i = 0; i < 5; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e01e      	b.n	8000672 <record_keys+0x5a>
    for(int j = 0; j < 4; j++) {
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	e015      	b.n	8000666 <record_keys+0x4e>
      if(keypresses[i][j] == 1) {
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <record_keys+0x74>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	441a      	add	r2, r3
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d109      	bne.n	8000660 <record_keys+0x48>
    	  add_keypress(keys[i][j]);
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <record_keys+0x78>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	441a      	add	r2, r3
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff96 	bl	800058c <add_keypress>
    for(int j = 0; j < 4; j++) {
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b03      	cmp	r3, #3
 800066a:	dde6      	ble.n	800063a <record_keys+0x22>
  for(int i = 0; i < 5; i++) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b04      	cmp	r3, #4
 8000676:	dddd      	ble.n	8000634 <record_keys+0x1c>
      }
    }
  }

}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200001e8 	.word	0x200001e8
 8000688:	200001cc 	.word	0x200001cc
 800068c:	200001d4 	.word	0x200001d4
 8000690:	080076f4 	.word	0x080076f4

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fb46 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f828 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f912 	bl	80008c8 <MX_GPIO_Init>
  MX_TIM4_Init();
 80006a4:	f000 f88e 	bl	80007c4 <MX_TIM4_Init>
  MX_TIM6_Init();
 80006a8:	f000 f8d8 	bl	800085c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80006ac:	f006 fb86 	bl	8006dbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // start the timer
  HAL_TIM_Base_Start_IT(&htim4);
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <main+0x44>)
 80006b2:	f002 fdd3 	bl	800325c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80006b6:	4809      	ldr	r0, [pc, #36]	; (80006dc <main+0x48>)
 80006b8:	f002 fdd0 	bl	800325c <HAL_TIM_Base_Start_IT>

  // init counter variables
  row = 0;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <main+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  keycodeNum = 1;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <main+0x50>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
  lastStateCLK = 0;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <main+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
  rotLock = 0;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <main+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x40>
 80006d6:	bf00      	nop
 80006d8:	2000012c 	.word	0x2000012c
 80006dc:	20000174 	.word	0x20000174
 80006e0:	200001d0 	.word	0x200001d0
 80006e4:	200001cc 	.word	0x200001cc
 80006e8:	200001c0 	.word	0x200001c0
 80006ec:	200001c8 	.word	0x200001c8

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 ffc6 	bl	8007690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000764:	23a8      	movs	r3, #168	; 0xa8
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076c:	2307      	movs	r3, #7
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f8b1 	bl	80028dc <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f9da 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2105      	movs	r1, #5
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fb12 	bl	8002dcc <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ae:	f000 f9c3 	bl	8000b38 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM4_Init+0x90>)
 80007e2:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <MX_TIM4_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_TIM4_Init+0x90>)
 80007e8:	229f      	movs	r2, #159	; 0x9f
 80007ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_TIM4_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_TIM4_Init+0x90>)
 80007f4:	2263      	movs	r2, #99	; 0x63
 80007f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_TIM4_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM4_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_TIM4_Init+0x90>)
 8000806:	f002 fcd9 	bl	80031bc <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000810:	f000 f992 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_TIM4_Init+0x90>)
 8000822:	f002 fe93 	bl	800354c <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800082c:	f000 f984 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_TIM4_Init+0x90>)
 800083e:	f003 f8af 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000848:	f000 f976 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000012c 	.word	0x2000012c
 8000858:	40000800 	.word	0x40000800

0800085c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM6_Init+0x64>)
 800086c:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_TIM6_Init+0x68>)
 800086e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_TIM6_Init+0x64>)
 8000872:	f240 623f 	movw	r2, #1599	; 0x63f
 8000876:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_TIM6_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_TIM6_Init+0x64>)
 8000880:	2209      	movs	r2, #9
 8000882:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_TIM6_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM6_Init+0x64>)
 800088c:	f002 fc96 	bl	80031bc <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000896:	f000 f94f 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM6_Init+0x64>)
 80008a8:	f003 f87a 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008b2:	f000 f941 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000174 	.word	0x20000174
 80008c4:	40001000 	.word	0x40001000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_GPIO_Init+0xe8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_GPIO_Init+0xe8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_GPIO_Init+0xe8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <MX_GPIO_Init+0xe8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_GPIO_Init+0xec>)
 8000954:	f000 fd44 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL4_Pin COL0_Pin COL1_Pin COL2_Pin
                           COL3_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL0_Pin|COL1_Pin|COL2_Pin
 8000958:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800095c:	617b      	str	r3, [r7, #20]
                          |COL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_GPIO_Init+0xec>)
 800096e:	f000 fb83 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_Pin ROT_DT_Pin ROT_CLCK_Pin */
  GPIO_InitStruct.Pin = ROT_SW_Pin|ROT_DT_Pin|ROT_CLCK_Pin;
 8000972:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_GPIO_Init+0xf0>)
 8000988:	f000 fb76 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 800098c:	230f      	movs	r3, #15
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xec>)
 80009a4:	f000 fb68 	bl	8001078 <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020800 	.word	0x40020800

080009bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a50      	ldr	r2, [pc, #320]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d107      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 80009cc:	f7ff fe24 	bl	8000618 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 80009d0:	2208      	movs	r2, #8
 80009d2:	494e      	ldr	r1, [pc, #312]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80009d4:	484e      	ldr	r0, [pc, #312]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80009d6:	f004 fe77 	bl	80056c8 <USBD_HID_SendReport>
//		}
//
//		lastStateCLK = currentStateCLK;
		/* END Rotary Encoder */
	 }
}
 80009da:	e090      	b.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x142>
	else if(htim == &htim6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a4d      	ldr	r2, [pc, #308]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	f040 808c 	bne.w	8000afe <HAL_TIM_PeriodElapsedCallback+0x142>
		set_rows();
 80009e6:	f7ff fd71 	bl	80004cc <set_rows>
		int cols = get_cols();
 80009ea:	f7ff fdbf 	bl	800056c <get_cols>
 80009ee:	60b8      	str	r0, [r7, #8]
		for(int i = 0; i < 4; i++) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e01d      	b.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0x76>
			if(cols & (1 << i)) {
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	fa42 f303 	asr.w	r3, r2, r3
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x5e>
				keypresses[row][i] = 1;
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a44      	ldr	r2, [pc, #272]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	441a      	add	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e008      	b.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x70>
				keypresses[row][i] = 0;
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	441a      	add	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 4; i++) {
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	ddde      	ble.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x3a>
		currentStateCLK = HAL_GPIO_ReadPin(GPIOC, ROT_CLCK_Pin);
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	4838      	ldr	r0, [pc, #224]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000a3e:	f000 fcb7 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000a48:	601a      	str	r2, [r3, #0]
		if (currentStateCLK != lastStateCLK && rotLock == 0) {
 8000a4a:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d024      	beq.n	8000aa0 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d120      	bne.n	8000aa0 <HAL_TIM_PeriodElapsedCallback+0xe4>
			currentStateDT = HAL_GPIO_ReadPin(GPIOC, ROT_DT_Pin);
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	482f      	ldr	r0, [pc, #188]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000a62:	f000 fca5 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000a6c:	601a      	str	r2, [r3, #0]
			if (currentStateDT != currentStateCLK) {
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d003      	beq.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0xc6>
				keypresses[4][1] = 1;
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	745a      	strb	r2, [r3, #17]
 8000a80:	e008      	b.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0xd8>
			else if (currentStateDT == currentStateCLK) {
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d102      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0xd8>
				keypresses[4][2] = 1;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	749a      	strb	r2, [r3, #18]
			rotLock++;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e009      	b.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0xf8>
		else if (rotLock == 0) {
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d105      	bne.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0xf8>
			keypresses[4][1] = 0;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	745a      	strb	r2, [r3, #17]
			keypresses[4][2] = 0;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	749a      	strb	r2, [r3, #18]
		lastStateCLK = currentStateCLK;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000aba:	6013      	str	r3, [r2, #0]
		if(rotLock != 0) {
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00e      	beq.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x126>
			rotLock = (rotLock + 1) % 200;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000acc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad0:	1199      	asrs	r1, r3, #6
 8000ad2:	17d3      	asrs	r3, r2, #31
 8000ad4:	1acb      	subs	r3, r1, r3
 8000ad6:	21c8      	movs	r1, #200	; 0xc8
 8000ad8:	fb01 f303 	mul.w	r3, r1, r3
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000ae0:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(GPIOC, ROT_SW_Pin) == 0) {// && lastState != state) {
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	480e      	ldr	r0, [pc, #56]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000ae6:	f000 fc63 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d103      	bne.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x13c>
			keypresses[4][0] = 1;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	741a      	strb	r2, [r3, #16]
}
 8000af6:	e002      	b.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x142>
			keypresses[4][0] = 0;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	741a      	strb	r2, [r3, #16]
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000012c 	.word	0x2000012c
 8000b0c:	200001e8 	.word	0x200001e8
 8000b10:	200001f8 	.word	0x200001f8
 8000b14:	20000174 	.word	0x20000174
 8000b18:	200001d0 	.word	0x200001d0
 8000b1c:	200001d4 	.word	0x200001d4
 8000b20:	40020800 	.word	0x40020800
 8000b24:	200001bc 	.word	0x200001bc
 8000b28:	200001c0 	.word	0x200001c0
 8000b2c:	200001c8 	.word	0x200001c8
 8000b30:	200001c4 	.word	0x200001c4
 8000b34:	51eb851f 	.word	0x51eb851f

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_TIM_Base_MspInit+0x80>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d116      	bne.n	8000bd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_TIM_Base_MspInit+0x84>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <HAL_TIM_Base_MspInit+0x84>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_TIM_Base_MspInit+0x84>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201e      	movs	r0, #30
 8000bc8:	f000 fa1f 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bcc:	201e      	movs	r0, #30
 8000bce:	f000 fa38 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bd2:	e01a      	b.n	8000c0a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_TIM_Base_MspInit+0x88>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d115      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_TIM_Base_MspInit+0x84>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_TIM_Base_MspInit+0x84>)
 8000be8:	f043 0310 	orr.w	r3, r3, #16
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_TIM_Base_MspInit+0x84>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2036      	movs	r0, #54	; 0x36
 8000c00:	f000 fa03 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 fa1c 	bl	8001042 <HAL_NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40000800 	.word	0x40000800
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40001000 	.word	0x40001000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8ae 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM4_IRQHandler+0x10>)
 8000c7a:	f002 fb5f 	bl	800333c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000012c 	.word	0x2000012c

08000c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM6_DAC_IRQHandler+0x10>)
 8000c8e:	f002 fb55 	bl	800333c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000174 	.word	0x20000174

08000c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <OTG_FS_IRQHandler+0x10>)
 8000ca2:	f000 fd06 	bl	80016b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200008d4 	.word	0x200008d4

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf0:	4c0b      	ldr	r4, [pc, #44]	; (8000d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd7 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f006 fca1 	bl	8007648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fcc5 	bl	8000694 <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000d18:	08007728 	.word	0x08007728
  ldr r2, =_sbss
 8000d1c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000d20:	20000df4 	.word	0x20000df4

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f94f 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fef2 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f967 	bl	800105e <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f000 f92f 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	200001f0 	.word	0x200001f0

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200001f0 	.word	0x200001f0

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e16b      	b.n	800136c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 815a 	bne.w	8001366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80b4 	beq.w	8001366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b60      	ldr	r3, [pc, #384]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a5f      	ldr	r2, [pc, #380]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a5b      	ldr	r2, [pc, #364]	; (8001388 <HAL_GPIO_Init+0x310>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_GPIO_Init+0x314>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_GPIO_Init+0x318>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	; (8001394 <HAL_GPIO_Init+0x31c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_GPIO_Init+0x320>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_GPIO_Init+0x324>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x216>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x328>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x212>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_GPIO_Init+0x32c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <HAL_GPIO_Init+0x330>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x20a>
 800127e:	2307      	movs	r3, #7
 8001280:	e00e      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001282:	2308      	movs	r3, #8
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001286:	2306      	movs	r3, #6
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	; (8001388 <HAL_GPIO_Init+0x310>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_GPIO_Init+0x334>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_GPIO_Init+0x334>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_GPIO_Init+0x334>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae90 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40021c00 	.word	0x40021c00
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001414:	b08f      	sub	sp, #60	; 0x3c
 8001416:	af0a      	add	r7, sp, #40	; 0x28
 8001418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e10f      	b.n	8001644 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f005 fdf2 	bl	8007028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fc41 	bl	8003cea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f002 fb18 	bl	8003ac0 <USB_CoreInit>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0d0      	b.n	8001644 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fc2f 	bl	8003d0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e04a      	b.n	800154a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	333d      	adds	r3, #61	; 0x3d
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	333c      	adds	r3, #60	; 0x3c
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	b298      	uxth	r0, r3
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3344      	adds	r3, #68	; 0x44
 80014f0:	4602      	mov	r2, r0
 80014f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3340      	adds	r3, #64	; 0x40
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3348      	adds	r3, #72	; 0x48
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	334c      	adds	r3, #76	; 0x4c
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3354      	adds	r3, #84	; 0x54
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	3301      	adds	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3af      	bcc.n	80014b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e044      	b.n	80015e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3b5      	bcc.n	800155a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	687e      	ldr	r6, [r7, #4]
 80015f6:	466d      	mov	r5, sp
 80015f8:	f106 0410 	add.w	r4, r6, #16
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001608:	e885 0003 	stmia.w	r5, {r0, r1}
 800160c:	1d33      	adds	r3, r6, #4
 800160e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f002 fbc7 	bl	8003da4 <USB_DevInit>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00d      	b.n	8001644 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fd16 	bl	800506e <USB_DevDisconnect>

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800164c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_PCD_Start+0x1c>
 8001664:	2302      	movs	r3, #2
 8001666:	e020      	b.n	80016aa <HAL_PCD_Start+0x5e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b01      	cmp	r3, #1
 8001676:	d109      	bne.n	800168c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800167c:	2b01      	cmp	r3, #1
 800167e:	d005      	beq.n	800168c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f002 fb19 	bl	8003cc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fcc6 	bl	800502c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b08d      	sub	sp, #52	; 0x34
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fd84 	bl	80051d6 <USB_GetMode>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 848a 	bne.w	8001fea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fce8 	bl	80050b0 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8480 	beq.w	8001fe8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fcd5 	bl	80050b0 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b02      	cmp	r3, #2
 800170e:	d107      	bne.n	8001720 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 0202 	and.w	r2, r2, #2
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fcc3 	bl	80050b0 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b10      	cmp	r3, #16
 8001732:	d161      	bne.n	80017f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0210 	bic.w	r2, r2, #16
 8001742:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f003 020f 	and.w	r2, r3, #15
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	0c5b      	lsrs	r3, r3, #17
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	2b02      	cmp	r3, #2
 800176e:	d124      	bne.n	80017ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d035      	beq.n	80017e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	6a38      	ldr	r0, [r7, #32]
 8001790:	f003 fafa 	bl	8004d88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a0:	441a      	add	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b2:	441a      	add	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	e016      	b.n	80017e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	0c5b      	lsrs	r3, r3, #17
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d110      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017cc:	2208      	movs	r2, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f003 fad9 	bl	8004d88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e2:	441a      	add	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fc57 	bl	80050b0 <USB_ReadInterrupts>
 8001802:	4603      	mov	r3, r0
 8001804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800180c:	f040 80a7 	bne.w	800195e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 fc5c 	bl	80050d6 <USB_ReadDevAllOutEpInterrupt>
 800181e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001820:	e099      	b.n	8001956 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 808e 	beq.w	800194a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fc80 	bl	800513e <USB_ReadDevOutEPInterrupt>
 800183e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001856:	461a      	mov	r2, r3
 8001858:	2301      	movs	r3, #1
 800185a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 feaa 	bl	80025b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187a:	461a      	mov	r2, r3
 800187c:	2308      	movs	r3, #8
 800187e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 ff80 	bl	8002788 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189e:	461a      	mov	r2, r3
 80018a0:	2310      	movs	r3, #16
 80018a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d030      	beq.n	8001910 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b80      	cmp	r3, #128	; 0x80
 80018b8:	d109      	bne.n	80018ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2200      	movs	r2, #0
 80018f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f005 fca9 	bl	8007250 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	2302      	movs	r3, #2
 800190e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001926:	461a      	mov	r2, r3
 8001928:	2320      	movs	r3, #32
 800192a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001942:	461a      	mov	r2, r3
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f af62 	bne.w	8001822 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fba4 	bl	80050b0 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001972:	f040 80db 	bne.w	8001b2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fbc5 	bl	800510a <USB_ReadDevAllInEpInterrupt>
 8001980:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001986:	e0cd      	b.n	8001b24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80c2 	beq.w	8001b18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fbeb 	bl	800517a <USB_ReadDevInEPInterrupt>
 80019a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d057      	beq.n	8001a60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	2201      	movs	r2, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69f9      	ldr	r1, [r7, #28]
 80019cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019d0:	4013      	ands	r3, r2
 80019d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e0:	461a      	mov	r2, r3
 80019e2:	2301      	movs	r3, #1
 80019e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d132      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	334c      	adds	r3, #76	; 0x4c
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4403      	add	r3, r0
 8001a0e:	3348      	adds	r3, #72	; 0x48
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4419      	add	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4403      	add	r3, r0
 8001a22:	334c      	adds	r3, #76	; 0x4c
 8001a24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d113      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x3a2>
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3354      	adds	r3, #84	; 0x54
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2101      	movs	r1, #1
 8001a50:	f003 fbf2 	bl	8005238 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f005 fb73 	bl	8007146 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a76:	461a      	mov	r2, r3
 8001a78:	2308      	movs	r3, #8
 8001a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a92:	461a      	mov	r2, r3
 8001a94:	2310      	movs	r3, #16
 8001a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2340      	movs	r3, #64	; 0x40
 8001ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d023      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac0:	6a38      	ldr	r0, [r7, #32]
 8001ac2:	f002 fad3 	bl	800406c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3338      	adds	r3, #56	; 0x38
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	78db      	ldrb	r3, [r3, #3]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f005 fbc0 	bl	8007274 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b00:	461a      	mov	r2, r3
 8001b02:	2302      	movs	r3, #2
 8001b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fcc3 	bl	800249e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f af2e 	bne.w	8001988 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fabd 	bl	80050b0 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b40:	d122      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 feaa 	bl	80028c4 <HAL_PCDEx_LPM_Callback>
 8001b70:	e002      	b.n	8001b78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f005 fb5e 	bl	8007234 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fa8f 	bl	80050b0 <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9c:	d112      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f005 fb1a 	bl	80071e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bc2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fa71 	bl	80050b0 <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd8:	f040 80b7 	bne.w	8001d4a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fa38 	bl	800406c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c00:	e046      	b.n	8001c90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	0151      	lsls	r1, r2, #5
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	440a      	add	r2, r1
 8001c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	461a      	mov	r2, r3
 8001c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5a:	0151      	lsls	r1, r2, #5
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	440a      	add	r2, r1
 8001c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7a:	0151      	lsls	r1, r2, #5
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	440a      	add	r2, r1
 8001c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3b3      	bcc.n	8001c02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc6:	f043 030b 	orr.w	r3, r3, #11
 8001cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cdc:	f043 030b 	orr.w	r3, r3, #11
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	e015      	b.n	8001d10 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0a:	f043 030b 	orr.w	r3, r3, #11
 8001d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d34:	461a      	mov	r2, r3
 8001d36:	f003 fa7f 	bl	8005238 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f9ae 	bl	80050b0 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d124      	bne.n	8001daa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fa44 	bl	80051f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 f9f9 	bl	8004166 <USB_GetDevSpeed>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	f001 fa10 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 8001d84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f001 fef8 	bl	8003b84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f005 f9fe 	bl	8007196 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 f97e 	bl	80050b0 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f005 f9db 	bl	800717a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f002 0208 	and.w	r2, r2, #8
 8001dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 f969 	bl	80050b0 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d122      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df4:	2301      	movs	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	e014      	b.n	8001e24 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fb0f 	bl	800243c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3e5      	bcc.n	8001dfa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 f93c 	bl	80050b0 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e42:	d13b      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e44:	2301      	movs	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	e02b      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3340      	adds	r3, #64	; 0x40
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d115      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da12      	bge.n	8001e9c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	333f      	adds	r3, #63	; 0x3f
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fad0 	bl	800243c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3ce      	bcc.n	8001e4a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 f8f5 	bl	80050b0 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed0:	d155      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	e045      	b.n	8001f64 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d12e      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da2b      	bge.n	8001f5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d121      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6053      	str	r3, [r2, #4]
            break;
 8001f5c:	e007      	b.n	8001f6e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3b4      	bcc.n	8001ed8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 f894 	bl	80050b0 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f92:	d10a      	bne.n	8001faa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f005 f97f 	bl	8007298 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f87e 	bl	80050b0 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d115      	bne.n	8001fea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f005 f96f 	bl	80072b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e000      	b.n	8001fea <HAL_PCD_IRQHandler+0x938>
      return;
 8001fe8:	bf00      	nop
    }
  }
}
 8001fea:	3734      	adds	r7, #52	; 0x34
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_PCD_SetAddress+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e013      	b.n	8002032 <HAL_PCD_SetAddress+0x42>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f002 ffdc 	bl	8004fe0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	461a      	mov	r2, r3
 8002048:	4603      	mov	r3, r0
 800204a:	70fb      	strb	r3, [r7, #3]
 800204c:	460b      	mov	r3, r1
 800204e:	803b      	strh	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da0f      	bge.n	8002080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00f      	b.n	80020a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020ac:	883a      	ldrh	r2, [r7, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	78ba      	ldrb	r2, [r7, #2]
 80020b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ca:	78bb      	ldrb	r3, [r7, #2]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d102      	bne.n	80020d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_Open+0xaa>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e00e      	b.n	8002102 <HAL_PCD_EP_Open+0xc8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 f85c 	bl	80041b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002100:	7afb      	ldrb	r3, [r7, #11]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da0f      	bge.n	800213e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	705a      	strb	r2, [r3, #1]
 800213c:	e00f      	b.n	800215e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_EP_Close+0x6e>
 8002174:	2302      	movs	r3, #2
 8002176:	e00e      	b.n	8002196 <HAL_PCD_EP_Close+0x8c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	4618      	mov	r0, r3
 8002188:	f002 f89a 	bl	80042c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	460b      	mov	r3, r1
 80021ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6979      	ldr	r1, [r7, #20]
 8002212:	f002 fb79 	bl	8004908 <USB_EP0StartXfer>
 8002216:	e008      	b.n	800222a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	6979      	ldr	r1, [r7, #20]
 8002226:	f002 f927 	bl	8004478 <USB_EPStartXfer>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	3338      	adds	r3, #56	; 0x38
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	3304      	adds	r3, #4
 800225a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2201      	movs	r2, #1
 8002272:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	b2da      	uxtb	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	f002 fb2f 	bl	8004908 <USB_EP0StartXfer>
 80022aa:	e008      	b.n	80022be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	f002 f8dd 	bl	8004478 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 020f 	and.w	r2, r3, #15
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d901      	bls.n	80022e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e050      	b.n	8002388 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da0f      	bge.n	800230e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	3338      	adds	r3, #56	; 0x38
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	705a      	strb	r2, [r3, #1]
 800230c:	e00d      	b.n	800232a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	3304      	adds	r3, #4
 8002322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	b2da      	uxtb	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_PCD_EP_SetStall+0x82>
 8002346:	2302      	movs	r3, #2
 8002348:	e01e      	b.n	8002388 <HAL_PCD_EP_SetStall+0xc0>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fd6d 	bl	8004e38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	b2d9      	uxtb	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002378:	461a      	mov	r2, r3
 800237a:	f002 ff5d 	bl	8005238 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d901      	bls.n	80023ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e042      	b.n	8002434 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da0f      	bge.n	80023d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 020f 	and.w	r2, r3, #15
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	3338      	adds	r3, #56	; 0x38
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	3304      	adds	r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	705a      	strb	r2, [r3, #1]
 80023d4:	e00f      	b.n	80023f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_PCD_EP_ClrStall+0x86>
 8002412:	2302      	movs	r3, #2
 8002414:	e00e      	b.n	8002434 <HAL_PCD_EP_ClrStall+0xa4>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fd75 	bl	8004f14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da0c      	bge.n	800246a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3338      	adds	r3, #56	; 0x38
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	3304      	adds	r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e00c      	b.n	8002484 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fb94 	bl	8004bb8 <USB_EPStopXfer>
 8002490:	4603      	mov	r3, r0
 8002492:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002494:	7afb      	ldrb	r3, [r7, #11]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b08a      	sub	sp, #40	; 0x28
 80024a2:	af02      	add	r7, sp, #8
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3338      	adds	r3, #56	; 0x38
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d901      	bls.n	80024d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06c      	b.n	80025b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d902      	bls.n	80024f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3303      	adds	r3, #3
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024fa:	e02b      	b.n	8002554 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	429a      	cmp	r2, r3
 8002510:	d902      	bls.n	8002518 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3303      	adds	r3, #3
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002530:	b2db      	uxtb	r3, r3
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f002 fbe8 	bl	8004d0c <USB_WritePacket>

    ep->xfer_buff  += len;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	441a      	add	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	b29b      	uxth	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	429a      	cmp	r2, r3
 8002568:	d809      	bhi.n	800257e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002572:	429a      	cmp	r2, r3
 8002574:	d203      	bcs.n	800257e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1be      	bne.n	80024fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	429a      	cmp	r2, r3
 8002588:	d811      	bhi.n	80025ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2201      	movs	r2, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	6939      	ldr	r1, [r7, #16]
 80025a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025aa:	4013      	ands	r3, r2
 80025ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	333c      	adds	r3, #60	; 0x3c
 80025d0:	3304      	adds	r3, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d17b      	bne.n	80026e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4a61      	ldr	r2, [pc, #388]	; (8002780 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f240 80b9 	bls.w	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80b3 	beq.w	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261a:	461a      	mov	r2, r3
 800261c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002620:	6093      	str	r3, [r2, #8]
 8002622:	e0a7      	b.n	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	461a      	mov	r2, r3
 800263c:	2320      	movs	r3, #32
 800263e:	6093      	str	r3, [r2, #8]
 8002640:	e098      	b.n	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 8093 	bne.w	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4a4b      	ldr	r2, [pc, #300]	; (8002780 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d90f      	bls.n	8002676 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	461a      	mov	r2, r3
 800266e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	e07e      	b.n	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	440b      	add	r3, r1
 8002698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d114      	bne.n	80026d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026c0:	461a      	mov	r2, r3
 80026c2:	2101      	movs	r1, #1
 80026c4:	f002 fdb8 	bl	8005238 <USB_EP0_OutStart>
 80026c8:	e006      	b.n	80026d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	441a      	add	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f004 fd16 	bl	8007110 <HAL_PCD_DataOutStageCallback>
 80026e4:	e046      	b.n	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d124      	bne.n	8002738 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002704:	461a      	mov	r2, r3
 8002706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270a:	6093      	str	r3, [r2, #8]
 800270c:	e032      	b.n	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	461a      	mov	r2, r3
 8002726:	2320      	movs	r3, #32
 8002728:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f004 fced 	bl	8007110 <HAL_PCD_DataOutStageCallback>
 8002736:	e01d      	b.n	8002774 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d114      	bne.n	8002768 <PCD_EP_OutXfrComplete_int+0x1b0>
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002760:	461a      	mov	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f002 fd68 	bl	8005238 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f004 fcce 	bl	8007110 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	4f54300a 	.word	0x4f54300a
 8002784:	4f54310a 	.word	0x4f54310a

08002788 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	333c      	adds	r3, #60	; 0x3c
 80027a0:	3304      	adds	r3, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <PCD_EP_OutSetupPacket_int+0x88>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d90e      	bls.n	80027dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f004 fc85 	bl	80070ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <PCD_EP_OutSetupPacket_int+0x88>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d90c      	bls.n	8002804 <PCD_EP_OutSetupPacket_int+0x7c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d108      	bne.n	8002804 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027fc:	461a      	mov	r2, r3
 80027fe:	2101      	movs	r1, #1
 8002800:	f002 fd1a 	bl	8005238 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	4f54300a 	.word	0x4f54300a

08002814 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
 8002820:	4613      	mov	r3, r2
 8002822:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002832:	883b      	ldrh	r3, [r7, #0]
 8002834:	0419      	lsls	r1, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	430a      	orrs	r2, r1
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
 8002840:	e028      	b.n	8002894 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4413      	add	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e00d      	b.n	8002872 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	3340      	adds	r3, #64	; 0x40
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4413      	add	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	3301      	adds	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	3b01      	subs	r3, #1
 8002878:	429a      	cmp	r2, r3
 800287a:	d3ec      	bcc.n	8002856 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800287c:	883b      	ldrh	r3, [r7, #0]
 800287e:	0418      	lsls	r0, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	3b01      	subs	r3, #1
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4302      	orrs	r2, r0
 800288c:	3340      	adds	r3, #64	; 0x40
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e267      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d075      	beq.n	80029e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00c      	beq.n	8002920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d112      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d10b      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05b      	beq.n	80029e4 <HAL_RCC_OscConfig+0x108>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d157      	bne.n	80029e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e242      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x74>
 8002942:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a75      	ldr	r2, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e01d      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x98>
 800295a:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6c      	ldr	r2, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002974:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a68      	ldr	r2, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fa2e 	bl	8000df4 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe fa2a 	bl	8000df4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e207      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0xc0>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fa1a 	bl	8000df4 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fa16 	bl	8000df4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1f3      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0xe8>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d063      	beq.n	8002aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d11c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1c7      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4937      	ldr	r1, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e03a      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x244>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe f9cf 	bl	8000df4 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe f9cb 	bl	8000df4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1a8      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4925      	ldr	r1, [pc, #148]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x244>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe f9ae 	bl	8000df4 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7fe f9aa 	bl	8000df4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e187      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d036      	beq.n	8002b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x248>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f98e 	bl	8000df4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe f98a 	bl	8000df4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e167      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x200>
 8002afa:	e01b      	b.n	8002b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_OscConfig+0x248>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe f977 	bl	8000df4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e00e      	b.n	8002b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe f973 	bl	8000df4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d907      	bls.n	8002b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e150      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470000 	.word	0x42470000
 8002b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ea      	bne.n	8002b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8097 	beq.w	8002c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b81      	ldr	r3, [pc, #516]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b7d      	ldr	r3, [pc, #500]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a7c      	ldr	r2, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b74      	ldr	r3, [pc, #464]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a73      	ldr	r2, [pc, #460]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe f933 	bl	8000df4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe f92f 	bl	8000df4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e10c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2ea>
 8002bb8:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a63      	ldr	r2, [pc, #396]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x324>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x30c>
 8002bce:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a5e      	ldr	r2, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a5b      	ldr	r2, [pc, #364]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x324>
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe f8f4 	bl	8000df4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe f8f0 	bl	8000df4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0cb      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x334>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7fe f8de 	bl	8000df4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f8da 	bl	8000df4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0b5      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a1 	beq.w	8002dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d05c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d141      	bne.n	8002d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe f8ae 	bl	8000df4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe f8aa 	bl	8000df4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e087      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	491b      	ldr	r1, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe f883 	bl	8000df4 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe f87f 	bl	8000df4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e05c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x416>
 8002d10:	e054      	b.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe f86c 	bl	8000df4 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe f868 	bl	8000df4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e045      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x444>
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e038      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x4ec>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d028      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d121      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d11a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0cc      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90c      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d044      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e067      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fd ff9a 	bl	8000df4 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fd ff96 	bl	8000df4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fefa 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08007708 	.word	0x08007708
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b094      	sub	sp, #80	; 0x50
 8002f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa8:	2300      	movs	r3, #0
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	f200 80e1 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x34>
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fca:	e0db      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b73      	ldr	r3, [pc, #460]	; (800319c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fd0:	e0db      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd2:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fd6:	e0d8      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d063      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	0159      	lsls	r1, r3, #5
 8003018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301c:	0150      	lsls	r0, r2, #5
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4621      	mov	r1, r4
 8003024:	1a51      	subs	r1, r2, r1
 8003026:	6139      	str	r1, [r7, #16]
 8003028:	4629      	mov	r1, r5
 800302a:	eb63 0301 	sbc.w	r3, r3, r1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800303c:	4659      	mov	r1, fp
 800303e:	018b      	lsls	r3, r1, #6
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003046:	4651      	mov	r1, sl
 8003048:	018a      	lsls	r2, r1, #6
 800304a:	4651      	mov	r1, sl
 800304c:	ebb2 0801 	subs.w	r8, r2, r1
 8003050:	4659      	mov	r1, fp
 8003052:	eb63 0901 	sbc.w	r9, r3, r1
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306a:	4690      	mov	r8, r2
 800306c:	4699      	mov	r9, r3
 800306e:	4623      	mov	r3, r4
 8003070:	eb18 0303 	adds.w	r3, r8, r3
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	462b      	mov	r3, r5
 8003078:	eb49 0303 	adc.w	r3, r9, r3
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800308a:	4629      	mov	r1, r5
 800308c:	024b      	lsls	r3, r1, #9
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003094:	4621      	mov	r1, r4
 8003096:	024a      	lsls	r2, r1, #9
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	2200      	movs	r2, #0
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a8:	f7fd f88e 	bl	80001c8 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	e058      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	2200      	movs	r2, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	4611      	mov	r1, r2
 80030c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	0159      	lsls	r1, r3, #5
 80030de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e2:	0150      	lsls	r0, r2, #5
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4641      	mov	r1, r8
 80030ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ee:	4649      	mov	r1, r9
 80030f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003108:	ebb2 040a 	subs.w	r4, r2, sl
 800310c:	eb63 050b 	sbc.w	r5, r3, fp
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	00eb      	lsls	r3, r5, #3
 800311a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311e:	00e2      	lsls	r2, r4, #3
 8003120:	4614      	mov	r4, r2
 8003122:	461d      	mov	r5, r3
 8003124:	4643      	mov	r3, r8
 8003126:	18e3      	adds	r3, r4, r3
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	464b      	mov	r3, r9
 800312c:	eb45 0303 	adc.w	r3, r5, r3
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313e:	4629      	mov	r1, r5
 8003140:	028b      	lsls	r3, r1, #10
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003148:	4621      	mov	r1, r4
 800314a:	028a      	lsls	r2, r1, #10
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	61fa      	str	r2, [r7, #28]
 8003158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315c:	f7fd f834 	bl	80001c8 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	3301      	adds	r3, #1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003182:	e002      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetSysClockFreq+0x204>)
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800318c:	4618      	mov	r0, r3
 800318e:	3750      	adds	r7, #80	; 0x50
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	007a1200 	.word	0x007a1200

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e041      	b.n	8003252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd fcd6 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 fa96 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e04e      	b.n	8003312 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <HAL_TIM_Base_Start_IT+0xc4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d022      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d01d      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_TIM_Base_Start_IT+0xc8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d018      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_TIM_Base_Start_IT+0xcc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_TIM_Base_Start_IT+0xd0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_TIM_Base_Start_IT+0xd4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x80>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_TIM_Base_Start_IT+0xdc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d010      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fe:	e007      	b.n	8003310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40010400 	.word	0x40010400
 8003334:	40014000 	.word	0x40014000
 8003338:	40001800 	.word	0x40001800

0800333c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0202 	mvn.w	r2, #2
 8003368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f9b5 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9a7 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f9b8 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0204 	mvn.w	r2, #4
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f98b 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f97d 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f98e 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0208 	mvn.w	r2, #8
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f961 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f953 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f964 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b10      	cmp	r3, #16
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0210 	mvn.w	r2, #16
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2208      	movs	r2, #8
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f937 	bl	80036ee <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f929 	bl	80036da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f93a 	bl	8003702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0201 	mvn.w	r2, #1
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fa7e 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fae0 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d107      	bne.n	8003518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8ff 	bl	8003716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0220 	mvn.w	r2, #32
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 faaa 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIM_ConfigClockSource+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e0b4      	b.n	80036d2 <HAL_TIM_ConfigClockSource+0x186>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800358e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a0:	d03e      	beq.n	8003620 <HAL_TIM_ConfigClockSource+0xd4>
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a6:	f200 8087 	bhi.w	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ae:	f000 8086 	beq.w	80036be <HAL_TIM_ConfigClockSource+0x172>
 80035b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b6:	d87f      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b70      	cmp	r3, #112	; 0x70
 80035ba:	d01a      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0xa6>
 80035bc:	2b70      	cmp	r3, #112	; 0x70
 80035be:	d87b      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b60      	cmp	r3, #96	; 0x60
 80035c2:	d050      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x11a>
 80035c4:	2b60      	cmp	r3, #96	; 0x60
 80035c6:	d877      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b50      	cmp	r3, #80	; 0x50
 80035ca:	d03c      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xfa>
 80035cc:	2b50      	cmp	r3, #80	; 0x50
 80035ce:	d873      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d058      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x13a>
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d86f      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b30      	cmp	r3, #48	; 0x30
 80035da:	d064      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035dc:	2b30      	cmp	r3, #48	; 0x30
 80035de:	d86b      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d060      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d867      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d05c      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d05a      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035f0:	e062      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f000 f9ad 	bl	8003960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	609a      	str	r2, [r3, #8]
      break;
 800361e:	e04f      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f000 f996 	bl	8003960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003642:	609a      	str	r2, [r3, #8]
      break;
 8003644:	e03c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	461a      	mov	r2, r3
 8003654:	f000 f90a 	bl	800386c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2150      	movs	r1, #80	; 0x50
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f963 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003664:	e02c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	461a      	mov	r2, r3
 8003674:	f000 f929 	bl	80038ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2160      	movs	r1, #96	; 0x60
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f953 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003684:	e01c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	461a      	mov	r2, r3
 8003694:	f000 f8ea 	bl	800386c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2140      	movs	r1, #64	; 0x40
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f943 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80036a4:	e00c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f000 f93a 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80036b6:	e003      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e000      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d00f      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3d      	ldr	r2, [pc, #244]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <TIM_Base_SetConfig+0x120>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d027      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d023      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <TIM_Base_SetConfig+0x120>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a29      	ldr	r2, [pc, #164]	; (8003850 <TIM_Base_SetConfig+0x124>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d017      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <TIM_Base_SetConfig+0x128>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_Base_SetConfig+0x12c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_Base_SetConfig+0x134>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <TIM_Base_SetConfig+0x138>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <TIM_Base_SetConfig+0x13c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d103      	bne.n	800382c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	615a      	str	r2, [r3, #20]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	40001800 	.word	0x40001800
 8003864:	40001c00 	.word	0x40001c00
 8003868:	40002000 	.word	0x40002000

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b087      	sub	sp, #28
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0210 	bic.w	r2, r3, #16
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	031b      	lsls	r3, r3, #12
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	f043 0307 	orr.w	r3, r3, #7
 800394c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	431a      	orrs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e05a      	b.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d01d      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10c      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40001800 	.word	0x40001800

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	f107 001c 	add.w	r0, r7, #28
 8003ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d122      	bne.n	8003b1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 fbee 	bl	80052f4 <USB_CoreReset>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]
 8003b1c:	e01a      	b.n	8003b54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 fbe2 	bl	80052f4 <USB_CoreReset>
 8003b30:	4603      	mov	r3, r0
 8003b32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
 8003b46:	e005      	b.n	8003b54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10b      	bne.n	8003b72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f043 0206 	orr.w	r2, r3, #6
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b7e:	b004      	add	sp, #16
 8003b80:	4770      	bx	lr
	...

08003b84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d165      	bne.n	8003c64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4a41      	ldr	r2, [pc, #260]	; (8003ca0 <USB_SetTurnaroundTime+0x11c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d906      	bls.n	8003bae <USB_SetTurnaroundTime+0x2a>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <USB_SetTurnaroundTime+0x120>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d202      	bcs.n	8003bae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ba8:	230f      	movs	r3, #15
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e062      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a3c      	ldr	r2, [pc, #240]	; (8003ca4 <USB_SetTurnaroundTime+0x120>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d306      	bcc.n	8003bc4 <USB_SetTurnaroundTime+0x40>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a3b      	ldr	r2, [pc, #236]	; (8003ca8 <USB_SetTurnaroundTime+0x124>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d202      	bcs.n	8003bc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bbe:	230e      	movs	r3, #14
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e057      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <USB_SetTurnaroundTime+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d306      	bcc.n	8003bda <USB_SetTurnaroundTime+0x56>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a37      	ldr	r2, [pc, #220]	; (8003cac <USB_SetTurnaroundTime+0x128>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d202      	bcs.n	8003bda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bd4:	230d      	movs	r3, #13
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e04c      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4a33      	ldr	r2, [pc, #204]	; (8003cac <USB_SetTurnaroundTime+0x128>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d306      	bcc.n	8003bf0 <USB_SetTurnaroundTime+0x6c>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a32      	ldr	r2, [pc, #200]	; (8003cb0 <USB_SetTurnaroundTime+0x12c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d802      	bhi.n	8003bf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bea:	230c      	movs	r3, #12
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e041      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4a2f      	ldr	r2, [pc, #188]	; (8003cb0 <USB_SetTurnaroundTime+0x12c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d906      	bls.n	8003c06 <USB_SetTurnaroundTime+0x82>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	; (8003cb4 <USB_SetTurnaroundTime+0x130>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d802      	bhi.n	8003c06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c00:	230b      	movs	r3, #11
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e036      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <USB_SetTurnaroundTime+0x130>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d906      	bls.n	8003c1c <USB_SetTurnaroundTime+0x98>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <USB_SetTurnaroundTime+0x134>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d802      	bhi.n	8003c1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c16:	230a      	movs	r3, #10
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e02b      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <USB_SetTurnaroundTime+0x134>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d906      	bls.n	8003c32 <USB_SetTurnaroundTime+0xae>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <USB_SetTurnaroundTime+0x138>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d202      	bcs.n	8003c32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c2c:	2309      	movs	r3, #9
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e020      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <USB_SetTurnaroundTime+0x138>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d306      	bcc.n	8003c48 <USB_SetTurnaroundTime+0xc4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <USB_SetTurnaroundTime+0x13c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d802      	bhi.n	8003c48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c42:	2308      	movs	r3, #8
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e015      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <USB_SetTurnaroundTime+0x13c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d906      	bls.n	8003c5e <USB_SetTurnaroundTime+0xda>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <USB_SetTurnaroundTime+0x140>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d202      	bcs.n	8003c5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	e00a      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c5e:	2306      	movs	r3, #6
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e007      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c6a:	2309      	movs	r3, #9
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e001      	b.n	8003c74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c70:	2309      	movs	r3, #9
 8003c72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	029b      	lsls	r3, r3, #10
 8003c88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	00d8acbf 	.word	0x00d8acbf
 8003ca4:	00e4e1c0 	.word	0x00e4e1c0
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	01067380 	.word	0x01067380
 8003cb0:	011a499f 	.word	0x011a499f
 8003cb4:	01312cff 	.word	0x01312cff
 8003cb8:	014ca43f 	.word	0x014ca43f
 8003cbc:	016e3600 	.word	0x016e3600
 8003cc0:	01a6ab1f 	.word	0x01a6ab1f
 8003cc4:	01e84800 	.word	0x01e84800

08003cc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d115      	bne.n	8003d5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f7fd f866 	bl	8000e0c <HAL_Delay>
      ms++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f001 fa45 	bl	80051d6 <USB_GetMode>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d01e      	beq.n	8003d90 <USB_SetCurrentMode+0x84>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b31      	cmp	r3, #49	; 0x31
 8003d56:	d9f0      	bls.n	8003d3a <USB_SetCurrentMode+0x2e>
 8003d58:	e01a      	b.n	8003d90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d115      	bne.n	8003d8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7fd f84d 	bl	8000e0c <HAL_Delay>
      ms++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3301      	adds	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f001 fa2c 	bl	80051d6 <USB_GetMode>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <USB_SetCurrentMode+0x84>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b31      	cmp	r3, #49	; 0x31
 8003d88:	d9f0      	bls.n	8003d6c <USB_SetCurrentMode+0x60>
 8003d8a:	e001      	b.n	8003d90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e005      	b.n	8003d9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b32      	cmp	r3, #50	; 0x32
 8003d94:	d101      	bne.n	8003d9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da4:	b084      	sub	sp, #16
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e009      	b.n	8003dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	3340      	adds	r3, #64	; 0x40
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	2200      	movs	r2, #0
 8003dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b0e      	cmp	r3, #14
 8003ddc:	d9f2      	bls.n	8003dc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11c      	bne.n	8003e1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e1c:	e00b      	b.n	8003e36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	4619      	mov	r1, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	461a      	mov	r2, r3
 8003e52:	680b      	ldr	r3, [r1, #0]
 8003e54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10c      	bne.n	8003e76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e62:	2100      	movs	r1, #0
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f965 	bl	8004134 <USB_SetDevSpeed>
 8003e6a:	e008      	b.n	8003e7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f960 	bl	8004134 <USB_SetDevSpeed>
 8003e74:	e003      	b.n	8003e7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e76:	2103      	movs	r1, #3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f95b 	bl	8004134 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e7e:	2110      	movs	r1, #16
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f8f3 	bl	800406c <USB_FlushTxFifo>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f91f 	bl	80040d4 <USB_FlushRxFifo>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e043      	b.n	8003f52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee0:	d118      	bne.n	8003f14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	e013      	b.n	8003f26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e008      	b.n	8003f26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	461a      	mov	r2, r3
 8003f22:	2300      	movs	r3, #0
 8003f24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3b7      	bcc.n	8003eca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	e043      	b.n	8003fe8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f76:	d118      	bne.n	8003faa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e013      	b.n	8003fbc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e008      	b.n	8003fbc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fe0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d3b7      	bcc.n	8003f60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004002:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004010:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <USB_DevInit+0x2c4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f043 0208 	orr.w	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004064:	b004      	add	sp, #16
 8004066:	4770      	bx	lr
 8004068:	803c3800 	.word	0x803c3800

0800406c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <USB_FlushTxFifo+0x64>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e01b      	b.n	80040c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	daf2      	bge.n	800407a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	019b      	lsls	r3, r3, #6
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <USB_FlushTxFifo+0x64>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e006      	b.n	80040c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d0f0      	beq.n	80040a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	00030d40 	.word	0x00030d40

080040d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a11      	ldr	r2, [pc, #68]	; (8004130 <USB_FlushRxFifo+0x5c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e018      	b.n	8004124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	daf2      	bge.n	80040e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2210      	movs	r2, #16
 8004102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a08      	ldr	r2, [pc, #32]	; (8004130 <USB_FlushRxFifo+0x5c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e006      	b.n	8004124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d0f0      	beq.n	8004104 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	00030d40 	.word	0x00030d40

08004134 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004166:	b480      	push	{r7}
 8004168:	b087      	sub	sp, #28
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0306 	and.w	r3, r3, #6
 800417e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
 800418a:	e00a      	b.n	80041a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d002      	beq.n	8004198 <USB_GetDevSpeed+0x32>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d102      	bne.n	800419e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004198:	2302      	movs	r3, #2
 800419a:	75fb      	strb	r3, [r7, #23]
 800419c:	e001      	b.n	80041a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800419e:	230f      	movs	r3, #15
 80041a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d13a      	bne.n	8004242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d155      	bne.n	80042b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	059b      	lsls	r3, r3, #22
 8004226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004228:	4313      	orrs	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	e036      	b.n	80042b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004260:	4313      	orrs	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11a      	bne.n	80042b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	791b      	ldrb	r3, [r3, #4]
 8004294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004296:	430b      	orrs	r3, r1
 8004298:	4313      	orrs	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d161      	bne.n	80043a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f2:	d11f      	bne.n	8004334 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004312:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004354:	4013      	ands	r3, r2
 8004356:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004378:	4013      	ands	r3, r2
 800437a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0159      	lsls	r1, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	440b      	add	r3, r1
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	4619      	mov	r1, r3
 8004398:	4b35      	ldr	r3, [pc, #212]	; (8004470 <USB_DeactivateEndpoint+0x1b0>)
 800439a:	4013      	ands	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
 800439e:	e060      	b.n	8004462 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b6:	d11f      	bne.n	80043f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	43db      	mvns	r3, r3
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004418:	4013      	ands	r3, r2
 800441a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0159      	lsls	r1, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	440b      	add	r3, r1
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	4619      	mov	r1, r3
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <USB_DeactivateEndpoint+0x1b4>)
 800445e:	4013      	ands	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	ec337800 	.word	0xec337800
 8004474:	eff37800 	.word	0xeff37800

08004478 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	2b01      	cmp	r3, #1
 8004496:	f040 815c 	bne.w	8004752 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d132      	bne.n	8004508 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004500:	0cdb      	lsrs	r3, r3, #19
 8004502:	04db      	lsls	r3, r3, #19
 8004504:	6113      	str	r3, [r2, #16]
 8004506:	e074      	b.n	80045f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004522:	0cdb      	lsrs	r3, r3, #19
 8004524:	04db      	lsls	r3, r3, #19
 8004526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800454a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	440b      	add	r3, r1
 8004564:	1e59      	subs	r1, r3, #1
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	fbb1 f3f3 	udiv	r3, r1, r3
 800456e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004570:	4b9d      	ldr	r3, [pc, #628]	; (80047e8 <USB_EPStartXfer+0x370>)
 8004572:	400b      	ands	r3, r1
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	0148      	lsls	r0, r1, #5
 8004578:	69f9      	ldr	r1, [r7, #28]
 800457a:	4401      	add	r1, r0
 800457c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004580:	4313      	orrs	r3, r2
 8004582:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	0148      	lsls	r0, r1, #5
 800459e:	69f9      	ldr	r1, [r7, #28]
 80045a0:	4401      	add	r1, r0
 80045a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	791b      	ldrb	r3, [r3, #4]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d11f      	bne.n	80045f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d14b      	bne.n	8004690 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	791b      	ldrb	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d128      	bne.n	800466e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d110      	bne.n	800464e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004646:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e00f      	b.n	800466e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e133      	b.n	80048f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	791b      	ldrb	r3, [r3, #4]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d015      	beq.n	80046e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 811b 	beq.w	80048f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	69f9      	ldr	r1, [r7, #28]
 80046da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046de:	4313      	orrs	r3, r2
 80046e0:	634b      	str	r3, [r1, #52]	; 0x34
 80046e2:	e109      	b.n	80048f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d110      	bne.n	8004716 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e00f      	b.n	8004736 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004734:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	b298      	uxth	r0, r3
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	4603      	mov	r3, r0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fade 	bl	8004d0c <USB_WritePacket>
 8004750:	e0d2      	b.n	80048f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	0cdb      	lsrs	r3, r3, #19
 800476e:	04db      	lsls	r3, r3, #19
 8004770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004790:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004794:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d126      	bne.n	80047ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	69b9      	ldr	r1, [r7, #24]
 80047b6:	0148      	lsls	r0, r1, #5
 80047b8:	69f9      	ldr	r1, [r7, #28]
 80047ba:	4401      	add	r1, r0
 80047bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047c0:	4313      	orrs	r3, r2
 80047c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e2:	6113      	str	r3, [r2, #16]
 80047e4:	e03a      	b.n	800485c <USB_EPStartXfer+0x3e4>
 80047e6:	bf00      	nop
 80047e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	8afa      	ldrh	r2, [r7, #22]
 8004808:	fb03 f202 	mul.w	r2, r3, r2
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	8afb      	ldrh	r3, [r7, #22]
 8004820:	04d9      	lsls	r1, r3, #19
 8004822:	4b38      	ldr	r3, [pc, #224]	; (8004904 <USB_EPStartXfer+0x48c>)
 8004824:	400b      	ands	r3, r1
 8004826:	69b9      	ldr	r1, [r7, #24]
 8004828:	0148      	lsls	r0, r1, #5
 800482a:	69f9      	ldr	r1, [r7, #28]
 800482c:	4401      	add	r1, r0
 800482e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004832:	4313      	orrs	r3, r2
 8004834:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	0148      	lsls	r0, r1, #5
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	4401      	add	r1, r0
 8004854:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004858:	4313      	orrs	r3, r2
 800485a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10d      	bne.n	800487e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6919      	ldr	r1, [r3, #16]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	460a      	mov	r2, r1
 800487c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	791b      	ldrb	r3, [r3, #4]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d128      	bne.n	80048d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d110      	bne.n	80048b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e00f      	b.n	80048d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	1ff80000 	.word	0x1ff80000

08004908 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b01      	cmp	r3, #1
 8004926:	f040 80ce 	bne.w	8004ac6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d132      	bne.n	8004998 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	0cdb      	lsrs	r3, r3, #19
 8004992:	04db      	lsls	r3, r3, #19
 8004994:	6113      	str	r3, [r2, #16]
 8004996:	e04e      	b.n	8004a36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b2:	0cdb      	lsrs	r3, r3, #19
 80049b4:	04db      	lsls	r3, r3, #19
 80049b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d903      	bls.n	80049f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	6939      	ldr	r1, [r7, #16]
 8004a28:	0148      	lsls	r0, r1, #5
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	4401      	add	r1, r0
 8004a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a32:	4313      	orrs	r3, r2
 8004a34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d11e      	bne.n	8004a7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e097      	b.n	8004baa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8083 	beq.w	8004baa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ac4:	e071      	b.n	8004baa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae0:	0cdb      	lsrs	r3, r3, #19
 8004ae2:	04db      	lsls	r3, r3, #19
 8004ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	0148      	lsls	r0, r1, #5
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	4401      	add	r1, r0
 8004b60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10d      	bne.n	8004b8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	460a      	mov	r2, r1
 8004b88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	785b      	ldrb	r3, [r3, #1]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d14a      	bne.n	8004c6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bee:	f040 8086 	bne.w	8004cfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d902      	bls.n	8004c50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c4e:	e056      	b.n	8004cfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c68:	d0e7      	beq.n	8004c3a <USB_EPStopXfer+0x82>
 8004c6a:	e048      	b.n	8004cfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d13b      	bne.n	8004cfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ca8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ccc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d902      	bls.n	8004ce4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ce2:	e00c      	b.n	8004cfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cfc:	d0e7      	beq.n	8004cce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	71fb      	strb	r3, [r7, #7]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d123      	bne.n	8004d7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d32:	88bb      	ldrh	r3, [r7, #4]
 8004d34:	3303      	adds	r3, #3
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e018      	b.n	8004d72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	031a      	lsls	r2, r3, #12
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	3301      	adds	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3e2      	bcc.n	8004d40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3724      	adds	r7, #36	; 0x24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b08b      	sub	sp, #44	; 0x2c
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	e014      	b.n	8004dde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	3301      	adds	r3, #1
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	3301      	adds	r3, #1
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	623b      	str	r3, [r7, #32]
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3e6      	bcc.n	8004db4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004de6:	8bfb      	ldrh	r3, [r7, #30]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01e      	beq.n	8004e2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	461a      	mov	r2, r3
 8004df8:	f107 0310 	add.w	r3, r7, #16
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	701a      	strb	r2, [r3, #0]
      i++;
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	3301      	adds	r3, #1
 8004e16:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e1e:	8bfb      	ldrh	r3, [r7, #30]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e24:	8bfb      	ldrh	r3, [r7, #30]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ea      	bne.n	8004e00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	372c      	adds	r7, #44	; 0x2c
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d12c      	bne.n	8004eae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	db12      	blt.n	8004e8c <USB_EPSetStall+0x54>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00f      	beq.n	8004e8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	e02b      	b.n	8004f06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db12      	blt.n	8004ee6 <USB_EPSetStall+0xae>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00f      	beq.n	8004ee6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ee4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d128      	bne.n	8004f82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	791b      	ldrb	r3, [r3, #4]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d003      	beq.n	8004f60 <USB_EPClearStall+0x4c>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d138      	bne.n	8004fd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e027      	b.n	8004fd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	791b      	ldrb	r3, [r3, #4]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d003      	beq.n	8004fb2 <USB_EPClearStall+0x9e>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	791b      	ldrb	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d10f      	bne.n	8004fd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005002:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505a:	f023 0302 	bic.w	r3, r3, #2
 800505e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005088:	f023 0303 	bic.w	r3, r3, #3
 800508c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4013      	ands	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050c8:	68fb      	ldr	r3, [r7, #12]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	0c1b      	lsrs	r3, r3, #16
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	b29b      	uxth	r3, r3
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4013      	ands	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800516c:	68bb      	ldr	r3, [r7, #8]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	460b      	mov	r3, r1
 8005184:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	01db      	lsls	r3, r3, #7
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4013      	ands	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051c8:	68bb      	ldr	r3, [r7, #8]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0301 	and.w	r3, r3, #1
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	460b      	mov	r3, r1
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	333c      	adds	r3, #60	; 0x3c
 800524e:	3304      	adds	r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <USB_EP0_OutStart+0xb8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d90a      	bls.n	8005272 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526c:	d101      	bne.n	8005272 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e037      	b.n	80052e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	f043 0318 	orr.w	r3, r3, #24
 80052a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10f      	bne.n	80052e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	4f54300a 	.word	0x4f54300a

080052f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a13      	ldr	r2, [pc, #76]	; (8005358 <USB_CoreReset+0x64>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e01b      	b.n	800534a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	daf2      	bge.n	8005300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <USB_CoreReset+0x64>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e006      	b.n	800534a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d0f0      	beq.n	800532a <USB_CoreReset+0x36>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	00030d40 	.word	0x00030d40

0800535c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005368:	2010      	movs	r0, #16
 800536a:	f002 f929 	bl	80075c0 <USBD_static_malloc>
 800536e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	32b0      	adds	r2, #176	; 0xb0
 8005380:	2100      	movs	r1, #0
 8005382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005386:	2302      	movs	r3, #2
 8005388:	e048      	b.n	800541c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	32b0      	adds	r2, #176	; 0xb0
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	32b0      	adds	r2, #176	; 0xb0
 80053a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7c1b      	ldrb	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <USBD_HID_Init+0xc8>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f003 020f 	and.w	r2, r3, #15
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3326      	adds	r3, #38	; 0x26
 80053cc:	2207      	movs	r2, #7
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	e00c      	b.n	80053ec <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80053d2:	4b14      	ldr	r3, [pc, #80]	; (8005424 <USBD_HID_Init+0xc8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f003 020f 	and.w	r2, r3, #15
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3326      	adds	r3, #38	; 0x26
 80053e8:	220a      	movs	r2, #10
 80053ea:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <USBD_HID_Init+0xc8>)
 80053ee:	7819      	ldrb	r1, [r3, #0]
 80053f0:	2304      	movs	r3, #4
 80053f2:	2203      	movs	r2, #3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 ffd2 	bl	800739e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <USBD_HID_Init+0xc8>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	2201      	movs	r2, #1
 8005412:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200000bf 	.word	0x200000bf

08005428 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005434:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <USBD_HID_DeInit+0x8c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 ffd5 	bl	80073ea <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <USBD_HID_DeInit+0x8c>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	3324      	adds	r3, #36	; 0x24
 8005456:	2200      	movs	r2, #0
 8005458:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <USBD_HID_DeInit+0x8c>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3326      	adds	r3, #38	; 0x26
 8005470:	2200      	movs	r2, #0
 8005472:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	32b0      	adds	r2, #176	; 0xb0
 800547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d011      	beq.n	80054aa <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	32b0      	adds	r2, #176	; 0xb0
 8005490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005494:	4618      	mov	r0, r3
 8005496:	f002 f8a1 	bl	80075dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	32b0      	adds	r2, #176	; 0xb0
 80054a4:	2100      	movs	r1, #0
 80054a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	200000bf 	.word	0x200000bf

080054b8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	32b0      	adds	r2, #176	; 0xb0
 80054cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0e8      	b.n	80056b6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d046      	beq.n	800557e <USBD_HID_Setup+0xc6>
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	f040 80d8 	bne.w	80056a6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	3b02      	subs	r3, #2
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	d836      	bhi.n	800556e <USBD_HID_Setup+0xb6>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <USBD_HID_Setup+0x50>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800555f 	.word	0x0800555f
 800550c:	0800553f 	.word	0x0800553f
 8005510:	0800556f 	.word	0x0800556f
 8005514:	0800556f 	.word	0x0800556f
 8005518:	0800556f 	.word	0x0800556f
 800551c:	0800556f 	.word	0x0800556f
 8005520:	0800556f 	.word	0x0800556f
 8005524:	0800556f 	.word	0x0800556f
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005531 	.word	0x08005531
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	885b      	ldrh	r3, [r3, #2]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	601a      	str	r2, [r3, #0]
          break;
 800553c:	e01e      	b.n	800557c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 fbd5 	bl	8006cf4 <USBD_CtlSendData>
          break;
 800554a:	e017      	b.n	800557c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	885b      	ldrh	r3, [r3, #2]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	b29b      	uxth	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	605a      	str	r2, [r3, #4]
          break;
 800555c:	e00e      	b.n	800557c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3304      	adds	r3, #4
 8005562:	2201      	movs	r2, #1
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 fbc4 	bl	8006cf4 <USBD_CtlSendData>
          break;
 800556c:	e006      	b.n	800557c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 fb4e 	bl	8006c12 <USBD_CtlError>
          ret = USBD_FAIL;
 8005576:	2303      	movs	r3, #3
 8005578:	75fb      	strb	r3, [r7, #23]
          break;
 800557a:	bf00      	nop
      }
      break;
 800557c:	e09a      	b.n	80056b4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	2b0b      	cmp	r3, #11
 8005584:	f200 8086 	bhi.w	8005694 <USBD_HID_Setup+0x1dc>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <USBD_HID_Setup+0xd8>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055c1 	.word	0x080055c1
 8005594:	080056a3 	.word	0x080056a3
 8005598:	08005695 	.word	0x08005695
 800559c:	08005695 	.word	0x08005695
 80055a0:	08005695 	.word	0x08005695
 80055a4:	08005695 	.word	0x08005695
 80055a8:	080055eb 	.word	0x080055eb
 80055ac:	08005695 	.word	0x08005695
 80055b0:	08005695 	.word	0x08005695
 80055b4:	08005695 	.word	0x08005695
 80055b8:	08005643 	.word	0x08005643
 80055bc:	0800566d 	.word	0x0800566d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d107      	bne.n	80055dc <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055cc:	f107 030a 	add.w	r3, r7, #10
 80055d0:	2202      	movs	r2, #2
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 fb8d 	bl	8006cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055da:	e063      	b.n	80056a4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 fb17 	bl	8006c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80055e4:	2303      	movs	r3, #3
 80055e6:	75fb      	strb	r3, [r7, #23]
          break;
 80055e8:	e05c      	b.n	80056a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	885b      	ldrh	r3, [r3, #2]
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b22      	cmp	r3, #34	; 0x22
 80055f4:	d108      	bne.n	8005608 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	2b3f      	cmp	r3, #63	; 0x3f
 80055fc:	bf28      	it	cs
 80055fe:	233f      	movcs	r3, #63	; 0x3f
 8005600:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005602:	4b2f      	ldr	r3, [pc, #188]	; (80056c0 <USBD_HID_Setup+0x208>)
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e015      	b.n	8005634 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	885b      	ldrh	r3, [r3, #2]
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b21      	cmp	r3, #33	; 0x21
 8005612:	d108      	bne.n	8005626 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005614:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <USBD_HID_Setup+0x20c>)
 8005616:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	88db      	ldrh	r3, [r3, #6]
 800561c:	2b09      	cmp	r3, #9
 800561e:	bf28      	it	cs
 8005620:	2309      	movcs	r3, #9
 8005622:	82bb      	strh	r3, [r7, #20]
 8005624:	e006      	b.n	8005634 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 faf2 	bl	8006c12 <USBD_CtlError>
            ret = USBD_FAIL;
 800562e:	2303      	movs	r3, #3
 8005630:	75fb      	strb	r3, [r7, #23]
            break;
 8005632:	e037      	b.n	80056a4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005634:	8abb      	ldrh	r3, [r7, #20]
 8005636:	461a      	mov	r2, r3
 8005638:	6939      	ldr	r1, [r7, #16]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 fb5a 	bl	8006cf4 <USBD_CtlSendData>
          break;
 8005640:	e030      	b.n	80056a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b03      	cmp	r3, #3
 800564c:	d107      	bne.n	800565e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3308      	adds	r3, #8
 8005652:	2201      	movs	r2, #1
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fb4c 	bl	8006cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800565c:	e022      	b.n	80056a4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fad6 	bl	8006c12 <USBD_CtlError>
            ret = USBD_FAIL;
 8005666:	2303      	movs	r3, #3
 8005668:	75fb      	strb	r3, [r7, #23]
          break;
 800566a:	e01b      	b.n	80056a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b03      	cmp	r3, #3
 8005676:	d106      	bne.n	8005686 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	885b      	ldrh	r3, [r3, #2]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005684:	e00e      	b.n	80056a4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fac2 	bl	8006c12 <USBD_CtlError>
            ret = USBD_FAIL;
 800568e:	2303      	movs	r3, #3
 8005690:	75fb      	strb	r3, [r7, #23]
          break;
 8005692:	e007      	b.n	80056a4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fabb 	bl	8006c12 <USBD_CtlError>
          ret = USBD_FAIL;
 800569c:	2303      	movs	r3, #3
 800569e:	75fb      	strb	r3, [r7, #23]
          break;
 80056a0:	e000      	b.n	80056a4 <USBD_HID_Setup+0x1ec>
          break;
 80056a2:	bf00      	nop
      }
      break;
 80056a4:	e006      	b.n	80056b4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 fab2 	bl	8006c12 <USBD_CtlError>
      ret = USBD_FAIL;
 80056ae:	2303      	movs	r3, #3
 80056b0:	75fb      	strb	r3, [r7, #23]
      break;
 80056b2:	bf00      	nop
  }

  return (uint8_t)ret;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000080 	.word	0x20000080
 80056c4:	20000068 	.word	0x20000068

080056c8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	32b0      	adds	r2, #176	; 0xb0
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e014      	b.n	800571a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d10d      	bne.n	8005718 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	7b1b      	ldrb	r3, [r3, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2201      	movs	r2, #1
 8005708:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <USBD_HID_SendReport+0x5c>)
 800570c:	7819      	ldrb	r1, [r3, #0]
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f001 ff11 	bl	800753a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200000bf 	.word	0x200000bf

08005728 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005730:	2181      	movs	r1, #129	; 0x81
 8005732:	4809      	ldr	r0, [pc, #36]	; (8005758 <USBD_HID_GetFSCfgDesc+0x30>)
 8005734:	f000 fc35 	bl	8005fa2 <USBD_GetEpDesc>
 8005738:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	220a      	movs	r2, #10
 8005744:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2222      	movs	r2, #34	; 0x22
 800574a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000044 	.word	0x20000044

0800575c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005764:	2181      	movs	r1, #129	; 0x81
 8005766:	4809      	ldr	r0, [pc, #36]	; (800578c <USBD_HID_GetHSCfgDesc+0x30>)
 8005768:	f000 fc1b 	bl	8005fa2 <USBD_GetEpDesc>
 800576c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2207      	movs	r2, #7
 8005778:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2222      	movs	r2, #34	; 0x22
 800577e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000044 	.word	0x20000044

08005790 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005798:	2181      	movs	r1, #129	; 0x81
 800579a:	4809      	ldr	r0, [pc, #36]	; (80057c0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800579c:	f000 fc01 	bl	8005fa2 <USBD_GetEpDesc>
 80057a0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	220a      	movs	r2, #10
 80057ac:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2222      	movs	r2, #34	; 0x22
 80057b2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000044 	.word	0x20000044

080057c4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	32b0      	adds	r2, #176	; 0xb0
 80057da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057de:	2200      	movs	r2, #0
 80057e0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	220a      	movs	r2, #10
 80057fc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000074 	.word	0x20000074

08005810 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e01f      	b.n	8005868 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	79fa      	ldrb	r2, [r7, #7]
 800585a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f001 fd37 	bl	80072d0 <USBD_LL_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	e025      	b.n	80058d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	32ae      	adds	r2, #174	; 0xae
 800589a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	32ae      	adds	r2, #174	; 0xae
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	f107 020e 	add.w	r2, r7, #14
 80058b8:	4610      	mov	r0, r2
 80058ba:	4798      	blx	r3
 80058bc:	4602      	mov	r2, r0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fd3f 	bl	8007368 <USBD_LL_Start>
 80058ea:	4603      	mov	r3, r0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	4611      	mov	r1, r2
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	4611      	mov	r1, r2
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f908 	bl	8006b9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d01a      	beq.n	80059e8 <USBD_LL_SetupStage+0x72>
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d822      	bhi.n	80059fc <USBD_LL_SetupStage+0x86>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <USBD_LL_SetupStage+0x4a>
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d00a      	beq.n	80059d4 <USBD_LL_SetupStage+0x5e>
 80059be:	e01d      	b.n	80059fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fb5f 	bl	800608c <USBD_StdDevReq>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
      break;
 80059d2:	e020      	b.n	8005a16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fbc7 	bl	8006170 <USBD_StdItfReq>
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]
      break;
 80059e6:	e016      	b.n	8005a16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fc29 	bl	8006248 <USBD_StdEPReq>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73fb      	strb	r3, [r7, #15]
      break;
 80059fa:	e00c      	b.n	8005a16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fd0c 	bl	8007428 <USBD_LL_StallEP>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	bf00      	nop
  }

  return ret;
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d16e      	bne.n	8005b16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	f040 8098 	bne.w	8005b7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d913      	bls.n	8005a80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	bf28      	it	cs
 8005a72:	4613      	movcs	r3, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f001 f967 	bl	8006d4c <USBD_CtlContinueRx>
 8005a7e:	e07d      	b.n	8005b7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d014      	beq.n	8005ab8 <USBD_LL_DataOutStage+0x98>
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d81d      	bhi.n	8005ace <USBD_LL_DataOutStage+0xae>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <USBD_LL_DataOutStage+0x7c>
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d003      	beq.n	8005aa2 <USBD_LL_DataOutStage+0x82>
 8005a9a:	e018      	b.n	8005ace <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75bb      	strb	r3, [r7, #22]
            break;
 8005aa0:	e018      	b.n	8005ad4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	4619      	mov	r1, r3
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fa5e 	bl	8005f6e <USBD_CoreFindIF>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75bb      	strb	r3, [r7, #22]
            break;
 8005ab6:	e00d      	b.n	8005ad4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa60 	bl	8005f88 <USBD_CoreFindEP>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	75bb      	strb	r3, [r7, #22]
            break;
 8005acc:	e002      	b.n	8005ad4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ad2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ad4:	7dbb      	ldrb	r3, [r7, #22]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d119      	bne.n	8005b0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d113      	bne.n	8005b0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ae6:	7dba      	ldrb	r2, [r7, #22]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	32ae      	adds	r2, #174	; 0xae
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005af6:	7dba      	ldrb	r2, [r7, #22]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005afe:	7dba      	ldrb	r2, [r7, #22]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	32ae      	adds	r2, #174	; 0xae
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f001 f92d 	bl	8006d6e <USBD_CtlSendStatus>
 8005b14:	e032      	b.n	8005b7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b16:	7afb      	ldrb	r3, [r7, #11]
 8005b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	4619      	mov	r1, r3
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fa31 	bl	8005f88 <USBD_CoreFindEP>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b2a:	7dbb      	ldrb	r3, [r7, #22]
 8005b2c:	2bff      	cmp	r3, #255	; 0xff
 8005b2e:	d025      	beq.n	8005b7c <USBD_LL_DataOutStage+0x15c>
 8005b30:	7dbb      	ldrb	r3, [r7, #22]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d122      	bne.n	8005b7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d117      	bne.n	8005b72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b42:	7dba      	ldrb	r2, [r7, #22]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	32ae      	adds	r2, #174	; 0xae
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00f      	beq.n	8005b72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b52:	7dba      	ldrb	r2, [r7, #22]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b5a:	7dba      	ldrb	r2, [r7, #22]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	32ae      	adds	r2, #174	; 0xae
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	7afa      	ldrb	r2, [r7, #11]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	4798      	blx	r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	e000      	b.n	8005b7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d16f      	bne.n	8005c7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d15a      	bne.n	8005c60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d914      	bls.n	8005be0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 f8ac 	bl	8006d2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f001 fccf 	bl	800757c <USBD_LL_PrepareReceive>
 8005bde:	e03f      	b.n	8005c60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d11c      	bne.n	8005c26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d316      	bcc.n	8005c26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d20f      	bcs.n	8005c26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c06:	2200      	movs	r2, #0
 8005c08:	2100      	movs	r1, #0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f001 f88d 	bl	8006d2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f001 fcac 	bl	800757c <USBD_LL_PrepareReceive>
 8005c24:	e01c      	b.n	8005c60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d10f      	bne.n	8005c52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f001 fbe7 	bl	8007428 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f001 f89a 	bl	8006d94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d03a      	beq.n	8005ce0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fe42 	bl	80058f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c78:	e032      	b.n	8005ce0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4619      	mov	r1, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f97f 	bl	8005f88 <USBD_CoreFindEP>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	2bff      	cmp	r3, #255	; 0xff
 8005c92:	d025      	beq.n	8005ce0 <USBD_LL_DataInStage+0x15a>
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d122      	bne.n	8005ce0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d11c      	bne.n	8005ce0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ca6:	7dfa      	ldrb	r2, [r7, #23]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	32ae      	adds	r2, #174	; 0xae
 8005cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d014      	beq.n	8005ce0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cb6:	7dfa      	ldrb	r2, [r7, #23]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cbe:	7dfa      	ldrb	r2, [r7, #23]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	32ae      	adds	r2, #174	; 0xae
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	7afa      	ldrb	r2, [r7, #11]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	4798      	blx	r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cd6:	7dbb      	ldrb	r3, [r7, #22]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005cdc:	7dbb      	ldrb	r3, [r7, #22]
 8005cde:	e000      	b.n	8005ce2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d014      	beq.n	8005d50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6852      	ldr	r2, [r2, #4]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	4611      	mov	r1, r2
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d50:	2340      	movs	r3, #64	; 0x40
 8005d52:	2200      	movs	r2, #0
 8005d54:	2100      	movs	r1, #0
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fb21 	bl	800739e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d6c:	2340      	movs	r3, #64	; 0x40
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fb13 	bl	800739e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	621a      	str	r2, [r3, #32]

  return ret;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d106      	bne.n	8005dfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d110      	bne.n	8005e40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	32ae      	adds	r2, #174	; 0xae
 8005e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e01c      	b.n	8005ea6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d115      	bne.n	8005ea4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	32ae      	adds	r2, #174	; 0xae
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	; 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32ae      	adds	r2, #174	; 0xae
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e01c      	b.n	8005f0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d115      	bne.n	8005f08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32ae      	adds	r2, #174	; 0xae
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32ae      	adds	r2, #174	; 0xae
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	4611      	mov	r1, r2
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00e      	beq.n	8005f64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6852      	ldr	r2, [r2, #4]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	4611      	mov	r1, r2
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f60:	2303      	movs	r3, #3
 8005f62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d920      	bls.n	800600c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fd2:	e013      	b.n	8005ffc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fd4:	f107 030a 	add.w	r3, r7, #10
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f000 f81b 	bl	8006016 <USBD_GetNextDesc>
 8005fe0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d108      	bne.n	8005ffc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	789b      	ldrb	r3, [r3, #2]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d008      	beq.n	800600a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	885b      	ldrh	r3, [r3, #2]
 8006000:	b29a      	uxth	r2, r3
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	429a      	cmp	r2, r3
 8006006:	d8e5      	bhi.n	8005fd4 <USBD_GetEpDesc+0x32>
 8006008:	e000      	b.n	800600c <USBD_GetEpDesc+0x6a>
          break;
 800600a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800600c:	693b      	ldr	r3, [r7, #16]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	4413      	add	r3, r2
 8006030:	b29a      	uxth	r2, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	3301      	adds	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800606e:	8a3b      	ldrh	r3, [r7, #16]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	b21a      	sxth	r2, r3
 8006074:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006078:	4313      	orrs	r3, r2
 800607a:	b21b      	sxth	r3, r3
 800607c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800607e:	89fb      	ldrh	r3, [r7, #14]
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d005      	beq.n	80060b2 <USBD_StdDevReq+0x26>
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d857      	bhi.n	800615a <USBD_StdDevReq+0xce>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00f      	beq.n	80060ce <USBD_StdDevReq+0x42>
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d153      	bne.n	800615a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	32ae      	adds	r2, #174	; 0xae
 80060bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
 80060c8:	4603      	mov	r3, r0
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	e04a      	b.n	8006164 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d83b      	bhi.n	800614e <USBD_StdDevReq+0xc2>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <USBD_StdDevReq+0x50>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006131 	.word	0x08006131
 80060e0:	08006145 	.word	0x08006145
 80060e4:	0800614f 	.word	0x0800614f
 80060e8:	0800613b 	.word	0x0800613b
 80060ec:	0800614f 	.word	0x0800614f
 80060f0:	0800610f 	.word	0x0800610f
 80060f4:	08006105 	.word	0x08006105
 80060f8:	0800614f 	.word	0x0800614f
 80060fc:	08006127 	.word	0x08006127
 8006100:	08006119 	.word	0x08006119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa3c 	bl	8006584 <USBD_GetDescriptor>
          break;
 800610c:	e024      	b.n	8006158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fba1 	bl	8006858 <USBD_SetAddress>
          break;
 8006116:	e01f      	b.n	8006158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fbe0 	bl	80068e0 <USBD_SetConfig>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
          break;
 8006124:	e018      	b.n	8006158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fc83 	bl	8006a34 <USBD_GetConfig>
          break;
 800612e:	e013      	b.n	8006158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fcb4 	bl	8006aa0 <USBD_GetStatus>
          break;
 8006138:	e00e      	b.n	8006158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fce3 	bl	8006b08 <USBD_SetFeature>
          break;
 8006142:	e009      	b.n	8006158 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fd07 	bl	8006b5a <USBD_ClrFeature>
          break;
 800614c:	e004      	b.n	8006158 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fd5e 	bl	8006c12 <USBD_CtlError>
          break;
 8006156:	bf00      	nop
      }
      break;
 8006158:	e004      	b.n	8006164 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fd58 	bl	8006c12 <USBD_CtlError>
      break;
 8006162:	bf00      	nop
  }

  return ret;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop

08006170 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d005      	beq.n	8006196 <USBD_StdItfReq+0x26>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d852      	bhi.n	8006234 <USBD_StdItfReq+0xc4>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <USBD_StdItfReq+0x26>
 8006192:	2b20      	cmp	r3, #32
 8006194:	d14e      	bne.n	8006234 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619c:	b2db      	uxtb	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d840      	bhi.n	8006226 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	889b      	ldrh	r3, [r3, #4]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d836      	bhi.n	800621c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	889b      	ldrh	r3, [r3, #4]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff fed9 	bl	8005f6e <USBD_CoreFindIF>
 80061bc:	4603      	mov	r3, r0
 80061be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	2bff      	cmp	r3, #255	; 0xff
 80061c4:	d01d      	beq.n	8006202 <USBD_StdItfReq+0x92>
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d11a      	bne.n	8006202 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061cc:	7bba      	ldrb	r2, [r7, #14]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32ae      	adds	r2, #174	; 0xae
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00f      	beq.n	80061fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061dc:	7bba      	ldrb	r2, [r7, #14]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061e4:	7bba      	ldrb	r2, [r7, #14]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	32ae      	adds	r2, #174	; 0xae
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061fa:	e004      	b.n	8006206 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006200:	e001      	b.n	8006206 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006202:	2303      	movs	r3, #3
 8006204:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	88db      	ldrh	r3, [r3, #6]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d110      	bne.n	8006230 <USBD_StdItfReq+0xc0>
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fdaa 	bl	8006d6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800621a:	e009      	b.n	8006230 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fcf7 	bl	8006c12 <USBD_CtlError>
          break;
 8006224:	e004      	b.n	8006230 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fcf2 	bl	8006c12 <USBD_CtlError>
          break;
 800622e:	e000      	b.n	8006232 <USBD_StdItfReq+0xc2>
          break;
 8006230:	bf00      	nop
      }
      break;
 8006232:	e004      	b.n	800623e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fceb 	bl	8006c12 <USBD_CtlError>
      break;
 800623c:	bf00      	nop
  }

  return ret;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	889b      	ldrh	r3, [r3, #4]
 800625a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d007      	beq.n	8006278 <USBD_StdEPReq+0x30>
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	f200 817f 	bhi.w	800656c <USBD_StdEPReq+0x324>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d02a      	beq.n	80062c8 <USBD_StdEPReq+0x80>
 8006272:	2b20      	cmp	r3, #32
 8006274:	f040 817a 	bne.w	800656c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fe83 	bl	8005f88 <USBD_CoreFindEP>
 8006282:	4603      	mov	r3, r0
 8006284:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	2bff      	cmp	r3, #255	; 0xff
 800628a:	f000 8174 	beq.w	8006576 <USBD_StdEPReq+0x32e>
 800628e:	7b7b      	ldrb	r3, [r7, #13]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 8170 	bne.w	8006576 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006296:	7b7a      	ldrb	r2, [r7, #13]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800629e:	7b7a      	ldrb	r2, [r7, #13]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	32ae      	adds	r2, #174	; 0xae
 80062a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8163 	beq.w	8006576 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062b0:	7b7a      	ldrb	r2, [r7, #13]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32ae      	adds	r2, #174	; 0xae
 80062b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
 80062c2:	4603      	mov	r3, r0
 80062c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062c6:	e156      	b.n	8006576 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d008      	beq.n	80062e2 <USBD_StdEPReq+0x9a>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	f300 8145 	bgt.w	8006560 <USBD_StdEPReq+0x318>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 809b 	beq.w	8006412 <USBD_StdEPReq+0x1ca>
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d03c      	beq.n	800635a <USBD_StdEPReq+0x112>
 80062e0:	e13e      	b.n	8006560 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d002      	beq.n	80062f4 <USBD_StdEPReq+0xac>
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d016      	beq.n	8006320 <USBD_StdEPReq+0xd8>
 80062f2:	e02c      	b.n	800634e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <USBD_StdEPReq+0xce>
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d00a      	beq.n	8006316 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f88f 	bl	8007428 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800630a:	2180      	movs	r1, #128	; 0x80
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f88b 	bl	8007428 <USBD_LL_StallEP>
 8006312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006314:	e020      	b.n	8006358 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc7a 	bl	8006c12 <USBD_CtlError>
              break;
 800631e:	e01b      	b.n	8006358 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	885b      	ldrh	r3, [r3, #2]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10e      	bne.n	8006346 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <USBD_StdEPReq+0xfe>
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d008      	beq.n	8006346 <USBD_StdEPReq+0xfe>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	88db      	ldrh	r3, [r3, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f871 	bl	8007428 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fd11 	bl	8006d6e <USBD_CtlSendStatus>

              break;
 800634c:	e004      	b.n	8006358 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc5e 	bl	8006c12 <USBD_CtlError>
              break;
 8006356:	bf00      	nop
          }
          break;
 8006358:	e107      	b.n	800656a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d002      	beq.n	800636c <USBD_StdEPReq+0x124>
 8006366:	2b03      	cmp	r3, #3
 8006368:	d016      	beq.n	8006398 <USBD_StdEPReq+0x150>
 800636a:	e04b      	b.n	8006404 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <USBD_StdEPReq+0x146>
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d00a      	beq.n	800638e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f853 	bl	8007428 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f84f 	bl	8007428 <USBD_LL_StallEP>
 800638a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800638c:	e040      	b.n	8006410 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc3e 	bl	8006c12 <USBD_CtlError>
              break;
 8006396:	e03b      	b.n	8006410 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d136      	bne.n	800640e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f859 	bl	8007466 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fcda 	bl	8006d6e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fde2 	bl	8005f88 <USBD_CoreFindEP>
 80063c4:	4603      	mov	r3, r0
 80063c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063c8:	7b7b      	ldrb	r3, [r7, #13]
 80063ca:	2bff      	cmp	r3, #255	; 0xff
 80063cc:	d01f      	beq.n	800640e <USBD_StdEPReq+0x1c6>
 80063ce:	7b7b      	ldrb	r3, [r7, #13]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11c      	bne.n	800640e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063d4:	7b7a      	ldrb	r2, [r7, #13]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063dc:	7b7a      	ldrb	r2, [r7, #13]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	32ae      	adds	r2, #174	; 0xae
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d010      	beq.n	800640e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063ec:	7b7a      	ldrb	r2, [r7, #13]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32ae      	adds	r2, #174	; 0xae
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006402:	e004      	b.n	800640e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fc03 	bl	8006c12 <USBD_CtlError>
              break;
 800640c:	e000      	b.n	8006410 <USBD_StdEPReq+0x1c8>
              break;
 800640e:	bf00      	nop
          }
          break;
 8006410:	e0ab      	b.n	800656a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d002      	beq.n	8006424 <USBD_StdEPReq+0x1dc>
 800641e:	2b03      	cmp	r3, #3
 8006420:	d032      	beq.n	8006488 <USBD_StdEPReq+0x240>
 8006422:	e097      	b.n	8006554 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <USBD_StdEPReq+0x1f2>
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d004      	beq.n	800643a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fbed 	bl	8006c12 <USBD_CtlError>
                break;
 8006438:	e091      	b.n	800655e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800643a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da0b      	bge.n	800645a <USBD_StdEPReq+0x212>
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	3310      	adds	r3, #16
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	3304      	adds	r3, #4
 8006458:	e00b      	b.n	8006472 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	4413      	add	r3, r2
 8006470:	3304      	adds	r3, #4
 8006472:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2202      	movs	r2, #2
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc37 	bl	8006cf4 <USBD_CtlSendData>
              break;
 8006486:	e06a      	b.n	800655e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800648c:	2b00      	cmp	r3, #0
 800648e:	da11      	bge.n	80064b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	f003 020f 	and.w	r2, r3, #15
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d117      	bne.n	80064da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fbb0 	bl	8006c12 <USBD_CtlError>
                  break;
 80064b2:	e054      	b.n	800655e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fb9d 	bl	8006c12 <USBD_CtlError>
                  break;
 80064d8:	e041      	b.n	800655e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da0b      	bge.n	80064fa <USBD_StdEPReq+0x2b2>
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	3310      	adds	r3, #16
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	3304      	adds	r3, #4
 80064f8:	e00b      	b.n	8006512 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <USBD_StdEPReq+0x2d8>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b80      	cmp	r3, #128	; 0x80
 800651e:	d103      	bne.n	8006528 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e00e      	b.n	8006546 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 ffb9 	bl	80074a4 <USBD_LL_IsStallEP>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e002      	b.n	8006546 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2202      	movs	r2, #2
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fbd1 	bl	8006cf4 <USBD_CtlSendData>
              break;
 8006552:	e004      	b.n	800655e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fb5b 	bl	8006c12 <USBD_CtlError>
              break;
 800655c:	bf00      	nop
          }
          break;
 800655e:	e004      	b.n	800656a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb55 	bl	8006c12 <USBD_CtlError>
          break;
 8006568:	bf00      	nop
      }
      break;
 800656a:	e005      	b.n	8006578 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb4f 	bl	8006c12 <USBD_CtlError>
      break;
 8006574:	e000      	b.n	8006578 <USBD_StdEPReq+0x330>
      break;
 8006576:	bf00      	nop
  }

  return ret;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	2b06      	cmp	r3, #6
 80065a6:	f200 8128 	bhi.w	80067fa <USBD_GetDescriptor+0x276>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <USBD_GetDescriptor+0x2c>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065e5 	.word	0x080065e5
 80065b8:	08006625 	.word	0x08006625
 80065bc:	080067fb 	.word	0x080067fb
 80065c0:	080067fb 	.word	0x080067fb
 80065c4:	0800679b 	.word	0x0800679b
 80065c8:	080067c7 	.word	0x080067c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	7c12      	ldrb	r2, [r2, #16]
 80065d8:	f107 0108 	add.w	r1, r7, #8
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
 80065e0:	60f8      	str	r0, [r7, #12]
      break;
 80065e2:	e112      	b.n	800680a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	7c1b      	ldrb	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10d      	bne.n	8006608 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	f107 0208 	add.w	r2, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	2202      	movs	r2, #2
 8006604:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006606:	e100      	b.n	800680a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	f107 0208 	add.w	r2, r7, #8
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	2202      	movs	r2, #2
 8006620:	701a      	strb	r2, [r3, #0]
      break;
 8006622:	e0f2      	b.n	800680a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	885b      	ldrh	r3, [r3, #2]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b05      	cmp	r3, #5
 800662c:	f200 80ac 	bhi.w	8006788 <USBD_GetDescriptor+0x204>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <USBD_GetDescriptor+0xb4>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006651 	.word	0x08006651
 800663c:	08006685 	.word	0x08006685
 8006640:	080066b9 	.word	0x080066b9
 8006644:	080066ed 	.word	0x080066ed
 8006648:	08006721 	.word	0x08006721
 800664c:	08006755 	.word	0x08006755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	7c12      	ldrb	r2, [r2, #16]
 8006668:	f107 0108 	add.w	r1, r7, #8
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
 8006670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006672:	e091      	b.n	8006798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 facb 	bl	8006c12 <USBD_CtlError>
            err++;
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	3301      	adds	r3, #1
 8006680:	72fb      	strb	r3, [r7, #11]
          break;
 8006682:	e089      	b.n	8006798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	7c12      	ldrb	r2, [r2, #16]
 800669c:	f107 0108 	add.w	r1, r7, #8
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066a6:	e077      	b.n	8006798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fab1 	bl	8006c12 <USBD_CtlError>
            err++;
 80066b0:	7afb      	ldrb	r3, [r7, #11]
 80066b2:	3301      	adds	r3, #1
 80066b4:	72fb      	strb	r3, [r7, #11]
          break;
 80066b6:	e06f      	b.n	8006798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066da:	e05d      	b.n	8006798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa97 	bl	8006c12 <USBD_CtlError>
            err++;
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	3301      	adds	r3, #1
 80066e8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ea:	e055      	b.n	8006798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	f107 0108 	add.w	r1, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670e:	e043      	b.n	8006798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa7d 	bl	8006c12 <USBD_CtlError>
            err++;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
          break;
 800671e:	e03b      	b.n	8006798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006742:	e029      	b.n	8006798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa63 	bl	8006c12 <USBD_CtlError>
            err++;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	3301      	adds	r3, #1
 8006750:	72fb      	strb	r3, [r7, #11]
          break;
 8006752:	e021      	b.n	8006798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006776:	e00f      	b.n	8006798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa49 	bl	8006c12 <USBD_CtlError>
            err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
          break;
 8006786:	e007      	b.n	8006798 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa41 	bl	8006c12 <USBD_CtlError>
          err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006796:	bf00      	nop
      }
      break;
 8006798:	e037      	b.n	800680a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	7c1b      	ldrb	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067aa:	f107 0208 	add.w	r2, r7, #8
 80067ae:	4610      	mov	r0, r2
 80067b0:	4798      	blx	r3
 80067b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067b4:	e029      	b.n	800680a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa2a 	bl	8006c12 <USBD_CtlError>
        err++;
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	3301      	adds	r3, #1
 80067c2:	72fb      	strb	r3, [r7, #11]
      break;
 80067c4:	e021      	b.n	800680a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10d      	bne.n	80067ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	f107 0208 	add.w	r2, r7, #8
 80067da:	4610      	mov	r0, r2
 80067dc:	4798      	blx	r3
 80067de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	2207      	movs	r2, #7
 80067e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e8:	e00f      	b.n	800680a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa10 	bl	8006c12 <USBD_CtlError>
        err++;
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	3301      	adds	r3, #1
 80067f6:	72fb      	strb	r3, [r7, #11]
      break;
 80067f8:	e007      	b.n	800680a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa08 	bl	8006c12 <USBD_CtlError>
      err++;
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	3301      	adds	r3, #1
 8006806:	72fb      	strb	r3, [r7, #11]
      break;
 8006808:	bf00      	nop
  }

  if (err != 0U)
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d11e      	bne.n	800684e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	88db      	ldrh	r3, [r3, #6]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006818:	893b      	ldrh	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00e      	beq.n	800683c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	88da      	ldrh	r2, [r3, #6]
 8006822:	893b      	ldrh	r3, [r7, #8]
 8006824:	4293      	cmp	r3, r2
 8006826:	bf28      	it	cs
 8006828:	4613      	movcs	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800682e:	893b      	ldrh	r3, [r7, #8]
 8006830:	461a      	mov	r2, r3
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fa5d 	bl	8006cf4 <USBD_CtlSendData>
 800683a:	e009      	b.n	8006850 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f9e7 	bl	8006c12 <USBD_CtlError>
 8006844:	e004      	b.n	8006850 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa91 	bl	8006d6e <USBD_CtlSendStatus>
 800684c:	e000      	b.n	8006850 <USBD_GetDescriptor+0x2cc>
    return;
 800684e:	bf00      	nop
  }
}
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	889b      	ldrh	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d131      	bne.n	80068ce <USBD_SetAddress+0x76>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d12d      	bne.n	80068ce <USBD_SetAddress+0x76>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	885b      	ldrh	r3, [r3, #2]
 8006876:	2b7f      	cmp	r3, #127	; 0x7f
 8006878:	d829      	bhi.n	80068ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006884:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b03      	cmp	r3, #3
 8006890:	d104      	bne.n	800689c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f9bc 	bl	8006c12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	e01d      	b.n	80068d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7bfa      	ldrb	r2, [r7, #15]
 80068a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fe27 	bl	80074fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa5d 	bl	8006d6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c2:	e009      	b.n	80068d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068cc:	e004      	b.n	80068d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f99e 	bl	8006c12 <USBD_CtlError>
  }
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	885b      	ldrh	r3, [r3, #2]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	4b4e      	ldr	r3, [pc, #312]	; (8006a30 <USBD_SetConfig+0x150>)
 80068f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068f8:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <USBD_SetConfig+0x150>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d905      	bls.n	800690c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f985 	bl	8006c12 <USBD_CtlError>
    return USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	e08c      	b.n	8006a26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d002      	beq.n	800691e <USBD_SetConfig+0x3e>
 8006918:	2b03      	cmp	r3, #3
 800691a:	d029      	beq.n	8006970 <USBD_SetConfig+0x90>
 800691c:	e075      	b.n	8006a0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800691e:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <USBD_SetConfig+0x150>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d020      	beq.n	8006968 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006926:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <USBD_SetConfig+0x150>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006930:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <USBD_SetConfig+0x150>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe ffe7 	bl	800590a <USBD_SetClassConfig>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f962 	bl	8006c12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006956:	e065      	b.n	8006a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa08 	bl	8006d6e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2203      	movs	r2, #3
 8006962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006966:	e05d      	b.n	8006a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa00 	bl	8006d6e <USBD_CtlSendStatus>
      break;
 800696e:	e059      	b.n	8006a24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006970:	4b2f      	ldr	r3, [pc, #188]	; (8006a30 <USBD_SetConfig+0x150>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d112      	bne.n	800699e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006980:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <USBD_SetConfig+0x150>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800698a:	4b29      	ldr	r3, [pc, #164]	; (8006a30 <USBD_SetConfig+0x150>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe ffd6 	bl	8005942 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9e9 	bl	8006d6e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800699c:	e042      	b.n	8006a24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800699e:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <USBD_SetConfig+0x150>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d02a      	beq.n	8006a02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fe ffc4 	bl	8005942 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069ba:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <USBD_SetConfig+0x150>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069c4:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <USBD_SetConfig+0x150>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fe ff9d 	bl	800590a <USBD_SetClassConfig>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00f      	beq.n	80069fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f918 	bl	8006c12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fe ffa9 	bl	8005942 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069f8:	e014      	b.n	8006a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9b7 	bl	8006d6e <USBD_CtlSendStatus>
      break;
 8006a00:	e010      	b.n	8006a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9b3 	bl	8006d6e <USBD_CtlSendStatus>
      break;
 8006a08:	e00c      	b.n	8006a24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f900 	bl	8006c12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <USBD_SetConfig+0x150>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fe ff92 	bl	8005942 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	73fb      	strb	r3, [r7, #15]
      break;
 8006a22:	bf00      	nop
  }

  return ret;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200001f4 	.word	0x200001f4

08006a34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d004      	beq.n	8006a50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8e2 	bl	8006c12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a4e:	e023      	b.n	8006a98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	dc02      	bgt.n	8006a62 <USBD_GetConfig+0x2e>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dc03      	bgt.n	8006a68 <USBD_GetConfig+0x34>
 8006a60:	e015      	b.n	8006a8e <USBD_GetConfig+0x5a>
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d00b      	beq.n	8006a7e <USBD_GetConfig+0x4a>
 8006a66:	e012      	b.n	8006a8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3308      	adds	r3, #8
 8006a72:	2201      	movs	r2, #1
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f93c 	bl	8006cf4 <USBD_CtlSendData>
        break;
 8006a7c:	e00c      	b.n	8006a98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2201      	movs	r2, #1
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f934 	bl	8006cf4 <USBD_CtlSendData>
        break;
 8006a8c:	e004      	b.n	8006a98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8be 	bl	8006c12 <USBD_CtlError>
        break;
 8006a96:	bf00      	nop
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d81e      	bhi.n	8006af6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d004      	beq.n	8006aca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f8a5 	bl	8006c12 <USBD_CtlError>
        break;
 8006ac8:	e01a      	b.n	8006b00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f043 0202 	orr.w	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	2202      	movs	r2, #2
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f900 	bl	8006cf4 <USBD_CtlSendData>
      break;
 8006af4:	e004      	b.n	8006b00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f88a 	bl	8006c12 <USBD_CtlError>
      break;
 8006afe:	bf00      	nop
  }
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	885b      	ldrh	r3, [r3, #2]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d107      	bne.n	8006b2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f923 	bl	8006d6e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b28:	e013      	b.n	8006b52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d10b      	bne.n	8006b4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	889b      	ldrh	r3, [r3, #4]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f913 	bl	8006d6e <USBD_CtlSendStatus>
}
 8006b48:	e003      	b.n	8006b52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f860 	bl	8006c12 <USBD_CtlError>
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d80b      	bhi.n	8006b8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	885b      	ldrh	r3, [r3, #2]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10c      	bne.n	8006b94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8f3 	bl	8006d6e <USBD_CtlSendStatus>
      }
      break;
 8006b88:	e004      	b.n	8006b94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f840 	bl	8006c12 <USBD_CtlError>
      break;
 8006b92:	e000      	b.n	8006b96 <USBD_ClrFeature+0x3c>
      break;
 8006b94:	bf00      	nop
  }
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	781a      	ldrb	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff fa41 	bl	8006050 <SWAPBYTE>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fa34 	bl	8006050 <SWAPBYTE>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fa27 	bl	8006050 <SWAPBYTE>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461a      	mov	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	80da      	strh	r2, [r3, #6]
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fc02 	bl	8007428 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c24:	2100      	movs	r1, #0
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fbfe 	bl	8007428 <USBD_LL_StallEP>
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d036      	beq.n	8006cb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f000 f836 	bl	8006cc0 <USBD_GetLen>
 8006c54:	4603      	mov	r3, r0
 8006c56:	3301      	adds	r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	3301      	adds	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	3301      	adds	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c84:	e013      	b.n	8006cae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3301      	adds	r3, #1
 8006c96:	613b      	str	r3, [r7, #16]
    idx++;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	3301      	adds	r3, #1
 8006cac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e7      	bne.n	8006c86 <USBD_GetString+0x52>
 8006cb6:	e000      	b.n	8006cba <USBD_GetString+0x86>
    return;
 8006cb8:	bf00      	nop
  }
}
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cd0:	e005      	b.n	8006cde <USBD_GetLen+0x1e>
  {
    len++;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f5      	bne.n	8006cd2 <USBD_GetLen+0x12>
  }

  return len;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fc0d 	bl	800753a <USBD_LL_Transmit>

  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fbfc 	bl	800753a <USBD_LL_Transmit>

  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fc0c 	bl	800757c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fbd8 	bl	800753a <USBD_LL_Transmit>

  return USBD_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2205      	movs	r2, #5
 8006da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006da4:	2300      	movs	r3, #0
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fbe6 	bl	800757c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	490e      	ldr	r1, [pc, #56]	; (8006dfc <MX_USB_DEVICE_Init+0x40>)
 8006dc4:	480e      	ldr	r0, [pc, #56]	; (8006e00 <MX_USB_DEVICE_Init+0x44>)
 8006dc6:	f7fe fd23 	bl	8005810 <USBD_Init>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dd0:	f7f9 feb2 	bl	8000b38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006dd4:	490b      	ldr	r1, [pc, #44]	; (8006e04 <MX_USB_DEVICE_Init+0x48>)
 8006dd6:	480a      	ldr	r0, [pc, #40]	; (8006e00 <MX_USB_DEVICE_Init+0x44>)
 8006dd8:	f7fe fd4a 	bl	8005870 <USBD_RegisterClass>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006de2:	f7f9 fea9 	bl	8000b38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006de6:	4806      	ldr	r0, [pc, #24]	; (8006e00 <MX_USB_DEVICE_Init+0x44>)
 8006de8:	f7fe fd78 	bl	80058dc <USBD_Start>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006df2:	f7f9 fea1 	bl	8000b38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200000c0 	.word	0x200000c0
 8006e00:	200001f8 	.word	0x200001f8
 8006e04:	2000000c 	.word	0x2000000c

08006e08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2212      	movs	r2, #18
 8006e18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e1a:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	200000dc 	.word	0x200000dc

08006e2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	6039      	str	r1, [r7, #0]
 8006e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e3e:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	200000f0 	.word	0x200000f0

08006e50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d105      	bne.n	8006e6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	4907      	ldr	r1, [pc, #28]	; (8006e84 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e66:	4808      	ldr	r0, [pc, #32]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e68:	f7ff fee4 	bl	8006c34 <USBD_GetString>
 8006e6c:	e004      	b.n	8006e78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4904      	ldr	r1, [pc, #16]	; (8006e84 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e72:	4805      	ldr	r0, [pc, #20]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e74:	f7ff fede 	bl	8006c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e78:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	200004d4 	.word	0x200004d4
 8006e88:	080076b8 	.word	0x080076b8

08006e8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	6039      	str	r1, [r7, #0]
 8006e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	4904      	ldr	r1, [pc, #16]	; (8006eac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e9c:	4804      	ldr	r0, [pc, #16]	; (8006eb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e9e:	f7ff fec9 	bl	8006c34 <USBD_GetString>
  return USBD_StrDesc;
 8006ea2:	4b02      	ldr	r3, [pc, #8]	; (8006eac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200004d4 	.word	0x200004d4
 8006eb0:	080076c8 	.word	0x080076c8

08006eb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	6039      	str	r1, [r7, #0]
 8006ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	221a      	movs	r2, #26
 8006ec4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ec6:	f000 f843 	bl	8006f50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006eca:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	200000f4 	.word	0x200000f4

08006ed8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4907      	ldr	r1, [pc, #28]	; (8006f0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eee:	4808      	ldr	r0, [pc, #32]	; (8006f10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ef0:	f7ff fea0 	bl	8006c34 <USBD_GetString>
 8006ef4:	e004      	b.n	8006f00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4904      	ldr	r1, [pc, #16]	; (8006f0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006efa:	4805      	ldr	r0, [pc, #20]	; (8006f10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006efc:	f7ff fe9a 	bl	8006c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200004d4 	.word	0x200004d4
 8006f10:	080076d8 	.word	0x080076d8

08006f14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4907      	ldr	r1, [pc, #28]	; (8006f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f2a:	4808      	ldr	r0, [pc, #32]	; (8006f4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f2c:	f7ff fe82 	bl	8006c34 <USBD_GetString>
 8006f30:	e004      	b.n	8006f3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	4904      	ldr	r1, [pc, #16]	; (8006f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f36:	4805      	ldr	r0, [pc, #20]	; (8006f4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f38:	f7ff fe7c 	bl	8006c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	200004d4 	.word	0x200004d4
 8006f4c:	080076e4 	.word	0x080076e4

08006f50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <Get_SerialNum+0x44>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <Get_SerialNum+0x48>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <Get_SerialNum+0x4c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f76:	2208      	movs	r2, #8
 8006f78:	4909      	ldr	r1, [pc, #36]	; (8006fa0 <Get_SerialNum+0x50>)
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f814 	bl	8006fa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f80:	2204      	movs	r2, #4
 8006f82:	4908      	ldr	r1, [pc, #32]	; (8006fa4 <Get_SerialNum+0x54>)
 8006f84:	68b8      	ldr	r0, [r7, #8]
 8006f86:	f000 f80f 	bl	8006fa8 <IntToUnicode>
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	1fff7a10 	.word	0x1fff7a10
 8006f98:	1fff7a14 	.word	0x1fff7a14
 8006f9c:	1fff7a18 	.word	0x1fff7a18
 8006fa0:	200000f6 	.word	0x200000f6
 8006fa4:	20000106 	.word	0x20000106

08006fa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]
 8006fbe:	e027      	b.n	8007010 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	0f1b      	lsrs	r3, r3, #28
 8006fc4:	2b09      	cmp	r3, #9
 8006fc6:	d80b      	bhi.n	8006fe0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	0f1b      	lsrs	r3, r3, #28
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	440b      	add	r3, r1
 8006fd8:	3230      	adds	r2, #48	; 0x30
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e00a      	b.n	8006ff6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	0f1b      	lsrs	r3, r3, #28
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	4619      	mov	r1, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	440b      	add	r3, r1
 8006ff0:	3237      	adds	r2, #55	; 0x37
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	3301      	adds	r3, #1
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	4413      	add	r3, r2
 8007006:	2200      	movs	r2, #0
 8007008:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	3301      	adds	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
 8007010:	7dfa      	ldrb	r2, [r7, #23]
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d3d3      	bcc.n	8006fc0 <IntToUnicode+0x18>
  }
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007030:	f107 0314 	add.w	r3, r7, #20
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	60da      	str	r2, [r3, #12]
 800703e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007048:	d147      	bne.n	80070da <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	4a24      	ldr	r2, [pc, #144]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 8007054:	f043 0301 	orr.w	r3, r3, #1
 8007058:	6313      	str	r3, [r2, #48]	; 0x30
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800706c:	2300      	movs	r3, #0
 800706e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007074:	f107 0314 	add.w	r3, r7, #20
 8007078:	4619      	mov	r1, r3
 800707a:	481b      	ldr	r0, [pc, #108]	; (80070e8 <HAL_PCD_MspInit+0xc0>)
 800707c:	f7f9 fffc 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007080:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007086:	2302      	movs	r3, #2
 8007088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800708e:	2303      	movs	r3, #3
 8007090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007092:	230a      	movs	r3, #10
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007096:	f107 0314 	add.w	r3, r7, #20
 800709a:	4619      	mov	r1, r3
 800709c:	4812      	ldr	r0, [pc, #72]	; (80070e8 <HAL_PCD_MspInit+0xc0>)
 800709e:	f7f9 ffeb 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 80070a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a6:	4a0f      	ldr	r2, [pc, #60]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	6353      	str	r3, [r2, #52]	; 0x34
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	4a0b      	ldr	r2, [pc, #44]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 80070b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070bc:	6453      	str	r3, [r2, #68]	; 0x44
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_PCD_MspInit+0xbc>)
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070ca:	2200      	movs	r2, #0
 80070cc:	2100      	movs	r1, #0
 80070ce:	2043      	movs	r0, #67	; 0x43
 80070d0:	f7f9 ff9b 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070d4:	2043      	movs	r0, #67	; 0x43
 80070d6:	f7f9 ffb4 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070da:	bf00      	nop
 80070dc:	3728      	adds	r7, #40	; 0x28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40023800 	.word	0x40023800
 80070e8:	40020000 	.word	0x40020000

080070ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f7fe fc37 	bl	8005976 <USBD_LL_SetupStage>
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	4619      	mov	r1, r3
 800713a:	f7fe fc71 	bl	8005a20 <USBD_LL_DataOutStage>
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	334c      	adds	r3, #76	; 0x4c
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	4619      	mov	r1, r3
 800716e:	f7fe fd0a 	bl	8005b86 <USBD_LL_DataInStage>
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fe3e 	bl	8005e0a <USBD_LL_SOF>
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
 80071ae:	e008      	b.n	80071c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d102      	bne.n	80071be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
 80071bc:	e001      	b.n	80071c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071be:	f7f9 fcbb 	bl	8000b38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071c8:	7bfa      	ldrb	r2, [r7, #15]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fdde 	bl	8005d8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fd86 	bl	8005cea <USBD_LL_Reset>
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fdd9 	bl	8005dae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <HAL_PCD_SuspendCallback+0x48>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	4a03      	ldr	r2, [pc, #12]	; (8007230 <HAL_PCD_SuspendCallback+0x48>)
 8007222:	f043 0306 	orr.w	r3, r3, #6
 8007226:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	e000ed00 	.word	0xe000ed00

08007234 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fdc9 	bl	8005dda <USBD_LL_Resume>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fe21 	bl	8005eae <USBD_LL_IsoOUTIncomplete>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fddd 	bl	8005e4a <USBD_LL_IsoINIncomplete>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fe33 	bl	8005f12 <USBD_LL_DevConnected>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fe30 	bl	8005f28 <USBD_LL_DevDisconnected>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d13c      	bne.n	800735a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072e0:	4a20      	ldr	r2, [pc, #128]	; (8007364 <USBD_LL_Init+0x94>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <USBD_LL_Init+0x94>)
 80072ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072f0:	4b1c      	ldr	r3, [pc, #112]	; (8007364 <USBD_LL_Init+0x94>)
 80072f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072f8:	4b1a      	ldr	r3, [pc, #104]	; (8007364 <USBD_LL_Init+0x94>)
 80072fa:	2204      	movs	r2, #4
 80072fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072fe:	4b19      	ldr	r3, [pc, #100]	; (8007364 <USBD_LL_Init+0x94>)
 8007300:	2202      	movs	r2, #2
 8007302:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007304:	4b17      	ldr	r3, [pc, #92]	; (8007364 <USBD_LL_Init+0x94>)
 8007306:	2200      	movs	r2, #0
 8007308:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800730a:	4b16      	ldr	r3, [pc, #88]	; (8007364 <USBD_LL_Init+0x94>)
 800730c:	2202      	movs	r2, #2
 800730e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007310:	4b14      	ldr	r3, [pc, #80]	; (8007364 <USBD_LL_Init+0x94>)
 8007312:	2200      	movs	r2, #0
 8007314:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007316:	4b13      	ldr	r3, [pc, #76]	; (8007364 <USBD_LL_Init+0x94>)
 8007318:	2200      	movs	r2, #0
 800731a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <USBD_LL_Init+0x94>)
 800731e:	2200      	movs	r2, #0
 8007320:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <USBD_LL_Init+0x94>)
 8007324:	2201      	movs	r2, #1
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007328:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <USBD_LL_Init+0x94>)
 800732a:	2200      	movs	r2, #0
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800732e:	480d      	ldr	r0, [pc, #52]	; (8007364 <USBD_LL_Init+0x94>)
 8007330:	f7fa f86f 	bl	8001412 <HAL_PCD_Init>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800733a:	f7f9 fbfd 	bl	8000b38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	4808      	ldr	r0, [pc, #32]	; (8007364 <USBD_LL_Init+0x94>)
 8007342:	f7fb faae 	bl	80028a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	2100      	movs	r1, #0
 800734a:	4806      	ldr	r0, [pc, #24]	; (8007364 <USBD_LL_Init+0x94>)
 800734c:	f7fb fa62 	bl	8002814 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007350:	2280      	movs	r2, #128	; 0x80
 8007352:	2101      	movs	r1, #1
 8007354:	4803      	ldr	r0, [pc, #12]	; (8007364 <USBD_LL_Init+0x94>)
 8007356:	f7fb fa5d 	bl	8002814 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200008d4 	.word	0x200008d4

08007368 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800737e:	4618      	mov	r0, r3
 8007380:	f7fa f964 	bl	800164c <HAL_PCD_Start>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f930 	bl	80075f0 <USBD_Get_USB_Status>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007394:	7bbb      	ldrb	r3, [r7, #14]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	4608      	mov	r0, r1
 80073a8:	4611      	mov	r1, r2
 80073aa:	461a      	mov	r2, r3
 80073ac:	4603      	mov	r3, r0
 80073ae:	70fb      	strb	r3, [r7, #3]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70bb      	strb	r3, [r7, #2]
 80073b4:	4613      	mov	r3, r2
 80073b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80073c6:	78bb      	ldrb	r3, [r7, #2]
 80073c8:	883a      	ldrh	r2, [r7, #0]
 80073ca:	78f9      	ldrb	r1, [r7, #3]
 80073cc:	f7fa fe35 	bl	800203a <HAL_PCD_EP_Open>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f90a 	bl	80075f0 <USBD_Get_USB_Status>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f7fa fe7e 	bl	800210a <HAL_PCD_EP_Close>
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8eb 	bl	80075f0 <USBD_Get_USB_Status>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fa ff3e 	bl	80022c8 <HAL_PCD_EP_SetStall>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f8cc 	bl	80075f0 <USBD_Get_USB_Status>
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745c:	7bbb      	ldrb	r3, [r7, #14]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fa ff83 	bl	8002390 <HAL_PCD_EP_ClrStall>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f8ad 	bl	80075f0 <USBD_Get_USB_Status>
 8007496:	4603      	mov	r3, r0
 8007498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800749a:	7bbb      	ldrb	r3, [r7, #14]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	da0b      	bge.n	80074d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	4613      	mov	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	333e      	adds	r3, #62	; 0x3e
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	e00b      	b.n	80074f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	4613      	mov	r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80074ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa fd68 	bl	8001ff0 <HAL_PCD_SetAddress>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f862 	bl	80075f0 <USBD_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	460b      	mov	r3, r1
 8007548:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007558:	7af9      	ldrb	r1, [r7, #11]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f7fa fe69 	bl	8002234 <HAL_PCD_EP_Transmit>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f841 	bl	80075f0 <USBD_Get_USB_Status>
 800756e:	4603      	mov	r3, r0
 8007570:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007572:	7dbb      	ldrb	r3, [r7, #22]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	460b      	mov	r3, r1
 800758a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800759a:	7af9      	ldrb	r1, [r7, #11]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f7fa fdfd 	bl	800219e <HAL_PCD_EP_Receive>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f820 	bl	80075f0 <USBD_Get_USB_Status>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <USBD_static_malloc+0x18>)
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000de0 	.word	0x20000de0

080075dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	2b03      	cmp	r3, #3
 8007602:	d817      	bhi.n	8007634 <USBD_Get_USB_Status+0x44>
 8007604:	a201      	add	r2, pc, #4	; (adr r2, 800760c <USBD_Get_USB_Status+0x1c>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	0800761d 	.word	0x0800761d
 8007610:	08007623 	.word	0x08007623
 8007614:	08007629 	.word	0x08007629
 8007618:	0800762f 	.word	0x0800762f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
    break;
 8007620:	e00b      	b.n	800763a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007622:	2303      	movs	r3, #3
 8007624:	73fb      	strb	r3, [r7, #15]
    break;
 8007626:	e008      	b.n	800763a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
    break;
 800762c:	e005      	b.n	800763a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800762e:	2303      	movs	r3, #3
 8007630:	73fb      	strb	r3, [r7, #15]
    break;
 8007632:	e002      	b.n	800763a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007634:	2303      	movs	r3, #3
 8007636:	73fb      	strb	r3, [r7, #15]
    break;
 8007638:	bf00      	nop
  }
  return usb_status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <__libc_init_array>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4d0d      	ldr	r5, [pc, #52]	; (8007680 <__libc_init_array+0x38>)
 800764c:	4c0d      	ldr	r4, [pc, #52]	; (8007684 <__libc_init_array+0x3c>)
 800764e:	1b64      	subs	r4, r4, r5
 8007650:	10a4      	asrs	r4, r4, #2
 8007652:	2600      	movs	r6, #0
 8007654:	42a6      	cmp	r6, r4
 8007656:	d109      	bne.n	800766c <__libc_init_array+0x24>
 8007658:	4d0b      	ldr	r5, [pc, #44]	; (8007688 <__libc_init_array+0x40>)
 800765a:	4c0c      	ldr	r4, [pc, #48]	; (800768c <__libc_init_array+0x44>)
 800765c:	f000 f820 	bl	80076a0 <_init>
 8007660:	1b64      	subs	r4, r4, r5
 8007662:	10a4      	asrs	r4, r4, #2
 8007664:	2600      	movs	r6, #0
 8007666:	42a6      	cmp	r6, r4
 8007668:	d105      	bne.n	8007676 <__libc_init_array+0x2e>
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007670:	4798      	blx	r3
 8007672:	3601      	adds	r6, #1
 8007674:	e7ee      	b.n	8007654 <__libc_init_array+0xc>
 8007676:	f855 3b04 	ldr.w	r3, [r5], #4
 800767a:	4798      	blx	r3
 800767c:	3601      	adds	r6, #1
 800767e:	e7f2      	b.n	8007666 <__libc_init_array+0x1e>
 8007680:	08007720 	.word	0x08007720
 8007684:	08007720 	.word	0x08007720
 8007688:	08007720 	.word	0x08007720
 800768c:	08007724 	.word	0x08007724

08007690 <memset>:
 8007690:	4402      	add	r2, r0
 8007692:	4603      	mov	r3, r0
 8007694:	4293      	cmp	r3, r2
 8007696:	d100      	bne.n	800769a <memset+0xa>
 8007698:	4770      	bx	lr
 800769a:	f803 1b01 	strb.w	r1, [r3], #1
 800769e:	e7f9      	b.n	8007694 <memset+0x4>

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
