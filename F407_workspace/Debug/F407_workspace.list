
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  0800cbac  0800cbac  0001cbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de04  0800de04  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de04  0800de04  0001de04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de0c  0800de0c  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800de14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002019c  2**0
                  CONTENTS
 10 .bss          00000e7c  2000019c  2000019c  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001018  20001018  0002019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a049  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a44  00000000  00000000  0003a215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001560  00000000  00000000  0003f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002507c  00000000  00000000  000408c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c387  00000000  00000000  00065944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b55  00000000  00000000  00081ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153820  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006534  00000000  00000000  00153870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000019c 	.word	0x2000019c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb94 	.word	0x0800cb94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	0800cb94 	.word	0x0800cb94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08d      	sub	sp, #52	; 0x34
 8000578:	af02      	add	r7, sp, #8
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	4611      	mov	r1, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	460b      	mov	r3, r1
 8000586:	81bb      	strh	r3, [r7, #12]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b1e      	cmp	r3, #30
 8000590:	d961      	bls.n	8000656 <ILI9341_DrawChar+0xe2>
 8000592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db5d      	blt.n	8000656 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3b20      	subs	r3, #32
 80005b6:	7ffa      	ldrb	r2, [r7, #31]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80005c4:	7fbb      	ldrb	r3, [r7, #30]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	7f7b      	ldrb	r3, [r7, #29]
 80005ca:	b29c      	uxth	r4, r3
 80005cc:	88f9      	ldrh	r1, [r7, #6]
 80005ce:	89b8      	ldrh	r0, [r7, #12]
 80005d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4623      	mov	r3, r4
 80005d6:	f000 fc67 	bl	8000ea8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e035      	b.n	800064c <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	e02b      	b.n	800063e <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80005e6:	7f3b      	ldrb	r3, [r7, #28]
 80005e8:	6a3a      	ldr	r2, [r7, #32]
 80005ea:	fb03 f202 	mul.w	r2, r3, r2
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	10db      	asrs	r3, r3, #3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	4413      	add	r3, r2
 80005f8:	3301      	adds	r3, #1
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000610:	7dfa      	ldrb	r2, [r7, #23]
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	4013      	ands	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	b29a      	uxth	r2, r3
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	b298      	uxth	r0, r3
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b29b      	uxth	r3, r3
 8000630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fbd2 	bl	8000ddc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	3301      	adds	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
 800063e:	7fbb      	ldrb	r3, [r7, #30]
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbcf      	blt.n	80005e6 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	7f7b      	ldrb	r3, [r7, #29]
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	429a      	cmp	r2, r3
 8000652:	dbc5      	blt.n	80005e0 <ILI9341_DrawChar+0x6c>
 8000654:	e000      	b.n	8000658 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000656:	bf00      	nop
			}
		}
	}
}
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08a      	sub	sp, #40	; 0x28
 8000662:	af02      	add	r7, sp, #8
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	460b      	mov	r3, r1
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4613      	mov	r3, r2
 8000672:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000680:	e02d      	b.n	80006de <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	88b9      	ldrh	r1, [r7, #4]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	f7ff ff6d 	bl	8000574 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b20      	subs	r3, #32
 80006a0:	7ffa      	ldrb	r2, [r7, #31]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	3304      	adds	r3, #4
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	1c9a      	adds	r2, r3, #2
 80006b8:	7fbb      	ldrb	r3, [r7, #30]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	da07      	bge.n	80006ce <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3302      	adds	r3, #2
 80006ca:	80fb      	strh	r3, [r7, #6]
 80006cc:	e004      	b.n	80006d8 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80006ce:	7fbb      	ldrb	r3, [r7, #30]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1cd      	bne.n	8000682 <ILI9341_DrawText+0x24>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_SPI_TxCpltCallback>:
uint16_t LCD_DC_PIN = LCD1_DC_PIN;
GPIO_TypeDef* LCD_RST_PORT = LCD1_RST_PORT;
uint16_t LCD_RST_PIN = LCD1_RST_PIN;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SPI_TxCpltCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d107      	bne.n	8000710 <HAL_SPI_TxCpltCallback+0x20>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SPI_TxCpltCallback+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SPI_TxCpltCallback+0x30>)
 8000706:	8811      	ldrh	r1, [r2, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fbde 	bl	8002ecc <HAL_GPIO_WritePin>
  }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000020c 	.word	0x2000020c
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008

08000724 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800072e:	bf00      	nop
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b02      	cmp	r3, #2
 800073c:	d1f8      	bne.n	8000730 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000746:	f007 f8fb 	bl	8007940 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000020c 	.word	0x2000020c

08000758 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000764:	bf00      	nop
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b02      	cmp	r3, #2
 8000772:	d1f8      	bne.n	8000766 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 800077c:	f007 f8e0 	bl	8007940 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000020c 	.word	0x2000020c

0800078c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <ILI9341_WriteCommand+0x3c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <ILI9341_WriteCommand+0x40>)
 800079c:	8811      	ldrh	r1, [r2, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fb93 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ILI9341_WriteCommand+0x44>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <ILI9341_WriteCommand+0x48>)
 80007ac:	8811      	ldrh	r1, [r2, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fb8b 	bl	8002ecc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb3 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000008 	.word	0x20000008

080007d8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <ILI9341_WriteData+0x3c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <ILI9341_WriteData+0x40>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fb6d 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <ILI9341_WriteData+0x44>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <ILI9341_WriteData+0x48>)
 80007f8:	8811      	ldrh	r1, [r2, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fb65 	bl	8002ecc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff8d 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000010 	.word	0x20000010
 800081c:	20000004 	.word	0x20000004
 8000820:	20000008 	.word	0x20000008

08000824 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ILI9341_WriteBuffer+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <ILI9341_WriteBuffer+0x44>)
 8000836:	8811      	ldrh	r1, [r2, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb46 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <ILI9341_WriteBuffer+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <ILI9341_WriteBuffer+0x4c>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fb3e 	bl	8002ecc <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff7f 	bl	8000758 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000010 	.word	0x20000010
 800086c:	20000004 	.word	0x20000004
 8000870:	20000008 	.word	0x20000008

08000874 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008b2:	202a      	movs	r0, #42	; 0x2a
 80008b4:	f7ff ff6a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffb0 	bl	8000824 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008d4:	883b      	ldrh	r3, [r7, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008e4:	202b      	movs	r0, #43	; 0x2b
 80008e6:	f7ff ff51 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff97 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80008f6:	202c      	movs	r0, #44	; 0x2c
 80008f8:	f7ff ff48 	bl	800078c <ILI9341_WriteCommand>
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <ILI9341_Reset+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <ILI9341_Reset+0x58>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fada 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f001 fc4d 	bl	80021b8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <ILI9341_Reset+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <ILI9341_Reset+0x60>)
 8000924:	8811      	ldrh	r1, [r2, #0]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 facf 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f001 fc42 	bl	80021b8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <ILI9341_Reset+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <ILI9341_Reset+0x58>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fac4 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ILI9341_Reset+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <ILI9341_Reset+0x60>)
 800094a:	8811      	ldrh	r1, [r2, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fabc 	bl	8002ecc <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000014 	.word	0x20000014
 800095c:	20000018 	.word	0x20000018
 8000960:	20000004 	.word	0x20000004
 8000964:	20000008 	.word	0x20000008

08000968 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <ILI9341_Enable+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <ILI9341_Enable+0x1c>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f002 faa8 	bl	8002ecc <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000014 	.word	0x20000014
 8000984:	20000018 	.word	0x20000018

08000988 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800098c:	f7ff ffec 	bl	8000968 <ILI9341_Enable>
	ILI9341_Reset();
 8000990:	f7ff ffb8 	bl	8000904 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fef9 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 fc0c 	bl	80021b8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80009a0:	20cb      	movs	r0, #203	; 0xcb
 80009a2:	f7ff fef3 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80009a6:	2039      	movs	r0, #57	; 0x39
 80009a8:	f7ff ff16 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80009ac:	202c      	movs	r0, #44	; 0x2c
 80009ae:	f7ff ff13 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff10 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009b8:	2034      	movs	r0, #52	; 0x34
 80009ba:	f7ff ff0d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff ff0a 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009c4:	20cf      	movs	r0, #207	; 0xcf
 80009c6:	f7ff fee1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ff04 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009d0:	20c1      	movs	r0, #193	; 0xc1
 80009d2:	f7ff ff01 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009d6:	2030      	movs	r0, #48	; 0x30
 80009d8:	f7ff fefe 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009dc:	20e8      	movs	r0, #232	; 0xe8
 80009de:	f7ff fed5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009e2:	2085      	movs	r0, #133	; 0x85
 80009e4:	f7ff fef8 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fef5 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f7ff fef2 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009f4:	20ea      	movs	r0, #234	; 0xea
 80009f6:	f7ff fec9 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff feec 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fee9 	bl	80007d8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000a06:	20ed      	movs	r0, #237	; 0xed
 8000a08:	f7ff fec0 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f7ff fee3 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fee0 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a18:	2012      	movs	r0, #18
 8000a1a:	f7ff fedd 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a1e:	2081      	movs	r0, #129	; 0x81
 8000a20:	f7ff feda 	bl	80007d8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a24:	20f7      	movs	r0, #247	; 0xf7
 8000a26:	f7ff feb1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f7ff fed4 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a30:	20c0      	movs	r0, #192	; 0xc0
 8000a32:	f7ff feab 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a36:	2023      	movs	r0, #35	; 0x23
 8000a38:	f7ff fece 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a3c:	20c1      	movs	r0, #193	; 0xc1
 8000a3e:	f7ff fea5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a42:	2010      	movs	r0, #16
 8000a44:	f7ff fec8 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a48:	20c5      	movs	r0, #197	; 0xc5
 8000a4a:	f7ff fe9f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a4e:	203e      	movs	r0, #62	; 0x3e
 8000a50:	f7ff fec2 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f7ff febf 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a5a:	20c7      	movs	r0, #199	; 0xc7
 8000a5c:	f7ff fe96 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a60:	2086      	movs	r0, #134	; 0x86
 8000a62:	f7ff feb9 	bl	80007d8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a66:	2036      	movs	r0, #54	; 0x36
 8000a68:	f7ff fe90 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a6c:	2048      	movs	r0, #72	; 0x48
 8000a6e:	f7ff feb3 	bl	80007d8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a72:	203a      	movs	r0, #58	; 0x3a
 8000a74:	f7ff fe8a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a78:	2055      	movs	r0, #85	; 0x55
 8000a7a:	f7ff fead 	bl	80007d8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a7e:	20b1      	movs	r0, #177	; 0xb1
 8000a80:	f7ff fe84 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fea7 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a8a:	2018      	movs	r0, #24
 8000a8c:	f7ff fea4 	bl	80007d8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a90:	20b6      	movs	r0, #182	; 0xb6
 8000a92:	f7ff fe7b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fe9e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a9c:	2082      	movs	r0, #130	; 0x82
 8000a9e:	f7ff fe9b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	f7ff fe98 	bl	80007d8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000aa8:	20f2      	movs	r0, #242	; 0xf2
 8000aaa:	f7ff fe6f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe92 	bl	80007d8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f7ff fe69 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fe8c 	bl	80007d8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ac0:	20e0      	movs	r0, #224	; 0xe0
 8000ac2:	f7ff fe63 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fe86 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000acc:	2031      	movs	r0, #49	; 0x31
 8000ace:	f7ff fe83 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000ad2:	202b      	movs	r0, #43	; 0x2b
 8000ad4:	f7ff fe80 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f7ff fe7d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f7ff fe7a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff fe77 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000aea:	204e      	movs	r0, #78	; 0x4e
 8000aec:	f7ff fe74 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000af0:	20f1      	movs	r0, #241	; 0xf1
 8000af2:	f7ff fe71 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000af6:	2037      	movs	r0, #55	; 0x37
 8000af8:	f7ff fe6e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f7ff fe6b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f7ff fe68 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f7ff fe65 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b0e:	200e      	movs	r0, #14
 8000b10:	f7ff fe62 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f7ff fe5f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe5c 	bl	80007d8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b20:	20e1      	movs	r0, #225	; 0xe1
 8000b22:	f7ff fe33 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe56 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b2c:	200e      	movs	r0, #14
 8000b2e:	f7ff fe53 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b32:	2014      	movs	r0, #20
 8000b34:	f7ff fe50 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff fe4d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b3e:	2011      	movs	r0, #17
 8000b40:	f7ff fe4a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff fe47 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b4a:	2031      	movs	r0, #49	; 0x31
 8000b4c:	f7ff fe44 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b50:	20c1      	movs	r0, #193	; 0xc1
 8000b52:	f7ff fe41 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b56:	2048      	movs	r0, #72	; 0x48
 8000b58:	f7ff fe3e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff fe3b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe38 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f7ff fe35 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b6e:	2031      	movs	r0, #49	; 0x31
 8000b70:	f7ff fe32 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b74:	2036      	movs	r0, #54	; 0x36
 8000b76:	f7ff fe2f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff fe2c 	bl	80007d8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b80:	2011      	movs	r0, #17
 8000b82:	f7ff fe03 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fb16 	bl	80021b8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b8c:	2029      	movs	r0, #41	; 0x29
 8000b8e:	f7ff fdfd 	bl	800078c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f802 	bl	8000b9c <ILI9341_SetRotation>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000ba6:	2036      	movs	r0, #54	; 0x36
 8000ba8:	f7ff fdf0 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fb03 	bl	80021b8 <HAL_Delay>

	switch(rotation)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d837      	bhi.n	8000c28 <ILI9341_SetRotation+0x8c>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <ILI9341_SetRotation+0x24>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be7 	.word	0x08000be7
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c13 	.word	0x08000c13
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bd0:	2048      	movs	r0, #72	; 0x48
 8000bd2:	f7ff fe01 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bd8:	22f0      	movs	r2, #240	; 0xf0
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be2:	801a      	strh	r2, [r3, #0]
		break;
 8000be4:	e021      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff fdf6 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bf2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bf6:	22f0      	movs	r2, #240	; 0xf0
 8000bf8:	801a      	strh	r2, [r3, #0]
		break;
 8000bfa:	e016      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000bfc:	2088      	movs	r0, #136	; 0x88
 8000bfe:	f7ff fdeb 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c04:	22f0      	movs	r2, #240	; 0xf0
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c0e:	801a      	strh	r2, [r3, #0]
		break;
 8000c10:	e00b      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000c12:	20e8      	movs	r0, #232	; 0xe8
 8000c14:	f7ff fde0 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c22:	22f0      	movs	r2, #240	; 0xf0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e000      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000002 	.word	0x20000002
 8000c38:	20000000 	.word	0x20000000

08000c3c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c40:	b08d      	sub	sp, #52	; 0x34
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	466b      	mov	r3, sp
 8000c4c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c5a:	d202      	bcs.n	8000c62 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e002      	b.n	8000c68 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <ILI9341_DrawColorBurst+0x140>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <ILI9341_DrawColorBurst+0x144>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 f92a 	bl	8002ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000c7e:	8811      	ldrh	r1, [r2, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f922 	bl	8002ecc <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c94:	460b      	mov	r3, r1
 8000c96:	3b01      	subs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	461d      	mov	r5, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	00eb      	lsls	r3, r5, #3
 8000cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc8:	00e2      	lsls	r2, r4, #3
 8000cca:	1dcb      	adds	r3, r1, #7
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	3300      	adds	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cde:	e00e      	b.n	8000cfe <ILI9341_DrawColorBurst+0xc2>
	{
		BurstBuffer[j] = chifted;
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	3301      	adds	r3, #1
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ec      	bcc.n	8000ce0 <ILI9341_DrawColorBurst+0xa4>
	}

	uint32_t SendingSize = size * 2;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d20:	fb01 f202 	mul.w	r2, r1, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <ILI9341_DrawColorBurst+0x114>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	e009      	b.n	8000d48 <ILI9341_DrawColorBurst+0x10c>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	230a      	movs	r3, #10
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d3e:	f006 fcc2 	bl	80076c6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	3301      	adds	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f1      	bcc.n	8000d34 <ILI9341_DrawColorBurst+0xf8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	230a      	movs	r3, #10
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d5a:	f006 fcb4 	bl	80076c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000d64:	8811      	ldrh	r1, [r2, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 f8af 	bl	8002ecc <HAL_GPIO_WritePin>
 8000d6e:	46b5      	mov	sp, r6
}
 8000d70:	bf00      	nop
 8000d72:	3734      	adds	r7, #52	; 0x34
 8000d74:	46bd      	mov	sp, r7
 8000d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	2000020c 	.word	0x2000020c

08000d90 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fd63 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff38 	bl	8000c3c <ILI9341_DrawColorBurst>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	20000000 	.word	0x20000000

08000ddc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <ILI9341_DrawPixel+0xc4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d24d      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <ILI9341_DrawPixel+0xc8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d247      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	753b      	strb	r3, [r7, #20]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	757b      	strb	r3, [r7, #21]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	121b      	asrs	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75bb      	strb	r3, [r7, #22]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	743b      	strb	r3, [r7, #16]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	747b      	strb	r3, [r7, #17]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	74bb      	strb	r3, [r7, #18]
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	733b      	strb	r3, [r7, #12]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e5e:	202a      	movs	r0, #42	; 0x2a
 8000e60:	f7ff fc94 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fcda 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e70:	202b      	movs	r0, #43	; 0x2b
 8000e72:	f7ff fc8b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fcd1 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e82:	202c      	movs	r0, #44	; 0x2c
 8000e84:	f7ff fc82 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fcc8 	bl	8000824 <ILI9341_WriteBuffer>
 8000e94:	e000      	b.n	8000e98 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d23d      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d237      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dd05      	ble.n	8000efa <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	883b      	ldrh	r3, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f02:	8812      	ldrh	r2, [r2, #0]
 8000f04:	b292      	uxth	r2, r2
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd05      	ble.n	8000f16 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29c      	uxth	r4, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b9      	ldrh	r1, [r7, #4]
 8000f30:	88f8      	ldrh	r0, [r7, #6]
 8000f32:	4622      	mov	r2, r4
 8000f34:	f7ff fc9e 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe78 	bl	8000c3c <ILI9341_DrawColorBurst>
 8000f4c:	e000      	b.n	8000f50 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000002 	.word	0x20000002
 8000f5c:	20000000 	.word	0x20000000

08000f60 <scan_keypad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Local Keypad Scanning */
void scan_keypad() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
  set_rows();
 8000f66:	f000 f89d 	bl	80010a4 <set_rows>

  // read the columns
  int all_cols = get_cols();
 8000f6a:	f000 f903 	bl	8001174 <get_cols>
 8000f6e:	60f8      	str	r0, [r7, #12]
  int local_cols = all_cols & 0x0F;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	60bb      	str	r3, [r7, #8]
  int expander_cols = (all_cols & 0xF0) >> 4;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	111b      	asrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	607b      	str	r3, [r7, #4]
  
  // scan local cols
  for(int i = 0; i < 4; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e038      	b.n	8000ffa <scan_keypad+0x9a>
    if(local_cols & (1 << i)) {
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa42 f303 	asr.w	r3, r2, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d024      	beq.n	8000fe2 <scan_keypad+0x82>
    	if (keypresses[row][i] != 1) {
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <scan_keypad+0x128>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a3b      	ldr	r2, [pc, #236]	; (800108c <scan_keypad+0x12c>)
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	441a      	add	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d023      	beq.n	8000ff4 <scan_keypad+0x94>
    		keypresses[row][i] = 1;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <scan_keypad+0x128>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a36      	ldr	r2, [pc, #216]	; (800108c <scan_keypad+0x12c>)
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	441a      	add	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
    	    // WPM timer not enabled
    	    if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <scan_keypad+0x130>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <scan_keypad+0x6c>
    	    	HAL_TIM_Base_Start_IT(&htim7);
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <scan_keypad+0x134>)
 8000fc8:	f006 ff20 	bl	8007e0c <HAL_TIM_Base_Start_IT>
    	    }
    	    charCount++;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <scan_keypad+0x138>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <scan_keypad+0x138>)
 8000fd4:	6013      	str	r3, [r2, #0]
    	    charsInCycle++;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <scan_keypad+0x13c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	; (800109c <scan_keypad+0x13c>)
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e008      	b.n	8000ff4 <scan_keypad+0x94>
    	}
    }
    else {
      keypresses[row][i] = 0;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <scan_keypad+0x128>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <scan_keypad+0x12c>)
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	441a      	add	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	ddc3      	ble.n	8000f88 <scan_keypad+0x28>
    }
  }

  // scan expander cols
  for(int i = 0; i < 4; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e038      	b.n	8001078 <scan_keypad+0x118>
    if(expander_cols & (1 << i)) {
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	fa42 f303 	asr.w	r3, r2, r3
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d024      	beq.n	8001060 <scan_keypad+0x100>
      if (keypresses_2[row][i] != 1) {
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <scan_keypad+0x128>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <scan_keypad+0x140>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	441a      	add	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d023      	beq.n	8001072 <scan_keypad+0x112>
    	  keypresses_2[row][i] = 1;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <scan_keypad+0x128>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <scan_keypad+0x140>)
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	441a      	add	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
    	  // WPM timer not enabled
    	  if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <scan_keypad+0x130>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <scan_keypad+0xea>
    		  HAL_TIM_Base_Start_IT(&htim7);
 8001044:	4813      	ldr	r0, [pc, #76]	; (8001094 <scan_keypad+0x134>)
 8001046:	f006 fee1 	bl	8007e0c <HAL_TIM_Base_Start_IT>
    	  }
    	  charCount++;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <scan_keypad+0x138>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <scan_keypad+0x138>)
 8001052:	6013      	str	r3, [r2, #0]
    	  charsInCycle++;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <scan_keypad+0x13c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <scan_keypad+0x13c>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e008      	b.n	8001072 <scan_keypad+0x112>
      }
    }
    else {
      keypresses_2[row][i] = 0;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <scan_keypad+0x128>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <scan_keypad+0x140>)
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	441a      	add	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4413      	add	r3, r2
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2b03      	cmp	r3, #3
 800107c:	ddc3      	ble.n	8001006 <scan_keypad+0xa6>
    }

  }

}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200003cc 	.word	0x200003cc
 800108c:	200003d0 	.word	0x200003d0
 8001090:	40010000 	.word	0x40010000
 8001094:	20000354 	.word	0x20000354
 8001098:	200003a4 	.word	0x200003a4
 800109c:	200003a8 	.word	0x200003a8
 80010a0:	200003e4 	.word	0x200003e4

080010a4 <set_rows>:

void set_rows() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
  // update row value
  row = (row + 1) % 4;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <set_rows+0xc4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	425a      	negs	r2, r3
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	bf58      	it	pl
 80010bc:	4253      	negpl	r3, r2
 80010be:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <set_rows+0xc4>)
 80010c0:	6013      	str	r3, [r2, #0]
  // set all rows to high on local keypad
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <set_rows+0xc8>)
 80010c8:	f001 ff00 	bl	8002ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2102      	movs	r1, #2
 80010d0:	4826      	ldr	r0, [pc, #152]	; (800116c <set_rows+0xc8>)
 80010d2:	f001 fefb 	bl	8002ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2104      	movs	r1, #4
 80010da:	4824      	ldr	r0, [pc, #144]	; (800116c <set_rows+0xc8>)
 80010dc:	f001 fef6 	bl	8002ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2108      	movs	r1, #8
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <set_rows+0xc8>)
 80010e6:	f001 fef1 	bl	8002ecc <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low
  switch(row) {
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <set_rows+0xc4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d822      	bhi.n	8001138 <set_rows+0x94>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <set_rows+0x54>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001115 	.word	0x08001115
 8001100:	08001121 	.word	0x08001121
 8001104:	0800112d 	.word	0x0800112d
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <set_rows+0xc8>)
 800110e:	f001 fedd 	bl	8002ecc <HAL_GPIO_WritePin>
      break;
 8001112:	e011      	b.n	8001138 <set_rows+0x94>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2102      	movs	r1, #2
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <set_rows+0xc8>)
 800111a:	f001 fed7 	bl	8002ecc <HAL_GPIO_WritePin>
      break;
 800111e:	e00b      	b.n	8001138 <set_rows+0x94>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2104      	movs	r1, #4
 8001124:	4811      	ldr	r0, [pc, #68]	; (800116c <set_rows+0xc8>)
 8001126:	f001 fed1 	bl	8002ecc <HAL_GPIO_WritePin>
      break;
 800112a:	e005      	b.n	8001138 <set_rows+0x94>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2108      	movs	r1, #8
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <set_rows+0xc8>)
 8001132:	f001 fecb 	bl	8002ecc <HAL_GPIO_WritePin>
      break;
 8001136:	bf00      	nop
  }

  // set current row to low and others to high on gpio expander keypad
  uint8_t data[2] = {0x0A, ~( 8 >> row )};
 8001138:	230a      	movs	r3, #10
 800113a:	713b      	strb	r3, [r7, #4]
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <set_rows+0xc4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	fa42 f303 	asr.w	r3, r2, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2302      	movs	r3, #2
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <set_rows+0xcc>)
 800115c:	f002 f814 	bl	8003188 <HAL_I2C_Master_Transmit>

}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200003cc 	.word	0x200003cc
 800116c:	40020c00 	.word	0x40020c00
 8001170:	200001b8 	.word	0x200001b8

08001174 <get_cols>:

int get_cols() {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 4) & 0xF;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <get_cols+0x54>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	43db      	mvns	r3, r3
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	60fb      	str	r3, [r7, #12]

  // read the GPIO expander columns
  uint8_t data[1] = {0x09};
 8001188:	2309      	movs	r3, #9
 800118a:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800118c:	1d3a      	adds	r2, r7, #4
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <get_cols+0x58>)
 800119a:	f001 fff5 	bl	8003188 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800119e:	1d3a      	adds	r2, r7, #4
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <get_cols+0x58>)
 80011ac:	f002 f8ea 	bl	8003384 <HAL_I2C_Master_Receive>

  int expander_cols = data[0] & 0xF0;
 80011b0:	793b      	ldrb	r3, [r7, #4]
 80011b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b6:	60bb      	str	r3, [r7, #8]

  return local_cols | expander_cols;
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4313      	orrs	r3, r2
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	200001b8 	.word	0x200001b8

080011d0 <scan_rotary>:
/* END Local Keypad Scanning */

/* Rotary Encoder Scanning */
void scan_rotary() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  currentStateCLK = HAL_GPIO_ReadPin(GPIOC, ROT_CLCK_Pin);
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <scan_rotary+0xe4>)
 80011da:	f001 fe5f 	bl	8002e9c <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <scan_rotary+0xe8>)
 80011e4:	601a      	str	r2, [r3, #0]

  // if CLK pin has changed, then the rotary encoder has turned
  if (currentStateCLK != lastStateCLK && rotLock == 0 ) {// && rotLock == 0) {
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <scan_rotary+0xe8>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <scan_rotary+0xec>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d02e      	beq.n	8001250 <scan_rotary+0x80>
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <scan_rotary+0xf0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d12a      	bne.n	8001250 <scan_rotary+0x80>
    // if the DT state is different, then the encoder is rotating counter-clockwise
    currentStateDT = HAL_GPIO_ReadPin(GPIOC, ROT_DT_Pin);
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	482d      	ldr	r0, [pc, #180]	; (80012b4 <scan_rotary+0xe4>)
 80011fe:	f001 fe4d 	bl	8002e9c <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <scan_rotary+0xf4>)
 8001208:	601a      	str	r2, [r3, #0]

    if (currentStateDT != currentStateCLK) {
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <scan_rotary+0xf4>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <scan_rotary+0xe8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d008      	beq.n	8001228 <scan_rotary+0x58>
      // Volume Down
      rotary_keypresses[1] = 1;
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <scan_rotary+0xf8>)
 8001218:	2201      	movs	r2, #1
 800121a:	705a      	strb	r2, [r3, #1]
      turn_counter--;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <scan_rotary+0xfc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <scan_rotary+0xfc>)
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00d      	b.n	8001244 <scan_rotary+0x74>
    }

    // otherwise, it is turning clockwise
    else if (currentStateDT == currentStateCLK) {
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <scan_rotary+0xf4>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <scan_rotary+0xe8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d107      	bne.n	8001244 <scan_rotary+0x74>
      // Volume Up
      rotary_keypresses[2] = 1;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <scan_rotary+0xf8>)
 8001236:	2201      	movs	r2, #1
 8001238:	709a      	strb	r2, [r3, #2]
      turn_counter++;
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <scan_rotary+0xfc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <scan_rotary+0xfc>)
 8001242:	6013      	str	r3, [r2, #0]
    }
    rotLock++;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <scan_rotary+0xf0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <scan_rotary+0xf0>)
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e009      	b.n	8001264 <scan_rotary+0x94>

  }
  else if (rotLock == 0) {
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <scan_rotary+0xf0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <scan_rotary+0x94>
	  rotary_keypresses[1] = 0;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <scan_rotary+0xf8>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
	  rotary_keypresses[2] = 0;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <scan_rotary+0xf8>)
 8001260:	2200      	movs	r2, #0
 8001262:	709a      	strb	r2, [r3, #2]
  }

  lastStateCLK = currentStateCLK;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <scan_rotary+0xe8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <scan_rotary+0xec>)
 800126a:	6013      	str	r3, [r2, #0]

  // rotLock allows the rotary encoder's inputs to settle over a few extra clock cycles
  if(rotLock != 0) {
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <scan_rotary+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <scan_rotary+0xc2>
    rotLock = (rotLock + 1) % 150;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <scan_rotary+0xf0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <scan_rotary+0x100>)
 800127c:	fb83 1302 	smull	r1, r3, r3, r2
 8001280:	1119      	asrs	r1, r3, #4
 8001282:	17d3      	asrs	r3, r2, #31
 8001284:	1acb      	subs	r3, r1, r3
 8001286:	2196      	movs	r1, #150	; 0x96
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <scan_rotary+0xf0>)
 8001290:	6013      	str	r3, [r2, #0]
  }

  // if the state is low (default is high), turn toggle the LED
  if (HAL_GPIO_ReadPin(GPIOC, ROT_SW_Pin) == 0) {
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <scan_rotary+0xe4>)
 8001296:	f001 fe01 	bl	8002e9c <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <scan_rotary+0xd8>
    // Volume Mute Toggle
	  rotary_keypresses[0] = 1;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <scan_rotary+0xf8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
  }
  else {
	  rotary_keypresses[0] = 0;
  }

}
 80012a6:	e002      	b.n	80012ae <scan_rotary+0xde>
	  rotary_keypresses[0] = 0;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <scan_rotary+0xf8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020800 	.word	0x40020800
 80012b8:	200003b8 	.word	0x200003b8
 80012bc:	200003bc 	.word	0x200003bc
 80012c0:	200003c4 	.word	0x200003c4
 80012c4:	200003c0 	.word	0x200003c0
 80012c8:	200003f4 	.word	0x200003f4
 80012cc:	200003a0 	.word	0x200003a0
 80012d0:	1b4e81b5 	.word	0x1b4e81b5

080012d4 <record_keys>:
/* END Rotary Encoder Scanning */

/* USB Functions */
void record_keys() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 80012da:	2208      	movs	r2, #8
 80012dc:	2100      	movs	r1, #0
 80012de:	4837      	ldr	r0, [pc, #220]	; (80013bc <record_keys+0xe8>)
 80012e0:	f00a ffe2 	bl	800c2a8 <memset>
  keycodeNum = 1;
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <record_keys+0xec>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < 4; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e01f      	b.n	8001330 <record_keys+0x5c>
	  for(int j = 0; j < 4; j++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e016      	b.n	8001324 <record_keys+0x50>
		  if(keypresses[i][j] == 1) {
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <record_keys+0xf0>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	441a      	add	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10a      	bne.n	800131e <record_keys+0x4a>
			  add_keypress(keys[i][j]);
 8001308:	492f      	ldr	r1, [pc, #188]	; (80013c8 <record_keys+0xf4>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4413      	add	r3, r2
 8001312:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f85f 	bl	80013dc <add_keypress>
	  for(int j = 0; j < 4; j++) {
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3301      	adds	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2b03      	cmp	r3, #3
 8001328:	dde5      	ble.n	80012f6 <record_keys+0x22>
  for(int i = 0; i < 4; i++) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b03      	cmp	r3, #3
 8001334:	dddc      	ble.n	80012f0 <record_keys+0x1c>
	    }
	  }
  }

  // Add GPIO Expander keypresses
  for(int i = 0; i < 4; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e01f      	b.n	800137c <record_keys+0xa8>
	  for(int j = 0; j < 4; j++) {
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	e016      	b.n	8001370 <record_keys+0x9c>
		  if(keypresses_2[i][j] == 1) {
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <record_keys+0xf8>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	441a      	add	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10a      	bne.n	800136a <record_keys+0x96>
			  add_keypress(keys_2[i][j]);
 8001354:	491e      	ldr	r1, [pc, #120]	; (80013d0 <record_keys+0xfc>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4413      	add	r3, r2
 800135e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f839 	bl	80013dc <add_keypress>
	  for(int j = 0; j < 4; j++) {
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b03      	cmp	r3, #3
 8001374:	dde5      	ble.n	8001342 <record_keys+0x6e>
  for(int i = 0; i < 4; i++) {
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b03      	cmp	r3, #3
 8001380:	dddc      	ble.n	800133c <record_keys+0x68>
		  }
	  }
  }

  // Add Rotary Encoder keypresses
  for(int i = 0; i < 4; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e010      	b.n	80013aa <record_keys+0xd6>
	  if(rotary_keypresses[i] == 1)
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <record_keys+0x100>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d107      	bne.n	80013a4 <record_keys+0xd0>
		  add_keypress(rotary_keys[i]);
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <record_keys+0x104>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f81c 	bl	80013dc <add_keypress>
  for(int i = 0; i < 4; i++) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	ddeb      	ble.n	8001388 <record_keys+0xb4>
  }

}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003f8 	.word	0x200003f8
 80013c0:	200003c8 	.word	0x200003c8
 80013c4:	200003d0 	.word	0x200003d0
 80013c8:	0800dd58 	.word	0x0800dd58
 80013cc:	200003e4 	.word	0x200003e4
 80013d0:	0800dd80 	.word	0x0800dd80
 80013d4:	200003f4 	.word	0x200003f4
 80013d8:	0800dda8 	.word	0x0800dda8

080013dc <add_keypress>:

void add_keypress(char key) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]

	if(key == (char)KEY_SHIFT) {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d103      	bne.n	80013f4 <add_keypress+0x18>
		keyboardhid.MODIFIER = 2;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <add_keypress+0x88>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	701a      	strb	r2, [r3, #0]
		return;
 80013f2:	e031      	b.n	8001458 <add_keypress+0x7c>
	}

	switch(keycodeNum) {
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <add_keypress+0x8c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d826      	bhi.n	800144c <add_keypress+0x70>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <add_keypress+0x28>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800141d 	.word	0x0800141d
 8001408:	08001425 	.word	0x08001425
 800140c:	0800142d 	.word	0x0800142d
 8001410:	08001435 	.word	0x08001435
 8001414:	0800143d 	.word	0x0800143d
 8001418:	08001445 	.word	0x08001445
			case 1:
			  keyboardhid.KEYCODE1 = key;
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <add_keypress+0x88>)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	7093      	strb	r3, [r2, #2]
			  break;
 8001422:	e014      	b.n	800144e <add_keypress+0x72>
			case 2:
			  keyboardhid.KEYCODE2 = key;
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <add_keypress+0x88>)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	70d3      	strb	r3, [r2, #3]
			  break;
 800142a:	e010      	b.n	800144e <add_keypress+0x72>
			case 3:
			  keyboardhid.KEYCODE3 = key;
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <add_keypress+0x88>)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	7113      	strb	r3, [r2, #4]
			  break;
 8001432:	e00c      	b.n	800144e <add_keypress+0x72>
			case 4:
			  keyboardhid.KEYCODE4 = key;
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <add_keypress+0x88>)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	7153      	strb	r3, [r2, #5]
			  break;
 800143a:	e008      	b.n	800144e <add_keypress+0x72>
			case 5:
			  keyboardhid.KEYCODE5 = key;
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <add_keypress+0x88>)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	7193      	strb	r3, [r2, #6]
			  break;
 8001442:	e004      	b.n	800144e <add_keypress+0x72>
			case 6:
			  keyboardhid.KEYCODE6 = key;
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <add_keypress+0x88>)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	71d3      	strb	r3, [r2, #7]
			  break;
 800144a:	e000      	b.n	800144e <add_keypress+0x72>
			default:
				break;
 800144c:	bf00      	nop
		  }
		  keycodeNum++;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <add_keypress+0x8c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <add_keypress+0x8c>)
 8001456:	6013      	str	r3, [r2, #0]

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200003f8 	.word	0x200003f8
 8001468:	200003c8 	.word	0x200003c8

0800146c <switch_lcd>:
/* END USB Functions */

/* LCD Functions */
void switch_lcd() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  // switch LCD_*_PIN and LCD_*_PORT between LCD1_* and LCD2_*
  if(LCD_CS_PIN == LCD2_CS_PIN) {
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <switch_lcd+0x70>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001478:	d115      	bne.n	80014a6 <switch_lcd+0x3a>
	  LCD_CS_PORT = LCD1_CS_PORT;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <switch_lcd+0x74>)
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <switch_lcd+0x78>)
 800147e:	601a      	str	r2, [r3, #0]
	  LCD_CS_PIN = LCD1_CS_PIN;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <switch_lcd+0x70>)
 8001482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001486:	801a      	strh	r2, [r3, #0]
	  LCD_DC_PORT = LCD1_DC_PORT;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <switch_lcd+0x7c>)
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <switch_lcd+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
	  LCD_DC_PIN = LCD1_DC_PIN;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <switch_lcd+0x80>)
 8001490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001494:	801a      	strh	r2, [r3, #0]
	  LCD_RST_PORT = LCD1_RST_PORT;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <switch_lcd+0x84>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <switch_lcd+0x78>)
 800149a:	601a      	str	r2, [r3, #0]
	  LCD_RST_PIN = LCD1_RST_PIN;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <switch_lcd+0x88>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
	LCD_DC_PIN = LCD2_DC_PIN;
	LCD_RST_PORT = LCD2_RST_PORT;
	LCD_RST_PIN = LCD2_RST_PIN;
  }
}
 80014a4:	e014      	b.n	80014d0 <switch_lcd+0x64>
    LCD_CS_PORT = LCD2_CS_PORT;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <switch_lcd+0x74>)
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <switch_lcd+0x78>)
 80014aa:	601a      	str	r2, [r3, #0]
	LCD_CS_PIN = LCD2_CS_PIN;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <switch_lcd+0x70>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b2:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <switch_lcd+0x7c>)
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <switch_lcd+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
	LCD_DC_PIN = LCD2_DC_PIN;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <switch_lcd+0x80>)
 80014bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014c0:	801a      	strh	r2, [r3, #0]
	LCD_RST_PORT = LCD2_RST_PORT;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <switch_lcd+0x84>)
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <switch_lcd+0x78>)
 80014c6:	601a      	str	r2, [r3, #0]
	LCD_RST_PIN = LCD2_RST_PIN;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <switch_lcd+0x88>)
 80014ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ce:	801a      	strh	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004
 80014e4:	40021000 	.word	0x40021000
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20000010 	.word	0x20000010
 80014f0:	20000014 	.word	0x20000014
 80014f4:	20000018 	.word	0x20000018

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f000 fde9 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f8b1 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001506:	f000 fa7d 	bl	8001a04 <MX_GPIO_Init>
  MX_DMA_Init();
 800150a:	f000 fa5b 	bl	80019c4 <MX_DMA_Init>
  MX_TIM4_Init();
 800150e:	f000 f9a1 	bl	8001854 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001512:	f000 f9eb 	bl	80018ec <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001516:	f00a fa57 	bl	800b9c8 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 800151a:	f000 f90d 	bl	8001738 <MX_I2C2_Init>
  MX_SPI1_Init();
 800151e:	f000 f963 	bl	80017e8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8001522:	f000 fa19 	bl	8001958 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCDs
  ILI9341_Init();
 8001526:	f7ff fa2f 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff fb36 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(WHITE);
 8001530:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001534:	f7ff fc2c 	bl	8000d90 <ILI9341_FillScreen>

  switch_lcd();
 8001538:	f7ff ff98 	bl	800146c <switch_lcd>
  ILI9341_Init();
 800153c:	f7ff fa24 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fb2b 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(WHITE);
 8001546:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800154a:	f7ff fc21 	bl	8000d90 <ILI9341_FillScreen>

  char writeBuff[20];
  sprintf(writeBuff, "Words per minute: ");
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4937      	ldr	r1, [pc, #220]	; (8001630 <main+0x138>)
 8001554:	4618      	mov	r0, r3
 8001556:	f00a feaf 	bl	800c2b8 <siprintf>
  ILI9341_DrawText(writeBuff, FONT4, 25, 110, BLACK, WHITE);
 800155a:	f107 001c 	add.w	r0, r7, #28
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	236e      	movs	r3, #110	; 0x6e
 800156a:	2219      	movs	r2, #25
 800156c:	4931      	ldr	r1, [pc, #196]	; (8001634 <main+0x13c>)
 800156e:	f7ff f876 	bl	800065e <ILI9341_DrawText>
  switch_lcd();
 8001572:	f7ff ff7b 	bl	800146c <switch_lcd>
  sprintf(writeBuff, "Number of turns: ");
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	492f      	ldr	r1, [pc, #188]	; (8001638 <main+0x140>)
 800157c:	4618      	mov	r0, r3
 800157e:	f00a fe9b 	bl	800c2b8 <siprintf>
  ILI9341_DrawText(writeBuff, FONT4, 25, 110, BLACK, WHITE);
 8001582:	f107 001c 	add.w	r0, r7, #28
 8001586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	236e      	movs	r3, #110	; 0x6e
 8001592:	2219      	movs	r2, #25
 8001594:	4927      	ldr	r1, [pc, #156]	; (8001634 <main+0x13c>)
 8001596:	f7ff f862 	bl	800065e <ILI9341_DrawText>
  switch_lcd();
 800159a:	f7ff ff67 	bl	800146c <switch_lcd>

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 800159e:	4827      	ldr	r0, [pc, #156]	; (800163c <main+0x144>)
 80015a0:	f006 fc34 	bl	8007e0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80015a4:	4826      	ldr	r0, [pc, #152]	; (8001640 <main+0x148>)
 80015a6:	f006 fc31 	bl	8007e0c <HAL_TIM_Base_Start_IT>

  // init counter variables
  row = 0;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <main+0x14c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
  keycodeNum = 1;
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <main+0x150>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
  lastStateCLK = 0;
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <main+0x154>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
  rotLock = 0;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <main+0x158>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

  lcd_counter = 0;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <main+0x15c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
  turn_counter = 1;
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <main+0x160>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  //ILI9341_FillScreen(WHITE);

	  // draw the counter to the lcd
	  sprintf(buffer1, "%3d", (int)wpm);
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <main+0x164>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	ee17 2a90 	vmov	r2, s15
 80015e0:	491f      	ldr	r1, [pc, #124]	; (8001660 <main+0x168>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00a fe68 	bl	800c2b8 <siprintf>
	  ILI9341_DrawText(buffer1, FONT4, 190, 110, BLACK, WHITE);
 80015e8:	f107 0010 	add.w	r0, r7, #16
 80015ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	236e      	movs	r3, #110	; 0x6e
 80015f8:	22be      	movs	r2, #190	; 0xbe
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <main+0x13c>)
 80015fc:	f7ff f82f 	bl	800065e <ILI9341_DrawText>

	  switch_lcd();
 8001600:	f7ff ff34 	bl	800146c <switch_lcd>

	  //ILI9341_FillScreen(WHITE);

	  // draw the counter to the lcd
	  sprintf(buffer2, "%d", turn_counter);
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <main+0x160>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4916      	ldr	r1, [pc, #88]	; (8001664 <main+0x16c>)
 800160c:	4618      	mov	r0, r3
 800160e:	f00a fe53 	bl	800c2b8 <siprintf>
	  ILI9341_DrawText(buffer2, FONT4, 190, 110, BLACK, WHITE);
 8001612:	1d38      	adds	r0, r7, #4
 8001614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	236e      	movs	r3, #110	; 0x6e
 8001620:	22be      	movs	r2, #190	; 0xbe
 8001622:	4904      	ldr	r1, [pc, #16]	; (8001634 <main+0x13c>)
 8001624:	f7ff f81b 	bl	800065e <ILI9341_DrawText>

	  switch_lcd();
 8001628:	f7ff ff20 	bl	800146c <switch_lcd>
	  sprintf(buffer1, "%3d", (int)wpm);
 800162c:	e7cf      	b.n	80015ce <main+0xd6>
 800162e:	bf00      	nop
 8001630:	0800cbac 	.word	0x0800cbac
 8001634:	0800cc14 	.word	0x0800cc14
 8001638:	0800cbc0 	.word	0x0800cbc0
 800163c:	200002c4 	.word	0x200002c4
 8001640:	2000030c 	.word	0x2000030c
 8001644:	200003cc 	.word	0x200003cc
 8001648:	200003c8 	.word	0x200003c8
 800164c:	200003bc 	.word	0x200003bc
 8001650:	200003c4 	.word	0x200003c4
 8001654:	2000039c 	.word	0x2000039c
 8001658:	200003a0 	.word	0x200003a0
 800165c:	200003b4 	.word	0x200003b4
 8001660:	0800cbd4 	.word	0x0800cbd4
 8001664:	0800cbd8 	.word	0x0800cbd8

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	; 0x50
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2230      	movs	r2, #48	; 0x30
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f00a fe16 	bl	800c2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <SystemClock_Config+0xc8>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <SystemClock_Config+0xc8>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <SystemClock_Config+0xc8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <SystemClock_Config+0xcc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <SystemClock_Config+0xcc>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016dc:	2348      	movs	r3, #72	; 0x48
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016e4:	2303      	movs	r3, #3
 80016e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fadd 	bl	8006cac <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f8:	f000 faa6 	bl	8001c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001700:	2302      	movs	r3, #2
 8001702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2102      	movs	r1, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f005 fd3f 	bl	800719c <HAL_RCC_ClockConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001724:	f000 fa90 	bl	8001c48 <Error_Handler>
  }
}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	; 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <MX_I2C2_Init+0xa8>)
 8001742:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001746:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <MX_I2C2_Init+0xac>)
 8001748:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_I2C2_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_I2C2_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	4819      	ldr	r0, [pc, #100]	; (80017dc <MX_I2C2_Init+0xa4>)
 8001778:	f001 fbc2 	bl	8002f00 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001782:	f000 fa61 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  uint8_t iodir[2] = { 0x00 , 0xf0 };     // set pins 0-3 output and 4-7 as input
 8001786:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800178a:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, iodir, 2, HAL_MAX_DELAY);
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2302      	movs	r3, #2
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	4810      	ldr	r0, [pc, #64]	; (80017dc <MX_I2C2_Init+0xa4>)
 800179c:	f001 fcf4 	bl	8003188 <HAL_I2C_Master_Transmit>
  uint8_t gppu[2] = { 0x06, 0xf0 };       // enable pull up resistors for pins 4-7
 80017a0:	f24f 0306 	movw	r3, #61446	; 0xf006
 80017a4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, gppu, 2, HAL_MAX_DELAY);
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2302      	movs	r3, #2
 80017b2:	2140      	movs	r1, #64	; 0x40
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_I2C2_Init+0xa4>)
 80017b6:	f001 fce7 	bl	8003188 <HAL_I2C_Master_Transmit>
  uint8_t ipol[2] = { 0x01, 0xf0 };       // enable reverse for pins 4-7
 80017ba:	f24f 0301 	movw	r3, #61441	; 0xf001
 80017be:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, ipol, 2, HAL_MAX_DELAY);
 80017c0:	1d3a      	adds	r2, r7, #4
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2302      	movs	r3, #2
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_I2C2_Init+0xa4>)
 80017ce:	f001 fcdb 	bl	8003188 <HAL_I2C_Master_Transmit>

  /* USER CODE END I2C2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001b8 	.word	0x200001b8
 80017e0:	40005800 	.word	0x40005800
 80017e4:	00061a80 	.word	0x00061a80

080017e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_SPI1_Init+0x64>)
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <MX_SPI1_Init+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI1_Init+0x64>)
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI1_Init+0x64>)
 800181c:	2208      	movs	r2, #8
 800181e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI1_Init+0x64>)
 8001834:	220a      	movs	r2, #10
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_SPI1_Init+0x64>)
 800183a:	f005 febb 	bl	80075b4 <HAL_SPI_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001844:	f000 fa00 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000020c 	.word	0x2000020c
 8001850:	40013000 	.word	0x40013000

08001854 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <MX_TIM4_Init+0x90>)
 8001872:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <MX_TIM4_Init+0x94>)
 8001874:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_TIM4_Init+0x90>)
 8001878:	229f      	movs	r2, #159	; 0x9f
 800187a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <MX_TIM4_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_TIM4_Init+0x90>)
 8001884:	2263      	movs	r2, #99	; 0x63
 8001886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_TIM4_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_TIM4_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <MX_TIM4_Init+0x90>)
 8001896:	f006 fa69 	bl	8007d6c <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80018a0:	f000 f9d2 	bl	8001c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM4_Init+0x90>)
 80018b2:	f006 fc52 	bl	800815a <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80018bc:	f000 f9c4 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_TIM4_Init+0x90>)
 80018ce:	f006 fe6d 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80018d8:	f000 f9b6 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002c4 	.word	0x200002c4
 80018e8:	40000800 	.word	0x40000800

080018ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_TIM6_Init+0x64>)
 80018fc:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_TIM6_Init+0x68>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_TIM6_Init+0x64>)
 8001902:	f240 623f 	movw	r2, #1599	; 0x63f
 8001906:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_TIM6_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_TIM6_Init+0x64>)
 8001910:	2213      	movs	r2, #19
 8001912:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_TIM6_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM6_Init+0x64>)
 800191c:	f006 fa26 	bl	8007d6c <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001926:	f000 f98f 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <MX_TIM6_Init+0x64>)
 8001938:	f006 fe38 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001942:	f000 f981 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000030c 	.word	0x2000030c
 8001954:	40001000 	.word	0x40001000

08001958 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	463b      	mov	r3, r7
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <MX_TIM7_Init+0x64>)
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <MX_TIM7_Init+0x68>)
 800196a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000 - 1;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_TIM7_Init+0x64>)
 800196e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001972:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_TIM7_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000 - 1;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_TIM7_Init+0x64>)
 800197c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001980:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_TIM7_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_TIM7_Init+0x64>)
 800198a:	f006 f9ef 	bl	8007d6c <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001994:	f000 f958 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_TIM7_Init+0x64>)
 80019a6:	f006 fe01 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019b0:	f000 f94a 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000354 	.word	0x20000354
 80019c0:	40001400 	.word	0x40001400

080019c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_DMA_Init+0x3c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <MX_DMA_Init+0x3c>)
 80019d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_DMA_Init+0x3c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	203b      	movs	r0, #59	; 0x3b
 80019ec:	f000 fce3 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80019f0:	203b      	movs	r0, #59	; 0x3b
 80019f2:	f000 fcfc 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a43      	ldr	r2, [pc, #268]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a2e      	ldr	r2, [pc, #184]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <MX_GPIO_Init+0x148>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LDC1_RESET_Pin|LCD2_RESET_Pin|LCD1_CS_Pin|LCD1_DC_Pin
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001ac8:	4821      	ldr	r0, [pc, #132]	; (8001b50 <MX_GPIO_Init+0x14c>)
 8001aca:	f001 f9ff 	bl	8002ecc <HAL_GPIO_WritePin>
                          |LCD2_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	4820      	ldr	r0, [pc, #128]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001ad4:	f001 f9fa 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LDC1_RESET_Pin LCD2_RESET_Pin LCD1_CS_Pin LCD1_DC_Pin
                           LCD2_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LDC1_RESET_Pin|LCD2_RESET_Pin|LCD1_CS_Pin|LCD1_DC_Pin
 8001ad8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001adc:	61fb      	str	r3, [r7, #28]
                          |LCD2_CS_Pin|LCD2_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	4817      	ldr	r0, [pc, #92]	; (8001b50 <MX_GPIO_Init+0x14c>)
 8001af2:	f001 f837 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_Pin ROT_DT_Pin ROT_CLCK_Pin */
  GPIO_InitStruct.Pin = ROT_SW_Pin|ROT_DT_Pin|ROT_CLCK_Pin;
 8001af6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_GPIO_Init+0x154>)
 8001b0c:	f001 f82a 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8001b10:	230f      	movs	r3, #15
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001b28:	f001 f81c 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8001b2c:	23f0      	movs	r3, #240	; 0xf0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001b40:	f001 f810 	bl	8002b64 <HAL_GPIO_Init>

}
 8001b44:	bf00      	nop
 8001b46:	3730      	adds	r7, #48	; 0x30
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020800 	.word	0x40020800

08001b5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a2d      	ldr	r2, [pc, #180]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d107      	bne.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8001b6c:	f7ff fbb2 	bl	80012d4 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8001b70:	2208      	movs	r2, #8
 8001b72:	492b      	ldr	r1, [pc, #172]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b74:	482b      	ldr	r0, [pc, #172]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b76:	f008 fbad 	bl	800a2d4 <USBD_HID_SendReport>
		// calculate wpm
		numCycles++;
		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
		charsInCycle = 0;
	}
}
 8001b7a:	e04b      	b.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0xb8>
	else if (htim == &htim6) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d104      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x32>
		scan_keypad();
 8001b84:	f7ff f9ec 	bl	8000f60 <scan_keypad>
		scan_rotary();
 8001b88:	f7ff fb22 	bl	80011d0 <scan_rotary>
}
 8001b8c:	e042      	b.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0xb8>
	else if (htim == &htim7) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d13e      	bne.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0xb8>
		if (charsInCycle == 0) {
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d117      	bne.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x72>
			dryCycles++;
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ba6:	6013      	str	r3, [r2, #0]
			if (dryCycles == 5) {
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d10e      	bne.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x72>
				charCount = 0;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
				charsInCycle = 0;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
				dryCycles = 0;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
				numCycles = 0;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);
 8001bc8:	4818      	ldr	r0, [pc, #96]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bca:	f006 f98f 	bl	8007eec <HAL_TIM_Base_Stop_IT>
		numCycles++;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bd6:	6013      	str	r3, [r2, #0]
		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001be8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bfc:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001c00:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
		charsInCycle = 0;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200002c4 	.word	0x200002c4
 8001c20:	200003f8 	.word	0x200003f8
 8001c24:	2000040c 	.word	0x2000040c
 8001c28:	2000030c 	.word	0x2000030c
 8001c2c:	20000354 	.word	0x20000354
 8001c30:	200003a8 	.word	0x200003a8
 8001c34:	200003b0 	.word	0x200003b0
 8001c38:	200003a4 	.word	0x200003a4
 8001c3c:	200003ac 	.word	0x200003ac
 8001c40:	42700000 	.word	0x42700000
 8001c44:	200003b4 	.word	0x200003b4

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <HAL_I2C_MspInit+0xa4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d13c      	bne.n	8001d40 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_I2C_MspInit+0xa8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_I2C_MspInit+0xa8>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_I2C_MspInit+0xa8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ce2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce8:	2312      	movs	r3, #18
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <HAL_I2C_MspInit+0xac>)
 8001d00:	f000 ff30 	bl	8002b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_I2C_MspInit+0xa8>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_I2C_MspInit+0xa8>)
 8001d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_I2C_MspInit+0xa8>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2021      	movs	r0, #33	; 0x21
 8001d26:	f000 fb46 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d2a:	2021      	movs	r0, #33	; 0x21
 8001d2c:	f000 fb5f 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	2022      	movs	r0, #34	; 0x22
 8001d36:	f000 fb3e 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d3a:	2022      	movs	r0, #34	; 0x22
 8001d3c:	f000 fb57 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40005800 	.word	0x40005800
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020400 	.word	0x40020400

08001d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_SPI_MspInit+0xe0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d159      	bne.n	8001e2a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dae:	23a0      	movs	r3, #160	; 0xa0
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481c      	ldr	r0, [pc, #112]	; (8001e3c <HAL_SPI_MspInit+0xe8>)
 8001dca:	f000 fecb 	bl	8002b64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <HAL_SPI_MspInit+0xf0>)
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001dd6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dda:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dee:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e0e:	480c      	ldr	r0, [pc, #48]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001e10:	f000 fb08 	bl	8002424 <HAL_DMA_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001e1a:	f7ff ff15 	bl	8001c48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001e22:	649a      	str	r2, [r3, #72]	; 0x48
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_SPI_MspInit+0xec>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	; 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40013000 	.word	0x40013000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	20000264 	.word	0x20000264
 8001e44:	40026458 	.word	0x40026458

08001e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_TIM_Base_MspInit+0xb8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d116      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a28      	ldr	r2, [pc, #160]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201e      	movs	r0, #30
 8001e7c:	f000 fa9b 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e80:	201e      	movs	r0, #30
 8001e82:	f000 fab4 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e86:	e036      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_TIM_Base_MspInit+0xc0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d116      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2036      	movs	r0, #54	; 0x36
 8001eb4:	f000 fa7f 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eb8:	2036      	movs	r0, #54	; 0x36
 8001eba:	f000 fa98 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001ebe:	e01a      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_TIM_Base_MspInit+0xc4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d115      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001ed4:	f043 0320 	orr.w	r3, r3, #32
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_TIM_Base_MspInit+0xbc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2037      	movs	r0, #55	; 0x37
 8001eec:	f000 fa63 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ef0:	2037      	movs	r0, #55	; 0x37
 8001ef2:	f000 fa7c 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40001000 	.word	0x40001000
 8001f0c:	40001400 	.word	0x40001400

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5c:	f000 f90c 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM4_IRQHandler+0x10>)
 8001f6a:	f005 ffee 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200002c4 	.word	0x200002c4

08001f78 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <I2C2_EV_IRQHandler+0x10>)
 8001f7e:	f001 fc27 	bl	80037d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200001b8 	.word	0x200001b8

08001f8c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <I2C2_ER_IRQHandler+0x10>)
 8001f92:	f001 fd8e 	bl	8003ab2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200001b8 	.word	0x200001b8

08001fa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM6_DAC_IRQHandler+0x10>)
 8001fa6:	f005 ffd0 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000030c 	.word	0x2000030c

08001fb4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM7_IRQHandler+0x10>)
 8001fba:	f005 ffc6 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000354 	.word	0x20000354

08001fc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA2_Stream3_IRQHandler+0x10>)
 8001fce:	f000 fb51 	bl	8002674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000264 	.word	0x20000264

08001fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <OTG_FS_IRQHandler+0x10>)
 8001fe2:	f003 fd4d 	bl	8005a80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000ae8 	.word	0x20000ae8

08001ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <_sbrk+0x5c>)
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <_sbrk+0x60>)
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <_sbrk+0x64>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <_sbrk+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002020:	f00a f918 	bl	800c254 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	220c      	movs	r2, #12
 8002028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e009      	b.n	8002044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <_sbrk+0x64>)
 8002040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20020000 	.word	0x20020000
 8002050:	00000400 	.word	0x00000400
 8002054:	20000400 	.word	0x20000400
 8002058:	20001018 	.word	0x20001018

0800205c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <SystemInit+0x20>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <SystemInit+0x20>)
 8002068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800206c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002086:	490e      	ldr	r1, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800209c:	4c0b      	ldr	r4, [pc, #44]	; (80020cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020aa:	f7ff ffd7 	bl	800205c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f00a f8d7 	bl	800c260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fa21 	bl	80014f8 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80020c4:	0800de14 	.word	0x0800de14
  ldr r2, =_sbss
 80020c8:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80020cc:	20001018 	.word	0x20001018

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f94f 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fda4 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f967 	bl	800240a <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f92f 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000001c 	.word	0x2000001c
 8002170:	20000024 	.word	0x20000024
 8002174:	20000020 	.word	0x20000020

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000024 	.word	0x20000024
 800219c:	20000404 	.word	0x20000404

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000404 	.word	0x20000404

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000024 	.word	0x20000024

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff29 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff3e 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff31 	bl	8002264 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff feb6 	bl	80021a0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e099      	b.n	8002574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002460:	e00f      	b.n	8002482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002462:	f7ff fe9d 	bl	80021a0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b05      	cmp	r3, #5
 800246e:	d908      	bls.n	8002482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e078      	b.n	8002574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e8      	bne.n	8002462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <HAL_DMA_Init+0x158>)
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4313      	orrs	r3, r2
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0307 	bic.w	r3, r3, #7
 8002502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b04      	cmp	r3, #4
 8002514:	d117      	bne.n	8002546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fa9f 	bl	8002a6c <DMA_CheckFifoParam>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002542:	2301      	movs	r3, #1
 8002544:	e016      	b.n	8002574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa56 	bl	8002a00 <DMA_CalcBaseAndBitshift>
 8002554:	4603      	mov	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	f010803f 	.word	0xf010803f

08002580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_DMA_Start_IT+0x26>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e040      	b.n	8002628 <HAL_DMA_Start_IT+0xa8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d12f      	bne.n	800261a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9e8 	bl	80029a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	223f      	movs	r2, #63	; 0x3f
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0216 	orr.w	r2, r2, #22
 80025ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0208 	orr.w	r2, r2, #8
 8002606:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e005      	b.n	8002626 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d004      	beq.n	800264e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00c      	b.n	8002668 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2205      	movs	r2, #5
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002680:	4b8e      	ldr	r3, [pc, #568]	; (80028bc <HAL_DMA_IRQHandler+0x248>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a8e      	ldr	r2, [pc, #568]	; (80028c0 <HAL_DMA_IRQHandler+0x24c>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2208      	movs	r2, #8
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01a      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	2208      	movs	r2, #8
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2201      	movs	r2, #1
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d012      	beq.n	8002716 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	2201      	movs	r2, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f043 0202 	orr.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2204      	movs	r2, #4
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d012      	beq.n	800274c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2204      	movs	r2, #4
 800273a:	409a      	lsls	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2210      	movs	r2, #16
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d043      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03c      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	2210      	movs	r2, #16
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d018      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d108      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d024      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
 80027a2:	e01f      	b.n	80027e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
 80027b4:	e016      	b.n	80027e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0208 	bic.w	r2, r2, #8
 80027d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2220      	movs	r2, #32
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 808f 	beq.w	8002914 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8087 	beq.w	8002914 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2220      	movs	r2, #32
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b05      	cmp	r3, #5
 800281c:	d136      	bne.n	800288c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0216 	bic.w	r2, r2, #22
 800282c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800283c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d103      	bne.n	800284e <HAL_DMA_IRQHandler+0x1da>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0208 	bic.w	r2, r2, #8
 800285c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	223f      	movs	r2, #63	; 0x3f
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	d07e      	beq.n	8002980 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
        }
        return;
 800288a:	e079      	b.n	8002980 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01d      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d031      	beq.n	8002914 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
 80028b8:	e02c      	b.n	8002914 <HAL_DMA_IRQHandler+0x2a0>
 80028ba:	bf00      	nop
 80028bc:	2000001c 	.word	0x2000001c
 80028c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e01e      	b.n	8002914 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10f      	bne.n	8002904 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0210 	bic.w	r2, r2, #16
 80028f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	2b00      	cmp	r3, #0
 800291a:	d032      	beq.n	8002982 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d022      	beq.n	800296e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2205      	movs	r2, #5
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3301      	adds	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	429a      	cmp	r2, r3
 800294a:	d307      	bcc.n	800295c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f2      	bne.n	8002940 <HAL_DMA_IRQHandler+0x2cc>
 800295a:	e000      	b.n	800295e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800295c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
 800297e:	e000      	b.n	8002982 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002980:	bf00      	nop
    }
  }
}
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002996:	b2db      	uxtb	r3, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d108      	bne.n	80029e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029e2:	e007      	b.n	80029f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b10      	subs	r3, #16
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <DMA_CalcBaseAndBitshift+0x64>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <DMA_CalcBaseAndBitshift+0x68>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d909      	bls.n	8002a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	1d1a      	adds	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a40:	e007      	b.n	8002a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	aaaaaaab 	.word	0xaaaaaaab
 8002a68:	0800ddc8 	.word	0x0800ddc8

08002a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11f      	bne.n	8002ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d856      	bhi.n	8002b3a <DMA_CheckFifoParam+0xce>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <DMA_CheckFifoParam+0x28>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002ab7 	.word	0x08002ab7
 8002a9c:	08002aa5 	.word	0x08002aa5
 8002aa0:	08002b3b 	.word	0x08002b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d046      	beq.n	8002b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e043      	b.n	8002b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abe:	d140      	bne.n	8002b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e03d      	b.n	8002b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ace:	d121      	bne.n	8002b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d837      	bhi.n	8002b46 <DMA_CheckFifoParam+0xda>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <DMA_CheckFifoParam+0x70>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002af3 	.word	0x08002af3
 8002ae4:	08002aed 	.word	0x08002aed
 8002ae8:	08002b05 	.word	0x08002b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e030      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d025      	beq.n	8002b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b02:	e022      	b.n	8002b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0c:	d11f      	bne.n	8002b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b12:	e01c      	b.n	8002b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d903      	bls.n	8002b22 <DMA_CheckFifoParam+0xb6>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d003      	beq.n	8002b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b20:	e018      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      break;
 8002b26:	e015      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00e      	beq.n	8002b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e00b      	b.n	8002b52 <DMA_CheckFifoParam+0xe6>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e00a      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e008      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e006      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e004      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
    }
  } 
  
  return status; 
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e16b      	b.n	8002e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	f040 815a 	bne.w	8002e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d017      	beq.n	8002c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d123      	bne.n	8002ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3208      	adds	r2, #8
 8002c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80b4 	beq.w	8002e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d06:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <HAL_GPIO_Init+0x310>)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_GPIO_Init+0x314>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02b      	beq.n	8002d8a <HAL_GPIO_Init+0x226>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <HAL_GPIO_Init+0x318>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d025      	beq.n	8002d86 <HAL_GPIO_Init+0x222>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a50      	ldr	r2, [pc, #320]	; (8002e80 <HAL_GPIO_Init+0x31c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <HAL_GPIO_Init+0x21e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4f      	ldr	r2, [pc, #316]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x21a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4e      	ldr	r2, [pc, #312]	; (8002e88 <HAL_GPIO_Init+0x324>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x216>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4d      	ldr	r2, [pc, #308]	; (8002e8c <HAL_GPIO_Init+0x328>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4c      	ldr	r2, [pc, #304]	; (8002e90 <HAL_GPIO_Init+0x32c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x20e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4b      	ldr	r2, [pc, #300]	; (8002e94 <HAL_GPIO_Init+0x330>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x20a>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9c:	4935      	ldr	r1, [pc, #212]	; (8002e74 <HAL_GPIO_Init+0x310>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dce:	4a32      	ldr	r2, [pc, #200]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae90 	bls.w	8002b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40021c00 	.word	0x40021c00
 8002e98:	40013c00 	.word	0x40013c00

08002e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	e001      	b.n	8002ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e12b      	b.n	800316a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe febc 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f64:	f004 fb12 	bl	800758c <HAL_RCC_GetPCLK1Freq>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a81      	ldr	r2, [pc, #516]	; (8003174 <HAL_I2C_Init+0x274>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d807      	bhi.n	8002f84 <HAL_I2C_Init+0x84>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_I2C_Init+0x278>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e006      	b.n	8002f92 <HAL_I2C_Init+0x92>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a7d      	ldr	r2, [pc, #500]	; (800317c <HAL_I2C_Init+0x27c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0e7      	b.n	800316a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a78      	ldr	r2, [pc, #480]	; (8003180 <HAL_I2C_Init+0x280>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_I2C_Init+0x274>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <HAL_I2C_Init+0xd4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e009      	b.n	8002fe8 <HAL_I2C_Init+0xe8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_I2C_Init+0x284>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	495c      	ldr	r1, [pc, #368]	; (8003174 <HAL_I2C_Init+0x274>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d819      	bhi.n	800303c <HAL_I2C_Init+0x13c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e59      	subs	r1, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_I2C_Init+0x138>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e59      	subs	r1, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	e051      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003038:	2304      	movs	r3, #4
 800303a:	e04f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d111      	bne.n	8003068 <HAL_I2C_Init+0x168>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e012      	b.n	800308e <HAL_I2C_Init+0x18e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x196>
 8003092:	2301      	movs	r3, #1
 8003094:	e022      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <HAL_I2C_Init+0x1bc>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	0099      	lsls	r1, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6809      	ldr	r1, [r1, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6911      	ldr	r1, [r2, #16]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	000186a0 	.word	0x000186a0
 8003178:	001e847f 	.word	0x001e847f
 800317c:	003d08ff 	.word	0x003d08ff
 8003180:	431bde83 	.word	0x431bde83
 8003184:	10624dd3 	.word	0x10624dd3

08003188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	460b      	mov	r3, r1
 8003196:	817b      	strh	r3, [r7, #10]
 8003198:	4613      	mov	r3, r2
 800319a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff f800 	bl	80021a0 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	f040 80e0 	bne.w	8003370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2319      	movs	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	4970      	ldr	r1, [pc, #448]	; (800337c <HAL_I2C_Master_Transmit+0x1f4>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f002 f8e6 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0d3      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2C_Master_Transmit+0x50>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0cc      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d007      	beq.n	80031fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2221      	movs	r2, #33	; 0x21
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2210      	movs	r2, #16
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	893a      	ldrh	r2, [r7, #8]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_I2C_Master_Transmit+0x1f8>)
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f001 fea8 	bl	8004f9c <I2C_MasterRequestWrite>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e08d      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800326c:	e066      	b.n	800333c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f002 f960 	bl	8005538 <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d107      	bne.n	8003296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d11b      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x188>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f002 f950 	bl	80055ba <I2C_WaitOnBTFFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01a      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d194      	bne.n	800326e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000

08003384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
 8003394:	4613      	mov	r3, r2
 8003396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7fe ff02 	bl	80021a0 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 820b 	bne.w	80037c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2319      	movs	r3, #25
 80033b2:	2201      	movs	r2, #1
 80033b4:	497c      	ldr	r1, [pc, #496]	; (80035a8 <HAL_I2C_Master_Receive+0x224>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f001 ffe8 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e1fe      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_Master_Receive+0x50>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e1f7      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d007      	beq.n	80033fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2222      	movs	r2, #34	; 0x22
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2210      	movs	r2, #16
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_I2C_Master_Receive+0x228>)
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800343c:	8979      	ldrh	r1, [r7, #10]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f001 fe2c 	bl	80050a0 <I2C_MasterRequestRead>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1b8      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d113      	bne.n	8003482 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e18c      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	2b01      	cmp	r3, #1
 8003488:	d11b      	bne.n	80034c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e16c      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d11b      	bne.n	8003502 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	e14c      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003528:	e138      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b03      	cmp	r3, #3
 8003530:	f200 80f1 	bhi.w	8003716 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b01      	cmp	r3, #1
 800353a:	d123      	bne.n	8003584 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f002 f8ad 	bl	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e139      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003582:	e10b      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	2b02      	cmp	r3, #2
 800358a:	d14e      	bne.n	800362a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	2200      	movs	r2, #0
 8003594:	4906      	ldr	r1, [pc, #24]	; (80035b0 <HAL_I2C_Master_Receive+0x22c>)
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f001 fef8 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e10e      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
 80035a6:	bf00      	nop
 80035a8:	00100002 	.word	0x00100002
 80035ac:	ffff0000 	.word	0xffff0000
 80035b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003628:	e0b8      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	4966      	ldr	r1, [pc, #408]	; (80037cc <HAL_I2C_Master_Receive+0x448>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f001 fea9 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0bf      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2200      	movs	r2, #0
 800368e:	494f      	ldr	r1, [pc, #316]	; (80037cc <HAL_I2C_Master_Receive+0x448>)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f001 fe7b 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e091      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003714:	e042      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f001 ffc0 	bl	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e04c      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d118      	bne.n	800379c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f aec2 	bne.w	800352a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00010004 	.word	0x00010004

080037d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d003      	beq.n	8003808 <HAL_I2C_EV_IRQHandler+0x38>
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	f040 80c1 	bne.w	800398a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10d      	bne.n	800383e <HAL_I2C_EV_IRQHandler+0x6e>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003828:	d003      	beq.n	8003832 <HAL_I2C_EV_IRQHandler+0x62>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003830:	d101      	bne.n	8003836 <HAL_I2C_EV_IRQHandler+0x66>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_I2C_EV_IRQHandler+0x68>
 8003836:	2300      	movs	r3, #0
 8003838:	2b01      	cmp	r3, #1
 800383a:	f000 8132 	beq.w	8003aa2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_I2C_EV_IRQHandler+0x92>
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	0a5b      	lsrs	r3, r3, #9
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f001 ffa8 	bl	80057aa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fd83 	bl	8004366 <I2C_Master_SB>
 8003860:	e092      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	08db      	lsrs	r3, r3, #3
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_I2C_EV_IRQHandler+0xb2>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	0a5b      	lsrs	r3, r3, #9
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fdf9 	bl	8004472 <I2C_Master_ADD10>
 8003880:	e082      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	0a5b      	lsrs	r3, r3, #9
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fe13 	bl	80044c6 <I2C_Master_ADDR>
 80038a0:	e072      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03b      	beq.n	8003926 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	f000 80f3 	beq.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	09db      	lsrs	r3, r3, #7
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00f      	beq.n	80038ec <HAL_I2C_EV_IRQHandler+0x11c>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	0a9b      	lsrs	r3, r3, #10
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_I2C_EV_IRQHandler+0x11c>
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9f3 	bl	8003cd0 <I2C_MasterTransmit_TXE>
 80038ea:	e04d      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80d6 	beq.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	0a5b      	lsrs	r3, r3, #9
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80cf 	beq.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	2b21      	cmp	r3, #33	; 0x21
 800390c:	d103      	bne.n	8003916 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa7a 	bl	8003e08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003914:	e0c7      	b.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	f040 80c4 	bne.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fae8 	bl	8003ef4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003924:	e0bf      	b.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003934:	f000 80b7 	beq.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	099b      	lsrs	r3, r3, #6
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00f      	beq.n	8003964 <HAL_I2C_EV_IRQHandler+0x194>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_I2C_EV_IRQHandler+0x194>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb5d 	bl	800401c <I2C_MasterReceive_RXNE>
 8003962:	e011      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 809a 	beq.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	0a5b      	lsrs	r3, r3, #9
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8093 	beq.w	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fc06 	bl	8004192 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003986:	e08e      	b.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003988:	e08d      	b.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e007      	b.n	80039ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <HAL_I2C_EV_IRQHandler+0x20e>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	0a5b      	lsrs	r3, r3, #9
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 ffc4 	bl	8004964 <I2C_Slave_ADDR>
 80039dc:	e066      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_I2C_EV_IRQHandler+0x22e>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0a5b      	lsrs	r3, r3, #9
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fffe 	bl	80049f8 <I2C_Slave_STOPF>
 80039fc:	e056      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039fe:	7bbb      	ldrb	r3, [r7, #14]
 8003a00:	2b21      	cmp	r3, #33	; 0x21
 8003a02:	d002      	beq.n	8003a0a <HAL_I2C_EV_IRQHandler+0x23a>
 8003a04:	7bbb      	ldrb	r3, [r7, #14]
 8003a06:	2b29      	cmp	r3, #41	; 0x29
 8003a08:	d125      	bne.n	8003a56 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	09db      	lsrs	r3, r3, #7
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00f      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x266>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0a9b      	lsrs	r3, r3, #10
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x266>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 feda 	bl	80047e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a34:	e039      	b.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d033      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2da>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02d      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 ff07 	bl	8004862 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a54:	e029      	b.n	8003aaa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00f      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	0a9b      	lsrs	r3, r3, #10
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 ff12 	bl	80048a4 <I2C_SlaveReceive_RXNE>
 8003a80:	e014      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00e      	beq.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	0a5b      	lsrs	r3, r3, #9
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 ff40 	bl	8004920 <I2C_SlaveReceive_BTF>
 8003aa0:	e004      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aaa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b08a      	sub	sp, #40	; 0x28
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <HAL_I2C_ER_IRQHandler+0x4e>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003afe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	0a5b      	lsrs	r3, r3, #9
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <HAL_I2C_ER_IRQHandler+0x78>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003b28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	0a9b      	lsrs	r3, r3, #10
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03f      	beq.n	8003bb6 <HAL_I2C_ER_IRQHandler+0x104>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d039      	beq.n	8003bb6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003b42:	7efb      	ldrb	r3, [r7, #27]
 8003b44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b5c:	7ebb      	ldrb	r3, [r7, #26]
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d112      	bne.n	8003b88 <HAL_I2C_ER_IRQHandler+0xd6>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10f      	bne.n	8003b88 <HAL_I2C_ER_IRQHandler+0xd6>
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b21      	cmp	r3, #33	; 0x21
 8003b6c:	d008      	beq.n	8003b80 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b29      	cmp	r3, #41	; 0x29
 8003b72:	d005      	beq.n	8003b80 <HAL_I2C_ER_IRQHandler+0xce>
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	2b28      	cmp	r3, #40	; 0x28
 8003b78:	d106      	bne.n	8003b88 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b21      	cmp	r3, #33	; 0x21
 8003b7e:	d103      	bne.n	8003b88 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f001 f869 	bl	8004c58 <I2C_Slave_AF>
 8003b86:	e016      	b.n	8003bb6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f043 0304 	orr.w	r3, r3, #4
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b9a:	7efb      	ldrb	r3, [r7, #27]
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d002      	beq.n	8003ba6 <HAL_I2C_ER_IRQHandler+0xf4>
 8003ba0:	7efb      	ldrb	r3, [r7, #27]
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d107      	bne.n	8003bb6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	0adb      	lsrs	r3, r3, #11
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00e      	beq.n	8003be0 <HAL_I2C_ER_IRQHandler+0x12e>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003bde:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f001 f8a0 	bl	8004d38 <I2C_ITError>
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3728      	adds	r7, #40	; 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d150      	bne.n	8003d98 <I2C_MasterTransmit_TXE+0xc8>
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b21      	cmp	r3, #33	; 0x21
 8003cfa:	d14d      	bne.n	8003d98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d01d      	beq.n	8003d3e <I2C_MasterTransmit_TXE+0x6e>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d01a      	beq.n	8003d3e <I2C_MasterTransmit_TXE+0x6e>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d0e:	d016      	beq.n	8003d3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2211      	movs	r2, #17
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ff62 	bl	8003c00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d3c:	e060      	b.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d107      	bne.n	8003d88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff7d 	bl	8003c80 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d86:	e03b      	b.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff35 	bl	8003c00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d96:	e033      	b.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b21      	cmp	r3, #33	; 0x21
 8003d9c:	d005      	beq.n	8003daa <I2C_MasterTransmit_TXE+0xda>
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d12d      	bne.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b22      	cmp	r3, #34	; 0x22
 8003da8:	d12a      	bne.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003dc4:	e01c      	b.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d103      	bne.n	8003dda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f88e 	bl	8003ef4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003dd8:	e012      	b.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dfe:	e7ff      	b.n	8003e00 <I2C_MasterTransmit_TXE+0x130>
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b21      	cmp	r3, #33	; 0x21
 8003e20:	d164      	bne.n	8003eec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e50:	e04c      	b.n	8003eec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d01d      	beq.n	8003e94 <I2C_MasterTransmit_BTF+0x8c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d01a      	beq.n	8003e94 <I2C_MasterTransmit_BTF+0x8c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e64:	d016      	beq.n	8003e94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2211      	movs	r2, #17
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff feb7 	bl	8003c00 <HAL_I2C_MasterTxCpltCallback>
}
 8003e92:	e02b      	b.n	8003eec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ea2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d107      	bne.n	8003ede <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fed2 	bl	8003c80 <HAL_I2C_MemTxCpltCallback>
}
 8003edc:	e006      	b.n	8003eec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fe8a 	bl	8003c00 <HAL_I2C_MasterTxCpltCallback>
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11d      	bne.n	8003f48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10b      	bne.n	8003f2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003f2a:	e073      	b.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	121b      	asrs	r3, r3, #8
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f46:	e065      	b.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10b      	bne.n	8003f68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f66:	e055      	b.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d151      	bne.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b22      	cmp	r3, #34	; 0x22
 8003f74:	d10d      	bne.n	8003f92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f90:	e040      	b.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b21      	cmp	r3, #33	; 0x21
 8003fa0:	d112      	bne.n	8003fc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fc6:	e025      	b.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d120      	bne.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b21      	cmp	r3, #33	; 0x21
 8003fd6:	d11d      	bne.n	8004014 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fe36 	bl	8003c80 <HAL_I2C_MemTxCpltCallback>
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b22      	cmp	r3, #34	; 0x22
 800402e:	f040 80ac 	bne.w	800418a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d921      	bls.n	8004084 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b03      	cmp	r3, #3
 800406e:	f040 808c 	bne.w	800418a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004080:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004082:	e082      	b.n	800418a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	2b02      	cmp	r3, #2
 800408a:	d075      	beq.n	8004178 <I2C_MasterReceive_RXNE+0x15c>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d002      	beq.n	8004098 <I2C_MasterReceive_RXNE+0x7c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d16f      	bne.n	8004178 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f001 facf 	bl	800563c <I2C_WaitOnSTOPRequestThroughIT>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d142      	bne.n	800412a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d10a      	bne.n	8004114 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fdc1 	bl	8003c94 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004112:	e03a      	b.n	800418a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2212      	movs	r2, #18
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fd76 	bl	8003c14 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004128:	e02f      	b.n	800418a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004138:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fd99 	bl	8003ca8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004176:	e008      	b.n	800418a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	605a      	str	r2, [r3, #4]
}
 8004188:	e7ff      	b.n	800418a <I2C_MasterReceive_RXNE+0x16e>
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d11b      	bne.n	80041e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041e0:	e0bd      	b.n	800435e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d129      	bne.n	8004240 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00a      	beq.n	8004218 <I2C_MasterReceive_BTF+0x86>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d007      	beq.n	8004218 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800423e:	e08e      	b.n	800435e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d176      	bne.n	8004338 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d002      	beq.n	8004256 <I2C_MasterReceive_BTF+0xc4>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b10      	cmp	r3, #16
 8004254:	d108      	bne.n	8004268 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e019      	b.n	800429c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d002      	beq.n	8004274 <I2C_MasterReceive_BTF+0xe2>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d108      	bne.n	8004286 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e00a      	b.n	800429c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b10      	cmp	r3, #16
 800428a:	d007      	beq.n	800429c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d10a      	bne.n	8004322 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fcba 	bl	8003c94 <HAL_I2C_MemRxCpltCallback>
}
 8004320:	e01d      	b.n	800435e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2212      	movs	r2, #18
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fc6f 	bl	8003c14 <HAL_I2C_MasterRxCpltCallback>
}
 8004336:	e012      	b.n	800435e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d117      	bne.n	80043aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004392:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004394:	e067      	b.n	8004466 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]
}
 80043a8:	e05d      	b.n	8004466 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d133      	bne.n	800441c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b21      	cmp	r3, #33	; 0x21
 80043be:	d109      	bne.n	80043d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	e008      	b.n	80043e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <I2C_Master_SB+0x92>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d108      	bne.n	800440a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d032      	beq.n	8004466 <I2C_Master_SB+0x100>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02d      	beq.n	8004466 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004418:	605a      	str	r2, [r3, #4]
}
 800441a:	e024      	b.n	8004466 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10e      	bne.n	8004442 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	b29b      	uxth	r3, r3
 800442a:	11db      	asrs	r3, r3, #7
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0306 	and.w	r3, r3, #6
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f063 030f 	orn	r3, r3, #15
 8004438:	b2da      	uxtb	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	611a      	str	r2, [r3, #16]
}
 8004440:	e011      	b.n	8004466 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10d      	bne.n	8004466 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	b29b      	uxth	r3, r3
 8004450:	11db      	asrs	r3, r3, #7
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0306 	and.w	r3, r3, #6
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f063 030e 	orn	r3, r3, #14
 800445e:	b2da      	uxtb	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	b2da      	uxtb	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <I2C_Master_ADD10+0x26>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d108      	bne.n	80044aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <I2C_Master_ADD10+0x48>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b8:	605a      	str	r2, [r3, #4]
  }
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b091      	sub	sp, #68	; 0x44
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b22      	cmp	r3, #34	; 0x22
 80044ee:	f040 8169 	bne.w	80047c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <I2C_Master_ADDR+0x54>
 80044fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d10b      	bne.n	800451a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	633b      	str	r3, [r7, #48]	; 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	633b      	str	r3, [r7, #48]	; 0x30
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	e160      	b.n	80047dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11d      	bne.n	800455e <I2C_Master_ADDR+0x98>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800452a:	d118      	bne.n	800455e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452c:	2300      	movs	r3, #0
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004550:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	651a      	str	r2, [r3, #80]	; 0x50
 800455c:	e13e      	b.n	80047dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004568:	2300      	movs	r3, #0
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e115      	b.n	80047bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 808a 	bne.w	80046b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a2:	d137      	bne.n	8004614 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c2:	d113      	bne.n	80045ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	e0e7      	b.n	80047bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e0d3      	b.n	80047bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	2b08      	cmp	r3, #8
 8004618:	d02e      	beq.n	8004678 <I2C_Master_ADDR+0x1b2>
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	2b20      	cmp	r3, #32
 800461e:	d02b      	beq.n	8004678 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	2b12      	cmp	r3, #18
 8004624:	d102      	bne.n	800462c <I2C_Master_ADDR+0x166>
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	2b01      	cmp	r3, #1
 800462a:	d125      	bne.n	8004678 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2b04      	cmp	r3, #4
 8004630:	d00e      	beq.n	8004650 <I2C_Master_ADDR+0x18a>
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b02      	cmp	r3, #2
 8004636:	d00b      	beq.n	8004650 <I2C_Master_ADDR+0x18a>
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	2b10      	cmp	r3, #16
 800463c:	d008      	beq.n	8004650 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e007      	b.n	8004660 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800465e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	e0a1      	b.n	80047bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004686:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e085      	b.n	80047bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d14d      	bne.n	8004756 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d016      	beq.n	80046ee <I2C_Master_ADDR+0x228>
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d013      	beq.n	80046ee <I2C_Master_ADDR+0x228>
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d010      	beq.n	80046ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e007      	b.n	80046fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470c:	d117      	bne.n	800473e <I2C_Master_ADDR+0x278>
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004714:	d00b      	beq.n	800472e <I2C_Master_ADDR+0x268>
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	2b01      	cmp	r3, #1
 800471a:	d008      	beq.n	800472e <I2C_Master_ADDR+0x268>
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	2b08      	cmp	r3, #8
 8004720:	d005      	beq.n	800472e <I2C_Master_ADDR+0x268>
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	2b10      	cmp	r3, #16
 8004726:	d002      	beq.n	800472e <I2C_Master_ADDR+0x268>
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	2b20      	cmp	r3, #32
 800472c:	d107      	bne.n	800473e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800473c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	e032      	b.n	80047bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d117      	bne.n	80047a6 <I2C_Master_ADDR+0x2e0>
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800477c:	d00b      	beq.n	8004796 <I2C_Master_ADDR+0x2d0>
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	2b01      	cmp	r3, #1
 8004782:	d008      	beq.n	8004796 <I2C_Master_ADDR+0x2d0>
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	2b08      	cmp	r3, #8
 8004788:	d005      	beq.n	8004796 <I2C_Master_ADDR+0x2d0>
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	2b10      	cmp	r3, #16
 800478e:	d002      	beq.n	8004796 <I2C_Master_ADDR+0x2d0>
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	2b20      	cmp	r3, #32
 8004794:	d107      	bne.n	80047a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047c2:	e00b      	b.n	80047dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
}
 80047da:	e7ff      	b.n	80047dc <I2C_Master_ADDR+0x316>
 80047dc:	bf00      	nop
 80047de:	3744      	adds	r7, #68	; 0x44
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02b      	beq.n	800485a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d114      	bne.n	800485a <I2C_SlaveTransmit_TXE+0x72>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b29      	cmp	r3, #41	; 0x29
 8004834:	d111      	bne.n	800485a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2221      	movs	r2, #33	; 0x21
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2228      	movs	r2, #40	; 0x28
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff f9e7 	bl	8003c28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d011      	beq.n	8004898 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02c      	beq.n	8004918 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d114      	bne.n	8004918 <I2C_SlaveReceive_RXNE+0x74>
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b2a      	cmp	r3, #42	; 0x2a
 80048f2:	d111      	bne.n	8004918 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004902:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2222      	movs	r2, #34	; 0x22
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2228      	movs	r2, #40	; 0x28
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff f992 	bl	8003c3c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d012      	beq.n	8004958 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800497e:	2b28      	cmp	r3, #40	; 0x28
 8004980:	d127      	bne.n	80049d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004990:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	09db      	lsrs	r3, r3, #7
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	81bb      	strh	r3, [r7, #12]
 80049b4:	e002      	b.n	80049bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049c4:	89ba      	ldrh	r2, [r7, #12]
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff f940 	bl	8003c50 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049d0:	e00e      	b.n	80049f0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a54:	d172      	bne.n	8004b3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b22      	cmp	r3, #34	; 0x22
 8004a5a:	d002      	beq.n	8004a62 <I2C_Slave_STOPF+0x6a>
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a60:	d135      	bne.n	8004ace <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd ff74 	bl	8002988 <HAL_DMA_GetState>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d049      	beq.n	8004b3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	4a69      	ldr	r2, [pc, #420]	; (8004c50 <I2C_Slave_STOPF+0x258>)
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fdbc 	bl	8002630 <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03d      	beq.n	8004b3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004acc:	e035      	b.n	8004b3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fd ff3e 	bl	8002988 <HAL_DMA_GetState>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d014      	beq.n	8004b3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	4a4e      	ldr	r2, [pc, #312]	; (8004c50 <I2C_Slave_STOPF+0x258>)
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd fd86 	bl	8002630 <HAL_DMA_Abort_IT>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
 8004b38:	e000      	b.n	8004b3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d03e      	beq.n	8004bc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d112      	bne.n	8004b7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d112      	bne.n	8004bae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	f043 0204 	orr.w	r2, r3, #4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8b3 	bl	8004d38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bd2:	e039      	b.n	8004c48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd8:	d109      	bne.n	8004bee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2228      	movs	r2, #40	; 0x28
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff f827 	bl	8003c3c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b28      	cmp	r3, #40	; 0x28
 8004bf8:	d111      	bne.n	8004c1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <I2C_Slave_STOPF+0x25c>)
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff f828 	bl	8003c6c <HAL_I2C_ListenCpltCallback>
}
 8004c1c:	e014      	b.n	8004c48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	2b22      	cmp	r3, #34	; 0x22
 8004c24:	d002      	beq.n	8004c2c <I2C_Slave_STOPF+0x234>
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b22      	cmp	r3, #34	; 0x22
 8004c2a:	d10d      	bne.n	8004c48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fe fffa 	bl	8003c3c <HAL_I2C_SlaveRxCpltCallback>
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	0800523d 	.word	0x0800523d
 8004c54:	ffff0000 	.word	0xffff0000

08004c58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d002      	beq.n	8004c7a <I2C_Slave_AF+0x22>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d129      	bne.n	8004cce <I2C_Slave_AF+0x76>
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b28      	cmp	r3, #40	; 0x28
 8004c7e:	d126      	bne.n	8004cce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <I2C_Slave_AF+0xdc>)
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fe ffd0 	bl	8003c6c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ccc:	e02e      	b.n	8004d2c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b21      	cmp	r3, #33	; 0x21
 8004cd2:	d126      	bne.n	8004d22 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <I2C_Slave_AF+0xdc>)
 8004cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2221      	movs	r2, #33	; 0x21
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d18:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fe ff84 	bl	8003c28 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d20:	e004      	b.n	8004d2c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d2a:	615a      	str	r2, [r3, #20]
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	ffff0000 	.word	0xffff0000

08004d38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d50:	7bbb      	ldrb	r3, [r7, #14]
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d002      	beq.n	8004d5c <I2C_ITError+0x24>
 8004d56:	7bbb      	ldrb	r3, [r7, #14]
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d10a      	bne.n	8004d72 <I2C_ITError+0x3a>
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b22      	cmp	r3, #34	; 0x22
 8004d60:	d107      	bne.n	8004d72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d78:	2b28      	cmp	r3, #40	; 0x28
 8004d7a:	d107      	bne.n	8004d8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2228      	movs	r2, #40	; 0x28
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d8a:	e015      	b.n	8004db8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9a:	d00a      	beq.n	8004db2 <I2C_ITError+0x7a>
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b60      	cmp	r3, #96	; 0x60
 8004da0:	d007      	beq.n	8004db2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc6:	d162      	bne.n	8004e8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d020      	beq.n	8004e28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	4a6a      	ldr	r2, [pc, #424]	; (8004f94 <I2C_ITError+0x25c>)
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fd fc1c 	bl	8002630 <HAL_DMA_Abort_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8089 	beq.w	8004f12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e22:	4610      	mov	r0, r2
 8004e24:	4798      	blx	r3
 8004e26:	e074      	b.n	8004f12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	4a59      	ldr	r2, [pc, #356]	; (8004f94 <I2C_ITError+0x25c>)
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd fbfb 	bl	8002630 <HAL_DMA_Abort_IT>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d068      	beq.n	8004f12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d10b      	bne.n	8004e66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
 8004e8c:	e041      	b.n	8004f12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b60      	cmp	r3, #96	; 0x60
 8004e98:	d125      	bne.n	8004ee6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	d10b      	bne.n	8004ece <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fe feec 	bl	8003cbc <HAL_I2C_AbortCpltCallback>
 8004ee4:	e015      	b.n	8004f12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d10b      	bne.n	8004f0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fe fecb 	bl	8003ca8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10e      	bne.n	8004f40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d113      	bne.n	8004f8c <I2C_ITError+0x254>
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b28      	cmp	r3, #40	; 0x28
 8004f68:	d110      	bne.n	8004f8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <I2C_ITError+0x260>)
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fe fe70 	bl	8003c6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	0800523d 	.word	0x0800523d
 8004f98:	ffff0000 	.word	0xffff0000

08004f9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d006      	beq.n	8004fc6 <I2C_MasterRequestWrite+0x2a>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d003      	beq.n	8004fc6 <I2C_MasterRequestWrite+0x2a>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc4:	d108      	bne.n	8004fd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e00b      	b.n	8004ff0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	2b12      	cmp	r3, #18
 8004fde:	d107      	bne.n	8004ff0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f9c5 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	d103      	bne.n	8005020 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e035      	b.n	8005090 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502c:	d108      	bne.n	8005040 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800502e:	897b      	ldrh	r3, [r7, #10]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	e01b      	b.n	8005078 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005040:	897b      	ldrh	r3, [r7, #10]
 8005042:	11db      	asrs	r3, r3, #7
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f003 0306 	and.w	r3, r3, #6
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f063 030f 	orn	r3, r3, #15
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <I2C_MasterRequestWrite+0xfc>)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f9eb 	bl	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e010      	b.n	8005090 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800506e:	897b      	ldrh	r3, [r7, #10]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4907      	ldr	r1, [pc, #28]	; (800509c <I2C_MasterRequestWrite+0x100>)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f9db 	bl	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	00010008 	.word	0x00010008
 800509c:	00010002 	.word	0x00010002

080050a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	460b      	mov	r3, r1
 80050ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d006      	beq.n	80050da <I2C_MasterRequestRead+0x3a>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <I2C_MasterRequestRead+0x3a>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050d8:	d108      	bne.n	80050ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e00b      	b.n	8005104 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	2b11      	cmp	r3, #17
 80050f2:	d107      	bne.n	8005104 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005102:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f93b 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d103      	bne.n	8005134 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e079      	b.n	800522c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005142:	897b      	ldrh	r3, [r7, #10]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	611a      	str	r2, [r3, #16]
 8005152:	e05f      	b.n	8005214 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005154:	897b      	ldrh	r3, [r7, #10]
 8005156:	11db      	asrs	r3, r3, #7
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0306 	and.w	r3, r3, #6
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f063 030f 	orn	r3, r3, #15
 8005164:	b2da      	uxtb	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4930      	ldr	r1, [pc, #192]	; (8005234 <I2C_MasterRequestRead+0x194>)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f961 	bl	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e054      	b.n	800522c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4929      	ldr	r1, [pc, #164]	; (8005238 <I2C_MasterRequestRead+0x198>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f951 	bl	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e044      	b.n	800522c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f8d9 	bl	800538c <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	d103      	bne.n	80051f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e017      	b.n	800522c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051fc:	897b      	ldrh	r3, [r7, #10]
 80051fe:	11db      	asrs	r3, r3, #7
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 0306 	and.w	r3, r3, #6
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f063 030e 	orn	r3, r3, #14
 800520c:	b2da      	uxtb	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4907      	ldr	r1, [pc, #28]	; (8005238 <I2C_MasterRequestRead+0x198>)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f90d 	bl	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	00010008 	.word	0x00010008
 8005238:	00010002 	.word	0x00010002

0800523c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005256:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <I2C_DMAAbort+0x148>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	4a4a      	ldr	r2, [pc, #296]	; (8005388 <I2C_DMAAbort+0x14c>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	0a1a      	lsrs	r2, r3, #8
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	00da      	lsls	r2, r3, #3
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005282:	e00a      	b.n	800529a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005298:	d0ea      	beq.n	8005270 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	2200      	movs	r2, #0
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	2200      	movs	r2, #0
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2200      	movs	r2, #0
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	2200      	movs	r2, #0
 80052de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	2200      	movs	r2, #0
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b60      	cmp	r3, #96	; 0x60
 800530a:	d10e      	bne.n	800532a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005322:	6978      	ldr	r0, [r7, #20]
 8005324:	f7fe fcca 	bl	8003cbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005328:	e027      	b.n	800537a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005330:	2b28      	cmp	r3, #40	; 0x28
 8005332:	d117      	bne.n	8005364 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005352:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2228      	movs	r2, #40	; 0x28
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005362:	e007      	b.n	8005374 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f7fe fc97 	bl	8003ca8 <HAL_I2C_ErrorCallback>
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	2000001c 	.word	0x2000001c
 8005388:	14f8b589 	.word	0x14f8b589

0800538c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800539c:	e025      	b.n	80053ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d021      	beq.n	80053ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fc fefb 	bl	80021a0 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e023      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d10d      	bne.n	8005410 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	e00c      	b.n	800542a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d0b6      	beq.n	800539e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005448:	e051      	b.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d123      	bne.n	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005468:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005472:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e046      	b.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d021      	beq.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fc fe79 	bl	80021a0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d116      	bne.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e020      	b.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10c      	bne.n	8005512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	43da      	mvns	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf14      	ite	ne
 800550a:	2301      	movne	r3, #1
 800550c:	2300      	moveq	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e00b      	b.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	43da      	mvns	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d18d      	bne.n	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005544:	e02d      	b.n	80055a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f900 	bl	800574c <I2C_IsAcknowledgeFailed>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e02d      	b.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d021      	beq.n	80055a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fc fe1f 	bl	80021a0 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d116      	bne.n	80055a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e007      	b.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ac:	2b80      	cmp	r3, #128	; 0x80
 80055ae:	d1ca      	bne.n	8005546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055c6:	e02d      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f8bf 	bl	800574c <I2C_IsAcknowledgeFailed>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e02d      	b.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d021      	beq.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e0:	f7fc fdde 	bl	80021a0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d116      	bne.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e007      	b.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d1ca      	bne.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005648:	4b13      	ldr	r3, [pc, #76]	; (8005698 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	08db      	lsrs	r3, r3, #3
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	0a1a      	lsrs	r2, r3, #8
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3b01      	subs	r3, #1
 8005662:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e008      	b.n	800568c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005688:	d0e9      	beq.n	800565e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	2000001c 	.word	0x2000001c
 800569c:	14f8b589 	.word	0x14f8b589

080056a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ac:	e042      	b.n	8005734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d119      	bne.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0210 	mvn.w	r2, #16
 80056c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e029      	b.n	8005744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f0:	f7fc fd56 	bl	80021a0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d116      	bne.n	8005734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e007      	b.n	8005744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d1b5      	bne.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005762:	d11b      	bne.n	800579c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800576c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057ba:	d103      	bne.n	80057c4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057c2:	e007      	b.n	80057d4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057cc:	d102      	bne.n	80057d4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2208      	movs	r2, #8
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b08f      	sub	sp, #60	; 0x3c
 80057e4:	af0a      	add	r7, sp, #40	; 0x28
 80057e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e10f      	b.n	8005a12 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f006 fa11 	bl	800bc34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2203      	movs	r2, #3
 8005816:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f003 f860 	bl	80088f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	687e      	ldr	r6, [r7, #4]
 800583e:	466d      	mov	r5, sp
 8005840:	f106 0410 	add.w	r4, r6, #16
 8005844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800584a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800584c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005850:	e885 0003 	stmia.w	r5, {r0, r1}
 8005854:	1d33      	adds	r3, r6, #4
 8005856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005858:	6838      	ldr	r0, [r7, #0]
 800585a:	f002 ff37 	bl	80086cc <USB_CoreInit>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0d0      	b.n	8005a12 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f003 f84e 	bl	8008918 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e04a      	b.n	8005918 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	333d      	adds	r3, #61	; 0x3d
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005896:	7bfa      	ldrb	r2, [r7, #15]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	333c      	adds	r3, #60	; 0x3c
 80058a6:	7bfa      	ldrb	r2, [r7, #15]
 80058a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058aa:	7bfa      	ldrb	r2, [r7, #15]
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	b298      	uxth	r0, r3
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3344      	adds	r3, #68	; 0x44
 80058be:	4602      	mov	r2, r0
 80058c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058c2:	7bfa      	ldrb	r2, [r7, #15]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3340      	adds	r3, #64	; 0x40
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058d6:	7bfa      	ldrb	r2, [r7, #15]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3348      	adds	r3, #72	; 0x48
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058ea:	7bfa      	ldrb	r2, [r7, #15]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	334c      	adds	r3, #76	; 0x4c
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3354      	adds	r3, #84	; 0x54
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	3301      	adds	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3af      	bcc.n	8005882 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005922:	2300      	movs	r3, #0
 8005924:	73fb      	strb	r3, [r7, #15]
 8005926:	e044      	b.n	80059b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005928:	7bfa      	ldrb	r2, [r7, #15]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005954:	7bfa      	ldrb	r2, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	3301      	adds	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
 80059b2:	7bfa      	ldrb	r2, [r7, #15]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3b5      	bcc.n	8005928 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	687e      	ldr	r6, [r7, #4]
 80059c4:	466d      	mov	r5, sp
 80059c6:	f106 0410 	add.w	r4, r6, #16
 80059ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80059da:	1d33      	adds	r3, r6, #4
 80059dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059de:	6838      	ldr	r0, [r7, #0]
 80059e0:	f002 ffe6 	bl	80089b0 <USB_DevInit>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e00d      	b.n	8005a12 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f004 f935 	bl	8009c7a <USB_DevDisconnect>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_PCD_Start+0x1c>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e020      	b.n	8005a78 <HAL_PCD_Start+0x5e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d109      	bne.n	8005a5a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d005      	beq.n	8005a5a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f002 ff38 	bl	80088d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f004 f8e5 	bl	8009c38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b08d      	sub	sp, #52	; 0x34
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 f9a3 	bl	8009de2 <USB_GetMode>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f040 848a 	bne.w	80063b8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f004 f907 	bl	8009cbc <USB_ReadInterrupts>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8480 	beq.w	80063b6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f004 f8f4 	bl	8009cbc <USB_ReadInterrupts>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d107      	bne.n	8005aee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f002 0202 	and.w	r2, r2, #2
 8005aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f004 f8e2 	bl	8009cbc <USB_ReadInterrupts>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d161      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0210 	bic.w	r2, r2, #16
 8005b10:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f003 020f 	and.w	r2, r3, #15
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	0c5b      	lsrs	r3, r3, #17
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d124      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d035      	beq.n	8005bb6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6a38      	ldr	r0, [r7, #32]
 8005b5e:	f003 ff19 	bl	8009994 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b6e:	441a      	add	r2, r3
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b80:	441a      	add	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	621a      	str	r2, [r3, #32]
 8005b86:	e016      	b.n	8005bb6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	0c5b      	lsrs	r3, r3, #17
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2b06      	cmp	r3, #6
 8005b92:	d110      	bne.n	8005bb6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6a38      	ldr	r0, [r7, #32]
 8005ba0:	f003 fef8 	bl	8009994 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb0:	441a      	add	r2, r3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0210 	orr.w	r2, r2, #16
 8005bc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f004 f876 	bl	8009cbc <USB_ReadInterrupts>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bda:	f040 80a7 	bne.w	8005d2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f004 f87b 	bl	8009ce2 <USB_ReadDevAllOutEpInterrupt>
 8005bec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005bee:	e099      	b.n	8005d24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 808e 	beq.w	8005d18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f004 f89f 	bl	8009d4a <USB_ReadDevOutEPInterrupt>
 8005c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	461a      	mov	r2, r3
 8005c26:	2301      	movs	r3, #1
 8005c28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 feab 	bl	8006988 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00c      	beq.n	8005c56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 ff81 	bl	8006b58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2310      	movs	r3, #16
 8005c70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d030      	beq.n	8005cde <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d109      	bne.n	8005c9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	3304      	adds	r3, #4
 8005cb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d108      	bne.n	8005ccc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f006 f8c8 	bl	800be5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2302      	movs	r3, #2
 8005cdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2320      	movs	r3, #32
 8005cf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	461a      	mov	r2, r3
 8005d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af62 	bne.w	8005bf0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f003 ffc3 	bl	8009cbc <USB_ReadInterrupts>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d40:	f040 80db 	bne.w	8005efa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f003 ffe4 	bl	8009d16 <USB_ReadDevAllInEpInterrupt>
 8005d4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d54:	e0cd      	b.n	8005ef2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80c2 	beq.w	8005ee6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f004 f80a 	bl	8009d86 <USB_ReadDevInEPInterrupt>
 8005d72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d057      	beq.n	8005e2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	2201      	movs	r2, #1
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	43db      	mvns	r3, r3
 8005d98:	69f9      	ldr	r1, [r7, #28]
 8005d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d9e:	4013      	ands	r3, r2
 8005da0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dae:	461a      	mov	r2, r3
 8005db0:	2301      	movs	r3, #1
 8005db2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d132      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	334c      	adds	r3, #76	; 0x4c
 8005dcc:	6819      	ldr	r1, [r3, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4403      	add	r3, r0
 8005ddc:	3348      	adds	r3, #72	; 0x48
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4419      	add	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	4613      	mov	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4403      	add	r3, r0
 8005df0:	334c      	adds	r3, #76	; 0x4c
 8005df2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d113      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x3a2>
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3354      	adds	r3, #84	; 0x54
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	f004 f811 	bl	8009e44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f005 ff92 	bl	800bd52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	461a      	mov	r2, r3
 8005e46:	2308      	movs	r3, #8
 8005e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	461a      	mov	r2, r3
 8005e62:	2310      	movs	r3, #16
 8005e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d023      	beq.n	8005ed4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e8e:	6a38      	ldr	r0, [r7, #32]
 8005e90:	f002 fef2 	bl	8008c78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	3338      	adds	r3, #56	; 0x38
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d108      	bne.n	8005ec2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f005 ffdf 	bl	800be80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fcc3 	bl	800686c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f47f af2e 	bne.w	8005d56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 fedc 	bl	8009cbc <USB_ReadInterrupts>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0e:	d122      	bne.n	8005f56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d108      	bne.n	8005f40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f36:	2100      	movs	r1, #0
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 feab 	bl	8006c94 <HAL_PCDEx_LPM_Callback>
 8005f3e:	e002      	b.n	8005f46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f005 ff7d 	bl	800be40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f003 feae 	bl	8009cbc <USB_ReadInterrupts>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6a:	d112      	bne.n	8005f92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d102      	bne.n	8005f82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f005 ff39 	bl	800bdf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f90:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f003 fe90 	bl	8009cbc <USB_ReadInterrupts>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa6:	f040 80b7 	bne.w	8006118 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2110      	movs	r1, #16
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f002 fe57 	bl	8008c78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fca:	2300      	movs	r3, #0
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fce:	e046      	b.n	800605e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fe2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006002:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	461a      	mov	r2, r3
 8006012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006016:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006036:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006052:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006056:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	3301      	adds	r3, #1
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006064:	429a      	cmp	r2, r3
 8006066:	d3b3      	bcc.n	8005fd0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006076:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800607a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	2b00      	cmp	r3, #0
 8006082:	d016      	beq.n	80060b2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006094:	f043 030b 	orr.w	r3, r3, #11
 8006098:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060aa:	f043 030b 	orr.w	r3, r3, #11
 80060ae:	6453      	str	r3, [r2, #68]	; 0x44
 80060b0:	e015      	b.n	80060de <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80060c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d8:	f043 030b 	orr.w	r3, r3, #11
 80060dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006102:	461a      	mov	r2, r3
 8006104:	f003 fe9e 	bl	8009e44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f003 fdcd 	bl	8009cbc <USB_ReadInterrupts>
 8006122:	4603      	mov	r3, r0
 8006124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612c:	d124      	bne.n	8006178 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fe63 	bl	8009dfe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f002 fe18 	bl	8008d72 <USB_GetDevSpeed>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681c      	ldr	r4, [r3, #0]
 800614e:	f001 fa11 	bl	8007574 <HAL_RCC_GetHCLKFreq>
 8006152:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	4620      	mov	r0, r4
 800615e:	f002 fb17 	bl	8008790 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f005 fe1d 	bl	800bda2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006176:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f003 fd9d 	bl	8009cbc <USB_ReadInterrupts>
 8006182:	4603      	mov	r3, r0
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10a      	bne.n	80061a2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f005 fdfa 	bl	800bd86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f002 0208 	and.w	r2, r2, #8
 80061a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f003 fd88 	bl	8009cbc <USB_ReadInterrupts>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d122      	bne.n	80061fc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c2:	2301      	movs	r3, #1
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	e014      	b.n	80061f2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061cc:	4613      	mov	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d105      	bne.n	80061ec <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb0f 	bl	800680a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	3301      	adds	r3, #1
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d3e5      	bcc.n	80061c8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f003 fd5b 	bl	8009cbc <USB_ReadInterrupts>
 8006206:	4603      	mov	r3, r0
 8006208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800620c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006210:	d13b      	bne.n	800628a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006212:	2301      	movs	r3, #1
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
 8006216:	e02b      	b.n	8006270 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	3340      	adds	r3, #64	; 0x40
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d115      	bne.n	800626a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800623e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006240:	2b00      	cmp	r3, #0
 8006242:	da12      	bge.n	800626a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006248:	4613      	mov	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	333f      	adds	r3, #63	; 0x3f
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006260:	b2db      	uxtb	r3, r3
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fad0 	bl	800680a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	3301      	adds	r3, #1
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006276:	429a      	cmp	r2, r3
 8006278:	d3ce      	bcc.n	8006218 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f003 fd14 	bl	8009cbc <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800629e:	d155      	bne.n	800634c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062a0:	2301      	movs	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	e045      	b.n	8006332 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d12e      	bne.n	800632c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da2b      	bge.n	800632c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80062e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d121      	bne.n	800632c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ec:	4613      	mov	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006328:	6053      	str	r3, [r2, #4]
            break;
 800632a:	e007      	b.n	800633c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	3301      	adds	r3, #1
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	429a      	cmp	r2, r3
 800633a:	d3b4      	bcc.n	80062a6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800634a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f003 fcb3 	bl	8009cbc <USB_ReadInterrupts>
 8006356:	4603      	mov	r3, r0
 8006358:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d10a      	bne.n	8006378 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f005 fd9e 	bl	800bea4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f003 fc9d 	bl	8009cbc <USB_ReadInterrupts>
 8006382:	4603      	mov	r3, r0
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d115      	bne.n	80063b8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f005 fd8e 	bl	800bec0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
 80063b4:	e000      	b.n	80063b8 <HAL_PCD_IRQHandler+0x938>
      return;
 80063b6:	bf00      	nop
    }
  }
}
 80063b8:	3734      	adds	r7, #52	; 0x34
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}

080063be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_PCD_SetAddress+0x1a>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e013      	b.n	8006400 <HAL_PCD_SetAddress+0x42>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f003 fbfb 	bl	8009bec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	4608      	mov	r0, r1
 8006412:	4611      	mov	r1, r2
 8006414:	461a      	mov	r2, r3
 8006416:	4603      	mov	r3, r0
 8006418:	70fb      	strb	r3, [r7, #3]
 800641a:	460b      	mov	r3, r1
 800641c:	803b      	strh	r3, [r7, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800642a:	2b00      	cmp	r3, #0
 800642c:	da0f      	bge.n	800644e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	f003 020f 	and.w	r2, r3, #15
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	3338      	adds	r3, #56	; 0x38
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	3304      	adds	r3, #4
 8006444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	705a      	strb	r2, [r3, #1]
 800644c:	e00f      	b.n	800646e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4413      	add	r3, r2
 8006464:	3304      	adds	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800647a:	883a      	ldrh	r2, [r7, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	78ba      	ldrb	r2, [r7, #2]
 8006484:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006498:	78bb      	ldrb	r3, [r7, #2]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d102      	bne.n	80064a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_PCD_EP_Open+0xaa>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e00e      	b.n	80064d0 <HAL_PCD_EP_Open+0xc8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f002 fc7b 	bl	8008dbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80064ce:	7afb      	ldrb	r3, [r7, #11]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da0f      	bge.n	800650c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 020f 	and.w	r2, r3, #15
 80064f2:	4613      	mov	r3, r2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	3338      	adds	r3, #56	; 0x38
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	3304      	adds	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	705a      	strb	r2, [r3, #1]
 800650a:	e00f      	b.n	800652c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	3304      	adds	r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_PCD_EP_Close+0x6e>
 8006542:	2302      	movs	r3, #2
 8006544:	e00e      	b.n	8006564 <HAL_PCD_EP_Close+0x8c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	4618      	mov	r0, r3
 8006556:	f002 fcb9 	bl	8008ecc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	460b      	mov	r3, r1
 800657a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	3304      	adds	r3, #4
 8006594:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2200      	movs	r2, #0
 80065ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d102      	bne.n	80065c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	f002 ff98 	bl	8009514 <USB_EP0StartXfer>
 80065e4:	e008      	b.n	80065f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6979      	ldr	r1, [r7, #20]
 80065f4:	f002 fd46 	bl	8009084 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
 800660e:	460b      	mov	r3, r1
 8006610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	3338      	adds	r3, #56	; 0x38
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2200      	movs	r2, #0
 800663a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2201      	movs	r2, #1
 8006640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	b2da      	uxtb	r2, r3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d102      	bne.n	800665c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	f002 ff4e 	bl	8009514 <USB_EP0StartXfer>
 8006678:	e008      	b.n	800668c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	6979      	ldr	r1, [r7, #20]
 8006688:	f002 fcfc 	bl	8009084 <USB_EPStartXfer>
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d901      	bls.n	80066b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e050      	b.n	8006756 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da0f      	bge.n	80066dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	f003 020f 	and.w	r2, r3, #15
 80066c2:	4613      	mov	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	3338      	adds	r3, #56	; 0x38
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4413      	add	r3, r2
 80066d0:	3304      	adds	r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	705a      	strb	r2, [r3, #1]
 80066da:	e00d      	b.n	80066f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	3304      	adds	r3, #4
 80066f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	b2da      	uxtb	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_PCD_EP_SetStall+0x82>
 8006714:	2302      	movs	r3, #2
 8006716:	e01e      	b.n	8006756 <HAL_PCD_EP_SetStall+0xc0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68f9      	ldr	r1, [r7, #12]
 8006726:	4618      	mov	r0, r3
 8006728:	f003 f98c 	bl	8009a44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	b2d9      	uxtb	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006746:	461a      	mov	r2, r3
 8006748:	f003 fb7c 	bl	8009e44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	d901      	bls.n	800677c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e042      	b.n	8006802 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800677c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006780:	2b00      	cmp	r3, #0
 8006782:	da0f      	bge.n	80067a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	4613      	mov	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	3338      	adds	r3, #56	; 0x38
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	3304      	adds	r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	705a      	strb	r2, [r3, #1]
 80067a2:	e00f      	b.n	80067c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	3304      	adds	r3, #4
 80067bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_PCD_EP_ClrStall+0x86>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e00e      	b.n	8006802 <HAL_PCD_EP_ClrStall+0xa4>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f003 f994 	bl	8009b20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800681a:	2b00      	cmp	r3, #0
 800681c:	da0c      	bge.n	8006838 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	4613      	mov	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	3338      	adds	r3, #56	; 0x38
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	3304      	adds	r3, #4
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e00c      	b.n	8006852 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	4613      	mov	r3, r2
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	3304      	adds	r3, #4
 8006850:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	4618      	mov	r0, r3
 800685a:	f002 ffb3 	bl	80097c4 <USB_EPStopXfer>
 800685e:	4603      	mov	r3, r0
 8006860:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006862:	7afb      	ldrb	r3, [r7, #11]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af02      	add	r7, sp, #8
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	3338      	adds	r3, #56	; 0x38
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	429a      	cmp	r2, r3
 800689e:	d901      	bls.n	80068a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e06c      	b.n	800697e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d902      	bls.n	80068c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3303      	adds	r3, #3
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068c8:	e02b      	b.n	8006922 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d902      	bls.n	80068e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3303      	adds	r3, #3
 80068ea:	089b      	lsrs	r3, r3, #2
 80068ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6919      	ldr	r1, [r3, #16]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4603      	mov	r3, r0
 8006904:	6978      	ldr	r0, [r7, #20]
 8006906:	f003 f807 	bl	8009918 <USB_WritePacket>

    ep->xfer_buff  += len;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1a      	ldr	r2, [r3, #32]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	b29b      	uxth	r3, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	429a      	cmp	r2, r3
 8006936:	d809      	bhi.n	800694c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006940:	429a      	cmp	r2, r3
 8006942:	d203      	bcs.n	800694c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1be      	bne.n	80068ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	429a      	cmp	r2, r3
 8006956:	d811      	bhi.n	800697c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	2201      	movs	r2, #1
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	43db      	mvns	r3, r3
 8006972:	6939      	ldr	r1, [r7, #16]
 8006974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006978:	4013      	ands	r3, r2
 800697a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	333c      	adds	r3, #60	; 0x3c
 80069a0:	3304      	adds	r3, #4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d17b      	bne.n	8006ab6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d015      	beq.n	80069f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4a61      	ldr	r2, [pc, #388]	; (8006b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	f240 80b9 	bls.w	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80b3 	beq.w	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	461a      	mov	r2, r3
 80069ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f0:	6093      	str	r3, [r2, #8]
 80069f2:	e0a7      	b.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	6093      	str	r3, [r2, #8]
 8006a10:	e098      	b.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f040 8093 	bne.w	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4a4b      	ldr	r2, [pc, #300]	; (8006b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d90f      	bls.n	8006a46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	6093      	str	r3, [r2, #8]
 8006a44:	e07e      	b.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	3304      	adds	r3, #4
 8006a5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	0159      	lsls	r1, r3, #5
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	440b      	add	r3, r1
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d114      	bne.n	8006aa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a90:	461a      	mov	r2, r3
 8006a92:	2101      	movs	r1, #1
 8006a94:	f003 f9d6 	bl	8009e44 <USB_EP0_OutStart>
 8006a98:	e006      	b.n	8006aa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f005 f934 	bl	800bd1c <HAL_PCD_DataOutStageCallback>
 8006ab4:	e046      	b.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4a26      	ldr	r2, [pc, #152]	; (8006b54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d124      	bne.n	8006b08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ada:	6093      	str	r3, [r2, #8]
 8006adc:	e032      	b.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af4:	461a      	mov	r2, r3
 8006af6:	2320      	movs	r3, #32
 8006af8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f005 f90b 	bl	800bd1c <HAL_PCD_DataOutStageCallback>
 8006b06:	e01d      	b.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d114      	bne.n	8006b38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d108      	bne.n	8006b38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b30:	461a      	mov	r2, r3
 8006b32:	2100      	movs	r1, #0
 8006b34:	f003 f986 	bl	8009e44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f005 f8ec 	bl	800bd1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	4f54300a 	.word	0x4f54300a
 8006b54:	4f54310a 	.word	0x4f54310a

08006b58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	333c      	adds	r3, #60	; 0x3c
 8006b70:	3304      	adds	r3, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d90e      	bls.n	8006bac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d009      	beq.n	8006bac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006baa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f005 f8a3 	bl	800bcf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d90c      	bls.n	8006bd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d108      	bne.n	8006bd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2101      	movs	r1, #1
 8006bd0:	f003 f938 	bl	8009e44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	4f54300a 	.word	0x4f54300a

08006be4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c02:	883b      	ldrh	r3, [r7, #0]
 8006c04:	0419      	lsls	r1, r3, #16
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c10:	e028      	b.n	8006c64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	e00d      	b.n	8006c42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	3340      	adds	r3, #64	; 0x40
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4413      	add	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	73fb      	strb	r3, [r7, #15]
 8006c42:	7bfa      	ldrb	r2, [r7, #15]
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d3ec      	bcc.n	8006c26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c4c:	883b      	ldrh	r3, [r7, #0]
 8006c4e:	0418      	lsls	r0, r3, #16
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6819      	ldr	r1, [r3, #0]
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	4302      	orrs	r2, r0
 8006c5c:	3340      	adds	r3, #64	; 0x40
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	887a      	ldrh	r2, [r7, #2]
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e267      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d075      	beq.n	8006db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cca:	4b88      	ldr	r3, [pc, #544]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cd6:	4b85      	ldr	r3, [pc, #532]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d112      	bne.n	8006d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ce2:	4b82      	ldr	r3, [pc, #520]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cee:	d10b      	bne.n	8006d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf0:	4b7e      	ldr	r3, [pc, #504]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d05b      	beq.n	8006db4 <HAL_RCC_OscConfig+0x108>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d157      	bne.n	8006db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e242      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d106      	bne.n	8006d20 <HAL_RCC_OscConfig+0x74>
 8006d12:	4b76      	ldr	r3, [pc, #472]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a75      	ldr	r2, [pc, #468]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e01d      	b.n	8006d5c <HAL_RCC_OscConfig+0xb0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d28:	d10c      	bne.n	8006d44 <HAL_RCC_OscConfig+0x98>
 8006d2a:	4b70      	ldr	r3, [pc, #448]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6f      	ldr	r2, [pc, #444]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	4b6d      	ldr	r3, [pc, #436]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6c      	ldr	r2, [pc, #432]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e00b      	b.n	8006d5c <HAL_RCC_OscConfig+0xb0>
 8006d44:	4b69      	ldr	r3, [pc, #420]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a68      	ldr	r2, [pc, #416]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	4b66      	ldr	r3, [pc, #408]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a65      	ldr	r2, [pc, #404]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d64:	f7fb fa1c 	bl	80021a0 <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d6c:	f7fb fa18 	bl	80021a0 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b64      	cmp	r3, #100	; 0x64
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e207      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7e:	4b5b      	ldr	r3, [pc, #364]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f0      	beq.n	8006d6c <HAL_RCC_OscConfig+0xc0>
 8006d8a:	e014      	b.n	8006db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8c:	f7fb fa08 	bl	80021a0 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d94:	f7fb fa04 	bl	80021a0 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b64      	cmp	r3, #100	; 0x64
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e1f3      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006da6:	4b51      	ldr	r3, [pc, #324]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0xe8>
 8006db2:	e000      	b.n	8006db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d063      	beq.n	8006e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dc2:	4b4a      	ldr	r3, [pc, #296]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dce:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d11c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dda:	4b44      	ldr	r3, [pc, #272]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d116      	bne.n	8006e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de6:	4b41      	ldr	r3, [pc, #260]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_RCC_OscConfig+0x152>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d001      	beq.n	8006dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e1c7      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfe:	4b3b      	ldr	r3, [pc, #236]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4937      	ldr	r1, [pc, #220]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e12:	e03a      	b.n	8006e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d020      	beq.n	8006e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e1c:	4b34      	ldr	r3, [pc, #208]	; (8006ef0 <HAL_RCC_OscConfig+0x244>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e22:	f7fb f9bd 	bl	80021a0 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e2a:	f7fb f9b9 	bl	80021a0 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e1a8      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3c:	4b2b      	ldr	r3, [pc, #172]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e48:	4b28      	ldr	r3, [pc, #160]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4925      	ldr	r1, [pc, #148]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	600b      	str	r3, [r1, #0]
 8006e5c:	e015      	b.n	8006e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5e:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <HAL_RCC_OscConfig+0x244>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fb f99c 	bl	80021a0 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e6c:	f7fb f998 	bl	80021a0 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e187      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d036      	beq.n	8006f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d016      	beq.n	8006ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e9e:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <HAL_RCC_OscConfig+0x248>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fb f97c 	bl	80021a0 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eac:	f7fb f978 	bl	80021a0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e167      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <HAL_RCC_OscConfig+0x240>)
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f0      	beq.n	8006eac <HAL_RCC_OscConfig+0x200>
 8006eca:	e01b      	b.n	8006f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <HAL_RCC_OscConfig+0x248>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ed2:	f7fb f965 	bl	80021a0 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ed8:	e00e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eda:	f7fb f961 	bl	80021a0 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d907      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e150      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	42470000 	.word	0x42470000
 8006ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef8:	4b88      	ldr	r3, [pc, #544]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ea      	bne.n	8006eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8097 	beq.w	8007040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f16:	4b81      	ldr	r3, [pc, #516]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10f      	bne.n	8006f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	4b7d      	ldr	r3, [pc, #500]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	4a7c      	ldr	r2, [pc, #496]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f30:	6413      	str	r3, [r2, #64]	; 0x40
 8006f32:	4b7a      	ldr	r3, [pc, #488]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	60bb      	str	r3, [r7, #8]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f42:	4b77      	ldr	r3, [pc, #476]	; (8007120 <HAL_RCC_OscConfig+0x474>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d118      	bne.n	8006f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f4e:	4b74      	ldr	r3, [pc, #464]	; (8007120 <HAL_RCC_OscConfig+0x474>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a73      	ldr	r2, [pc, #460]	; (8007120 <HAL_RCC_OscConfig+0x474>)
 8006f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f5a:	f7fb f921 	bl	80021a0 <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f62:	f7fb f91d 	bl	80021a0 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e10c      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f74:	4b6a      	ldr	r3, [pc, #424]	; (8007120 <HAL_RCC_OscConfig+0x474>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0f0      	beq.n	8006f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d106      	bne.n	8006f96 <HAL_RCC_OscConfig+0x2ea>
 8006f88:	4b64      	ldr	r3, [pc, #400]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8c:	4a63      	ldr	r2, [pc, #396]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	6713      	str	r3, [r2, #112]	; 0x70
 8006f94:	e01c      	b.n	8006fd0 <HAL_RCC_OscConfig+0x324>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b05      	cmp	r3, #5
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x30c>
 8006f9e:	4b5f      	ldr	r3, [pc, #380]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a5e      	ldr	r2, [pc, #376]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fa4:	f043 0304 	orr.w	r3, r3, #4
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006faa:	4b5c      	ldr	r3, [pc, #368]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	4a5b      	ldr	r2, [pc, #364]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb6:	e00b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x324>
 8006fb8:	4b58      	ldr	r3, [pc, #352]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	4a57      	ldr	r2, [pc, #348]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc4:	4b55      	ldr	r3, [pc, #340]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc8:	4a54      	ldr	r2, [pc, #336]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006fca:	f023 0304 	bic.w	r3, r3, #4
 8006fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd8:	f7fb f8e2 	bl	80021a0 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe0:	f7fb f8de 	bl	80021a0 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e0cb      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff6:	4b49      	ldr	r3, [pc, #292]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ee      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x334>
 8007002:	e014      	b.n	800702e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007004:	f7fb f8cc 	bl	80021a0 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700a:	e00a      	b.n	8007022 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700c:	f7fb f8c8 	bl	80021a0 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f241 3288 	movw	r2, #5000	; 0x1388
 800701a:	4293      	cmp	r3, r2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e0b5      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007022:	4b3e      	ldr	r3, [pc, #248]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1ee      	bne.n	800700c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d105      	bne.n	8007040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007034:	4b39      	ldr	r3, [pc, #228]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	4a38      	ldr	r2, [pc, #224]	; (800711c <HAL_RCC_OscConfig+0x470>)
 800703a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800703e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a1 	beq.w	800718c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800704a:	4b34      	ldr	r3, [pc, #208]	; (800711c <HAL_RCC_OscConfig+0x470>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b08      	cmp	r3, #8
 8007054:	d05c      	beq.n	8007110 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d141      	bne.n	80070e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <HAL_RCC_OscConfig+0x478>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007064:	f7fb f89c 	bl	80021a0 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800706c:	f7fb f898 	bl	80021a0 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e087      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707e:	4b27      	ldr	r3, [pc, #156]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	019b      	lsls	r3, r3, #6
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	3b01      	subs	r3, #1
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	061b      	lsls	r3, r3, #24
 80070ae:	491b      	ldr	r1, [pc, #108]	; (800711c <HAL_RCC_OscConfig+0x470>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <HAL_RCC_OscConfig+0x478>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ba:	f7fb f871 	bl	80021a0 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c2:	f7fb f86d 	bl	80021a0 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e05c      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d4:	4b11      	ldr	r3, [pc, #68]	; (800711c <HAL_RCC_OscConfig+0x470>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0f0      	beq.n	80070c2 <HAL_RCC_OscConfig+0x416>
 80070e0:	e054      	b.n	800718c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e2:	4b10      	ldr	r3, [pc, #64]	; (8007124 <HAL_RCC_OscConfig+0x478>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e8:	f7fb f85a 	bl	80021a0 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f0:	f7fb f856 	bl	80021a0 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e045      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_RCC_OscConfig+0x470>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x444>
 800710e:	e03d      	b.n	800718c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d107      	bne.n	8007128 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e038      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
 800711c:	40023800 	.word	0x40023800
 8007120:	40007000 	.word	0x40007000
 8007124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x4ec>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d028      	beq.n	8007188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007140:	429a      	cmp	r2, r3
 8007142:	d121      	bne.n	8007188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714e:	429a      	cmp	r2, r3
 8007150:	d11a      	bne.n	8007188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007158:	4013      	ands	r3, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800715e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007160:	4293      	cmp	r3, r2
 8007162:	d111      	bne.n	8007188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	3b01      	subs	r3, #1
 8007172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d107      	bne.n	8007188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007184:	429a      	cmp	r2, r3
 8007186:	d001      	beq.n	800718c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800

0800719c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0cc      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071b0:	4b68      	ldr	r3, [pc, #416]	; (8007354 <HAL_RCC_ClockConfig+0x1b8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d90c      	bls.n	80071d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b65      	ldr	r3, [pc, #404]	; (8007354 <HAL_RCC_ClockConfig+0x1b8>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b63      	ldr	r3, [pc, #396]	; (8007354 <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e0b8      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d020      	beq.n	8007226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071f0:	4b59      	ldr	r3, [pc, #356]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	4a58      	ldr	r2, [pc, #352]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007208:	4b53      	ldr	r3, [pc, #332]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	4a52      	ldr	r2, [pc, #328]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007214:	4b50      	ldr	r3, [pc, #320]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	494d      	ldr	r1, [pc, #308]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	4313      	orrs	r3, r2
 8007224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d044      	beq.n	80072bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d107      	bne.n	800724a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723a:	4b47      	ldr	r3, [pc, #284]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d119      	bne.n	800727a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e07f      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d003      	beq.n	800725a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007256:	2b03      	cmp	r3, #3
 8007258:	d107      	bne.n	800726a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725a:	4b3f      	ldr	r3, [pc, #252]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e06f      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726a:	4b3b      	ldr	r3, [pc, #236]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e067      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800727a:	4b37      	ldr	r3, [pc, #220]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f023 0203 	bic.w	r2, r3, #3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	4934      	ldr	r1, [pc, #208]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 8007288:	4313      	orrs	r3, r2
 800728a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800728c:	f7fa ff88 	bl	80021a0 <HAL_GetTick>
 8007290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007292:	e00a      	b.n	80072aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007294:	f7fa ff84 	bl	80021a0 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e04f      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 020c 	and.w	r2, r3, #12
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d1eb      	bne.n	8007294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <HAL_RCC_ClockConfig+0x1b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d20c      	bcs.n	80072e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ca:	4b22      	ldr	r3, [pc, #136]	; (8007354 <HAL_RCC_ClockConfig+0x1b8>)
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d2:	4b20      	ldr	r3, [pc, #128]	; (8007354 <HAL_RCC_ClockConfig+0x1b8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d001      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e032      	b.n	800734a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d008      	beq.n	8007302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072f0:	4b19      	ldr	r3, [pc, #100]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	4916      	ldr	r1, [pc, #88]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d009      	beq.n	8007322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800730e:	4b12      	ldr	r3, [pc, #72]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	490e      	ldr	r1, [pc, #56]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	4313      	orrs	r3, r2
 8007320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007322:	f000 f821 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 8007326:	4602      	mov	r2, r0
 8007328:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <HAL_RCC_ClockConfig+0x1bc>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	490a      	ldr	r1, [pc, #40]	; (800735c <HAL_RCC_ClockConfig+0x1c0>)
 8007334:	5ccb      	ldrb	r3, [r1, r3]
 8007336:	fa22 f303 	lsr.w	r3, r2, r3
 800733a:	4a09      	ldr	r2, [pc, #36]	; (8007360 <HAL_RCC_ClockConfig+0x1c4>)
 800733c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800733e:	4b09      	ldr	r3, [pc, #36]	; (8007364 <HAL_RCC_ClockConfig+0x1c8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fa fee8 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40023c00 	.word	0x40023c00
 8007358:	40023800 	.word	0x40023800
 800735c:	0800ddb0 	.word	0x0800ddb0
 8007360:	2000001c 	.word	0x2000001c
 8007364:	20000020 	.word	0x20000020

08007368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800736c:	b094      	sub	sp, #80	; 0x50
 800736e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
 8007374:	2300      	movs	r3, #0
 8007376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007378:	2300      	movs	r3, #0
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007380:	4b79      	ldr	r3, [pc, #484]	; (8007568 <HAL_RCC_GetSysClockFreq+0x200>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b08      	cmp	r3, #8
 800738a:	d00d      	beq.n	80073a8 <HAL_RCC_GetSysClockFreq+0x40>
 800738c:	2b08      	cmp	r3, #8
 800738e:	f200 80e1 	bhi.w	8007554 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0x34>
 8007396:	2b04      	cmp	r3, #4
 8007398:	d003      	beq.n	80073a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800739a:	e0db      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800739c:	4b73      	ldr	r3, [pc, #460]	; (800756c <HAL_RCC_GetSysClockFreq+0x204>)
 800739e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80073a0:	e0db      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073a2:	4b73      	ldr	r3, [pc, #460]	; (8007570 <HAL_RCC_GetSysClockFreq+0x208>)
 80073a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073a6:	e0d8      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073a8:	4b6f      	ldr	r3, [pc, #444]	; (8007568 <HAL_RCC_GetSysClockFreq+0x200>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073b2:	4b6d      	ldr	r3, [pc, #436]	; (8007568 <HAL_RCC_GetSysClockFreq+0x200>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d063      	beq.n	8007486 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073be:	4b6a      	ldr	r3, [pc, #424]	; (8007568 <HAL_RCC_GetSysClockFreq+0x200>)
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	099b      	lsrs	r3, r3, #6
 80073c4:	2200      	movs	r2, #0
 80073c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80073c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	633b      	str	r3, [r7, #48]	; 0x30
 80073d2:	2300      	movs	r3, #0
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
 80073d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80073da:	4622      	mov	r2, r4
 80073dc:	462b      	mov	r3, r5
 80073de:	f04f 0000 	mov.w	r0, #0
 80073e2:	f04f 0100 	mov.w	r1, #0
 80073e6:	0159      	lsls	r1, r3, #5
 80073e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073ec:	0150      	lsls	r0, r2, #5
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4621      	mov	r1, r4
 80073f4:	1a51      	subs	r1, r2, r1
 80073f6:	6139      	str	r1, [r7, #16]
 80073f8:	4629      	mov	r1, r5
 80073fa:	eb63 0301 	sbc.w	r3, r3, r1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800740c:	4659      	mov	r1, fp
 800740e:	018b      	lsls	r3, r1, #6
 8007410:	4651      	mov	r1, sl
 8007412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007416:	4651      	mov	r1, sl
 8007418:	018a      	lsls	r2, r1, #6
 800741a:	4651      	mov	r1, sl
 800741c:	ebb2 0801 	subs.w	r8, r2, r1
 8007420:	4659      	mov	r1, fp
 8007422:	eb63 0901 	sbc.w	r9, r3, r1
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800743a:	4690      	mov	r8, r2
 800743c:	4699      	mov	r9, r3
 800743e:	4623      	mov	r3, r4
 8007440:	eb18 0303 	adds.w	r3, r8, r3
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	462b      	mov	r3, r5
 8007448:	eb49 0303 	adc.w	r3, r9, r3
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800745a:	4629      	mov	r1, r5
 800745c:	024b      	lsls	r3, r1, #9
 800745e:	4621      	mov	r1, r4
 8007460:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007464:	4621      	mov	r1, r4
 8007466:	024a      	lsls	r2, r1, #9
 8007468:	4610      	mov	r0, r2
 800746a:	4619      	mov	r1, r3
 800746c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746e:	2200      	movs	r2, #0
 8007470:	62bb      	str	r3, [r7, #40]	; 0x28
 8007472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007478:	f7f8 fefa 	bl	8000270 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4613      	mov	r3, r2
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007484:	e058      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007486:	4b38      	ldr	r3, [pc, #224]	; (8007568 <HAL_RCC_GetSysClockFreq+0x200>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	099b      	lsrs	r3, r3, #6
 800748c:	2200      	movs	r2, #0
 800748e:	4618      	mov	r0, r3
 8007490:	4611      	mov	r1, r2
 8007492:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007496:	623b      	str	r3, [r7, #32]
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
 800749c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	f04f 0000 	mov.w	r0, #0
 80074a8:	f04f 0100 	mov.w	r1, #0
 80074ac:	0159      	lsls	r1, r3, #5
 80074ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074b2:	0150      	lsls	r0, r2, #5
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4641      	mov	r1, r8
 80074ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80074be:	4649      	mov	r1, r9
 80074c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80074d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80074d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80074d8:	ebb2 040a 	subs.w	r4, r2, sl
 80074dc:	eb63 050b 	sbc.w	r5, r3, fp
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	00eb      	lsls	r3, r5, #3
 80074ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ee:	00e2      	lsls	r2, r4, #3
 80074f0:	4614      	mov	r4, r2
 80074f2:	461d      	mov	r5, r3
 80074f4:	4643      	mov	r3, r8
 80074f6:	18e3      	adds	r3, r4, r3
 80074f8:	603b      	str	r3, [r7, #0]
 80074fa:	464b      	mov	r3, r9
 80074fc:	eb45 0303 	adc.w	r3, r5, r3
 8007500:	607b      	str	r3, [r7, #4]
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800750e:	4629      	mov	r1, r5
 8007510:	028b      	lsls	r3, r1, #10
 8007512:	4621      	mov	r1, r4
 8007514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007518:	4621      	mov	r1, r4
 800751a:	028a      	lsls	r2, r1, #10
 800751c:	4610      	mov	r0, r2
 800751e:	4619      	mov	r1, r3
 8007520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007522:	2200      	movs	r2, #0
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	61fa      	str	r2, [r7, #28]
 8007528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800752c:	f7f8 fea0 	bl	8000270 <__aeabi_uldivmod>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4613      	mov	r3, r2
 8007536:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <HAL_RCC_GetSysClockFreq+0x200>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	3301      	adds	r3, #1
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800754a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007552:	e002      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCC_GetSysClockFreq+0x204>)
 8007556:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800755a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800755c:	4618      	mov	r0, r3
 800755e:	3750      	adds	r7, #80	; 0x50
 8007560:	46bd      	mov	sp, r7
 8007562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007566:	bf00      	nop
 8007568:	40023800 	.word	0x40023800
 800756c:	00f42400 	.word	0x00f42400
 8007570:	007a1200 	.word	0x007a1200

08007574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007578:	4b03      	ldr	r3, [pc, #12]	; (8007588 <HAL_RCC_GetHCLKFreq+0x14>)
 800757a:	681b      	ldr	r3, [r3, #0]
}
 800757c:	4618      	mov	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000001c 	.word	0x2000001c

0800758c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007590:	f7ff fff0 	bl	8007574 <HAL_RCC_GetHCLKFreq>
 8007594:	4602      	mov	r2, r0
 8007596:	4b05      	ldr	r3, [pc, #20]	; (80075ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	0a9b      	lsrs	r3, r3, #10
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	4903      	ldr	r1, [pc, #12]	; (80075b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075a2:	5ccb      	ldrb	r3, [r1, r3]
 80075a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40023800 	.word	0x40023800
 80075b0:	0800ddc0 	.word	0x0800ddc0

080075b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e07b      	b.n	80076be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d108      	bne.n	80075e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d6:	d009      	beq.n	80075ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	61da      	str	r2, [r3, #28]
 80075de:	e005      	b.n	80075ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fa fba4 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	ea42 0103 	orr.w	r1, r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	f003 0104 	and.w	r1, r3, #4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f003 0210 	and.w	r2, r3, #16
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b088      	sub	sp, #32
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_SPI_Transmit+0x22>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e126      	b.n	8007936 <HAL_SPI_Transmit+0x270>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076f0:	f7fa fd56 	bl	80021a0 <HAL_GetTick>
 80076f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b01      	cmp	r3, #1
 8007704:	d002      	beq.n	800770c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007706:	2302      	movs	r3, #2
 8007708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800770a:	e10b      	b.n	8007924 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_SPI_Transmit+0x52>
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800771c:	e102      	b.n	8007924 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2203      	movs	r2, #3
 8007722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007764:	d10f      	bne.n	8007786 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007774:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007784:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d007      	beq.n	80077a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ac:	d14b      	bne.n	8007846 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_SPI_Transmit+0xf6>
 80077b6:	8afb      	ldrh	r3, [r7, #22]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d13e      	bne.n	800783a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	881a      	ldrh	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	1c9a      	adds	r2, r3, #2
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077e0:	e02b      	b.n	800783a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d112      	bne.n	8007816 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	86da      	strh	r2, [r3, #54]	; 0x36
 8007814:	e011      	b.n	800783a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007816:	f7fa fcc3 	bl	80021a0 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d803      	bhi.n	800782e <HAL_SPI_Transmit+0x168>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d102      	bne.n	8007834 <HAL_SPI_Transmit+0x16e>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007838:	e074      	b.n	8007924 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1ce      	bne.n	80077e2 <HAL_SPI_Transmit+0x11c>
 8007844:	e04c      	b.n	80078e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_Transmit+0x18e>
 800784e:	8afb      	ldrh	r3, [r7, #22]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d140      	bne.n	80078d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800787a:	e02c      	b.n	80078d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d113      	bne.n	80078b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80078b0:	e011      	b.n	80078d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b2:	f7fa fc75 	bl	80021a0 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d803      	bhi.n	80078ca <HAL_SPI_Transmit+0x204>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d102      	bne.n	80078d0 <HAL_SPI_Transmit+0x20a>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078d4:	e026      	b.n	8007924 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1cd      	bne.n	800787c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f9ff 	bl	8007ce8 <SPI_EndRxTxTransaction>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078fe:	2300      	movs	r3, #0
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	77fb      	strb	r3, [r7, #31]
 8007920:	e000      	b.n	8007924 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007934:	7ffb      	ldrb	r3, [r7, #31]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_SPI_Transmit_DMA+0x20>
 800795c:	2302      	movs	r3, #2
 800795e:	e09b      	b.n	8007a98 <HAL_SPI_Transmit_DMA+0x158>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	d002      	beq.n	800797a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007974:	2302      	movs	r3, #2
 8007976:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007978:	e089      	b.n	8007a8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_SPI_Transmit_DMA+0x46>
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
    goto error;
 800798a:	e080      	b.n	8007a8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2203      	movs	r2, #3
 8007990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d2:	d10f      	bne.n	80079f4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <HAL_SPI_Transmit_DMA+0x160>)
 80079fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a00:	4a28      	ldr	r2, [pc, #160]	; (8007aa4 <HAL_SPI_Transmit_DMA+0x164>)
 8007a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a08:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <HAL_SPI_Transmit_DMA+0x168>)
 8007a0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	2200      	movs	r2, #0
 8007a12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a2c:	f7fa fda8 	bl	8002580 <HAL_DMA_Start_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00c      	beq.n	8007a50 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	f043 0210 	orr.w	r2, r3, #16
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007a4e:	e01e      	b.n	8007a8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d007      	beq.n	8007a6e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0220 	orr.w	r2, r2, #32
 8007a7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0202 	orr.w	r2, r2, #2
 8007a8c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	08007b7d 	.word	0x08007b7d
 8007aa4:	08007ad5 	.word	0x08007ad5
 8007aa8:	08007b99 	.word	0x08007b99

08007aac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae2:	f7fa fb5d 	bl	80021a0 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af6:	d03b      	beq.n	8007b70 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0220 	bic.w	r2, r2, #32
 8007b06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0202 	bic.w	r2, r2, #2
 8007b16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	2164      	movs	r1, #100	; 0x64
 8007b1c:	6978      	ldr	r0, [r7, #20]
 8007b1e:	f000 f8e3 	bl	8007ce8 <SPI_EndRxTxTransaction>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2c:	f043 0220 	orr.w	r2, r3, #32
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007b68:	6978      	ldr	r0, [r7, #20]
 8007b6a:	f7ff ffa9 	bl	8007ac0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007b6e:	e002      	b.n	8007b76 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007b70:	6978      	ldr	r0, [r7, #20]
 8007b72:	f7f8 fdbd 	bl	80006f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff ff8e 	bl	8007aac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0203 	bic.w	r2, r2, #3
 8007bb4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	f043 0210 	orr.w	r2, r3, #16
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff ff78 	bl	8007ac0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007be8:	f7fa fada 	bl	80021a0 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bf8:	f7fa fad2 	bl	80021a0 <HAL_GetTick>
 8007bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bfe:	4b39      	ldr	r3, [pc, #228]	; (8007ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	015b      	lsls	r3, r3, #5
 8007c04:	0d1b      	lsrs	r3, r3, #20
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c0e:	e054      	b.n	8007cba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d050      	beq.n	8007cba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c18:	f7fa fac2 	bl	80021a0 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d902      	bls.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d13d      	bne.n	8007caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c46:	d111      	bne.n	8007c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c50:	d004      	beq.n	8007c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5a:	d107      	bne.n	8007c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c74:	d10f      	bne.n	8007c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e017      	b.n	8007cda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	bf0c      	ite	eq
 8007cca:	2301      	moveq	r3, #1
 8007ccc:	2300      	movne	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d19b      	bne.n	8007c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3720      	adds	r7, #32
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000001c 	.word	0x2000001c

08007ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cf4:	4b1b      	ldr	r3, [pc, #108]	; (8007d64 <SPI_EndRxTxTransaction+0x7c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <SPI_EndRxTxTransaction+0x80>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	0d5b      	lsrs	r3, r3, #21
 8007d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d12:	d112      	bne.n	8007d3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2180      	movs	r1, #128	; 0x80
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ff5a 	bl	8007bd8 <SPI_WaitFlagStateUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d016      	beq.n	8007d58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e00f      	b.n	8007d5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d50:	2b80      	cmp	r3, #128	; 0x80
 8007d52:	d0f2      	beq.n	8007d3a <SPI_EndRxTxTransaction+0x52>
 8007d54:	e000      	b.n	8007d58 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d56:	bf00      	nop
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	2000001c 	.word	0x2000001c
 8007d68:	165e9f81 	.word	0x165e9f81

08007d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e041      	b.n	8007e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fa f858 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f000 fac4 	bl	8008338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d001      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e04e      	b.n	8007ec2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0201 	orr.w	r2, r2, #1
 8007e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a23      	ldr	r2, [pc, #140]	; (8007ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d022      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4e:	d01d      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1f      	ldr	r2, [pc, #124]	; (8007ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d018      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1c      	ldr	r2, [pc, #112]	; (8007edc <HAL_TIM_Base_Start_IT+0xd0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00e      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d009      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x80>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a18      	ldr	r2, [pc, #96]	; (8007ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d111      	bne.n	8007eb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b06      	cmp	r3, #6
 8007e9c:	d010      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0201 	orr.w	r2, r2, #1
 8007eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eae:	e007      	b.n	8007ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
 8007ee0:	40010400 	.word	0x40010400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40001800 	.word	0x40001800

08007eec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a1a      	ldr	r2, [r3, #32]
 8007f0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <HAL_TIM_Base_Stop_IT+0x48>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	f240 4344 	movw	r3, #1092	; 0x444
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_Base_Stop_IT+0x48>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0201 	bic.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d122      	bne.n	8007fa6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d11b      	bne.n	8007fa6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f06f 0202 	mvn.w	r2, #2
 8007f76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f003 0303 	and.w	r3, r3, #3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f9b5 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8007f92:	e005      	b.n	8007fa0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f9a7 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9b8 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d122      	bne.n	8007ffa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d11b      	bne.n	8007ffa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f06f 0204 	mvn.w	r2, #4
 8007fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f98b 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8007fe6:	e005      	b.n	8007ff4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f97d 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f98e 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b08      	cmp	r3, #8
 8008006:	d122      	bne.n	800804e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b08      	cmp	r3, #8
 8008014:	d11b      	bne.n	800804e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f06f 0208 	mvn.w	r2, #8
 800801e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2204      	movs	r2, #4
 8008024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f961 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 800803a:	e005      	b.n	8008048 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f953 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f964 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b10      	cmp	r3, #16
 800805a:	d122      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b10      	cmp	r3, #16
 8008068:	d11b      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f06f 0210 	mvn.w	r2, #16
 8008072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2208      	movs	r2, #8
 8008078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f937 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 800808e:	e005      	b.n	800809c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f929 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f93a 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10e      	bne.n	80080ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f06f 0201 	mvn.w	r2, #1
 80080c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7f9 fd47 	bl	8001b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d10e      	bne.n	80080fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e6:	2b80      	cmp	r3, #128	; 0x80
 80080e8:	d107      	bne.n	80080fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fadf 	bl	80086b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	d10e      	bne.n	8008126 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	d107      	bne.n	8008126 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800811e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f8ff 	bl	8008324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b20      	cmp	r3, #32
 8008132:	d10e      	bne.n	8008152 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b20      	cmp	r3, #32
 8008140:	d107      	bne.n	8008152 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f06f 0220 	mvn.w	r2, #32
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 faa9 	bl	80086a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_TIM_ConfigClockSource+0x1c>
 8008172:	2302      	movs	r3, #2
 8008174:	e0b4      	b.n	80082e0 <HAL_TIM_ConfigClockSource+0x186>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008194:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800819c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ae:	d03e      	beq.n	800822e <HAL_TIM_ConfigClockSource+0xd4>
 80081b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b4:	f200 8087 	bhi.w	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081bc:	f000 8086 	beq.w	80082cc <HAL_TIM_ConfigClockSource+0x172>
 80081c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c4:	d87f      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081c6:	2b70      	cmp	r3, #112	; 0x70
 80081c8:	d01a      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0xa6>
 80081ca:	2b70      	cmp	r3, #112	; 0x70
 80081cc:	d87b      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081ce:	2b60      	cmp	r3, #96	; 0x60
 80081d0:	d050      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x11a>
 80081d2:	2b60      	cmp	r3, #96	; 0x60
 80081d4:	d877      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081d6:	2b50      	cmp	r3, #80	; 0x50
 80081d8:	d03c      	beq.n	8008254 <HAL_TIM_ConfigClockSource+0xfa>
 80081da:	2b50      	cmp	r3, #80	; 0x50
 80081dc:	d873      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d058      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x13a>
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d86f      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081e6:	2b30      	cmp	r3, #48	; 0x30
 80081e8:	d064      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0x15a>
 80081ea:	2b30      	cmp	r3, #48	; 0x30
 80081ec:	d86b      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d060      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0x15a>
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d867      	bhi.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d05c      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0x15a>
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d05a      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0x15a>
 80081fe:	e062      	b.n	80082c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6899      	ldr	r1, [r3, #8]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f000 f9ac 	bl	800856c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008222:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	609a      	str	r2, [r3, #8]
      break;
 800822c:	e04f      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6899      	ldr	r1, [r3, #8]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f000 f995 	bl	800856c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008250:	609a      	str	r2, [r3, #8]
      break;
 8008252:	e03c      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	461a      	mov	r2, r3
 8008262:	f000 f909 	bl	8008478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2150      	movs	r1, #80	; 0x50
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f962 	bl	8008536 <TIM_ITRx_SetConfig>
      break;
 8008272:	e02c      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	461a      	mov	r2, r3
 8008282:	f000 f928 	bl	80084d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2160      	movs	r1, #96	; 0x60
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f952 	bl	8008536 <TIM_ITRx_SetConfig>
      break;
 8008292:	e01c      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	6859      	ldr	r1, [r3, #4]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	461a      	mov	r2, r3
 80082a2:	f000 f8e9 	bl	8008478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2140      	movs	r1, #64	; 0x40
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f942 	bl	8008536 <TIM_ITRx_SetConfig>
      break;
 80082b2:	e00c      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 f939 	bl	8008536 <TIM_ITRx_SetConfig>
      break;
 80082c4:	e003      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ca:	e000      	b.n	80082ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a40      	ldr	r2, [pc, #256]	; (800844c <TIM_Base_SetConfig+0x114>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d00f      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a3d      	ldr	r2, [pc, #244]	; (8008450 <TIM_Base_SetConfig+0x118>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00b      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a3c      	ldr	r2, [pc, #240]	; (8008454 <TIM_Base_SetConfig+0x11c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d007      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3b      	ldr	r2, [pc, #236]	; (8008458 <TIM_Base_SetConfig+0x120>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a3a      	ldr	r2, [pc, #232]	; (800845c <TIM_Base_SetConfig+0x124>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d108      	bne.n	800838a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2f      	ldr	r2, [pc, #188]	; (800844c <TIM_Base_SetConfig+0x114>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d02b      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008398:	d027      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2c      	ldr	r2, [pc, #176]	; (8008450 <TIM_Base_SetConfig+0x118>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d023      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a2b      	ldr	r2, [pc, #172]	; (8008454 <TIM_Base_SetConfig+0x11c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01f      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a2a      	ldr	r2, [pc, #168]	; (8008458 <TIM_Base_SetConfig+0x120>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d01b      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a29      	ldr	r2, [pc, #164]	; (800845c <TIM_Base_SetConfig+0x124>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d017      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a28      	ldr	r2, [pc, #160]	; (8008460 <TIM_Base_SetConfig+0x128>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a27      	ldr	r2, [pc, #156]	; (8008464 <TIM_Base_SetConfig+0x12c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00f      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a26      	ldr	r2, [pc, #152]	; (8008468 <TIM_Base_SetConfig+0x130>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00b      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a25      	ldr	r2, [pc, #148]	; (800846c <TIM_Base_SetConfig+0x134>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d007      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a24      	ldr	r2, [pc, #144]	; (8008470 <TIM_Base_SetConfig+0x138>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d003      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a23      	ldr	r2, [pc, #140]	; (8008474 <TIM_Base_SetConfig+0x13c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d108      	bne.n	80083fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a0a      	ldr	r2, [pc, #40]	; (800844c <TIM_Base_SetConfig+0x114>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d003      	beq.n	8008430 <TIM_Base_SetConfig+0xf8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a0c      	ldr	r2, [pc, #48]	; (800845c <TIM_Base_SetConfig+0x124>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d103      	bne.n	8008438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	615a      	str	r2, [r3, #20]
}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40010400 	.word	0x40010400
 8008460:	40014000 	.word	0x40014000
 8008464:	40014400 	.word	0x40014400
 8008468:	40014800 	.word	0x40014800
 800846c:	40001800 	.word	0x40001800
 8008470:	40001c00 	.word	0x40001c00
 8008474:	40002000 	.word	0x40002000

08008478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	f023 0201 	bic.w	r2, r3, #1
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f023 030a 	bic.w	r3, r3, #10
 80084b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b087      	sub	sp, #28
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f023 0210 	bic.w	r2, r3, #16
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	031b      	lsls	r3, r3, #12
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008536:	b480      	push	{r7}
 8008538:	b085      	sub	sp, #20
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	f043 0307 	orr.w	r3, r3, #7
 8008558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	609a      	str	r2, [r3, #8]
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	021a      	lsls	r2, r3, #8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	431a      	orrs	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4313      	orrs	r3, r2
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	4313      	orrs	r3, r2
 8008598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	609a      	str	r2, [r3, #8]
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e05a      	b.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a21      	ldr	r2, [pc, #132]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d022      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008610:	d01d      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1d      	ldr	r2, [pc, #116]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d018      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a18      	ldr	r2, [pc, #96]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d10c      	bne.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	4313      	orrs	r3, r2
 800865e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40010000 	.word	0x40010000
 800868c:	40000400 	.word	0x40000400
 8008690:	40000800 	.word	0x40000800
 8008694:	40000c00 	.word	0x40000c00
 8008698:	40010400 	.word	0x40010400
 800869c:	40014000 	.word	0x40014000
 80086a0:	40001800 	.word	0x40001800

080086a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086cc:	b084      	sub	sp, #16
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	f107 001c 	add.w	r0, r7, #28
 80086da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d122      	bne.n	800872a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800870c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fbee 	bl	8009f00 <USB_CoreReset>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	e01a      	b.n	8008760 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fbe2 	bl	8009f00 <USB_CoreReset>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
 8008752:	e005      	b.n	8008760 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	2b01      	cmp	r3, #1
 8008764:	d10b      	bne.n	800877e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f043 0206 	orr.w	r2, r3, #6
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f043 0220 	orr.w	r2, r3, #32
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800878a:	b004      	add	sp, #16
 800878c:	4770      	bx	lr
	...

08008790 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d165      	bne.n	8008870 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4a41      	ldr	r2, [pc, #260]	; (80088ac <USB_SetTurnaroundTime+0x11c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d906      	bls.n	80087ba <USB_SetTurnaroundTime+0x2a>
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4a40      	ldr	r2, [pc, #256]	; (80088b0 <USB_SetTurnaroundTime+0x120>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d202      	bcs.n	80087ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80087b4:	230f      	movs	r3, #15
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e062      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <USB_SetTurnaroundTime+0x120>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d306      	bcc.n	80087d0 <USB_SetTurnaroundTime+0x40>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4a3b      	ldr	r2, [pc, #236]	; (80088b4 <USB_SetTurnaroundTime+0x124>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d202      	bcs.n	80087d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80087ca:	230e      	movs	r3, #14
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e057      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4a38      	ldr	r2, [pc, #224]	; (80088b4 <USB_SetTurnaroundTime+0x124>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d306      	bcc.n	80087e6 <USB_SetTurnaroundTime+0x56>
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4a37      	ldr	r2, [pc, #220]	; (80088b8 <USB_SetTurnaroundTime+0x128>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d202      	bcs.n	80087e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80087e0:	230d      	movs	r3, #13
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	e04c      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4a33      	ldr	r2, [pc, #204]	; (80088b8 <USB_SetTurnaroundTime+0x128>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d306      	bcc.n	80087fc <USB_SetTurnaroundTime+0x6c>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4a32      	ldr	r2, [pc, #200]	; (80088bc <USB_SetTurnaroundTime+0x12c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d802      	bhi.n	80087fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80087f6:	230c      	movs	r3, #12
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e041      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4a2f      	ldr	r2, [pc, #188]	; (80088bc <USB_SetTurnaroundTime+0x12c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d906      	bls.n	8008812 <USB_SetTurnaroundTime+0x82>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	4a2e      	ldr	r2, [pc, #184]	; (80088c0 <USB_SetTurnaroundTime+0x130>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d802      	bhi.n	8008812 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800880c:	230b      	movs	r3, #11
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e036      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <USB_SetTurnaroundTime+0x130>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d906      	bls.n	8008828 <USB_SetTurnaroundTime+0x98>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4a29      	ldr	r2, [pc, #164]	; (80088c4 <USB_SetTurnaroundTime+0x134>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d802      	bhi.n	8008828 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008822:	230a      	movs	r3, #10
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	e02b      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4a26      	ldr	r2, [pc, #152]	; (80088c4 <USB_SetTurnaroundTime+0x134>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d906      	bls.n	800883e <USB_SetTurnaroundTime+0xae>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4a25      	ldr	r2, [pc, #148]	; (80088c8 <USB_SetTurnaroundTime+0x138>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d202      	bcs.n	800883e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008838:	2309      	movs	r3, #9
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e020      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4a21      	ldr	r2, [pc, #132]	; (80088c8 <USB_SetTurnaroundTime+0x138>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d306      	bcc.n	8008854 <USB_SetTurnaroundTime+0xc4>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4a20      	ldr	r2, [pc, #128]	; (80088cc <USB_SetTurnaroundTime+0x13c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d802      	bhi.n	8008854 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800884e:	2308      	movs	r3, #8
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	e015      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4a1d      	ldr	r2, [pc, #116]	; (80088cc <USB_SetTurnaroundTime+0x13c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d906      	bls.n	800886a <USB_SetTurnaroundTime+0xda>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <USB_SetTurnaroundTime+0x140>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d202      	bcs.n	800886a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008864:	2307      	movs	r3, #7
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e00a      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800886a:	2306      	movs	r3, #6
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e007      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008876:	2309      	movs	r3, #9
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e001      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800887c:	2309      	movs	r3, #9
 800887e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	029b      	lsls	r3, r3, #10
 8008894:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008898:	431a      	orrs	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	00d8acbf 	.word	0x00d8acbf
 80088b0:	00e4e1c0 	.word	0x00e4e1c0
 80088b4:	00f42400 	.word	0x00f42400
 80088b8:	01067380 	.word	0x01067380
 80088bc:	011a499f 	.word	0x011a499f
 80088c0:	01312cff 	.word	0x01312cff
 80088c4:	014ca43f 	.word	0x014ca43f
 80088c8:	016e3600 	.word	0x016e3600
 80088cc:	01a6ab1f 	.word	0x01a6ab1f
 80088d0:	01e84800 	.word	0x01e84800

080088d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f043 0201 	orr.w	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d115      	bne.n	8008966 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008946:	2001      	movs	r0, #1
 8008948:	f7f9 fc36 	bl	80021b8 <HAL_Delay>
      ms++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 fa45 	bl	8009de2 <USB_GetMode>
 8008958:	4603      	mov	r3, r0
 800895a:	2b01      	cmp	r3, #1
 800895c:	d01e      	beq.n	800899c <USB_SetCurrentMode+0x84>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b31      	cmp	r3, #49	; 0x31
 8008962:	d9f0      	bls.n	8008946 <USB_SetCurrentMode+0x2e>
 8008964:	e01a      	b.n	800899c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d115      	bne.n	8008998 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008978:	2001      	movs	r0, #1
 800897a:	f7f9 fc1d 	bl	80021b8 <HAL_Delay>
      ms++;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fa2c 	bl	8009de2 <USB_GetMode>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <USB_SetCurrentMode+0x84>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b31      	cmp	r3, #49	; 0x31
 8008994:	d9f0      	bls.n	8008978 <USB_SetCurrentMode+0x60>
 8008996:	e001      	b.n	800899c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e005      	b.n	80089a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b32      	cmp	r3, #50	; 0x32
 80089a0:	d101      	bne.n	80089a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b0:	b084      	sub	sp, #16
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80089be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	e009      	b.n	80089e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	3340      	adds	r3, #64	; 0x40
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	2200      	movs	r2, #0
 80089dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	3301      	adds	r3, #1
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b0e      	cmp	r3, #14
 80089e8:	d9f2      	bls.n	80089d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11c      	bne.n	8008a2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fe:	f043 0302 	orr.w	r3, r3, #2
 8008a02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
 8008a28:	e00b      	b.n	8008a42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a54:	4619      	mov	r1, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	680b      	ldr	r3, [r1, #0]
 8008a60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d10c      	bne.n	8008a82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f965 	bl	8008d40 <USB_SetDevSpeed>
 8008a76:	e008      	b.n	8008a8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a78:	2101      	movs	r1, #1
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f960 	bl	8008d40 <USB_SetDevSpeed>
 8008a80:	e003      	b.n	8008a8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a82:	2103      	movs	r1, #3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f95b 	bl	8008d40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a8a:	2110      	movs	r1, #16
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f8f3 	bl	8008c78 <USB_FlushTxFifo>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f91f 	bl	8008ce0 <USB_FlushRxFifo>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aca:	461a      	mov	r2, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	e043      	b.n	8008b5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aec:	d118      	bne.n	8008b20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	461a      	mov	r2, r3
 8008b02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	e013      	b.n	8008b32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b16:	461a      	mov	r2, r3
 8008b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	e008      	b.n	8008b32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3e:	461a      	mov	r2, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b50:	461a      	mov	r2, r3
 8008b52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3b7      	bcc.n	8008ad6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]
 8008b6a:	e043      	b.n	8008bf4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b82:	d118      	bne.n	8008bb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	e013      	b.n	8008bc8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	461a      	mov	r2, r3
 8008bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e008      	b.n	8008bc8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	461a      	mov	r2, r3
 8008be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d3b7      	bcc.n	8008b6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f043 0210 	orr.w	r2, r3, #16
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <USB_DevInit+0x2c4>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f043 0208 	orr.w	r2, r3, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d107      	bne.n	8008c64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c5c:	f043 0304 	orr.w	r3, r3, #4
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c70:	b004      	add	sp, #16
 8008c72:	4770      	bx	lr
 8008c74:	803c3800 	.word	0x803c3800

08008c78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <USB_FlushTxFifo+0x64>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d901      	bls.n	8008c98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e01b      	b.n	8008cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	daf2      	bge.n	8008c86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	019b      	lsls	r3, r3, #6
 8008ca8:	f043 0220 	orr.w	r2, r3, #32
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <USB_FlushTxFifo+0x64>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e006      	b.n	8008cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d0f0      	beq.n	8008cb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	00030d40 	.word	0x00030d40

08008ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4a11      	ldr	r2, [pc, #68]	; (8008d3c <USB_FlushRxFifo+0x5c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d901      	bls.n	8008cfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e018      	b.n	8008d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	daf2      	bge.n	8008cec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2210      	movs	r2, #16
 8008d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a08      	ldr	r2, [pc, #32]	; (8008d3c <USB_FlushRxFifo+0x5c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d901      	bls.n	8008d22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e006      	b.n	8008d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f003 0310 	and.w	r3, r3, #16
 8008d2a:	2b10      	cmp	r3, #16
 8008d2c:	d0f0      	beq.n	8008d10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	00030d40 	.word	0x00030d40

08008d40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	68f9      	ldr	r1, [r7, #12]
 8008d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d60:	4313      	orrs	r3, r2
 8008d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b087      	sub	sp, #28
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f003 0306 	and.w	r3, r3, #6
 8008d8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
 8008d96:	e00a      	b.n	8008dae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d002      	beq.n	8008da4 <USB_GetDevSpeed+0x32>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b06      	cmp	r3, #6
 8008da2:	d102      	bne.n	8008daa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008da4:	2302      	movs	r3, #2
 8008da6:	75fb      	strb	r3, [r7, #23]
 8008da8:	e001      	b.n	8008dae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008daa:	230f      	movs	r3, #15
 8008dac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d13a      	bne.n	8008e4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	69da      	ldr	r2, [r3, #28]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	2101      	movs	r1, #1
 8008dea:	fa01 f303 	lsl.w	r3, r1, r3
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df6:	4313      	orrs	r3, r2
 8008df8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d155      	bne.n	8008ebc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	791b      	ldrb	r3, [r3, #4]
 8008e2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	059b      	lsls	r3, r3, #22
 8008e32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e34:	4313      	orrs	r3, r2
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	e036      	b.n	8008ebc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e54:	69da      	ldr	r2, [r3, #28]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	2101      	movs	r1, #1
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d11a      	bne.n	8008ebc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	791b      	ldrb	r3, [r3, #4]
 8008ea0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	0151      	lsls	r1, r2, #5
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	440a      	add	r2, r1
 8008eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d161      	bne.n	8008fac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008efe:	d11f      	bne.n	8008f40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	f003 030f 	and.w	r3, r3, #15
 8008f50:	2101      	movs	r1, #1
 8008f52:	fa01 f303 	lsl.w	r3, r1, r3
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	68f9      	ldr	r1, [r7, #12]
 8008f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f60:	4013      	ands	r3, r2
 8008f62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	2101      	movs	r1, #1
 8008f76:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	68f9      	ldr	r1, [r7, #12]
 8008f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f84:	4013      	ands	r3, r2
 8008f86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	0159      	lsls	r1, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	440b      	add	r3, r1
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4b35      	ldr	r3, [pc, #212]	; (800907c <USB_DeactivateEndpoint+0x1b0>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	600b      	str	r3, [r1, #0]
 8008faa:	e060      	b.n	800906e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc2:	d11f      	bne.n	8009004 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	0151      	lsls	r1, r2, #5
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	440a      	add	r2, r1
 8008fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fe2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	2101      	movs	r1, #1
 8009016:	fa01 f303 	lsl.w	r3, r1, r3
 800901a:	041b      	lsls	r3, r3, #16
 800901c:	43db      	mvns	r3, r3
 800901e:	68f9      	ldr	r1, [r7, #12]
 8009020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009024:	4013      	ands	r3, r2
 8009026:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902e:	69da      	ldr	r2, [r3, #28]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	2101      	movs	r1, #1
 800903a:	fa01 f303 	lsl.w	r3, r1, r3
 800903e:	041b      	lsls	r3, r3, #16
 8009040:	43db      	mvns	r3, r3
 8009042:	68f9      	ldr	r1, [r7, #12]
 8009044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009048:	4013      	ands	r3, r2
 800904a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	0159      	lsls	r1, r3, #5
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	440b      	add	r3, r1
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	4619      	mov	r1, r3
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <USB_DeactivateEndpoint+0x1b4>)
 800906a:	4013      	ands	r3, r2
 800906c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	ec337800 	.word	0xec337800
 8009080:	eff37800 	.word	0xeff37800

08009084 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08a      	sub	sp, #40	; 0x28
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	f040 815c 	bne.w	800935e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d132      	bne.n	8009114 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910c:	0cdb      	lsrs	r3, r3, #19
 800910e:	04db      	lsls	r3, r3, #19
 8009110:	6113      	str	r3, [r2, #16]
 8009112:	e074      	b.n	80091fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912e:	0cdb      	lsrs	r3, r3, #19
 8009130:	04db      	lsls	r3, r3, #19
 8009132:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	0151      	lsls	r1, r2, #5
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	440a      	add	r2, r1
 800914a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009152:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6999      	ldr	r1, [r3, #24]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	440b      	add	r3, r1
 8009170:	1e59      	subs	r1, r3, #1
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	fbb1 f3f3 	udiv	r3, r1, r3
 800917a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800917c:	4b9d      	ldr	r3, [pc, #628]	; (80093f4 <USB_EPStartXfer+0x370>)
 800917e:	400b      	ands	r3, r1
 8009180:	69b9      	ldr	r1, [r7, #24]
 8009182:	0148      	lsls	r0, r1, #5
 8009184:	69f9      	ldr	r1, [r7, #28]
 8009186:	4401      	add	r1, r0
 8009188:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800918c:	4313      	orrs	r3, r2
 800918e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091a6:	69b9      	ldr	r1, [r7, #24]
 80091a8:	0148      	lsls	r0, r1, #5
 80091aa:	69f9      	ldr	r1, [r7, #28]
 80091ac:	4401      	add	r1, r0
 80091ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091b2:	4313      	orrs	r3, r2
 80091b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	791b      	ldrb	r3, [r3, #4]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d11f      	bne.n	80091fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	69fa      	ldr	r2, [r7, #28]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80091dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	0151      	lsls	r1, r2, #5
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	440a      	add	r2, r1
 80091f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d14b      	bne.n	800929c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d009      	beq.n	8009220 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	461a      	mov	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	791b      	ldrb	r3, [r3, #4]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d128      	bne.n	800927a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009234:	2b00      	cmp	r3, #0
 8009236:	d110      	bne.n	800925a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	e00f      	b.n	800927a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009278:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	440a      	add	r2, r1
 8009290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	e133      	b.n	8009504 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	791b      	ldrb	r3, [r3, #4]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d015      	beq.n	80092f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 811b 	beq.w	8009504 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	2101      	movs	r1, #1
 80092e0:	fa01 f303 	lsl.w	r3, r1, r3
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ea:	4313      	orrs	r3, r2
 80092ec:	634b      	str	r3, [r1, #52]	; 0x34
 80092ee:	e109      	b.n	8009504 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d110      	bne.n	8009322 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	69fa      	ldr	r2, [r7, #28]
 8009314:	440a      	add	r2, r1
 8009316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	e00f      	b.n	8009342 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009340:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6919      	ldr	r1, [r3, #16]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	781a      	ldrb	r2, [r3, #0]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	b298      	uxth	r0, r3
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	4603      	mov	r3, r0
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 fade 	bl	8009918 <USB_WritePacket>
 800935c:	e0d2      	b.n	8009504 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	0151      	lsls	r1, r2, #5
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	440a      	add	r2, r1
 8009374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009378:	0cdb      	lsrs	r3, r3, #19
 800937a:	04db      	lsls	r3, r3, #19
 800937c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	4413      	add	r3, r2
 8009386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	0151      	lsls	r1, r2, #5
 8009390:	69fa      	ldr	r2, [r7, #28]
 8009392:	440a      	add	r2, r1
 8009394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009398:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800939c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d126      	bne.n	80093f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	691a      	ldr	r2, [r3, #16]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c0:	69b9      	ldr	r1, [r7, #24]
 80093c2:	0148      	lsls	r0, r1, #5
 80093c4:	69f9      	ldr	r1, [r7, #28]
 80093c6:	4401      	add	r1, r0
 80093c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093cc:	4313      	orrs	r3, r2
 80093ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ee:	6113      	str	r3, [r2, #16]
 80093f0:	e03a      	b.n	8009468 <USB_EPStartXfer+0x3e4>
 80093f2:	bf00      	nop
 80093f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4413      	add	r3, r2
 8009402:	1e5a      	subs	r2, r3, #1
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	fbb2 f3f3 	udiv	r3, r2, r3
 800940c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	8afa      	ldrh	r2, [r7, #22]
 8009414:	fb03 f202 	mul.w	r2, r3, r2
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	691a      	ldr	r2, [r3, #16]
 800942a:	8afb      	ldrh	r3, [r7, #22]
 800942c:	04d9      	lsls	r1, r3, #19
 800942e:	4b38      	ldr	r3, [pc, #224]	; (8009510 <USB_EPStartXfer+0x48c>)
 8009430:	400b      	ands	r3, r1
 8009432:	69b9      	ldr	r1, [r7, #24]
 8009434:	0148      	lsls	r0, r1, #5
 8009436:	69f9      	ldr	r1, [r7, #28]
 8009438:	4401      	add	r1, r0
 800943a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800943e:	4313      	orrs	r3, r2
 8009440:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	0148      	lsls	r0, r1, #5
 800945c:	69f9      	ldr	r1, [r7, #28]
 800945e:	4401      	add	r1, r0
 8009460:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009464:	4313      	orrs	r3, r2
 8009466:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009468:	79fb      	ldrb	r3, [r7, #7]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d10d      	bne.n	800948a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d009      	beq.n	800948a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6919      	ldr	r1, [r3, #16]
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009486:	460a      	mov	r2, r1
 8009488:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	791b      	ldrb	r3, [r3, #4]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d128      	bne.n	80094e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d110      	bne.n	80094c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	e00f      	b.n	80094e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	0151      	lsls	r1, r2, #5
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	440a      	add	r2, r1
 80094fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3720      	adds	r7, #32
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	1ff80000 	.word	0x1ff80000

08009514 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	2b01      	cmp	r3, #1
 8009532:	f040 80ce 	bne.w	80096d2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d132      	bne.n	80095a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800955c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	0151      	lsls	r1, r2, #5
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	440a      	add	r2, r1
 8009598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959c:	0cdb      	lsrs	r3, r3, #19
 800959e:	04db      	lsls	r3, r3, #19
 80095a0:	6113      	str	r3, [r2, #16]
 80095a2:	e04e      	b.n	8009642 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	0151      	lsls	r1, r2, #5
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	440a      	add	r2, r1
 80095ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095be:	0cdb      	lsrs	r3, r3, #19
 80095c0:	04db      	lsls	r3, r3, #19
 80095c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d903      	bls.n	80095fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	0151      	lsls	r1, r2, #5
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	440a      	add	r2, r1
 8009612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800961a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009632:	6939      	ldr	r1, [r7, #16]
 8009634:	0148      	lsls	r0, r1, #5
 8009636:	6979      	ldr	r1, [r7, #20]
 8009638:	4401      	add	r1, r0
 800963a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800963e:	4313      	orrs	r3, r2
 8009640:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d11e      	bne.n	8009686 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	461a      	mov	r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	0151      	lsls	r1, r2, #5
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	440a      	add	r2, r1
 800967a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800967e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	e097      	b.n	80097b6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8083 	beq.w	80097b6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 030f 	and.w	r3, r3, #15
 80096c0:	2101      	movs	r1, #1
 80096c2:	fa01 f303 	lsl.w	r3, r1, r3
 80096c6:	6979      	ldr	r1, [r7, #20]
 80096c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096cc:	4313      	orrs	r3, r2
 80096ce:	634b      	str	r3, [r1, #52]	; 0x34
 80096d0:	e071      	b.n	80097b6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ec:	0cdb      	lsrs	r3, r3, #19
 80096ee:	04db      	lsls	r3, r3, #19
 80096f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800970c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009714:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800974c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009764:	6939      	ldr	r1, [r7, #16]
 8009766:	0148      	lsls	r0, r1, #5
 8009768:	6979      	ldr	r1, [r7, #20]
 800976a:	4401      	add	r1, r0
 800976c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009770:	4313      	orrs	r3, r2
 8009772:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d10d      	bne.n	8009796 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d009      	beq.n	8009796 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6919      	ldr	r1, [r3, #16]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009792:	460a      	mov	r2, r1
 8009794:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	0151      	lsls	r1, r2, #5
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	440a      	add	r2, r1
 80097ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	371c      	adds	r7, #28
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d14a      	bne.n	8009878 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097fa:	f040 8086 	bne.w	800990a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	7812      	ldrb	r2, [r2, #0]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800981c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009820:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	7812      	ldrb	r2, [r2, #0]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009844:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009852:	4293      	cmp	r3, r2
 8009854:	d902      	bls.n	800985c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
          break;
 800985a:	e056      	b.n	800990a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009874:	d0e7      	beq.n	8009846 <USB_EPStopXfer+0x82>
 8009876:	e048      	b.n	800990a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	4413      	add	r3, r2
 8009882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800988c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009890:	d13b      	bne.n	800990a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	7812      	ldrb	r2, [r2, #0]
 80098a6:	0151      	lsls	r1, r2, #5
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	440a      	add	r2, r1
 80098ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	7812      	ldrb	r2, [r2, #0]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d902      	bls.n	80098f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	75fb      	strb	r3, [r7, #23]
          break;
 80098ee:	e00c      	b.n	800990a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009908:	d0e7      	beq.n	80098da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800990a:	7dfb      	ldrb	r3, [r7, #23]
}
 800990c:	4618      	mov	r0, r3
 800990e:	371c      	adds	r7, #28
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009918:	b480      	push	{r7}
 800991a:	b089      	sub	sp, #36	; 0x24
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	4611      	mov	r1, r2
 8009924:	461a      	mov	r2, r3
 8009926:	460b      	mov	r3, r1
 8009928:	71fb      	strb	r3, [r7, #7]
 800992a:	4613      	mov	r3, r2
 800992c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	d123      	bne.n	8009986 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800993e:	88bb      	ldrh	r3, [r7, #4]
 8009940:	3303      	adds	r3, #3
 8009942:	089b      	lsrs	r3, r3, #2
 8009944:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
 800994a:	e018      	b.n	800997e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	031a      	lsls	r2, r3, #12
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	4413      	add	r3, r2
 8009954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009958:	461a      	mov	r2, r3
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	3301      	adds	r3, #1
 8009964:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	3301      	adds	r3, #1
 800996a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	3301      	adds	r3, #1
 8009970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	3301      	adds	r3, #1
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	429a      	cmp	r2, r3
 8009984:	d3e2      	bcc.n	800994c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3724      	adds	r7, #36	; 0x24
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009994:	b480      	push	{r7}
 8009996:	b08b      	sub	sp, #44	; 0x2c
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	089b      	lsrs	r3, r3, #2
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	f003 0303 	and.w	r3, r3, #3
 80099b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099ba:	2300      	movs	r3, #0
 80099bc:	623b      	str	r3, [r7, #32]
 80099be:	e014      	b.n	80099ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	3301      	adds	r3, #1
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	3301      	adds	r3, #1
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	3301      	adds	r3, #1
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	3301      	adds	r3, #1
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	3301      	adds	r3, #1
 80099e8:	623b      	str	r3, [r7, #32]
 80099ea:	6a3a      	ldr	r2, [r7, #32]
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d3e6      	bcc.n	80099c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099f2:	8bfb      	ldrh	r3, [r7, #30]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01e      	beq.n	8009a36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a02:	461a      	mov	r2, r3
 8009a04:	f107 0310 	add.w	r3, r7, #16
 8009a08:	6812      	ldr	r2, [r2, #0]
 8009a0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	fa22 f303 	lsr.w	r3, r2, r3
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	701a      	strb	r2, [r3, #0]
      i++;
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	3301      	adds	r3, #1
 8009a22:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	3301      	adds	r3, #1
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a2a:	8bfb      	ldrh	r3, [r7, #30]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a30:	8bfb      	ldrh	r3, [r7, #30]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1ea      	bne.n	8009a0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	372c      	adds	r7, #44	; 0x2c
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	785b      	ldrb	r3, [r3, #1]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d12c      	bne.n	8009aba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	db12      	blt.n	8009a98 <USB_EPSetStall+0x54>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00f      	beq.n	8009a98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	0151      	lsls	r1, r2, #5
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	440a      	add	r2, r1
 8009aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	e02b      	b.n	8009b12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	db12      	blt.n	8009af2 <USB_EPSetStall+0xae>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00f      	beq.n	8009af2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009af0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	0151      	lsls	r1, r2, #5
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	440a      	add	r2, r1
 8009b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d128      	bne.n	8009b8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	791b      	ldrb	r3, [r3, #4]
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d003      	beq.n	8009b6c <USB_EPClearStall+0x4c>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	791b      	ldrb	r3, [r3, #4]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d138      	bne.n	8009bde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	e027      	b.n	8009bde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	791b      	ldrb	r3, [r3, #4]
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d003      	beq.n	8009bbe <USB_EPClearStall+0x9e>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d10f      	bne.n	8009bde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	0151      	lsls	r1, r2, #5
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c20:	68f9      	ldr	r1, [r7, #12]
 8009c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c26:	4313      	orrs	r3, r2
 8009c28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c52:	f023 0303 	bic.w	r3, r3, #3
 8009c56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c66:	f023 0302 	bic.w	r3, r3, #2
 8009c6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b085      	sub	sp, #20
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ca8:	f043 0302 	orr.w	r3, r3, #2
 8009cac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	4013      	ands	r3, r2
 8009d04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	0c1b      	lsrs	r3, r3, #16
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	4013      	ands	r3, r2
 8009d38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	b29b      	uxth	r3, r3
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	460b      	mov	r3, r1
 8009d54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	4013      	ands	r3, r2
 8009d76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d78:	68bb      	ldr	r3, [r7, #8]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b087      	sub	sp, #28
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	f003 030f 	and.w	r3, r3, #15
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	fa22 f303 	lsr.w	r3, r2, r3
 8009db6:	01db      	lsls	r3, r3, #7
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	f003 0301 	and.w	r3, r3, #1
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b085      	sub	sp, #20
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e1c:	f023 0307 	bic.w	r3, r3, #7
 8009e20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	333c      	adds	r3, #60	; 0x3c
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4a26      	ldr	r2, [pc, #152]	; (8009efc <USB_EP0_OutStart+0xb8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d90a      	bls.n	8009e7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e78:	d101      	bne.n	8009e7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e037      	b.n	8009eee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e84:	461a      	mov	r2, r3
 8009e86:	2300      	movs	r3, #0
 8009e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eac:	f043 0318 	orr.w	r3, r3, #24
 8009eb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ec4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ec6:	7afb      	ldrb	r3, [r7, #11]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d10f      	bne.n	8009eec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	4f54300a 	.word	0x4f54300a

08009f00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <USB_CoreReset+0x64>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d901      	bls.n	8009f1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e01b      	b.n	8009f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	daf2      	bge.n	8009f0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f043 0201 	orr.w	r2, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4a09      	ldr	r2, [pc, #36]	; (8009f64 <USB_CoreReset+0x64>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d901      	bls.n	8009f48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e006      	b.n	8009f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d0f0      	beq.n	8009f36 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	00030d40 	.word	0x00030d40

08009f68 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009f74:	2010      	movs	r0, #16
 8009f76:	f002 f929 	bl	800c1cc <USBD_static_malloc>
 8009f7a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d109      	bne.n	8009f96 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	32b0      	adds	r2, #176	; 0xb0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f92:	2302      	movs	r3, #2
 8009f94:	e048      	b.n	800a028 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	32b0      	adds	r2, #176	; 0xb0
 8009fa0:	68f9      	ldr	r1, [r7, #12]
 8009fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	32b0      	adds	r2, #176	; 0xb0
 8009fb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	7c1b      	ldrb	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10d      	bne.n	8009fde <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009fc2:	4b1b      	ldr	r3, [pc, #108]	; (800a030 <USBD_HID_Init+0xc8>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f003 020f 	and.w	r2, r3, #15
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	3326      	adds	r3, #38	; 0x26
 8009fd8:	2207      	movs	r2, #7
 8009fda:	801a      	strh	r2, [r3, #0]
 8009fdc:	e00c      	b.n	8009ff8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009fde:	4b14      	ldr	r3, [pc, #80]	; (800a030 <USBD_HID_Init+0xc8>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 020f 	and.w	r2, r3, #15
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	440b      	add	r3, r1
 8009ff2:	3326      	adds	r3, #38	; 0x26
 8009ff4:	220a      	movs	r2, #10
 8009ff6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009ff8:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <USBD_HID_Init+0xc8>)
 8009ffa:	7819      	ldrb	r1, [r3, #0]
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	2203      	movs	r2, #3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 ffd2 	bl	800bfaa <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800a006:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <USBD_HID_Init+0xc8>)
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	f003 020f 	and.w	r2, r3, #15
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	3324      	adds	r3, #36	; 0x24
 800a01c:	2201      	movs	r2, #1
 800a01e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	200000e6 	.word	0x200000e6

0800a034 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800a040:	4b1f      	ldr	r3, [pc, #124]	; (800a0c0 <USBD_HID_DeInit+0x8c>)
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 ffd5 	bl	800bff6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <USBD_HID_DeInit+0x8c>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	f003 020f 	and.w	r2, r3, #15
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	3324      	adds	r3, #36	; 0x24
 800a062:	2200      	movs	r2, #0
 800a064:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a066:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <USBD_HID_DeInit+0x8c>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f003 020f 	and.w	r2, r3, #15
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	3326      	adds	r3, #38	; 0x26
 800a07c:	2200      	movs	r2, #0
 800a07e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	32b0      	adds	r2, #176	; 0xb0
 800a08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d011      	beq.n	800a0b6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	32b0      	adds	r2, #176	; 0xb0
 800a09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f002 f8a1 	bl	800c1e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	32b0      	adds	r2, #176	; 0xb0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	200000e6 	.word	0x200000e6

0800a0c4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	32b0      	adds	r2, #176	; 0xb0
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e0e8      	b.n	800a2c2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d046      	beq.n	800a18a <USBD_HID_Setup+0xc6>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	f040 80d8 	bne.w	800a2b2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	3b02      	subs	r3, #2
 800a108:	2b09      	cmp	r3, #9
 800a10a:	d836      	bhi.n	800a17a <USBD_HID_Setup+0xb6>
 800a10c:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <USBD_HID_Setup+0x50>)
 800a10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a112:	bf00      	nop
 800a114:	0800a16b 	.word	0x0800a16b
 800a118:	0800a14b 	.word	0x0800a14b
 800a11c:	0800a17b 	.word	0x0800a17b
 800a120:	0800a17b 	.word	0x0800a17b
 800a124:	0800a17b 	.word	0x0800a17b
 800a128:	0800a17b 	.word	0x0800a17b
 800a12c:	0800a17b 	.word	0x0800a17b
 800a130:	0800a17b 	.word	0x0800a17b
 800a134:	0800a159 	.word	0x0800a159
 800a138:	0800a13d 	.word	0x0800a13d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	885b      	ldrh	r3, [r3, #2]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	461a      	mov	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	601a      	str	r2, [r3, #0]
          break;
 800a148:	e01e      	b.n	800a188 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 fbd5 	bl	800b900 <USBD_CtlSendData>
          break;
 800a156:	e017      	b.n	800a188 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	885b      	ldrh	r3, [r3, #2]
 800a15c:	0a1b      	lsrs	r3, r3, #8
 800a15e:	b29b      	uxth	r3, r3
 800a160:	b2db      	uxtb	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	605a      	str	r2, [r3, #4]
          break;
 800a168:	e00e      	b.n	800a188 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3304      	adds	r3, #4
 800a16e:	2201      	movs	r2, #1
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 fbc4 	bl	800b900 <USBD_CtlSendData>
          break;
 800a178:	e006      	b.n	800a188 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 fb4e 	bl	800b81e <USBD_CtlError>
          ret = USBD_FAIL;
 800a182:	2303      	movs	r3, #3
 800a184:	75fb      	strb	r3, [r7, #23]
          break;
 800a186:	bf00      	nop
      }
      break;
 800a188:	e09a      	b.n	800a2c0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	2b0b      	cmp	r3, #11
 800a190:	f200 8086 	bhi.w	800a2a0 <USBD_HID_Setup+0x1dc>
 800a194:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <USBD_HID_Setup+0xd8>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1cd 	.word	0x0800a1cd
 800a1a0:	0800a2af 	.word	0x0800a2af
 800a1a4:	0800a2a1 	.word	0x0800a2a1
 800a1a8:	0800a2a1 	.word	0x0800a2a1
 800a1ac:	0800a2a1 	.word	0x0800a2a1
 800a1b0:	0800a2a1 	.word	0x0800a2a1
 800a1b4:	0800a1f7 	.word	0x0800a1f7
 800a1b8:	0800a2a1 	.word	0x0800a2a1
 800a1bc:	0800a2a1 	.word	0x0800a2a1
 800a1c0:	0800a2a1 	.word	0x0800a2a1
 800a1c4:	0800a24f 	.word	0x0800a24f
 800a1c8:	0800a279 	.word	0x0800a279
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d107      	bne.n	800a1e8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a1d8:	f107 030a 	add.w	r3, r7, #10
 800a1dc:	2202      	movs	r2, #2
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 fb8d 	bl	800b900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1e6:	e063      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 fb17 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	75fb      	strb	r3, [r7, #23]
          break;
 800a1f4:	e05c      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b22      	cmp	r3, #34	; 0x22
 800a200:	d108      	bne.n	800a214 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	88db      	ldrh	r3, [r3, #6]
 800a206:	2b4a      	cmp	r3, #74	; 0x4a
 800a208:	bf28      	it	cs
 800a20a:	234a      	movcs	r3, #74	; 0x4a
 800a20c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a20e:	4b2f      	ldr	r3, [pc, #188]	; (800a2cc <USBD_HID_Setup+0x208>)
 800a210:	613b      	str	r3, [r7, #16]
 800a212:	e015      	b.n	800a240 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	885b      	ldrh	r3, [r3, #2]
 800a218:	0a1b      	lsrs	r3, r3, #8
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	2b21      	cmp	r3, #33	; 0x21
 800a21e:	d108      	bne.n	800a232 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800a220:	4b2b      	ldr	r3, [pc, #172]	; (800a2d0 <USBD_HID_Setup+0x20c>)
 800a222:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	88db      	ldrh	r3, [r3, #6]
 800a228:	2b09      	cmp	r3, #9
 800a22a:	bf28      	it	cs
 800a22c:	2309      	movcs	r3, #9
 800a22e:	82bb      	strh	r3, [r7, #20]
 800a230:	e006      	b.n	800a240 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 faf2 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 800a23a:	2303      	movs	r3, #3
 800a23c:	75fb      	strb	r3, [r7, #23]
            break;
 800a23e:	e037      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a240:	8abb      	ldrh	r3, [r7, #20]
 800a242:	461a      	mov	r2, r3
 800a244:	6939      	ldr	r1, [r7, #16]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 fb5a 	bl	800b900 <USBD_CtlSendData>
          break;
 800a24c:	e030      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b03      	cmp	r3, #3
 800a258:	d107      	bne.n	800a26a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3308      	adds	r3, #8
 800a25e:	2201      	movs	r2, #1
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fb4c 	bl	800b900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a268:	e022      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 fad6 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 800a272:	2303      	movs	r3, #3
 800a274:	75fb      	strb	r3, [r7, #23]
          break;
 800a276:	e01b      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b03      	cmp	r3, #3
 800a282:	d106      	bne.n	800a292 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	885b      	ldrh	r3, [r3, #2]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a290:	e00e      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 fac2 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 800a29a:	2303      	movs	r3, #3
 800a29c:	75fb      	strb	r3, [r7, #23]
          break;
 800a29e:	e007      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fabb 	bl	800b81e <USBD_CtlError>
          ret = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ac:	e000      	b.n	800a2b0 <USBD_HID_Setup+0x1ec>
          break;
 800a2ae:	bf00      	nop
      }
      break;
 800a2b0:	e006      	b.n	800a2c0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fab2 	bl	800b81e <USBD_CtlError>
      ret = USBD_FAIL;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2be:	bf00      	nop
  }

  return (uint8_t)ret;
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2000009c 	.word	0x2000009c
 800a2d0:	20000084 	.word	0x20000084

0800a2d4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	32b0      	adds	r2, #176	; 0xb0
 800a2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e014      	b.n	800a326 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b03      	cmp	r3, #3
 800a306:	d10d      	bne.n	800a324 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	7b1b      	ldrb	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d109      	bne.n	800a324 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2201      	movs	r2, #1
 800a314:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <USBD_HID_SendReport+0x5c>)
 800a318:	7819      	ldrb	r1, [r3, #0]
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f001 ff11 	bl	800c146 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200000e6 	.word	0x200000e6

0800a334 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a33c:	2181      	movs	r1, #129	; 0x81
 800a33e:	4809      	ldr	r0, [pc, #36]	; (800a364 <USBD_HID_GetFSCfgDesc+0x30>)
 800a340:	f000 fc35 	bl	800abae <USBD_GetEpDesc>
 800a344:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	220a      	movs	r2, #10
 800a350:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2222      	movs	r2, #34	; 0x22
 800a356:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000060 	.word	0x20000060

0800a368 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a370:	2181      	movs	r1, #129	; 0x81
 800a372:	4809      	ldr	r0, [pc, #36]	; (800a398 <USBD_HID_GetHSCfgDesc+0x30>)
 800a374:	f000 fc1b 	bl	800abae <USBD_GetEpDesc>
 800a378:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2207      	movs	r2, #7
 800a384:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2222      	movs	r2, #34	; 0x22
 800a38a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000060 	.word	0x20000060

0800a39c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a3a4:	2181      	movs	r1, #129	; 0x81
 800a3a6:	4809      	ldr	r0, [pc, #36]	; (800a3cc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a3a8:	f000 fc01 	bl	800abae <USBD_GetEpDesc>
 800a3ac:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	220a      	movs	r2, #10
 800a3b8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2222      	movs	r2, #34	; 0x22
 800a3be:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a3c0:	4b02      	ldr	r3, [pc, #8]	; (800a3cc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000060 	.word	0x20000060

0800a3d0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	32b0      	adds	r2, #176	; 0xb0
 800a3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	220a      	movs	r2, #10
 800a408:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a40a:	4b03      	ldr	r3, [pc, #12]	; (800a418 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	20000090 	.word	0x20000090

0800a41c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	e01f      	b.n	800a474 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	79fa      	ldrb	r2, [r7, #7]
 800a466:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f001 fd37 	bl	800bedc <USBD_LL_Init>
 800a46e:	4603      	mov	r3, r0
 800a470:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a486:	2300      	movs	r3, #0
 800a488:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	e025      	b.n	800a4e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32ae      	adds	r2, #174	; 0xae
 800a4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00f      	beq.n	800a4d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32ae      	adds	r2, #174	; 0xae
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	f107 020e 	add.w	r2, r7, #14
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4798      	blx	r3
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fd3f 	bl	800bf74 <USBD_LL_Start>
 800a4f6:	4603      	mov	r3, r0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	78fa      	ldrb	r2, [r7, #3]
 800a53a:	4611      	mov	r1, r2
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	78fa      	ldrb	r2, [r7, #3]
 800a568:	4611      	mov	r1, r2
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a574:	2303      	movs	r3, #3
 800a576:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a578:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	4618      	mov	r0, r3
 800a596:	f001 f908 	bl	800b7aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5b6:	f003 031f 	and.w	r3, r3, #31
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d01a      	beq.n	800a5f4 <USBD_LL_SetupStage+0x72>
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d822      	bhi.n	800a608 <USBD_LL_SetupStage+0x86>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <USBD_LL_SetupStage+0x4a>
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d00a      	beq.n	800a5e0 <USBD_LL_SetupStage+0x5e>
 800a5ca:	e01d      	b.n	800a608 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fb5f 	bl	800ac98 <USBD_StdDevReq>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5de:	e020      	b.n	800a622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fbc7 	bl	800ad7c <USBD_StdItfReq>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f2:	e016      	b.n	800a622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fc29 	bl	800ae54 <USBD_StdEPReq>
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
      break;
 800a606:	e00c      	b.n	800a622 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a60e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a612:	b2db      	uxtb	r3, r3
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fd0c 	bl	800c034 <USBD_LL_StallEP>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]
      break;
 800a620:	bf00      	nop
  }

  return ret;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	460b      	mov	r3, r1
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a63e:	7afb      	ldrb	r3, [r7, #11]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d16e      	bne.n	800a722 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a64a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a652:	2b03      	cmp	r3, #3
 800a654:	f040 8098 	bne.w	800a788 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	429a      	cmp	r2, r3
 800a662:	d913      	bls.n	800a68c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	1ad2      	subs	r2, r2, r3
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	4293      	cmp	r3, r2
 800a67c:	bf28      	it	cs
 800a67e:	4613      	movcs	r3, r2
 800a680:	461a      	mov	r2, r3
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f001 f967 	bl	800b958 <USBD_CtlContinueRx>
 800a68a:	e07d      	b.n	800a788 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a692:	f003 031f 	and.w	r3, r3, #31
 800a696:	2b02      	cmp	r3, #2
 800a698:	d014      	beq.n	800a6c4 <USBD_LL_DataOutStage+0x98>
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d81d      	bhi.n	800a6da <USBD_LL_DataOutStage+0xae>
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <USBD_LL_DataOutStage+0x7c>
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d003      	beq.n	800a6ae <USBD_LL_DataOutStage+0x82>
 800a6a6:	e018      	b.n	800a6da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ac:	e018      	b.n	800a6e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 fa5e 	bl	800ab7a <USBD_CoreFindIF>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c2:	e00d      	b.n	800a6e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fa60 	bl	800ab94 <USBD_CoreFindEP>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	75bb      	strb	r3, [r7, #22]
            break;
 800a6d8:	e002      	b.n	800a6e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75bb      	strb	r3, [r7, #22]
            break;
 800a6de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6e0:	7dbb      	ldrb	r3, [r7, #22]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d119      	bne.n	800a71a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d113      	bne.n	800a71a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a6f2:	7dba      	ldrb	r2, [r7, #22]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	32ae      	adds	r2, #174	; 0xae
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00b      	beq.n	800a71a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a702:	7dba      	ldrb	r2, [r7, #22]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a70a:	7dba      	ldrb	r2, [r7, #22]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	32ae      	adds	r2, #174	; 0xae
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f001 f92d 	bl	800b97a <USBD_CtlSendStatus>
 800a720:	e032      	b.n	800a788 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a722:	7afb      	ldrb	r3, [r7, #11]
 800a724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	4619      	mov	r1, r3
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 fa31 	bl	800ab94 <USBD_CoreFindEP>
 800a732:	4603      	mov	r3, r0
 800a734:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a736:	7dbb      	ldrb	r3, [r7, #22]
 800a738:	2bff      	cmp	r3, #255	; 0xff
 800a73a:	d025      	beq.n	800a788 <USBD_LL_DataOutStage+0x15c>
 800a73c:	7dbb      	ldrb	r3, [r7, #22]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d122      	bne.n	800a788 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d117      	bne.n	800a77e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a74e:	7dba      	ldrb	r2, [r7, #22]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	32ae      	adds	r2, #174	; 0xae
 800a754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00f      	beq.n	800a77e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a75e:	7dba      	ldrb	r2, [r7, #22]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a766:	7dba      	ldrb	r2, [r7, #22]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	32ae      	adds	r2, #174	; 0xae
 800a76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	7afa      	ldrb	r2, [r7, #11]
 800a774:	4611      	mov	r1, r2
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	4798      	blx	r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a784:	7dfb      	ldrb	r3, [r7, #23]
 800a786:	e000      	b.n	800a78a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3718      	adds	r7, #24
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b086      	sub	sp, #24
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	460b      	mov	r3, r1
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a7a0:	7afb      	ldrb	r3, [r7, #11]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d16f      	bne.n	800a886 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3314      	adds	r3, #20
 800a7aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d15a      	bne.n	800a86c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d914      	bls.n	800a7ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	1ad2      	subs	r2, r2, r3
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f001 f8ac 	bl	800b936 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f001 fccf 	bl	800c188 <USBD_LL_PrepareReceive>
 800a7ea:	e03f      	b.n	800a86c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d11c      	bne.n	800a832 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a800:	429a      	cmp	r2, r3
 800a802:	d316      	bcc.n	800a832 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a80e:	429a      	cmp	r2, r3
 800a810:	d20f      	bcs.n	800a832 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a812:	2200      	movs	r2, #0
 800a814:	2100      	movs	r1, #0
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f001 f88d 	bl	800b936 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a824:	2300      	movs	r3, #0
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f001 fcac 	bl	800c188 <USBD_LL_PrepareReceive>
 800a830:	e01c      	b.n	800a86c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d10f      	bne.n	800a85e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d009      	beq.n	800a85e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a85e:	2180      	movs	r1, #128	; 0x80
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f001 fbe7 	bl	800c034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f001 f89a 	bl	800b9a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d03a      	beq.n	800a8ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fe42 	bl	800a500 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a884:	e032      	b.n	800a8ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a886:	7afb      	ldrb	r3, [r7, #11]
 800a888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f97f 	bl	800ab94 <USBD_CoreFindEP>
 800a896:	4603      	mov	r3, r0
 800a898:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	2bff      	cmp	r3, #255	; 0xff
 800a89e:	d025      	beq.n	800a8ec <USBD_LL_DataInStage+0x15a>
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d122      	bne.n	800a8ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d11c      	bne.n	800a8ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8b2:	7dfa      	ldrb	r2, [r7, #23]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	32ae      	adds	r2, #174	; 0xae
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d014      	beq.n	800a8ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8c2:	7dfa      	ldrb	r2, [r7, #23]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a8ca:	7dfa      	ldrb	r2, [r7, #23]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	32ae      	adds	r2, #174	; 0xae
 800a8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	7afa      	ldrb	r2, [r7, #11]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	4798      	blx	r3
 800a8de:	4603      	mov	r3, r0
 800a8e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8e2:	7dbb      	ldrb	r3, [r7, #22]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8e8:	7dbb      	ldrb	r3, [r7, #22]
 800a8ea:	e000      	b.n	800a8ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d014      	beq.n	800a95c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00e      	beq.n	800a95c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6852      	ldr	r2, [r2, #4]
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	4611      	mov	r1, r2
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4798      	blx	r3
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	2200      	movs	r2, #0
 800a960:	2100      	movs	r1, #0
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 fb21 	bl	800bfaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2240      	movs	r2, #64	; 0x40
 800a974:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a978:	2340      	movs	r3, #64	; 0x40
 800a97a:	2200      	movs	r2, #0
 800a97c:	2180      	movs	r1, #128	; 0x80
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 fb13 	bl	800bfaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2240      	movs	r2, #64	; 0x40
 800a98e:	621a      	str	r2, [r3, #32]

  return ret;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2204      	movs	r2, #4
 800a9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d106      	bne.n	800aa08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b082      	sub	sp, #8
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d110      	bne.n	800aa4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	32ae      	adds	r2, #174	; 0xae
 800aa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e01c      	b.n	800aab2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d115      	bne.n	800aab0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	32ae      	adds	r2, #174	; 0xae
 800aa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00b      	beq.n	800aab0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	32ae      	adds	r2, #174	; 0xae
 800aaa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	78fa      	ldrb	r2, [r7, #3]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	460b      	mov	r3, r1
 800aac4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	32ae      	adds	r2, #174	; 0xae
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	e01c      	b.n	800ab16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d115      	bne.n	800ab14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	32ae      	adds	r2, #174	; 0xae
 800aaf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32ae      	adds	r2, #174	; 0xae
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	78fa      	ldrb	r2, [r7, #3]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00e      	beq.n	800ab70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6852      	ldr	r2, [r2, #4]
 800ab5e:	b2d2      	uxtb	r2, r2
 800ab60:	4611      	mov	r1, r2
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aba0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b086      	sub	sp, #24
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	460b      	mov	r3, r1
 800abb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	885b      	ldrh	r3, [r3, #2]
 800abca:	b29a      	uxth	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d920      	bls.n	800ac18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b29b      	uxth	r3, r3
 800abdc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800abde:	e013      	b.n	800ac08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800abe0:	f107 030a 	add.w	r3, r7, #10
 800abe4:	4619      	mov	r1, r3
 800abe6:	6978      	ldr	r0, [r7, #20]
 800abe8:	f000 f81b 	bl	800ac22 <USBD_GetNextDesc>
 800abec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b05      	cmp	r3, #5
 800abf4:	d108      	bne.n	800ac08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	789b      	ldrb	r3, [r3, #2]
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d008      	beq.n	800ac16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	885b      	ldrh	r3, [r3, #2]
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	897b      	ldrh	r3, [r7, #10]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d8e5      	bhi.n	800abe0 <USBD_GetEpDesc+0x32>
 800ac14:	e000      	b.n	800ac18 <USBD_GetEpDesc+0x6a>
          break;
 800ac16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac18:	693b      	ldr	r3, [r7, #16]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3718      	adds	r7, #24
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	881a      	ldrh	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	3301      	adds	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac7a:	8a3b      	ldrh	r3, [r7, #16]
 800ac7c:	021b      	lsls	r3, r3, #8
 800ac7e:	b21a      	sxth	r2, r3
 800ac80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	b21b      	sxth	r3, r3
 800ac88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac8a:	89fb      	ldrh	r3, [r7, #14]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	d005      	beq.n	800acbe <USBD_StdDevReq+0x26>
 800acb2:	2b40      	cmp	r3, #64	; 0x40
 800acb4:	d857      	bhi.n	800ad66 <USBD_StdDevReq+0xce>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00f      	beq.n	800acda <USBD_StdDevReq+0x42>
 800acba:	2b20      	cmp	r3, #32
 800acbc:	d153      	bne.n	800ad66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	32ae      	adds	r2, #174	; 0xae
 800acc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	4798      	blx	r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]
      break;
 800acd8:	e04a      	b.n	800ad70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d83b      	bhi.n	800ad5a <USBD_StdDevReq+0xc2>
 800ace2:	a201      	add	r2, pc, #4	; (adr r2, 800ace8 <USBD_StdDevReq+0x50>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800ad3d 	.word	0x0800ad3d
 800acec:	0800ad51 	.word	0x0800ad51
 800acf0:	0800ad5b 	.word	0x0800ad5b
 800acf4:	0800ad47 	.word	0x0800ad47
 800acf8:	0800ad5b 	.word	0x0800ad5b
 800acfc:	0800ad1b 	.word	0x0800ad1b
 800ad00:	0800ad11 	.word	0x0800ad11
 800ad04:	0800ad5b 	.word	0x0800ad5b
 800ad08:	0800ad33 	.word	0x0800ad33
 800ad0c:	0800ad25 	.word	0x0800ad25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa3c 	bl	800b190 <USBD_GetDescriptor>
          break;
 800ad18:	e024      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fba1 	bl	800b464 <USBD_SetAddress>
          break;
 800ad22:	e01f      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fbe0 	bl	800b4ec <USBD_SetConfig>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad30:	e018      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fc83 	bl	800b640 <USBD_GetConfig>
          break;
 800ad3a:	e013      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fcb4 	bl	800b6ac <USBD_GetStatus>
          break;
 800ad44:	e00e      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fce3 	bl	800b714 <USBD_SetFeature>
          break;
 800ad4e:	e009      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fd07 	bl	800b766 <USBD_ClrFeature>
          break;
 800ad58:	e004      	b.n	800ad64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fd5e 	bl	800b81e <USBD_CtlError>
          break;
 800ad62:	bf00      	nop
      }
      break;
 800ad64:	e004      	b.n	800ad70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fd58 	bl	800b81e <USBD_CtlError>
      break;
 800ad6e:	bf00      	nop
  }

  return ret;
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop

0800ad7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad92:	2b40      	cmp	r3, #64	; 0x40
 800ad94:	d005      	beq.n	800ada2 <USBD_StdItfReq+0x26>
 800ad96:	2b40      	cmp	r3, #64	; 0x40
 800ad98:	d852      	bhi.n	800ae40 <USBD_StdItfReq+0xc4>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <USBD_StdItfReq+0x26>
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d14e      	bne.n	800ae40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	2b02      	cmp	r3, #2
 800adae:	d840      	bhi.n	800ae32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	889b      	ldrh	r3, [r3, #4]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d836      	bhi.n	800ae28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	889b      	ldrh	r3, [r3, #4]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fed9 	bl	800ab7a <USBD_CoreFindIF>
 800adc8:	4603      	mov	r3, r0
 800adca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	2bff      	cmp	r3, #255	; 0xff
 800add0:	d01d      	beq.n	800ae0e <USBD_StdItfReq+0x92>
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11a      	bne.n	800ae0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800add8:	7bba      	ldrb	r2, [r7, #14]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	32ae      	adds	r2, #174	; 0xae
 800adde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00f      	beq.n	800ae08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ade8:	7bba      	ldrb	r2, [r7, #14]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adf0:	7bba      	ldrb	r2, [r7, #14]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	32ae      	adds	r2, #174	; 0xae
 800adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	4798      	blx	r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae06:	e004      	b.n	800ae12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae0c:	e001      	b.n	800ae12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	88db      	ldrh	r3, [r3, #6]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d110      	bne.n	800ae3c <USBD_StdItfReq+0xc0>
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10d      	bne.n	800ae3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fdaa 	bl	800b97a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae26:	e009      	b.n	800ae3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fcf7 	bl	800b81e <USBD_CtlError>
          break;
 800ae30:	e004      	b.n	800ae3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fcf2 	bl	800b81e <USBD_CtlError>
          break;
 800ae3a:	e000      	b.n	800ae3e <USBD_StdItfReq+0xc2>
          break;
 800ae3c:	bf00      	nop
      }
      break;
 800ae3e:	e004      	b.n	800ae4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fceb 	bl	800b81e <USBD_CtlError>
      break;
 800ae48:	bf00      	nop
  }

  return ret;
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	889b      	ldrh	r3, [r3, #4]
 800ae66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae70:	2b40      	cmp	r3, #64	; 0x40
 800ae72:	d007      	beq.n	800ae84 <USBD_StdEPReq+0x30>
 800ae74:	2b40      	cmp	r3, #64	; 0x40
 800ae76:	f200 817f 	bhi.w	800b178 <USBD_StdEPReq+0x324>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d02a      	beq.n	800aed4 <USBD_StdEPReq+0x80>
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	f040 817a 	bne.w	800b178 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff fe83 	bl	800ab94 <USBD_CoreFindEP>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae92:	7b7b      	ldrb	r3, [r7, #13]
 800ae94:	2bff      	cmp	r3, #255	; 0xff
 800ae96:	f000 8174 	beq.w	800b182 <USBD_StdEPReq+0x32e>
 800ae9a:	7b7b      	ldrb	r3, [r7, #13]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f040 8170 	bne.w	800b182 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aea2:	7b7a      	ldrb	r2, [r7, #13]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aeaa:	7b7a      	ldrb	r2, [r7, #13]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	32ae      	adds	r2, #174	; 0xae
 800aeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 8163 	beq.w	800b182 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aebc:	7b7a      	ldrb	r2, [r7, #13]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	32ae      	adds	r2, #174	; 0xae
 800aec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	4798      	blx	r3
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aed2:	e156      	b.n	800b182 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	785b      	ldrb	r3, [r3, #1]
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d008      	beq.n	800aeee <USBD_StdEPReq+0x9a>
 800aedc:	2b03      	cmp	r3, #3
 800aede:	f300 8145 	bgt.w	800b16c <USBD_StdEPReq+0x318>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 809b 	beq.w	800b01e <USBD_StdEPReq+0x1ca>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d03c      	beq.n	800af66 <USBD_StdEPReq+0x112>
 800aeec:	e13e      	b.n	800b16c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d002      	beq.n	800af00 <USBD_StdEPReq+0xac>
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d016      	beq.n	800af2c <USBD_StdEPReq+0xd8>
 800aefe:	e02c      	b.n	800af5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00d      	beq.n	800af22 <USBD_StdEPReq+0xce>
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	2b80      	cmp	r3, #128	; 0x80
 800af0a:	d00a      	beq.n	800af22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f001 f88f 	bl	800c034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af16:	2180      	movs	r1, #128	; 0x80
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 f88b 	bl	800c034 <USBD_LL_StallEP>
 800af1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af20:	e020      	b.n	800af64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fc7a 	bl	800b81e <USBD_CtlError>
              break;
 800af2a:	e01b      	b.n	800af64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	885b      	ldrh	r3, [r3, #2]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10e      	bne.n	800af52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00b      	beq.n	800af52 <USBD_StdEPReq+0xfe>
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	2b80      	cmp	r3, #128	; 0x80
 800af3e:	d008      	beq.n	800af52 <USBD_StdEPReq+0xfe>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	88db      	ldrh	r3, [r3, #6]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d104      	bne.n	800af52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 f871 	bl	800c034 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fd11 	bl	800b97a <USBD_CtlSendStatus>

              break;
 800af58:	e004      	b.n	800af64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fc5e 	bl	800b81e <USBD_CtlError>
              break;
 800af62:	bf00      	nop
          }
          break;
 800af64:	e107      	b.n	800b176 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d002      	beq.n	800af78 <USBD_StdEPReq+0x124>
 800af72:	2b03      	cmp	r3, #3
 800af74:	d016      	beq.n	800afa4 <USBD_StdEPReq+0x150>
 800af76:	e04b      	b.n	800b010 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00d      	beq.n	800af9a <USBD_StdEPReq+0x146>
 800af7e:	7bbb      	ldrb	r3, [r7, #14]
 800af80:	2b80      	cmp	r3, #128	; 0x80
 800af82:	d00a      	beq.n	800af9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 f853 	bl	800c034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af8e:	2180      	movs	r1, #128	; 0x80
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 f84f 	bl	800c034 <USBD_LL_StallEP>
 800af96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af98:	e040      	b.n	800b01c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fc3e 	bl	800b81e <USBD_CtlError>
              break;
 800afa2:	e03b      	b.n	800b01c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	885b      	ldrh	r3, [r3, #2]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d136      	bne.n	800b01a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f001 f859 	bl	800c072 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fcda 	bl	800b97a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fde2 	bl	800ab94 <USBD_CoreFindEP>
 800afd0:	4603      	mov	r3, r0
 800afd2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afd4:	7b7b      	ldrb	r3, [r7, #13]
 800afd6:	2bff      	cmp	r3, #255	; 0xff
 800afd8:	d01f      	beq.n	800b01a <USBD_StdEPReq+0x1c6>
 800afda:	7b7b      	ldrb	r3, [r7, #13]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d11c      	bne.n	800b01a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800afe0:	7b7a      	ldrb	r2, [r7, #13]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afe8:	7b7a      	ldrb	r2, [r7, #13]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	32ae      	adds	r2, #174	; 0xae
 800afee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d010      	beq.n	800b01a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aff8:	7b7a      	ldrb	r2, [r7, #13]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	32ae      	adds	r2, #174	; 0xae
 800affe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	4798      	blx	r3
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b00e:	e004      	b.n	800b01a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fc03 	bl	800b81e <USBD_CtlError>
              break;
 800b018:	e000      	b.n	800b01c <USBD_StdEPReq+0x1c8>
              break;
 800b01a:	bf00      	nop
          }
          break;
 800b01c:	e0ab      	b.n	800b176 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b02      	cmp	r3, #2
 800b028:	d002      	beq.n	800b030 <USBD_StdEPReq+0x1dc>
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d032      	beq.n	800b094 <USBD_StdEPReq+0x240>
 800b02e:	e097      	b.n	800b160 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <USBD_StdEPReq+0x1f2>
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	2b80      	cmp	r3, #128	; 0x80
 800b03a:	d004      	beq.n	800b046 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fbed 	bl	800b81e <USBD_CtlError>
                break;
 800b044:	e091      	b.n	800b16a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	da0b      	bge.n	800b066 <USBD_StdEPReq+0x212>
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	3310      	adds	r3, #16
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	4413      	add	r3, r2
 800b062:	3304      	adds	r3, #4
 800b064:	e00b      	b.n	800b07e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	4413      	add	r3, r2
 800b07c:	3304      	adds	r3, #4
 800b07e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2202      	movs	r2, #2
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fc37 	bl	800b900 <USBD_CtlSendData>
              break;
 800b092:	e06a      	b.n	800b16a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da11      	bge.n	800b0c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	f003 020f 	and.w	r2, r3, #15
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	3324      	adds	r3, #36	; 0x24
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d117      	bne.n	800b0e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0b6:	6839      	ldr	r1, [r7, #0]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fbb0 	bl	800b81e <USBD_CtlError>
                  break;
 800b0be:	e054      	b.n	800b16a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	f003 020f 	and.w	r2, r3, #15
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d104      	bne.n	800b0e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fb9d 	bl	800b81e <USBD_CtlError>
                  break;
 800b0e4:	e041      	b.n	800b16a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	da0b      	bge.n	800b106 <USBD_StdEPReq+0x2b2>
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	4413      	add	r3, r2
 800b102:	3304      	adds	r3, #4
 800b104:	e00b      	b.n	800b11e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	4413      	add	r3, r2
 800b11c:	3304      	adds	r3, #4
 800b11e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <USBD_StdEPReq+0x2d8>
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b80      	cmp	r3, #128	; 0x80
 800b12a:	d103      	bne.n	800b134 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	e00e      	b.n	800b152 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 ffb9 	bl	800c0b0 <USBD_LL_IsStallEP>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2201      	movs	r2, #1
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	e002      	b.n	800b152 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	2202      	movs	r2, #2
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fbd1 	bl	800b900 <USBD_CtlSendData>
              break;
 800b15e:	e004      	b.n	800b16a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fb5b 	bl	800b81e <USBD_CtlError>
              break;
 800b168:	bf00      	nop
          }
          break;
 800b16a:	e004      	b.n	800b176 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fb55 	bl	800b81e <USBD_CtlError>
          break;
 800b174:	bf00      	nop
      }
      break;
 800b176:	e005      	b.n	800b184 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fb4f 	bl	800b81e <USBD_CtlError>
      break;
 800b180:	e000      	b.n	800b184 <USBD_StdEPReq+0x330>
      break;
 800b182:	bf00      	nop
  }

  return ret;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	885b      	ldrh	r3, [r3, #2]
 800b1aa:	0a1b      	lsrs	r3, r3, #8
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	2b06      	cmp	r3, #6
 800b1b2:	f200 8128 	bhi.w	800b406 <USBD_GetDescriptor+0x276>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <USBD_GetDescriptor+0x2c>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1d9 	.word	0x0800b1d9
 800b1c0:	0800b1f1 	.word	0x0800b1f1
 800b1c4:	0800b231 	.word	0x0800b231
 800b1c8:	0800b407 	.word	0x0800b407
 800b1cc:	0800b407 	.word	0x0800b407
 800b1d0:	0800b3a7 	.word	0x0800b3a7
 800b1d4:	0800b3d3 	.word	0x0800b3d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	7c12      	ldrb	r2, [r2, #16]
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
      break;
 800b1ee:	e112      	b.n	800b416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	7c1b      	ldrb	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10d      	bne.n	800b214 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b200:	f107 0208 	add.w	r2, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	2202      	movs	r2, #2
 800b210:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b212:	e100      	b.n	800b416 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	f107 0208 	add.w	r2, r7, #8
 800b220:	4610      	mov	r0, r2
 800b222:	4798      	blx	r3
 800b224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	2202      	movs	r2, #2
 800b22c:	701a      	strb	r2, [r3, #0]
      break;
 800b22e:	e0f2      	b.n	800b416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	885b      	ldrh	r3, [r3, #2]
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b05      	cmp	r3, #5
 800b238:	f200 80ac 	bhi.w	800b394 <USBD_GetDescriptor+0x204>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <USBD_GetDescriptor+0xb4>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b25d 	.word	0x0800b25d
 800b248:	0800b291 	.word	0x0800b291
 800b24c:	0800b2c5 	.word	0x0800b2c5
 800b250:	0800b2f9 	.word	0x0800b2f9
 800b254:	0800b32d 	.word	0x0800b32d
 800b258:	0800b361 	.word	0x0800b361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	7c12      	ldrb	r2, [r2, #16]
 800b274:	f107 0108 	add.w	r1, r7, #8
 800b278:	4610      	mov	r0, r2
 800b27a:	4798      	blx	r3
 800b27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b27e:	e091      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 facb 	bl	800b81e <USBD_CtlError>
            err++;
 800b288:	7afb      	ldrb	r3, [r7, #11]
 800b28a:	3301      	adds	r3, #1
 800b28c:	72fb      	strb	r3, [r7, #11]
          break;
 800b28e:	e089      	b.n	800b3a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	7c12      	ldrb	r2, [r2, #16]
 800b2a8:	f107 0108 	add.w	r1, r7, #8
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
 800b2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2b2:	e077      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fab1 	bl	800b81e <USBD_CtlError>
            err++;
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2c2:	e06f      	b.n	800b3a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00b      	beq.n	800b2e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	7c12      	ldrb	r2, [r2, #16]
 800b2dc:	f107 0108 	add.w	r1, r7, #8
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4798      	blx	r3
 800b2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2e6:	e05d      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa97 	bl	800b81e <USBD_CtlError>
            err++;
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2f6:	e055      	b.n	800b3a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	7c12      	ldrb	r2, [r2, #16]
 800b310:	f107 0108 	add.w	r1, r7, #8
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31a:	e043      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fa7d 	bl	800b81e <USBD_CtlError>
            err++;
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	3301      	adds	r3, #1
 800b328:	72fb      	strb	r3, [r7, #11]
          break;
 800b32a:	e03b      	b.n	800b3a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34e:	e029      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fa63 	bl	800b81e <USBD_CtlError>
            err++;
 800b358:	7afb      	ldrb	r3, [r7, #11]
 800b35a:	3301      	adds	r3, #1
 800b35c:	72fb      	strb	r3, [r7, #11]
          break;
 800b35e:	e021      	b.n	800b3a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	7c12      	ldrb	r2, [r2, #16]
 800b378:	f107 0108 	add.w	r1, r7, #8
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b382:	e00f      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa49 	bl	800b81e <USBD_CtlError>
            err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
          break;
 800b392:	e007      	b.n	800b3a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa41 	bl	800b81e <USBD_CtlError>
          err++;
 800b39c:	7afb      	ldrb	r3, [r7, #11]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3a2:	bf00      	nop
      }
      break;
 800b3a4:	e037      	b.n	800b416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7c1b      	ldrb	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b6:	f107 0208 	add.w	r2, r7, #8
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	4798      	blx	r3
 800b3be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3c0:	e029      	b.n	800b416 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fa2a 	bl	800b81e <USBD_CtlError>
        err++;
 800b3ca:	7afb      	ldrb	r3, [r7, #11]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b3d0:	e021      	b.n	800b416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	7c1b      	ldrb	r3, [r3, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10d      	bne.n	800b3f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e2:	f107 0208 	add.w	r2, r7, #8
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	4798      	blx	r3
 800b3ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	2207      	movs	r2, #7
 800b3f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3f4:	e00f      	b.n	800b416 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fa10 	bl	800b81e <USBD_CtlError>
        err++;
 800b3fe:	7afb      	ldrb	r3, [r7, #11]
 800b400:	3301      	adds	r3, #1
 800b402:	72fb      	strb	r3, [r7, #11]
      break;
 800b404:	e007      	b.n	800b416 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fa08 	bl	800b81e <USBD_CtlError>
      err++;
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	3301      	adds	r3, #1
 800b412:	72fb      	strb	r3, [r7, #11]
      break;
 800b414:	bf00      	nop
  }

  if (err != 0U)
 800b416:	7afb      	ldrb	r3, [r7, #11]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d11e      	bne.n	800b45a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	88db      	ldrh	r3, [r3, #6]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d016      	beq.n	800b452 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b424:	893b      	ldrh	r3, [r7, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00e      	beq.n	800b448 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	88da      	ldrh	r2, [r3, #6]
 800b42e:	893b      	ldrh	r3, [r7, #8]
 800b430:	4293      	cmp	r3, r2
 800b432:	bf28      	it	cs
 800b434:	4613      	movcs	r3, r2
 800b436:	b29b      	uxth	r3, r3
 800b438:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b43a:	893b      	ldrh	r3, [r7, #8]
 800b43c:	461a      	mov	r2, r3
 800b43e:	68f9      	ldr	r1, [r7, #12]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fa5d 	bl	800b900 <USBD_CtlSendData>
 800b446:	e009      	b.n	800b45c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9e7 	bl	800b81e <USBD_CtlError>
 800b450:	e004      	b.n	800b45c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fa91 	bl	800b97a <USBD_CtlSendStatus>
 800b458:	e000      	b.n	800b45c <USBD_GetDescriptor+0x2cc>
    return;
 800b45a:	bf00      	nop
  }
}
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop

0800b464 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	889b      	ldrh	r3, [r3, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d131      	bne.n	800b4da <USBD_SetAddress+0x76>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	88db      	ldrh	r3, [r3, #6]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d12d      	bne.n	800b4da <USBD_SetAddress+0x76>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	885b      	ldrh	r3, [r3, #2]
 800b482:	2b7f      	cmp	r3, #127	; 0x7f
 800b484:	d829      	bhi.n	800b4da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	885b      	ldrh	r3, [r3, #2]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d104      	bne.n	800b4a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f9bc 	bl	800b81e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a6:	e01d      	b.n	800b4e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7bfa      	ldrb	r2, [r7, #15]
 800b4ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fe27 	bl	800c108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa5d 	bl	800b97a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ce:	e009      	b.n	800b4e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d8:	e004      	b.n	800b4e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f99e 	bl	800b81e <USBD_CtlError>
  }
}
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	4b4e      	ldr	r3, [pc, #312]	; (800b63c <USBD_SetConfig+0x150>)
 800b502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b504:	4b4d      	ldr	r3, [pc, #308]	; (800b63c <USBD_SetConfig+0x150>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d905      	bls.n	800b518 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f985 	bl	800b81e <USBD_CtlError>
    return USBD_FAIL;
 800b514:	2303      	movs	r3, #3
 800b516:	e08c      	b.n	800b632 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	d002      	beq.n	800b52a <USBD_SetConfig+0x3e>
 800b524:	2b03      	cmp	r3, #3
 800b526:	d029      	beq.n	800b57c <USBD_SetConfig+0x90>
 800b528:	e075      	b.n	800b616 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b52a:	4b44      	ldr	r3, [pc, #272]	; (800b63c <USBD_SetConfig+0x150>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d020      	beq.n	800b574 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b532:	4b42      	ldr	r3, [pc, #264]	; (800b63c <USBD_SetConfig+0x150>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b53c:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <USBD_SetConfig+0x150>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe ffe7 	bl	800a516 <USBD_SetClassConfig>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d008      	beq.n	800b564 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f962 	bl	800b81e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2202      	movs	r2, #2
 800b55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b562:	e065      	b.n	800b630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fa08 	bl	800b97a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2203      	movs	r2, #3
 800b56e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b572:	e05d      	b.n	800b630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fa00 	bl	800b97a <USBD_CtlSendStatus>
      break;
 800b57a:	e059      	b.n	800b630 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b57c:	4b2f      	ldr	r3, [pc, #188]	; (800b63c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d112      	bne.n	800b5aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b58c:	4b2b      	ldr	r3, [pc, #172]	; (800b63c <USBD_SetConfig+0x150>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	461a      	mov	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b596:	4b29      	ldr	r3, [pc, #164]	; (800b63c <USBD_SetConfig+0x150>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7fe ffd6 	bl	800a54e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f9e9 	bl	800b97a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5a8:	e042      	b.n	800b630 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5aa:	4b24      	ldr	r3, [pc, #144]	; (800b63c <USBD_SetConfig+0x150>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d02a      	beq.n	800b60e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7fe ffc4 	bl	800a54e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5c6:	4b1d      	ldr	r3, [pc, #116]	; (800b63c <USBD_SetConfig+0x150>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	; (800b63c <USBD_SetConfig+0x150>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7fe ff9d 	bl	800a516 <USBD_SetClassConfig>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00f      	beq.n	800b606 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f918 	bl	800b81e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7fe ffa9 	bl	800a54e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b604:	e014      	b.n	800b630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f9b7 	bl	800b97a <USBD_CtlSendStatus>
      break;
 800b60c:	e010      	b.n	800b630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9b3 	bl	800b97a <USBD_CtlSendStatus>
      break;
 800b614:	e00c      	b.n	800b630 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f900 	bl	800b81e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b61e:	4b07      	ldr	r3, [pc, #28]	; (800b63c <USBD_SetConfig+0x150>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe ff92 	bl	800a54e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b62a:	2303      	movs	r3, #3
 800b62c:	73fb      	strb	r3, [r7, #15]
      break;
 800b62e:	bf00      	nop
  }

  return ret;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20000408 	.word	0x20000408

0800b640 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	88db      	ldrh	r3, [r3, #6]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d004      	beq.n	800b65c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f8e2 	bl	800b81e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b65a:	e023      	b.n	800b6a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b02      	cmp	r3, #2
 800b666:	dc02      	bgt.n	800b66e <USBD_GetConfig+0x2e>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dc03      	bgt.n	800b674 <USBD_GetConfig+0x34>
 800b66c:	e015      	b.n	800b69a <USBD_GetConfig+0x5a>
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d00b      	beq.n	800b68a <USBD_GetConfig+0x4a>
 800b672:	e012      	b.n	800b69a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	3308      	adds	r3, #8
 800b67e:	2201      	movs	r2, #1
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f93c 	bl	800b900 <USBD_CtlSendData>
        break;
 800b688:	e00c      	b.n	800b6a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3304      	adds	r3, #4
 800b68e:	2201      	movs	r2, #1
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f934 	bl	800b900 <USBD_CtlSendData>
        break;
 800b698:	e004      	b.n	800b6a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f8be 	bl	800b81e <USBD_CtlError>
        break;
 800b6a2:	bf00      	nop
}
 800b6a4:	bf00      	nop
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d81e      	bhi.n	800b702 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	88db      	ldrh	r3, [r3, #6]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d004      	beq.n	800b6d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f8a5 	bl	800b81e <USBD_CtlError>
        break;
 800b6d4:	e01a      	b.n	800b70c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f043 0202 	orr.w	r2, r3, #2
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f900 	bl	800b900 <USBD_CtlSendData>
      break;
 800b700:	e004      	b.n	800b70c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f88a 	bl	800b81e <USBD_CtlError>
      break;
 800b70a:	bf00      	nop
  }
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	885b      	ldrh	r3, [r3, #2]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d107      	bne.n	800b736 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f923 	bl	800b97a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b734:	e013      	b.n	800b75e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d10b      	bne.n	800b756 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	889b      	ldrh	r3, [r3, #4]
 800b742:	0a1b      	lsrs	r3, r3, #8
 800b744:	b29b      	uxth	r3, r3
 800b746:	b2da      	uxtb	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f913 	bl	800b97a <USBD_CtlSendStatus>
}
 800b754:	e003      	b.n	800b75e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f860 	bl	800b81e <USBD_CtlError>
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b776:	b2db      	uxtb	r3, r3
 800b778:	3b01      	subs	r3, #1
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d80b      	bhi.n	800b796 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d10c      	bne.n	800b7a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f8f3 	bl	800b97a <USBD_CtlSendStatus>
      }
      break;
 800b794:	e004      	b.n	800b7a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f840 	bl	800b81e <USBD_CtlError>
      break;
 800b79e:	e000      	b.n	800b7a2 <USBD_ClrFeature+0x3c>
      break;
 800b7a0:	bf00      	nop
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	781a      	ldrb	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7ff fa41 	bl	800ac5c <SWAPBYTE>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	461a      	mov	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff fa34 	bl	800ac5c <SWAPBYTE>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3301      	adds	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f7ff fa27 	bl	800ac5c <SWAPBYTE>
 800b80e:	4603      	mov	r3, r0
 800b810:	461a      	mov	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	80da      	strh	r2, [r3, #6]
}
 800b816:	bf00      	nop
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b828:	2180      	movs	r1, #128	; 0x80
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fc02 	bl	800c034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b830:	2100      	movs	r1, #0
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fbfe 	bl	800c034 <USBD_LL_StallEP>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b84c:	2300      	movs	r3, #0
 800b84e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d036      	beq.n	800b8c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b85a:	6938      	ldr	r0, [r7, #16]
 800b85c:	f000 f836 	bl	800b8cc <USBD_GetLen>
 800b860:	4603      	mov	r3, r0
 800b862:	3301      	adds	r3, #1
 800b864:	b29b      	uxth	r3, r3
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	b29a      	uxth	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	4413      	add	r3, r2
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	7812      	ldrb	r2, [r2, #0]
 800b878:	701a      	strb	r2, [r3, #0]
  idx++;
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	3301      	adds	r3, #1
 800b87e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	4413      	add	r3, r2
 800b886:	2203      	movs	r2, #3
 800b888:	701a      	strb	r2, [r3, #0]
  idx++;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	3301      	adds	r3, #1
 800b88e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b890:	e013      	b.n	800b8ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	4413      	add	r3, r2
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	7812      	ldrb	r2, [r2, #0]
 800b89c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]
    idx++;
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8b4:	7dfb      	ldrb	r3, [r7, #23]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e7      	bne.n	800b892 <USBD_GetString+0x52>
 800b8c2:	e000      	b.n	800b8c6 <USBD_GetString+0x86>
    return;
 800b8c4:	bf00      	nop
  }
}
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8dc:	e005      	b.n	800b8ea <USBD_GetLen+0x1e>
  {
    len++;
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1f5      	bne.n	800b8de <USBD_GetLen+0x12>
  }

  return len;
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2202      	movs	r2, #2
 800b910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	2100      	movs	r1, #0
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 fc0d 	bl	800c146 <USBD_LL_Transmit>

  return USBD_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b084      	sub	sp, #16
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	60f8      	str	r0, [r7, #12]
 800b93e:	60b9      	str	r1, [r7, #8]
 800b940:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	2100      	movs	r1, #0
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 fbfc 	bl	800c146 <USBD_LL_Transmit>

  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	2100      	movs	r1, #0
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 fc0c 	bl	800c188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2204      	movs	r2, #4
 800b986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b98a:	2300      	movs	r3, #0
 800b98c:	2200      	movs	r2, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fbd8 	bl	800c146 <USBD_LL_Transmit>

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2205      	movs	r2, #5
 800b9ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fbe6 	bl	800c188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
	...

0800b9c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	490e      	ldr	r1, [pc, #56]	; (800ba08 <MX_USB_DEVICE_Init+0x40>)
 800b9d0:	480e      	ldr	r0, [pc, #56]	; (800ba0c <MX_USB_DEVICE_Init+0x44>)
 800b9d2:	f7fe fd23 	bl	800a41c <USBD_Init>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b9dc:	f7f6 f934 	bl	8001c48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b9e0:	490b      	ldr	r1, [pc, #44]	; (800ba10 <MX_USB_DEVICE_Init+0x48>)
 800b9e2:	480a      	ldr	r0, [pc, #40]	; (800ba0c <MX_USB_DEVICE_Init+0x44>)
 800b9e4:	f7fe fd4a 	bl	800a47c <USBD_RegisterClass>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b9ee:	f7f6 f92b 	bl	8001c48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9f2:	4806      	ldr	r0, [pc, #24]	; (800ba0c <MX_USB_DEVICE_Init+0x44>)
 800b9f4:	f7fe fd78 	bl	800a4e8 <USBD_Start>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b9fe:	f7f6 f923 	bl	8001c48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba02:	bf00      	nop
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	200000e8 	.word	0x200000e8
 800ba0c:	2000040c 	.word	0x2000040c
 800ba10:	20000028 	.word	0x20000028

0800ba14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	6039      	str	r1, [r7, #0]
 800ba1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2212      	movs	r2, #18
 800ba24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba26:	4b03      	ldr	r3, [pc, #12]	; (800ba34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	20000104 	.word	0x20000104

0800ba38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	6039      	str	r1, [r7, #0]
 800ba42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2204      	movs	r2, #4
 800ba48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba4a:	4b03      	ldr	r3, [pc, #12]	; (800ba58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	20000118 	.word	0x20000118

0800ba5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	6039      	str	r1, [r7, #0]
 800ba66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d105      	bne.n	800ba7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	4907      	ldr	r1, [pc, #28]	; (800ba90 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba72:	4808      	ldr	r0, [pc, #32]	; (800ba94 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba74:	f7ff fee4 	bl	800b840 <USBD_GetString>
 800ba78:	e004      	b.n	800ba84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	4904      	ldr	r1, [pc, #16]	; (800ba90 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba7e:	4805      	ldr	r0, [pc, #20]	; (800ba94 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba80:	f7ff fede 	bl	800b840 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba84:	4b02      	ldr	r3, [pc, #8]	; (800ba90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200006e8 	.word	0x200006e8
 800ba94:	0800cbdc 	.word	0x0800cbdc

0800ba98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	4904      	ldr	r1, [pc, #16]	; (800bab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800baa8:	4804      	ldr	r0, [pc, #16]	; (800babc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800baaa:	f7ff fec9 	bl	800b840 <USBD_GetString>
  return USBD_StrDesc;
 800baae:	4b02      	ldr	r3, [pc, #8]	; (800bab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	200006e8 	.word	0x200006e8
 800babc:	0800cbe4 	.word	0x0800cbe4

0800bac0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4603      	mov	r3, r0
 800bac8:	6039      	str	r1, [r7, #0]
 800baca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	221a      	movs	r2, #26
 800bad0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bad2:	f000 f843 	bl	800bb5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bad6:	4b02      	ldr	r3, [pc, #8]	; (800bae0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	2000011c 	.word	0x2000011c

0800bae4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	6039      	str	r1, [r7, #0]
 800baee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800baf0:	79fb      	ldrb	r3, [r7, #7]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d105      	bne.n	800bb02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	4907      	ldr	r1, [pc, #28]	; (800bb18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bafa:	4808      	ldr	r0, [pc, #32]	; (800bb1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bafc:	f7ff fea0 	bl	800b840 <USBD_GetString>
 800bb00:	e004      	b.n	800bb0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	4904      	ldr	r1, [pc, #16]	; (800bb18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb06:	4805      	ldr	r0, [pc, #20]	; (800bb1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb08:	f7ff fe9a 	bl	800b840 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb0c:	4b02      	ldr	r3, [pc, #8]	; (800bb18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	200006e8 	.word	0x200006e8
 800bb1c:	0800cbf8 	.word	0x0800cbf8

0800bb20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d105      	bne.n	800bb3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	4907      	ldr	r1, [pc, #28]	; (800bb54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb36:	4808      	ldr	r0, [pc, #32]	; (800bb58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb38:	f7ff fe82 	bl	800b840 <USBD_GetString>
 800bb3c:	e004      	b.n	800bb48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	4904      	ldr	r1, [pc, #16]	; (800bb54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb42:	4805      	ldr	r0, [pc, #20]	; (800bb58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb44:	f7ff fe7c 	bl	800b840 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb48:	4b02      	ldr	r3, [pc, #8]	; (800bb54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200006e8 	.word	0x200006e8
 800bb58:	0800cc04 	.word	0x0800cc04

0800bb5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb62:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <Get_SerialNum+0x44>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb68:	4b0e      	ldr	r3, [pc, #56]	; (800bba4 <Get_SerialNum+0x48>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb6e:	4b0e      	ldr	r3, [pc, #56]	; (800bba8 <Get_SerialNum+0x4c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4413      	add	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d009      	beq.n	800bb96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb82:	2208      	movs	r2, #8
 800bb84:	4909      	ldr	r1, [pc, #36]	; (800bbac <Get_SerialNum+0x50>)
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 f814 	bl	800bbb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb8c:	2204      	movs	r2, #4
 800bb8e:	4908      	ldr	r1, [pc, #32]	; (800bbb0 <Get_SerialNum+0x54>)
 800bb90:	68b8      	ldr	r0, [r7, #8]
 800bb92:	f000 f80f 	bl	800bbb4 <IntToUnicode>
  }
}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	1fff7a10 	.word	0x1fff7a10
 800bba4:	1fff7a14 	.word	0x1fff7a14
 800bba8:	1fff7a18 	.word	0x1fff7a18
 800bbac:	2000011e 	.word	0x2000011e
 800bbb0:	2000012e 	.word	0x2000012e

0800bbb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]
 800bbca:	e027      	b.n	800bc1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	0f1b      	lsrs	r3, r3, #28
 800bbd0:	2b09      	cmp	r3, #9
 800bbd2:	d80b      	bhi.n	800bbec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	0f1b      	lsrs	r3, r3, #28
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	7dfb      	ldrb	r3, [r7, #23]
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	4619      	mov	r1, r3
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	440b      	add	r3, r1
 800bbe4:	3230      	adds	r2, #48	; 0x30
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	701a      	strb	r2, [r3, #0]
 800bbea:	e00a      	b.n	800bc02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	0f1b      	lsrs	r3, r3, #28
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3237      	adds	r2, #55	; 0x37
 800bbfe:	b2d2      	uxtb	r2, r2
 800bc00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	4413      	add	r3, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	75fb      	strb	r3, [r7, #23]
 800bc1c:	7dfa      	ldrb	r2, [r7, #23]
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d3d3      	bcc.n	800bbcc <IntToUnicode+0x18>
  }
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
	...

0800bc34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc3c:	f107 0314 	add.w	r3, r7, #20
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	605a      	str	r2, [r3, #4]
 800bc46:	609a      	str	r2, [r3, #8]
 800bc48:	60da      	str	r2, [r3, #12]
 800bc4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc54:	d147      	bne.n	800bce6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc56:	2300      	movs	r3, #0
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	4b25      	ldr	r3, [pc, #148]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5e:	4a24      	ldr	r2, [pc, #144]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bc60:	f043 0301 	orr.w	r3, r3, #1
 800bc64:	6313      	str	r3, [r2, #48]	; 0x30
 800bc66:	4b22      	ldr	r3, [pc, #136]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]
 800bc70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bc72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	4619      	mov	r1, r3
 800bc86:	481b      	ldr	r0, [pc, #108]	; (800bcf4 <HAL_PCD_MspInit+0xc0>)
 800bc88:	f7f6 ff6c 	bl	8002b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc92:	2302      	movs	r3, #2
 800bc94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc9e:	230a      	movs	r3, #10
 800bca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bca2:	f107 0314 	add.w	r3, r7, #20
 800bca6:	4619      	mov	r1, r3
 800bca8:	4812      	ldr	r0, [pc, #72]	; (800bcf4 <HAL_PCD_MspInit+0xc0>)
 800bcaa:	f7f6 ff5b 	bl	8002b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bcae:	4b10      	ldr	r3, [pc, #64]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb2:	4a0f      	ldr	r2, [pc, #60]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bcb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb8:	6353      	str	r3, [r2, #52]	; 0x34
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bcc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc2:	4a0b      	ldr	r2, [pc, #44]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bcc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bcc8:	6453      	str	r3, [r2, #68]	; 0x44
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <HAL_PCD_MspInit+0xbc>)
 800bccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2100      	movs	r1, #0
 800bcda:	2043      	movs	r0, #67	; 0x43
 800bcdc:	f7f6 fb6b 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bce0:	2043      	movs	r0, #67	; 0x43
 800bce2:	f7f6 fb84 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bce6:	bf00      	nop
 800bce8:	3728      	adds	r7, #40	; 0x28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	40023800 	.word	0x40023800
 800bcf4:	40020000 	.word	0x40020000

0800bcf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4610      	mov	r0, r2
 800bd10:	f7fe fc37 	bl	800a582 <USBD_LL_SetupStage>
}
 800bd14:	bf00      	nop
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd2e:	78fa      	ldrb	r2, [r7, #3]
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	4613      	mov	r3, r2
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	4413      	add	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	440b      	add	r3, r1
 800bd3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	4619      	mov	r1, r3
 800bd46:	f7fe fc71 	bl	800a62c <USBD_LL_DataOutStage>
}
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b082      	sub	sp, #8
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd64:	78fa      	ldrb	r2, [r7, #3]
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	440b      	add	r3, r1
 800bd72:	334c      	adds	r3, #76	; 0x4c
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f7fe fd0a 	bl	800a792 <USBD_LL_DataInStage>
}
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe fe3e 	bl	800aa16 <USBD_LL_SOF>
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d102      	bne.n	800bdbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]
 800bdba:	e008      	b.n	800bdce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d102      	bne.n	800bdca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	73fb      	strb	r3, [r7, #15]
 800bdc8:	e001      	b.n	800bdce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bdca:	f7f5 ff3d 	bl	8001c48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdd4:	7bfa      	ldrb	r2, [r7, #15]
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe fdde 	bl	800a99a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fd86 	bl	800a8f6 <USBD_LL_Reset>
}
 800bdea:	bf00      	nop
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fdd9 	bl	800a9ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	6812      	ldr	r2, [r2, #0]
 800be16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d005      	beq.n	800be34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be28:	4b04      	ldr	r3, [pc, #16]	; (800be3c <HAL_PCD_SuspendCallback+0x48>)
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	4a03      	ldr	r2, [pc, #12]	; (800be3c <HAL_PCD_SuspendCallback+0x48>)
 800be2e:	f043 0306 	orr.w	r3, r3, #6
 800be32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	e000ed00 	.word	0xe000ed00

0800be40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe fdc9 	bl	800a9e6 <USBD_LL_Resume>
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be6e:	78fa      	ldrb	r2, [r7, #3]
 800be70:	4611      	mov	r1, r2
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe fe21 	bl	800aaba <USBD_LL_IsoOUTIncomplete>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe fddd 	bl	800aa56 <USBD_LL_IsoINIncomplete>
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe fe33 	bl	800ab1e <USBD_LL_DevConnected>
}
 800beb8:	bf00      	nop
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe fe30 	bl	800ab34 <USBD_LL_DevDisconnected>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d13c      	bne.n	800bf66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800beec:	4a20      	ldr	r2, [pc, #128]	; (800bf70 <USBD_LL_Init+0x94>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a1e      	ldr	r2, [pc, #120]	; (800bf70 <USBD_LL_Init+0x94>)
 800bef8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800befc:	4b1c      	ldr	r3, [pc, #112]	; (800bf70 <USBD_LL_Init+0x94>)
 800befe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bf04:	4b1a      	ldr	r3, [pc, #104]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf06:	2204      	movs	r2, #4
 800bf08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf0a:	4b19      	ldr	r3, [pc, #100]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf10:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf16:	4b16      	ldr	r3, [pc, #88]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf18:	2202      	movs	r2, #2
 800bf1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bf1c:	4b14      	ldr	r3, [pc, #80]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bf22:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 800bf28:	4b11      	ldr	r3, [pc, #68]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bf2e:	4b10      	ldr	r3, [pc, #64]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf30:	2201      	movs	r2, #1
 800bf32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf34:	4b0e      	ldr	r3, [pc, #56]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf3a:	480d      	ldr	r0, [pc, #52]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf3c:	f7f9 fc50 	bl	80057e0 <HAL_PCD_Init>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf46:	f7f5 fe7f 	bl	8001c48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf4a:	2180      	movs	r1, #128	; 0x80
 800bf4c:	4808      	ldr	r0, [pc, #32]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf4e:	f7fa fe90 	bl	8006c72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf52:	2240      	movs	r2, #64	; 0x40
 800bf54:	2100      	movs	r1, #0
 800bf56:	4806      	ldr	r0, [pc, #24]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf58:	f7fa fe44 	bl	8006be4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf5c:	2280      	movs	r2, #128	; 0x80
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4803      	ldr	r0, [pc, #12]	; (800bf70 <USBD_LL_Init+0x94>)
 800bf62:	f7fa fe3f 	bl	8006be4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000ae8 	.word	0x20000ae8

0800bf74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7f9 fd45 	bl	8005a1a <HAL_PCD_Start>
 800bf90:	4603      	mov	r3, r0
 800bf92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 f930 	bl	800c1fc <USBD_Get_USB_Status>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	4608      	mov	r0, r1
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	4603      	mov	r3, r0
 800bfba:	70fb      	strb	r3, [r7, #3]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70bb      	strb	r3, [r7, #2]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bfd2:	78bb      	ldrb	r3, [r7, #2]
 800bfd4:	883a      	ldrh	r2, [r7, #0]
 800bfd6:	78f9      	ldrb	r1, [r7, #3]
 800bfd8:	f7fa fa16 	bl	8006408 <HAL_PCD_EP_Open>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f90a 	bl	800c1fc <USBD_Get_USB_Status>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c010:	78fa      	ldrb	r2, [r7, #3]
 800c012:	4611      	mov	r1, r2
 800c014:	4618      	mov	r0, r3
 800c016:	f7fa fa5f 	bl	80064d8 <HAL_PCD_EP_Close>
 800c01a:	4603      	mov	r3, r0
 800c01c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f8eb 	bl	800c1fc <USBD_Get_USB_Status>
 800c026:	4603      	mov	r3, r0
 800c028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c04e:	78fa      	ldrb	r2, [r7, #3]
 800c050:	4611      	mov	r1, r2
 800c052:	4618      	mov	r0, r3
 800c054:	f7fa fb1f 	bl	8006696 <HAL_PCD_EP_SetStall>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f8cc 	bl	800c1fc <USBD_Get_USB_Status>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c068:	7bbb      	ldrb	r3, [r7, #14]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c08c:	78fa      	ldrb	r2, [r7, #3]
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f7fa fb64 	bl	800675e <HAL_PCD_EP_ClrStall>
 800c096:	4603      	mov	r3, r0
 800c098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 f8ad 	bl	800c1fc <USBD_Get_USB_Status>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	da0b      	bge.n	800c0e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0d2:	68f9      	ldr	r1, [r7, #12]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	333e      	adds	r3, #62	; 0x3e
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	e00b      	b.n	800c0fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0e4:	78fb      	ldrb	r3, [r7, #3]
 800c0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0ea:	68f9      	ldr	r1, [r7, #12]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c0fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c122:	78fa      	ldrb	r2, [r7, #3]
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7fa f949 	bl	80063be <HAL_PCD_SetAddress>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f862 	bl	800c1fc <USBD_Get_USB_Status>
 800c138:	4603      	mov	r3, r0
 800c13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b086      	sub	sp, #24
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	460b      	mov	r3, r1
 800c154:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c164:	7af9      	ldrb	r1, [r7, #11]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	f7fa fa4a 	bl	8006602 <HAL_PCD_EP_Transmit>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	4618      	mov	r0, r3
 800c176:	f000 f841 	bl	800c1fc <USBD_Get_USB_Status>
 800c17a:	4603      	mov	r3, r0
 800c17c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c17e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	607a      	str	r2, [r7, #4]
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	460b      	mov	r3, r1
 800c196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1a6:	7af9      	ldrb	r1, [r7, #11]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	f7fa f9de 	bl	800656c <HAL_PCD_EP_Receive>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f820 	bl	800c1fc <USBD_Get_USB_Status>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3718      	adds	r7, #24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1d4:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <USBD_static_malloc+0x18>)
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000ff4 	.word	0x20000ff4

0800c1e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]

}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	4603      	mov	r3, r0
 800c204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c20a:	79fb      	ldrb	r3, [r7, #7]
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d817      	bhi.n	800c240 <USBD_Get_USB_Status+0x44>
 800c210:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <USBD_Get_USB_Status+0x1c>)
 800c212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c216:	bf00      	nop
 800c218:	0800c229 	.word	0x0800c229
 800c21c:	0800c22f 	.word	0x0800c22f
 800c220:	0800c235 	.word	0x0800c235
 800c224:	0800c23b 	.word	0x0800c23b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	73fb      	strb	r3, [r7, #15]
    break;
 800c22c:	e00b      	b.n	800c246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c22e:	2303      	movs	r3, #3
 800c230:	73fb      	strb	r3, [r7, #15]
    break;
 800c232:	e008      	b.n	800c246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c234:	2301      	movs	r3, #1
 800c236:	73fb      	strb	r3, [r7, #15]
    break;
 800c238:	e005      	b.n	800c246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c23a:	2303      	movs	r3, #3
 800c23c:	73fb      	strb	r3, [r7, #15]
    break;
 800c23e:	e002      	b.n	800c246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c240:	2303      	movs	r3, #3
 800c242:	73fb      	strb	r3, [r7, #15]
    break;
 800c244:	bf00      	nop
  }
  return usb_status;
 800c246:	7bfb      	ldrb	r3, [r7, #15]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <__errno>:
 800c254:	4b01      	ldr	r3, [pc, #4]	; (800c25c <__errno+0x8>)
 800c256:	6818      	ldr	r0, [r3, #0]
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	20000138 	.word	0x20000138

0800c260 <__libc_init_array>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	4d0d      	ldr	r5, [pc, #52]	; (800c298 <__libc_init_array+0x38>)
 800c264:	4c0d      	ldr	r4, [pc, #52]	; (800c29c <__libc_init_array+0x3c>)
 800c266:	1b64      	subs	r4, r4, r5
 800c268:	10a4      	asrs	r4, r4, #2
 800c26a:	2600      	movs	r6, #0
 800c26c:	42a6      	cmp	r6, r4
 800c26e:	d109      	bne.n	800c284 <__libc_init_array+0x24>
 800c270:	4d0b      	ldr	r5, [pc, #44]	; (800c2a0 <__libc_init_array+0x40>)
 800c272:	4c0c      	ldr	r4, [pc, #48]	; (800c2a4 <__libc_init_array+0x44>)
 800c274:	f000 fc8e 	bl	800cb94 <_init>
 800c278:	1b64      	subs	r4, r4, r5
 800c27a:	10a4      	asrs	r4, r4, #2
 800c27c:	2600      	movs	r6, #0
 800c27e:	42a6      	cmp	r6, r4
 800c280:	d105      	bne.n	800c28e <__libc_init_array+0x2e>
 800c282:	bd70      	pop	{r4, r5, r6, pc}
 800c284:	f855 3b04 	ldr.w	r3, [r5], #4
 800c288:	4798      	blx	r3
 800c28a:	3601      	adds	r6, #1
 800c28c:	e7ee      	b.n	800c26c <__libc_init_array+0xc>
 800c28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c292:	4798      	blx	r3
 800c294:	3601      	adds	r6, #1
 800c296:	e7f2      	b.n	800c27e <__libc_init_array+0x1e>
 800c298:	0800de0c 	.word	0x0800de0c
 800c29c:	0800de0c 	.word	0x0800de0c
 800c2a0:	0800de0c 	.word	0x0800de0c
 800c2a4:	0800de10 	.word	0x0800de10

0800c2a8 <memset>:
 800c2a8:	4402      	add	r2, r0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d100      	bne.n	800c2b2 <memset+0xa>
 800c2b0:	4770      	bx	lr
 800c2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c2b6:	e7f9      	b.n	800c2ac <memset+0x4>

0800c2b8 <siprintf>:
 800c2b8:	b40e      	push	{r1, r2, r3}
 800c2ba:	b500      	push	{lr}
 800c2bc:	b09c      	sub	sp, #112	; 0x70
 800c2be:	ab1d      	add	r3, sp, #116	; 0x74
 800c2c0:	9002      	str	r0, [sp, #8]
 800c2c2:	9006      	str	r0, [sp, #24]
 800c2c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2c8:	4809      	ldr	r0, [pc, #36]	; (800c2f0 <siprintf+0x38>)
 800c2ca:	9107      	str	r1, [sp, #28]
 800c2cc:	9104      	str	r1, [sp, #16]
 800c2ce:	4909      	ldr	r1, [pc, #36]	; (800c2f4 <siprintf+0x3c>)
 800c2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d4:	9105      	str	r1, [sp, #20]
 800c2d6:	6800      	ldr	r0, [r0, #0]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	a902      	add	r1, sp, #8
 800c2dc:	f000 f868 	bl	800c3b0 <_svfiprintf_r>
 800c2e0:	9b02      	ldr	r3, [sp, #8]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]
 800c2e6:	b01c      	add	sp, #112	; 0x70
 800c2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2ec:	b003      	add	sp, #12
 800c2ee:	4770      	bx	lr
 800c2f0:	20000138 	.word	0x20000138
 800c2f4:	ffff0208 	.word	0xffff0208

0800c2f8 <__ssputs_r>:
 800c2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2fc:	688e      	ldr	r6, [r1, #8]
 800c2fe:	429e      	cmp	r6, r3
 800c300:	4682      	mov	sl, r0
 800c302:	460c      	mov	r4, r1
 800c304:	4690      	mov	r8, r2
 800c306:	461f      	mov	r7, r3
 800c308:	d838      	bhi.n	800c37c <__ssputs_r+0x84>
 800c30a:	898a      	ldrh	r2, [r1, #12]
 800c30c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c310:	d032      	beq.n	800c378 <__ssputs_r+0x80>
 800c312:	6825      	ldr	r5, [r4, #0]
 800c314:	6909      	ldr	r1, [r1, #16]
 800c316:	eba5 0901 	sub.w	r9, r5, r1
 800c31a:	6965      	ldr	r5, [r4, #20]
 800c31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c324:	3301      	adds	r3, #1
 800c326:	444b      	add	r3, r9
 800c328:	106d      	asrs	r5, r5, #1
 800c32a:	429d      	cmp	r5, r3
 800c32c:	bf38      	it	cc
 800c32e:	461d      	movcc	r5, r3
 800c330:	0553      	lsls	r3, r2, #21
 800c332:	d531      	bpl.n	800c398 <__ssputs_r+0xa0>
 800c334:	4629      	mov	r1, r5
 800c336:	f000 fb63 	bl	800ca00 <_malloc_r>
 800c33a:	4606      	mov	r6, r0
 800c33c:	b950      	cbnz	r0, 800c354 <__ssputs_r+0x5c>
 800c33e:	230c      	movs	r3, #12
 800c340:	f8ca 3000 	str.w	r3, [sl]
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c34a:	81a3      	strh	r3, [r4, #12]
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c354:	6921      	ldr	r1, [r4, #16]
 800c356:	464a      	mov	r2, r9
 800c358:	f000 fabe 	bl	800c8d8 <memcpy>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	6126      	str	r6, [r4, #16]
 800c36a:	6165      	str	r5, [r4, #20]
 800c36c:	444e      	add	r6, r9
 800c36e:	eba5 0509 	sub.w	r5, r5, r9
 800c372:	6026      	str	r6, [r4, #0]
 800c374:	60a5      	str	r5, [r4, #8]
 800c376:	463e      	mov	r6, r7
 800c378:	42be      	cmp	r6, r7
 800c37a:	d900      	bls.n	800c37e <__ssputs_r+0x86>
 800c37c:	463e      	mov	r6, r7
 800c37e:	6820      	ldr	r0, [r4, #0]
 800c380:	4632      	mov	r2, r6
 800c382:	4641      	mov	r1, r8
 800c384:	f000 fab6 	bl	800c8f4 <memmove>
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	1b9b      	subs	r3, r3, r6
 800c38c:	60a3      	str	r3, [r4, #8]
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	4433      	add	r3, r6
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	2000      	movs	r0, #0
 800c396:	e7db      	b.n	800c350 <__ssputs_r+0x58>
 800c398:	462a      	mov	r2, r5
 800c39a:	f000 fba5 	bl	800cae8 <_realloc_r>
 800c39e:	4606      	mov	r6, r0
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d1e1      	bne.n	800c368 <__ssputs_r+0x70>
 800c3a4:	6921      	ldr	r1, [r4, #16]
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	f000 fabe 	bl	800c928 <_free_r>
 800c3ac:	e7c7      	b.n	800c33e <__ssputs_r+0x46>
	...

0800c3b0 <_svfiprintf_r>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	4698      	mov	r8, r3
 800c3b6:	898b      	ldrh	r3, [r1, #12]
 800c3b8:	061b      	lsls	r3, r3, #24
 800c3ba:	b09d      	sub	sp, #116	; 0x74
 800c3bc:	4607      	mov	r7, r0
 800c3be:	460d      	mov	r5, r1
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	d50e      	bpl.n	800c3e2 <_svfiprintf_r+0x32>
 800c3c4:	690b      	ldr	r3, [r1, #16]
 800c3c6:	b963      	cbnz	r3, 800c3e2 <_svfiprintf_r+0x32>
 800c3c8:	2140      	movs	r1, #64	; 0x40
 800c3ca:	f000 fb19 	bl	800ca00 <_malloc_r>
 800c3ce:	6028      	str	r0, [r5, #0]
 800c3d0:	6128      	str	r0, [r5, #16]
 800c3d2:	b920      	cbnz	r0, 800c3de <_svfiprintf_r+0x2e>
 800c3d4:	230c      	movs	r3, #12
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3dc:	e0d1      	b.n	800c582 <_svfiprintf_r+0x1d2>
 800c3de:	2340      	movs	r3, #64	; 0x40
 800c3e0:	616b      	str	r3, [r5, #20]
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e6:	2320      	movs	r3, #32
 800c3e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3f0:	2330      	movs	r3, #48	; 0x30
 800c3f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c59c <_svfiprintf_r+0x1ec>
 800c3f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3fa:	f04f 0901 	mov.w	r9, #1
 800c3fe:	4623      	mov	r3, r4
 800c400:	469a      	mov	sl, r3
 800c402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c406:	b10a      	cbz	r2, 800c40c <_svfiprintf_r+0x5c>
 800c408:	2a25      	cmp	r2, #37	; 0x25
 800c40a:	d1f9      	bne.n	800c400 <_svfiprintf_r+0x50>
 800c40c:	ebba 0b04 	subs.w	fp, sl, r4
 800c410:	d00b      	beq.n	800c42a <_svfiprintf_r+0x7a>
 800c412:	465b      	mov	r3, fp
 800c414:	4622      	mov	r2, r4
 800c416:	4629      	mov	r1, r5
 800c418:	4638      	mov	r0, r7
 800c41a:	f7ff ff6d 	bl	800c2f8 <__ssputs_r>
 800c41e:	3001      	adds	r0, #1
 800c420:	f000 80aa 	beq.w	800c578 <_svfiprintf_r+0x1c8>
 800c424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c426:	445a      	add	r2, fp
 800c428:	9209      	str	r2, [sp, #36]	; 0x24
 800c42a:	f89a 3000 	ldrb.w	r3, [sl]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f000 80a2 	beq.w	800c578 <_svfiprintf_r+0x1c8>
 800c434:	2300      	movs	r3, #0
 800c436:	f04f 32ff 	mov.w	r2, #4294967295
 800c43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c43e:	f10a 0a01 	add.w	sl, sl, #1
 800c442:	9304      	str	r3, [sp, #16]
 800c444:	9307      	str	r3, [sp, #28]
 800c446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c44a:	931a      	str	r3, [sp, #104]	; 0x68
 800c44c:	4654      	mov	r4, sl
 800c44e:	2205      	movs	r2, #5
 800c450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c454:	4851      	ldr	r0, [pc, #324]	; (800c59c <_svfiprintf_r+0x1ec>)
 800c456:	f7f3 febb 	bl	80001d0 <memchr>
 800c45a:	9a04      	ldr	r2, [sp, #16]
 800c45c:	b9d8      	cbnz	r0, 800c496 <_svfiprintf_r+0xe6>
 800c45e:	06d0      	lsls	r0, r2, #27
 800c460:	bf44      	itt	mi
 800c462:	2320      	movmi	r3, #32
 800c464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c468:	0711      	lsls	r1, r2, #28
 800c46a:	bf44      	itt	mi
 800c46c:	232b      	movmi	r3, #43	; 0x2b
 800c46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c472:	f89a 3000 	ldrb.w	r3, [sl]
 800c476:	2b2a      	cmp	r3, #42	; 0x2a
 800c478:	d015      	beq.n	800c4a6 <_svfiprintf_r+0xf6>
 800c47a:	9a07      	ldr	r2, [sp, #28]
 800c47c:	4654      	mov	r4, sl
 800c47e:	2000      	movs	r0, #0
 800c480:	f04f 0c0a 	mov.w	ip, #10
 800c484:	4621      	mov	r1, r4
 800c486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c48a:	3b30      	subs	r3, #48	; 0x30
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	d94e      	bls.n	800c52e <_svfiprintf_r+0x17e>
 800c490:	b1b0      	cbz	r0, 800c4c0 <_svfiprintf_r+0x110>
 800c492:	9207      	str	r2, [sp, #28]
 800c494:	e014      	b.n	800c4c0 <_svfiprintf_r+0x110>
 800c496:	eba0 0308 	sub.w	r3, r0, r8
 800c49a:	fa09 f303 	lsl.w	r3, r9, r3
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	46a2      	mov	sl, r4
 800c4a4:	e7d2      	b.n	800c44c <_svfiprintf_r+0x9c>
 800c4a6:	9b03      	ldr	r3, [sp, #12]
 800c4a8:	1d19      	adds	r1, r3, #4
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	9103      	str	r1, [sp, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	bfbb      	ittet	lt
 800c4b2:	425b      	neglt	r3, r3
 800c4b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4b8:	9307      	strge	r3, [sp, #28]
 800c4ba:	9307      	strlt	r3, [sp, #28]
 800c4bc:	bfb8      	it	lt
 800c4be:	9204      	strlt	r2, [sp, #16]
 800c4c0:	7823      	ldrb	r3, [r4, #0]
 800c4c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4c4:	d10c      	bne.n	800c4e0 <_svfiprintf_r+0x130>
 800c4c6:	7863      	ldrb	r3, [r4, #1]
 800c4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ca:	d135      	bne.n	800c538 <_svfiprintf_r+0x188>
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	1d1a      	adds	r2, r3, #4
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	9203      	str	r2, [sp, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	bfb8      	it	lt
 800c4d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4dc:	3402      	adds	r4, #2
 800c4de:	9305      	str	r3, [sp, #20]
 800c4e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5ac <_svfiprintf_r+0x1fc>
 800c4e4:	7821      	ldrb	r1, [r4, #0]
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	4650      	mov	r0, sl
 800c4ea:	f7f3 fe71 	bl	80001d0 <memchr>
 800c4ee:	b140      	cbz	r0, 800c502 <_svfiprintf_r+0x152>
 800c4f0:	2340      	movs	r3, #64	; 0x40
 800c4f2:	eba0 000a 	sub.w	r0, r0, sl
 800c4f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	4303      	orrs	r3, r0
 800c4fe:	3401      	adds	r4, #1
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c506:	4826      	ldr	r0, [pc, #152]	; (800c5a0 <_svfiprintf_r+0x1f0>)
 800c508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c50c:	2206      	movs	r2, #6
 800c50e:	f7f3 fe5f 	bl	80001d0 <memchr>
 800c512:	2800      	cmp	r0, #0
 800c514:	d038      	beq.n	800c588 <_svfiprintf_r+0x1d8>
 800c516:	4b23      	ldr	r3, [pc, #140]	; (800c5a4 <_svfiprintf_r+0x1f4>)
 800c518:	bb1b      	cbnz	r3, 800c562 <_svfiprintf_r+0x1b2>
 800c51a:	9b03      	ldr	r3, [sp, #12]
 800c51c:	3307      	adds	r3, #7
 800c51e:	f023 0307 	bic.w	r3, r3, #7
 800c522:	3308      	adds	r3, #8
 800c524:	9303      	str	r3, [sp, #12]
 800c526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c528:	4433      	add	r3, r6
 800c52a:	9309      	str	r3, [sp, #36]	; 0x24
 800c52c:	e767      	b.n	800c3fe <_svfiprintf_r+0x4e>
 800c52e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c532:	460c      	mov	r4, r1
 800c534:	2001      	movs	r0, #1
 800c536:	e7a5      	b.n	800c484 <_svfiprintf_r+0xd4>
 800c538:	2300      	movs	r3, #0
 800c53a:	3401      	adds	r4, #1
 800c53c:	9305      	str	r3, [sp, #20]
 800c53e:	4619      	mov	r1, r3
 800c540:	f04f 0c0a 	mov.w	ip, #10
 800c544:	4620      	mov	r0, r4
 800c546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c54a:	3a30      	subs	r2, #48	; 0x30
 800c54c:	2a09      	cmp	r2, #9
 800c54e:	d903      	bls.n	800c558 <_svfiprintf_r+0x1a8>
 800c550:	2b00      	cmp	r3, #0
 800c552:	d0c5      	beq.n	800c4e0 <_svfiprintf_r+0x130>
 800c554:	9105      	str	r1, [sp, #20]
 800c556:	e7c3      	b.n	800c4e0 <_svfiprintf_r+0x130>
 800c558:	fb0c 2101 	mla	r1, ip, r1, r2
 800c55c:	4604      	mov	r4, r0
 800c55e:	2301      	movs	r3, #1
 800c560:	e7f0      	b.n	800c544 <_svfiprintf_r+0x194>
 800c562:	ab03      	add	r3, sp, #12
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	462a      	mov	r2, r5
 800c568:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <_svfiprintf_r+0x1f8>)
 800c56a:	a904      	add	r1, sp, #16
 800c56c:	4638      	mov	r0, r7
 800c56e:	f3af 8000 	nop.w
 800c572:	1c42      	adds	r2, r0, #1
 800c574:	4606      	mov	r6, r0
 800c576:	d1d6      	bne.n	800c526 <_svfiprintf_r+0x176>
 800c578:	89ab      	ldrh	r3, [r5, #12]
 800c57a:	065b      	lsls	r3, r3, #25
 800c57c:	f53f af2c 	bmi.w	800c3d8 <_svfiprintf_r+0x28>
 800c580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c582:	b01d      	add	sp, #116	; 0x74
 800c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c588:	ab03      	add	r3, sp, #12
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	462a      	mov	r2, r5
 800c58e:	4b06      	ldr	r3, [pc, #24]	; (800c5a8 <_svfiprintf_r+0x1f8>)
 800c590:	a904      	add	r1, sp, #16
 800c592:	4638      	mov	r0, r7
 800c594:	f000 f87a 	bl	800c68c <_printf_i>
 800c598:	e7eb      	b.n	800c572 <_svfiprintf_r+0x1c2>
 800c59a:	bf00      	nop
 800c59c:	0800ddd0 	.word	0x0800ddd0
 800c5a0:	0800ddda 	.word	0x0800ddda
 800c5a4:	00000000 	.word	0x00000000
 800c5a8:	0800c2f9 	.word	0x0800c2f9
 800c5ac:	0800ddd6 	.word	0x0800ddd6

0800c5b0 <_printf_common>:
 800c5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	4616      	mov	r6, r2
 800c5b6:	4699      	mov	r9, r3
 800c5b8:	688a      	ldr	r2, [r1, #8]
 800c5ba:	690b      	ldr	r3, [r1, #16]
 800c5bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	bfb8      	it	lt
 800c5c4:	4613      	movlt	r3, r2
 800c5c6:	6033      	str	r3, [r6, #0]
 800c5c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	b10a      	cbz	r2, 800c5d6 <_printf_common+0x26>
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	6033      	str	r3, [r6, #0]
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	0699      	lsls	r1, r3, #26
 800c5da:	bf42      	ittt	mi
 800c5dc:	6833      	ldrmi	r3, [r6, #0]
 800c5de:	3302      	addmi	r3, #2
 800c5e0:	6033      	strmi	r3, [r6, #0]
 800c5e2:	6825      	ldr	r5, [r4, #0]
 800c5e4:	f015 0506 	ands.w	r5, r5, #6
 800c5e8:	d106      	bne.n	800c5f8 <_printf_common+0x48>
 800c5ea:	f104 0a19 	add.w	sl, r4, #25
 800c5ee:	68e3      	ldr	r3, [r4, #12]
 800c5f0:	6832      	ldr	r2, [r6, #0]
 800c5f2:	1a9b      	subs	r3, r3, r2
 800c5f4:	42ab      	cmp	r3, r5
 800c5f6:	dc26      	bgt.n	800c646 <_printf_common+0x96>
 800c5f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5fc:	1e13      	subs	r3, r2, #0
 800c5fe:	6822      	ldr	r2, [r4, #0]
 800c600:	bf18      	it	ne
 800c602:	2301      	movne	r3, #1
 800c604:	0692      	lsls	r2, r2, #26
 800c606:	d42b      	bmi.n	800c660 <_printf_common+0xb0>
 800c608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c60c:	4649      	mov	r1, r9
 800c60e:	4638      	mov	r0, r7
 800c610:	47c0      	blx	r8
 800c612:	3001      	adds	r0, #1
 800c614:	d01e      	beq.n	800c654 <_printf_common+0xa4>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	68e5      	ldr	r5, [r4, #12]
 800c61a:	6832      	ldr	r2, [r6, #0]
 800c61c:	f003 0306 	and.w	r3, r3, #6
 800c620:	2b04      	cmp	r3, #4
 800c622:	bf08      	it	eq
 800c624:	1aad      	subeq	r5, r5, r2
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	6922      	ldr	r2, [r4, #16]
 800c62a:	bf0c      	ite	eq
 800c62c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c630:	2500      	movne	r5, #0
 800c632:	4293      	cmp	r3, r2
 800c634:	bfc4      	itt	gt
 800c636:	1a9b      	subgt	r3, r3, r2
 800c638:	18ed      	addgt	r5, r5, r3
 800c63a:	2600      	movs	r6, #0
 800c63c:	341a      	adds	r4, #26
 800c63e:	42b5      	cmp	r5, r6
 800c640:	d11a      	bne.n	800c678 <_printf_common+0xc8>
 800c642:	2000      	movs	r0, #0
 800c644:	e008      	b.n	800c658 <_printf_common+0xa8>
 800c646:	2301      	movs	r3, #1
 800c648:	4652      	mov	r2, sl
 800c64a:	4649      	mov	r1, r9
 800c64c:	4638      	mov	r0, r7
 800c64e:	47c0      	blx	r8
 800c650:	3001      	adds	r0, #1
 800c652:	d103      	bne.n	800c65c <_printf_common+0xac>
 800c654:	f04f 30ff 	mov.w	r0, #4294967295
 800c658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65c:	3501      	adds	r5, #1
 800c65e:	e7c6      	b.n	800c5ee <_printf_common+0x3e>
 800c660:	18e1      	adds	r1, r4, r3
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	2030      	movs	r0, #48	; 0x30
 800c666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c66a:	4422      	add	r2, r4
 800c66c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c674:	3302      	adds	r3, #2
 800c676:	e7c7      	b.n	800c608 <_printf_common+0x58>
 800c678:	2301      	movs	r3, #1
 800c67a:	4622      	mov	r2, r4
 800c67c:	4649      	mov	r1, r9
 800c67e:	4638      	mov	r0, r7
 800c680:	47c0      	blx	r8
 800c682:	3001      	adds	r0, #1
 800c684:	d0e6      	beq.n	800c654 <_printf_common+0xa4>
 800c686:	3601      	adds	r6, #1
 800c688:	e7d9      	b.n	800c63e <_printf_common+0x8e>
	...

0800c68c <_printf_i>:
 800c68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	7e0f      	ldrb	r7, [r1, #24]
 800c692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c694:	2f78      	cmp	r7, #120	; 0x78
 800c696:	4691      	mov	r9, r2
 800c698:	4680      	mov	r8, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	469a      	mov	sl, r3
 800c69e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c6a2:	d807      	bhi.n	800c6b4 <_printf_i+0x28>
 800c6a4:	2f62      	cmp	r7, #98	; 0x62
 800c6a6:	d80a      	bhi.n	800c6be <_printf_i+0x32>
 800c6a8:	2f00      	cmp	r7, #0
 800c6aa:	f000 80d8 	beq.w	800c85e <_printf_i+0x1d2>
 800c6ae:	2f58      	cmp	r7, #88	; 0x58
 800c6b0:	f000 80a3 	beq.w	800c7fa <_printf_i+0x16e>
 800c6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6bc:	e03a      	b.n	800c734 <_printf_i+0xa8>
 800c6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6c2:	2b15      	cmp	r3, #21
 800c6c4:	d8f6      	bhi.n	800c6b4 <_printf_i+0x28>
 800c6c6:	a101      	add	r1, pc, #4	; (adr r1, 800c6cc <_printf_i+0x40>)
 800c6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6cc:	0800c725 	.word	0x0800c725
 800c6d0:	0800c739 	.word	0x0800c739
 800c6d4:	0800c6b5 	.word	0x0800c6b5
 800c6d8:	0800c6b5 	.word	0x0800c6b5
 800c6dc:	0800c6b5 	.word	0x0800c6b5
 800c6e0:	0800c6b5 	.word	0x0800c6b5
 800c6e4:	0800c739 	.word	0x0800c739
 800c6e8:	0800c6b5 	.word	0x0800c6b5
 800c6ec:	0800c6b5 	.word	0x0800c6b5
 800c6f0:	0800c6b5 	.word	0x0800c6b5
 800c6f4:	0800c6b5 	.word	0x0800c6b5
 800c6f8:	0800c845 	.word	0x0800c845
 800c6fc:	0800c769 	.word	0x0800c769
 800c700:	0800c827 	.word	0x0800c827
 800c704:	0800c6b5 	.word	0x0800c6b5
 800c708:	0800c6b5 	.word	0x0800c6b5
 800c70c:	0800c867 	.word	0x0800c867
 800c710:	0800c6b5 	.word	0x0800c6b5
 800c714:	0800c769 	.word	0x0800c769
 800c718:	0800c6b5 	.word	0x0800c6b5
 800c71c:	0800c6b5 	.word	0x0800c6b5
 800c720:	0800c82f 	.word	0x0800c82f
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	1d1a      	adds	r2, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	602a      	str	r2, [r5, #0]
 800c72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c734:	2301      	movs	r3, #1
 800c736:	e0a3      	b.n	800c880 <_printf_i+0x1f4>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	6829      	ldr	r1, [r5, #0]
 800c73c:	0606      	lsls	r6, r0, #24
 800c73e:	f101 0304 	add.w	r3, r1, #4
 800c742:	d50a      	bpl.n	800c75a <_printf_i+0xce>
 800c744:	680e      	ldr	r6, [r1, #0]
 800c746:	602b      	str	r3, [r5, #0]
 800c748:	2e00      	cmp	r6, #0
 800c74a:	da03      	bge.n	800c754 <_printf_i+0xc8>
 800c74c:	232d      	movs	r3, #45	; 0x2d
 800c74e:	4276      	negs	r6, r6
 800c750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c754:	485e      	ldr	r0, [pc, #376]	; (800c8d0 <_printf_i+0x244>)
 800c756:	230a      	movs	r3, #10
 800c758:	e019      	b.n	800c78e <_printf_i+0x102>
 800c75a:	680e      	ldr	r6, [r1, #0]
 800c75c:	602b      	str	r3, [r5, #0]
 800c75e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c762:	bf18      	it	ne
 800c764:	b236      	sxthne	r6, r6
 800c766:	e7ef      	b.n	800c748 <_printf_i+0xbc>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	6820      	ldr	r0, [r4, #0]
 800c76c:	1d19      	adds	r1, r3, #4
 800c76e:	6029      	str	r1, [r5, #0]
 800c770:	0601      	lsls	r1, r0, #24
 800c772:	d501      	bpl.n	800c778 <_printf_i+0xec>
 800c774:	681e      	ldr	r6, [r3, #0]
 800c776:	e002      	b.n	800c77e <_printf_i+0xf2>
 800c778:	0646      	lsls	r6, r0, #25
 800c77a:	d5fb      	bpl.n	800c774 <_printf_i+0xe8>
 800c77c:	881e      	ldrh	r6, [r3, #0]
 800c77e:	4854      	ldr	r0, [pc, #336]	; (800c8d0 <_printf_i+0x244>)
 800c780:	2f6f      	cmp	r7, #111	; 0x6f
 800c782:	bf0c      	ite	eq
 800c784:	2308      	moveq	r3, #8
 800c786:	230a      	movne	r3, #10
 800c788:	2100      	movs	r1, #0
 800c78a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c78e:	6865      	ldr	r5, [r4, #4]
 800c790:	60a5      	str	r5, [r4, #8]
 800c792:	2d00      	cmp	r5, #0
 800c794:	bfa2      	ittt	ge
 800c796:	6821      	ldrge	r1, [r4, #0]
 800c798:	f021 0104 	bicge.w	r1, r1, #4
 800c79c:	6021      	strge	r1, [r4, #0]
 800c79e:	b90e      	cbnz	r6, 800c7a4 <_printf_i+0x118>
 800c7a0:	2d00      	cmp	r5, #0
 800c7a2:	d04d      	beq.n	800c840 <_printf_i+0x1b4>
 800c7a4:	4615      	mov	r5, r2
 800c7a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7aa:	fb03 6711 	mls	r7, r3, r1, r6
 800c7ae:	5dc7      	ldrb	r7, [r0, r7]
 800c7b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7b4:	4637      	mov	r7, r6
 800c7b6:	42bb      	cmp	r3, r7
 800c7b8:	460e      	mov	r6, r1
 800c7ba:	d9f4      	bls.n	800c7a6 <_printf_i+0x11a>
 800c7bc:	2b08      	cmp	r3, #8
 800c7be:	d10b      	bne.n	800c7d8 <_printf_i+0x14c>
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	07de      	lsls	r6, r3, #31
 800c7c4:	d508      	bpl.n	800c7d8 <_printf_i+0x14c>
 800c7c6:	6923      	ldr	r3, [r4, #16]
 800c7c8:	6861      	ldr	r1, [r4, #4]
 800c7ca:	4299      	cmp	r1, r3
 800c7cc:	bfde      	ittt	le
 800c7ce:	2330      	movle	r3, #48	; 0x30
 800c7d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7d8:	1b52      	subs	r2, r2, r5
 800c7da:	6122      	str	r2, [r4, #16]
 800c7dc:	f8cd a000 	str.w	sl, [sp]
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	aa03      	add	r2, sp, #12
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	f7ff fee2 	bl	800c5b0 <_printf_common>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d14c      	bne.n	800c88a <_printf_i+0x1fe>
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f4:	b004      	add	sp, #16
 800c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fa:	4835      	ldr	r0, [pc, #212]	; (800c8d0 <_printf_i+0x244>)
 800c7fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c800:	6829      	ldr	r1, [r5, #0]
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	f851 6b04 	ldr.w	r6, [r1], #4
 800c808:	6029      	str	r1, [r5, #0]
 800c80a:	061d      	lsls	r5, r3, #24
 800c80c:	d514      	bpl.n	800c838 <_printf_i+0x1ac>
 800c80e:	07df      	lsls	r7, r3, #31
 800c810:	bf44      	itt	mi
 800c812:	f043 0320 	orrmi.w	r3, r3, #32
 800c816:	6023      	strmi	r3, [r4, #0]
 800c818:	b91e      	cbnz	r6, 800c822 <_printf_i+0x196>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	f023 0320 	bic.w	r3, r3, #32
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	2310      	movs	r3, #16
 800c824:	e7b0      	b.n	800c788 <_printf_i+0xfc>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	f043 0320 	orr.w	r3, r3, #32
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	2378      	movs	r3, #120	; 0x78
 800c830:	4828      	ldr	r0, [pc, #160]	; (800c8d4 <_printf_i+0x248>)
 800c832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c836:	e7e3      	b.n	800c800 <_printf_i+0x174>
 800c838:	0659      	lsls	r1, r3, #25
 800c83a:	bf48      	it	mi
 800c83c:	b2b6      	uxthmi	r6, r6
 800c83e:	e7e6      	b.n	800c80e <_printf_i+0x182>
 800c840:	4615      	mov	r5, r2
 800c842:	e7bb      	b.n	800c7bc <_printf_i+0x130>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	6826      	ldr	r6, [r4, #0]
 800c848:	6961      	ldr	r1, [r4, #20]
 800c84a:	1d18      	adds	r0, r3, #4
 800c84c:	6028      	str	r0, [r5, #0]
 800c84e:	0635      	lsls	r5, r6, #24
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	d501      	bpl.n	800c858 <_printf_i+0x1cc>
 800c854:	6019      	str	r1, [r3, #0]
 800c856:	e002      	b.n	800c85e <_printf_i+0x1d2>
 800c858:	0670      	lsls	r0, r6, #25
 800c85a:	d5fb      	bpl.n	800c854 <_printf_i+0x1c8>
 800c85c:	8019      	strh	r1, [r3, #0]
 800c85e:	2300      	movs	r3, #0
 800c860:	6123      	str	r3, [r4, #16]
 800c862:	4615      	mov	r5, r2
 800c864:	e7ba      	b.n	800c7dc <_printf_i+0x150>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	1d1a      	adds	r2, r3, #4
 800c86a:	602a      	str	r2, [r5, #0]
 800c86c:	681d      	ldr	r5, [r3, #0]
 800c86e:	6862      	ldr	r2, [r4, #4]
 800c870:	2100      	movs	r1, #0
 800c872:	4628      	mov	r0, r5
 800c874:	f7f3 fcac 	bl	80001d0 <memchr>
 800c878:	b108      	cbz	r0, 800c87e <_printf_i+0x1f2>
 800c87a:	1b40      	subs	r0, r0, r5
 800c87c:	6060      	str	r0, [r4, #4]
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	2300      	movs	r3, #0
 800c884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c888:	e7a8      	b.n	800c7dc <_printf_i+0x150>
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	462a      	mov	r2, r5
 800c88e:	4649      	mov	r1, r9
 800c890:	4640      	mov	r0, r8
 800c892:	47d0      	blx	sl
 800c894:	3001      	adds	r0, #1
 800c896:	d0ab      	beq.n	800c7f0 <_printf_i+0x164>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	079b      	lsls	r3, r3, #30
 800c89c:	d413      	bmi.n	800c8c6 <_printf_i+0x23a>
 800c89e:	68e0      	ldr	r0, [r4, #12]
 800c8a0:	9b03      	ldr	r3, [sp, #12]
 800c8a2:	4298      	cmp	r0, r3
 800c8a4:	bfb8      	it	lt
 800c8a6:	4618      	movlt	r0, r3
 800c8a8:	e7a4      	b.n	800c7f4 <_printf_i+0x168>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	47d0      	blx	sl
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d09b      	beq.n	800c7f0 <_printf_i+0x164>
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	68e3      	ldr	r3, [r4, #12]
 800c8bc:	9903      	ldr	r1, [sp, #12]
 800c8be:	1a5b      	subs	r3, r3, r1
 800c8c0:	42ab      	cmp	r3, r5
 800c8c2:	dcf2      	bgt.n	800c8aa <_printf_i+0x21e>
 800c8c4:	e7eb      	b.n	800c89e <_printf_i+0x212>
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	f104 0619 	add.w	r6, r4, #25
 800c8cc:	e7f5      	b.n	800c8ba <_printf_i+0x22e>
 800c8ce:	bf00      	nop
 800c8d0:	0800dde1 	.word	0x0800dde1
 800c8d4:	0800ddf2 	.word	0x0800ddf2

0800c8d8 <memcpy>:
 800c8d8:	440a      	add	r2, r1
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8e0:	d100      	bne.n	800c8e4 <memcpy+0xc>
 800c8e2:	4770      	bx	lr
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	d1f9      	bne.n	800c8e6 <memcpy+0xe>
 800c8f2:	bd10      	pop	{r4, pc}

0800c8f4 <memmove>:
 800c8f4:	4288      	cmp	r0, r1
 800c8f6:	b510      	push	{r4, lr}
 800c8f8:	eb01 0402 	add.w	r4, r1, r2
 800c8fc:	d902      	bls.n	800c904 <memmove+0x10>
 800c8fe:	4284      	cmp	r4, r0
 800c900:	4623      	mov	r3, r4
 800c902:	d807      	bhi.n	800c914 <memmove+0x20>
 800c904:	1e43      	subs	r3, r0, #1
 800c906:	42a1      	cmp	r1, r4
 800c908:	d008      	beq.n	800c91c <memmove+0x28>
 800c90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c912:	e7f8      	b.n	800c906 <memmove+0x12>
 800c914:	4402      	add	r2, r0
 800c916:	4601      	mov	r1, r0
 800c918:	428a      	cmp	r2, r1
 800c91a:	d100      	bne.n	800c91e <memmove+0x2a>
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c926:	e7f7      	b.n	800c918 <memmove+0x24>

0800c928 <_free_r>:
 800c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c92a:	2900      	cmp	r1, #0
 800c92c:	d044      	beq.n	800c9b8 <_free_r+0x90>
 800c92e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c932:	9001      	str	r0, [sp, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f1a1 0404 	sub.w	r4, r1, #4
 800c93a:	bfb8      	it	lt
 800c93c:	18e4      	addlt	r4, r4, r3
 800c93e:	f000 f913 	bl	800cb68 <__malloc_lock>
 800c942:	4a1e      	ldr	r2, [pc, #120]	; (800c9bc <_free_r+0x94>)
 800c944:	9801      	ldr	r0, [sp, #4]
 800c946:	6813      	ldr	r3, [r2, #0]
 800c948:	b933      	cbnz	r3, 800c958 <_free_r+0x30>
 800c94a:	6063      	str	r3, [r4, #4]
 800c94c:	6014      	str	r4, [r2, #0]
 800c94e:	b003      	add	sp, #12
 800c950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c954:	f000 b90e 	b.w	800cb74 <__malloc_unlock>
 800c958:	42a3      	cmp	r3, r4
 800c95a:	d908      	bls.n	800c96e <_free_r+0x46>
 800c95c:	6825      	ldr	r5, [r4, #0]
 800c95e:	1961      	adds	r1, r4, r5
 800c960:	428b      	cmp	r3, r1
 800c962:	bf01      	itttt	eq
 800c964:	6819      	ldreq	r1, [r3, #0]
 800c966:	685b      	ldreq	r3, [r3, #4]
 800c968:	1949      	addeq	r1, r1, r5
 800c96a:	6021      	streq	r1, [r4, #0]
 800c96c:	e7ed      	b.n	800c94a <_free_r+0x22>
 800c96e:	461a      	mov	r2, r3
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	b10b      	cbz	r3, 800c978 <_free_r+0x50>
 800c974:	42a3      	cmp	r3, r4
 800c976:	d9fa      	bls.n	800c96e <_free_r+0x46>
 800c978:	6811      	ldr	r1, [r2, #0]
 800c97a:	1855      	adds	r5, r2, r1
 800c97c:	42a5      	cmp	r5, r4
 800c97e:	d10b      	bne.n	800c998 <_free_r+0x70>
 800c980:	6824      	ldr	r4, [r4, #0]
 800c982:	4421      	add	r1, r4
 800c984:	1854      	adds	r4, r2, r1
 800c986:	42a3      	cmp	r3, r4
 800c988:	6011      	str	r1, [r2, #0]
 800c98a:	d1e0      	bne.n	800c94e <_free_r+0x26>
 800c98c:	681c      	ldr	r4, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	6053      	str	r3, [r2, #4]
 800c992:	4421      	add	r1, r4
 800c994:	6011      	str	r1, [r2, #0]
 800c996:	e7da      	b.n	800c94e <_free_r+0x26>
 800c998:	d902      	bls.n	800c9a0 <_free_r+0x78>
 800c99a:	230c      	movs	r3, #12
 800c99c:	6003      	str	r3, [r0, #0]
 800c99e:	e7d6      	b.n	800c94e <_free_r+0x26>
 800c9a0:	6825      	ldr	r5, [r4, #0]
 800c9a2:	1961      	adds	r1, r4, r5
 800c9a4:	428b      	cmp	r3, r1
 800c9a6:	bf04      	itt	eq
 800c9a8:	6819      	ldreq	r1, [r3, #0]
 800c9aa:	685b      	ldreq	r3, [r3, #4]
 800c9ac:	6063      	str	r3, [r4, #4]
 800c9ae:	bf04      	itt	eq
 800c9b0:	1949      	addeq	r1, r1, r5
 800c9b2:	6021      	streq	r1, [r4, #0]
 800c9b4:	6054      	str	r4, [r2, #4]
 800c9b6:	e7ca      	b.n	800c94e <_free_r+0x26>
 800c9b8:	b003      	add	sp, #12
 800c9ba:	bd30      	pop	{r4, r5, pc}
 800c9bc:	20001008 	.word	0x20001008

0800c9c0 <sbrk_aligned>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	4e0e      	ldr	r6, [pc, #56]	; (800c9fc <sbrk_aligned+0x3c>)
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	6831      	ldr	r1, [r6, #0]
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	b911      	cbnz	r1, 800c9d2 <sbrk_aligned+0x12>
 800c9cc:	f000 f8bc 	bl	800cb48 <_sbrk_r>
 800c9d0:	6030      	str	r0, [r6, #0]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 f8b7 	bl	800cb48 <_sbrk_r>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d00a      	beq.n	800c9f4 <sbrk_aligned+0x34>
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d007      	beq.n	800c9f8 <sbrk_aligned+0x38>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f000 f8ac 	bl	800cb48 <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d101      	bne.n	800c9f8 <sbrk_aligned+0x38>
 800c9f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
 800c9fc:	2000100c 	.word	0x2000100c

0800ca00 <_malloc_r>:
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	1ccd      	adds	r5, r1, #3
 800ca06:	f025 0503 	bic.w	r5, r5, #3
 800ca0a:	3508      	adds	r5, #8
 800ca0c:	2d0c      	cmp	r5, #12
 800ca0e:	bf38      	it	cc
 800ca10:	250c      	movcc	r5, #12
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	4607      	mov	r7, r0
 800ca16:	db01      	blt.n	800ca1c <_malloc_r+0x1c>
 800ca18:	42a9      	cmp	r1, r5
 800ca1a:	d905      	bls.n	800ca28 <_malloc_r+0x28>
 800ca1c:	230c      	movs	r3, #12
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	2600      	movs	r6, #0
 800ca22:	4630      	mov	r0, r6
 800ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca28:	4e2e      	ldr	r6, [pc, #184]	; (800cae4 <_malloc_r+0xe4>)
 800ca2a:	f000 f89d 	bl	800cb68 <__malloc_lock>
 800ca2e:	6833      	ldr	r3, [r6, #0]
 800ca30:	461c      	mov	r4, r3
 800ca32:	bb34      	cbnz	r4, 800ca82 <_malloc_r+0x82>
 800ca34:	4629      	mov	r1, r5
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7ff ffc2 	bl	800c9c0 <sbrk_aligned>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	4604      	mov	r4, r0
 800ca40:	d14d      	bne.n	800cade <_malloc_r+0xde>
 800ca42:	6834      	ldr	r4, [r6, #0]
 800ca44:	4626      	mov	r6, r4
 800ca46:	2e00      	cmp	r6, #0
 800ca48:	d140      	bne.n	800cacc <_malloc_r+0xcc>
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4638      	mov	r0, r7
 800ca50:	eb04 0803 	add.w	r8, r4, r3
 800ca54:	f000 f878 	bl	800cb48 <_sbrk_r>
 800ca58:	4580      	cmp	r8, r0
 800ca5a:	d13a      	bne.n	800cad2 <_malloc_r+0xd2>
 800ca5c:	6821      	ldr	r1, [r4, #0]
 800ca5e:	3503      	adds	r5, #3
 800ca60:	1a6d      	subs	r5, r5, r1
 800ca62:	f025 0503 	bic.w	r5, r5, #3
 800ca66:	3508      	adds	r5, #8
 800ca68:	2d0c      	cmp	r5, #12
 800ca6a:	bf38      	it	cc
 800ca6c:	250c      	movcc	r5, #12
 800ca6e:	4629      	mov	r1, r5
 800ca70:	4638      	mov	r0, r7
 800ca72:	f7ff ffa5 	bl	800c9c0 <sbrk_aligned>
 800ca76:	3001      	adds	r0, #1
 800ca78:	d02b      	beq.n	800cad2 <_malloc_r+0xd2>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	442b      	add	r3, r5
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	e00e      	b.n	800caa0 <_malloc_r+0xa0>
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	1b52      	subs	r2, r2, r5
 800ca86:	d41e      	bmi.n	800cac6 <_malloc_r+0xc6>
 800ca88:	2a0b      	cmp	r2, #11
 800ca8a:	d916      	bls.n	800caba <_malloc_r+0xba>
 800ca8c:	1961      	adds	r1, r4, r5
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	6025      	str	r5, [r4, #0]
 800ca92:	bf18      	it	ne
 800ca94:	6059      	strne	r1, [r3, #4]
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	bf08      	it	eq
 800ca9a:	6031      	streq	r1, [r6, #0]
 800ca9c:	5162      	str	r2, [r4, r5]
 800ca9e:	604b      	str	r3, [r1, #4]
 800caa0:	4638      	mov	r0, r7
 800caa2:	f104 060b 	add.w	r6, r4, #11
 800caa6:	f000 f865 	bl	800cb74 <__malloc_unlock>
 800caaa:	f026 0607 	bic.w	r6, r6, #7
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	1af2      	subs	r2, r6, r3
 800cab2:	d0b6      	beq.n	800ca22 <_malloc_r+0x22>
 800cab4:	1b9b      	subs	r3, r3, r6
 800cab6:	50a3      	str	r3, [r4, r2]
 800cab8:	e7b3      	b.n	800ca22 <_malloc_r+0x22>
 800caba:	6862      	ldr	r2, [r4, #4]
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	bf0c      	ite	eq
 800cac0:	6032      	streq	r2, [r6, #0]
 800cac2:	605a      	strne	r2, [r3, #4]
 800cac4:	e7ec      	b.n	800caa0 <_malloc_r+0xa0>
 800cac6:	4623      	mov	r3, r4
 800cac8:	6864      	ldr	r4, [r4, #4]
 800caca:	e7b2      	b.n	800ca32 <_malloc_r+0x32>
 800cacc:	4634      	mov	r4, r6
 800cace:	6876      	ldr	r6, [r6, #4]
 800cad0:	e7b9      	b.n	800ca46 <_malloc_r+0x46>
 800cad2:	230c      	movs	r3, #12
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	4638      	mov	r0, r7
 800cad8:	f000 f84c 	bl	800cb74 <__malloc_unlock>
 800cadc:	e7a1      	b.n	800ca22 <_malloc_r+0x22>
 800cade:	6025      	str	r5, [r4, #0]
 800cae0:	e7de      	b.n	800caa0 <_malloc_r+0xa0>
 800cae2:	bf00      	nop
 800cae4:	20001008 	.word	0x20001008

0800cae8 <_realloc_r>:
 800cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caec:	4680      	mov	r8, r0
 800caee:	4614      	mov	r4, r2
 800caf0:	460e      	mov	r6, r1
 800caf2:	b921      	cbnz	r1, 800cafe <_realloc_r+0x16>
 800caf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	4611      	mov	r1, r2
 800cafa:	f7ff bf81 	b.w	800ca00 <_malloc_r>
 800cafe:	b92a      	cbnz	r2, 800cb0c <_realloc_r+0x24>
 800cb00:	f7ff ff12 	bl	800c928 <_free_r>
 800cb04:	4625      	mov	r5, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0c:	f000 f838 	bl	800cb80 <_malloc_usable_size_r>
 800cb10:	4284      	cmp	r4, r0
 800cb12:	4607      	mov	r7, r0
 800cb14:	d802      	bhi.n	800cb1c <_realloc_r+0x34>
 800cb16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb1a:	d812      	bhi.n	800cb42 <_realloc_r+0x5a>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4640      	mov	r0, r8
 800cb20:	f7ff ff6e 	bl	800ca00 <_malloc_r>
 800cb24:	4605      	mov	r5, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d0ed      	beq.n	800cb06 <_realloc_r+0x1e>
 800cb2a:	42bc      	cmp	r4, r7
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4631      	mov	r1, r6
 800cb30:	bf28      	it	cs
 800cb32:	463a      	movcs	r2, r7
 800cb34:	f7ff fed0 	bl	800c8d8 <memcpy>
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f7ff fef4 	bl	800c928 <_free_r>
 800cb40:	e7e1      	b.n	800cb06 <_realloc_r+0x1e>
 800cb42:	4635      	mov	r5, r6
 800cb44:	e7df      	b.n	800cb06 <_realloc_r+0x1e>
	...

0800cb48 <_sbrk_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4d06      	ldr	r5, [pc, #24]	; (800cb64 <_sbrk_r+0x1c>)
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4604      	mov	r4, r0
 800cb50:	4608      	mov	r0, r1
 800cb52:	602b      	str	r3, [r5, #0]
 800cb54:	f7f5 fa4c 	bl	8001ff0 <_sbrk>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d102      	bne.n	800cb62 <_sbrk_r+0x1a>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b103      	cbz	r3, 800cb62 <_sbrk_r+0x1a>
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	20001010 	.word	0x20001010

0800cb68 <__malloc_lock>:
 800cb68:	4801      	ldr	r0, [pc, #4]	; (800cb70 <__malloc_lock+0x8>)
 800cb6a:	f000 b811 	b.w	800cb90 <__retarget_lock_acquire_recursive>
 800cb6e:	bf00      	nop
 800cb70:	20001014 	.word	0x20001014

0800cb74 <__malloc_unlock>:
 800cb74:	4801      	ldr	r0, [pc, #4]	; (800cb7c <__malloc_unlock+0x8>)
 800cb76:	f000 b80c 	b.w	800cb92 <__retarget_lock_release_recursive>
 800cb7a:	bf00      	nop
 800cb7c:	20001014 	.word	0x20001014

0800cb80 <_malloc_usable_size_r>:
 800cb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb84:	1f18      	subs	r0, r3, #4
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfbc      	itt	lt
 800cb8a:	580b      	ldrlt	r3, [r1, r0]
 800cb8c:	18c0      	addlt	r0, r0, r3
 800cb8e:	4770      	bx	lr

0800cb90 <__retarget_lock_acquire_recursive>:
 800cb90:	4770      	bx	lr

0800cb92 <__retarget_lock_release_recursive>:
 800cb92:	4770      	bx	lr

0800cb94 <_init>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr

0800cba0 <_fini>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr
