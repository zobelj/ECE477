
F407_workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a620  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017238  08017238  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08017238  08017238  00027238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017240  08017240  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017240  08017240  00027240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017244  08017244  00027244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08017248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a0  2**0
                  CONTENTS
 10 .bss          00000e7c  200001a0  200001a0  000301a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000101c  2000101c  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0d2  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a44  00000000  00000000  0004a2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0004dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001560  00000000  00000000  0004f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025094  00000000  00000000  00050950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c37f  00000000  00000000  000759e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b88  00000000  00000000  00091d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001638eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006534  00000000  00000000  0016393c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc00 	.word	0x0800cc00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800cc00 	.word	0x0800cc00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08d      	sub	sp, #52	; 0x34
 8000578:	af02      	add	r7, sp, #8
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	4611      	mov	r1, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	460b      	mov	r3, r1
 8000586:	81bb      	strh	r3, [r7, #12]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b1e      	cmp	r3, #30
 8000590:	d961      	bls.n	8000656 <ILI9341_DrawChar+0xe2>
 8000592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db5d      	blt.n	8000656 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3b20      	subs	r3, #32
 80005b6:	7ffa      	ldrb	r2, [r7, #31]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80005c4:	7fbb      	ldrb	r3, [r7, #30]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	7f7b      	ldrb	r3, [r7, #29]
 80005ca:	b29c      	uxth	r4, r3
 80005cc:	88f9      	ldrh	r1, [r7, #6]
 80005ce:	89b8      	ldrh	r0, [r7, #12]
 80005d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4623      	mov	r3, r4
 80005d6:	f000 fc67 	bl	8000ea8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e035      	b.n	800064c <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	e02b      	b.n	800063e <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80005e6:	7f3b      	ldrb	r3, [r7, #28]
 80005e8:	6a3a      	ldr	r2, [r7, #32]
 80005ea:	fb03 f202 	mul.w	r2, r3, r2
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	10db      	asrs	r3, r3, #3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	4413      	add	r3, r2
 80005f8:	3301      	adds	r3, #1
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000610:	7dfa      	ldrb	r2, [r7, #23]
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	4013      	ands	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	b29a      	uxth	r2, r3
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	b298      	uxth	r0, r3
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b29b      	uxth	r3, r3
 8000630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fbd2 	bl	8000ddc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	3301      	adds	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
 800063e:	7fbb      	ldrb	r3, [r7, #30]
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbcf      	blt.n	80005e6 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	7f7b      	ldrb	r3, [r7, #29]
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	429a      	cmp	r2, r3
 8000652:	dbc5      	blt.n	80005e0 <ILI9341_DrawChar+0x6c>
 8000654:	e000      	b.n	8000658 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000656:	bf00      	nop
			}
		}
	}
}
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08a      	sub	sp, #40	; 0x28
 8000662:	af02      	add	r7, sp, #8
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	460b      	mov	r3, r1
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4613      	mov	r3, r2
 8000672:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000680:	e02d      	b.n	80006de <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	88b9      	ldrh	r1, [r7, #4]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	f7ff ff6d 	bl	8000574 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b20      	subs	r3, #32
 80006a0:	7ffa      	ldrb	r2, [r7, #31]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	3304      	adds	r3, #4
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	1c9a      	adds	r2, r3, #2
 80006b8:	7fbb      	ldrb	r3, [r7, #30]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	da07      	bge.n	80006ce <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3302      	adds	r3, #2
 80006ca:	80fb      	strh	r3, [r7, #6]
 80006cc:	e004      	b.n	80006d8 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80006ce:	7fbb      	ldrb	r3, [r7, #30]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1cd      	bne.n	8000682 <ILI9341_DrawText+0x24>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_SPI_TxCpltCallback>:
uint16_t LCD_DC_PIN = LCD1_DC_PIN;
GPIO_TypeDef* LCD_RST_PORT = LCD1_RST_PORT;
uint16_t LCD_RST_PIN = LCD1_RST_PIN;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SPI_TxCpltCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d107      	bne.n	8000710 <HAL_SPI_TxCpltCallback+0x20>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SPI_TxCpltCallback+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SPI_TxCpltCallback+0x30>)
 8000706:	8811      	ldrh	r1, [r2, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fc14 	bl	8002f38 <HAL_GPIO_WritePin>
  }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000210 	.word	0x20000210
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008

08000724 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800072e:	bf00      	nop
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b02      	cmp	r3, #2
 800073c:	d1f8      	bne.n	8000730 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000746:	f007 f931 	bl	80079ac <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000210 	.word	0x20000210

08000758 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000764:	bf00      	nop
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b02      	cmp	r3, #2
 8000772:	d1f8      	bne.n	8000766 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 800077c:	f007 f916 	bl	80079ac <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000210 	.word	0x20000210

0800078c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <ILI9341_WriteCommand+0x3c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <ILI9341_WriteCommand+0x40>)
 800079c:	8811      	ldrh	r1, [r2, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fbc9 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ILI9341_WriteCommand+0x44>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <ILI9341_WriteCommand+0x48>)
 80007ac:	8811      	ldrh	r1, [r2, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fbc1 	bl	8002f38 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb3 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000008 	.word	0x20000008

080007d8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <ILI9341_WriteData+0x3c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <ILI9341_WriteData+0x40>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fba3 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <ILI9341_WriteData+0x44>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <ILI9341_WriteData+0x48>)
 80007f8:	8811      	ldrh	r1, [r2, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fb9b 	bl	8002f38 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff8d 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000010 	.word	0x20000010
 800081c:	20000004 	.word	0x20000004
 8000820:	20000008 	.word	0x20000008

08000824 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ILI9341_WriteBuffer+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <ILI9341_WriteBuffer+0x44>)
 8000836:	8811      	ldrh	r1, [r2, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb7c 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <ILI9341_WriteBuffer+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <ILI9341_WriteBuffer+0x4c>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fb74 	bl	8002f38 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff7f 	bl	8000758 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000010 	.word	0x20000010
 800086c:	20000004 	.word	0x20000004
 8000870:	20000008 	.word	0x20000008

08000874 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008b2:	202a      	movs	r0, #42	; 0x2a
 80008b4:	f7ff ff6a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffb0 	bl	8000824 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008d4:	883b      	ldrh	r3, [r7, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008e4:	202b      	movs	r0, #43	; 0x2b
 80008e6:	f7ff ff51 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff97 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80008f6:	202c      	movs	r0, #44	; 0x2c
 80008f8:	f7ff ff48 	bl	800078c <ILI9341_WriteCommand>
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <ILI9341_Reset+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <ILI9341_Reset+0x58>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fb10 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f001 fc83 	bl	8002224 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <ILI9341_Reset+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <ILI9341_Reset+0x60>)
 8000924:	8811      	ldrh	r1, [r2, #0]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fb05 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f001 fc78 	bl	8002224 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <ILI9341_Reset+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <ILI9341_Reset+0x58>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fafa 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ILI9341_Reset+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <ILI9341_Reset+0x60>)
 800094a:	8811      	ldrh	r1, [r2, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f002 faf2 	bl	8002f38 <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000014 	.word	0x20000014
 800095c:	20000018 	.word	0x20000018
 8000960:	20000004 	.word	0x20000004
 8000964:	20000008 	.word	0x20000008

08000968 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <ILI9341_Enable+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <ILI9341_Enable+0x1c>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fade 	bl	8002f38 <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000014 	.word	0x20000014
 8000984:	20000018 	.word	0x20000018

08000988 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800098c:	f7ff ffec 	bl	8000968 <ILI9341_Enable>
	ILI9341_Reset();
 8000990:	f7ff ffb8 	bl	8000904 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fef9 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 fc42 	bl	8002224 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80009a0:	20cb      	movs	r0, #203	; 0xcb
 80009a2:	f7ff fef3 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80009a6:	2039      	movs	r0, #57	; 0x39
 80009a8:	f7ff ff16 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80009ac:	202c      	movs	r0, #44	; 0x2c
 80009ae:	f7ff ff13 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff10 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009b8:	2034      	movs	r0, #52	; 0x34
 80009ba:	f7ff ff0d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff ff0a 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009c4:	20cf      	movs	r0, #207	; 0xcf
 80009c6:	f7ff fee1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ff04 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009d0:	20c1      	movs	r0, #193	; 0xc1
 80009d2:	f7ff ff01 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009d6:	2030      	movs	r0, #48	; 0x30
 80009d8:	f7ff fefe 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009dc:	20e8      	movs	r0, #232	; 0xe8
 80009de:	f7ff fed5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009e2:	2085      	movs	r0, #133	; 0x85
 80009e4:	f7ff fef8 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fef5 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f7ff fef2 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009f4:	20ea      	movs	r0, #234	; 0xea
 80009f6:	f7ff fec9 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff feec 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fee9 	bl	80007d8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000a06:	20ed      	movs	r0, #237	; 0xed
 8000a08:	f7ff fec0 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f7ff fee3 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fee0 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a18:	2012      	movs	r0, #18
 8000a1a:	f7ff fedd 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a1e:	2081      	movs	r0, #129	; 0x81
 8000a20:	f7ff feda 	bl	80007d8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a24:	20f7      	movs	r0, #247	; 0xf7
 8000a26:	f7ff feb1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f7ff fed4 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a30:	20c0      	movs	r0, #192	; 0xc0
 8000a32:	f7ff feab 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a36:	2023      	movs	r0, #35	; 0x23
 8000a38:	f7ff fece 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a3c:	20c1      	movs	r0, #193	; 0xc1
 8000a3e:	f7ff fea5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a42:	2010      	movs	r0, #16
 8000a44:	f7ff fec8 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a48:	20c5      	movs	r0, #197	; 0xc5
 8000a4a:	f7ff fe9f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a4e:	203e      	movs	r0, #62	; 0x3e
 8000a50:	f7ff fec2 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f7ff febf 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a5a:	20c7      	movs	r0, #199	; 0xc7
 8000a5c:	f7ff fe96 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a60:	2086      	movs	r0, #134	; 0x86
 8000a62:	f7ff feb9 	bl	80007d8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a66:	2036      	movs	r0, #54	; 0x36
 8000a68:	f7ff fe90 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a6c:	2048      	movs	r0, #72	; 0x48
 8000a6e:	f7ff feb3 	bl	80007d8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a72:	203a      	movs	r0, #58	; 0x3a
 8000a74:	f7ff fe8a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a78:	2055      	movs	r0, #85	; 0x55
 8000a7a:	f7ff fead 	bl	80007d8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a7e:	20b1      	movs	r0, #177	; 0xb1
 8000a80:	f7ff fe84 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fea7 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a8a:	2018      	movs	r0, #24
 8000a8c:	f7ff fea4 	bl	80007d8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a90:	20b6      	movs	r0, #182	; 0xb6
 8000a92:	f7ff fe7b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fe9e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a9c:	2082      	movs	r0, #130	; 0x82
 8000a9e:	f7ff fe9b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	f7ff fe98 	bl	80007d8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000aa8:	20f2      	movs	r0, #242	; 0xf2
 8000aaa:	f7ff fe6f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe92 	bl	80007d8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f7ff fe69 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fe8c 	bl	80007d8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ac0:	20e0      	movs	r0, #224	; 0xe0
 8000ac2:	f7ff fe63 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fe86 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000acc:	2031      	movs	r0, #49	; 0x31
 8000ace:	f7ff fe83 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000ad2:	202b      	movs	r0, #43	; 0x2b
 8000ad4:	f7ff fe80 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f7ff fe7d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f7ff fe7a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff fe77 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000aea:	204e      	movs	r0, #78	; 0x4e
 8000aec:	f7ff fe74 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000af0:	20f1      	movs	r0, #241	; 0xf1
 8000af2:	f7ff fe71 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000af6:	2037      	movs	r0, #55	; 0x37
 8000af8:	f7ff fe6e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f7ff fe6b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f7ff fe68 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f7ff fe65 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b0e:	200e      	movs	r0, #14
 8000b10:	f7ff fe62 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f7ff fe5f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe5c 	bl	80007d8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b20:	20e1      	movs	r0, #225	; 0xe1
 8000b22:	f7ff fe33 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe56 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b2c:	200e      	movs	r0, #14
 8000b2e:	f7ff fe53 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b32:	2014      	movs	r0, #20
 8000b34:	f7ff fe50 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff fe4d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b3e:	2011      	movs	r0, #17
 8000b40:	f7ff fe4a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff fe47 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b4a:	2031      	movs	r0, #49	; 0x31
 8000b4c:	f7ff fe44 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b50:	20c1      	movs	r0, #193	; 0xc1
 8000b52:	f7ff fe41 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b56:	2048      	movs	r0, #72	; 0x48
 8000b58:	f7ff fe3e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff fe3b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe38 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f7ff fe35 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b6e:	2031      	movs	r0, #49	; 0x31
 8000b70:	f7ff fe32 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b74:	2036      	movs	r0, #54	; 0x36
 8000b76:	f7ff fe2f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff fe2c 	bl	80007d8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b80:	2011      	movs	r0, #17
 8000b82:	f7ff fe03 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fb4c 	bl	8002224 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b8c:	2029      	movs	r0, #41	; 0x29
 8000b8e:	f7ff fdfd 	bl	800078c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f802 	bl	8000b9c <ILI9341_SetRotation>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000ba6:	2036      	movs	r0, #54	; 0x36
 8000ba8:	f7ff fdf0 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fb39 	bl	8002224 <HAL_Delay>

	switch(rotation)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d837      	bhi.n	8000c28 <ILI9341_SetRotation+0x8c>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <ILI9341_SetRotation+0x24>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be7 	.word	0x08000be7
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c13 	.word	0x08000c13
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bd0:	2048      	movs	r0, #72	; 0x48
 8000bd2:	f7ff fe01 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bd8:	22f0      	movs	r2, #240	; 0xf0
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be2:	801a      	strh	r2, [r3, #0]
		break;
 8000be4:	e021      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff fdf6 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bf2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bf6:	22f0      	movs	r2, #240	; 0xf0
 8000bf8:	801a      	strh	r2, [r3, #0]
		break;
 8000bfa:	e016      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000bfc:	2088      	movs	r0, #136	; 0x88
 8000bfe:	f7ff fdeb 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c04:	22f0      	movs	r2, #240	; 0xf0
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c0e:	801a      	strh	r2, [r3, #0]
		break;
 8000c10:	e00b      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000c12:	20e8      	movs	r0, #232	; 0xe8
 8000c14:	f7ff fde0 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c22:	22f0      	movs	r2, #240	; 0xf0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e000      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000002 	.word	0x20000002
 8000c38:	20000000 	.word	0x20000000

08000c3c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c40:	b08d      	sub	sp, #52	; 0x34
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	466b      	mov	r3, sp
 8000c4c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c5a:	d202      	bcs.n	8000c62 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e002      	b.n	8000c68 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <ILI9341_DrawColorBurst+0x140>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <ILI9341_DrawColorBurst+0x144>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 f960 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000c7e:	8811      	ldrh	r1, [r2, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f958 	bl	8002f38 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c94:	460b      	mov	r3, r1
 8000c96:	3b01      	subs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	461d      	mov	r5, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	00eb      	lsls	r3, r5, #3
 8000cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc8:	00e2      	lsls	r2, r4, #3
 8000cca:	1dcb      	adds	r3, r1, #7
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	3300      	adds	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cde:	e00e      	b.n	8000cfe <ILI9341_DrawColorBurst+0xc2>
	{
		BurstBuffer[j] = chifted;
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	3301      	adds	r3, #1
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ec      	bcc.n	8000ce0 <ILI9341_DrawColorBurst+0xa4>
	}

	uint32_t SendingSize = size * 2;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d20:	fb01 f202 	mul.w	r2, r1, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <ILI9341_DrawColorBurst+0x114>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	e009      	b.n	8000d48 <ILI9341_DrawColorBurst+0x10c>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	230a      	movs	r3, #10
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d3e:	f006 fcf8 	bl	8007732 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	3301      	adds	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f1      	bcc.n	8000d34 <ILI9341_DrawColorBurst+0xf8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	230a      	movs	r3, #10
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d5a:	f006 fcea 	bl	8007732 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000d64:	8811      	ldrh	r1, [r2, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 f8e5 	bl	8002f38 <HAL_GPIO_WritePin>
 8000d6e:	46b5      	mov	sp, r6
}
 8000d70:	bf00      	nop
 8000d72:	3734      	adds	r7, #52	; 0x34
 8000d74:	46bd      	mov	sp, r7
 8000d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000210 	.word	0x20000210

08000d90 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fd63 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff38 	bl	8000c3c <ILI9341_DrawColorBurst>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	20000000 	.word	0x20000000

08000ddc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <ILI9341_DrawPixel+0xc4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d24d      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <ILI9341_DrawPixel+0xc8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d247      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	753b      	strb	r3, [r7, #20]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	757b      	strb	r3, [r7, #21]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	121b      	asrs	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75bb      	strb	r3, [r7, #22]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	743b      	strb	r3, [r7, #16]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	747b      	strb	r3, [r7, #17]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	74bb      	strb	r3, [r7, #18]
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	733b      	strb	r3, [r7, #12]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e5e:	202a      	movs	r0, #42	; 0x2a
 8000e60:	f7ff fc94 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fcda 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e70:	202b      	movs	r0, #43	; 0x2b
 8000e72:	f7ff fc8b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fcd1 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e82:	202c      	movs	r0, #44	; 0x2c
 8000e84:	f7ff fc82 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fcc8 	bl	8000824 <ILI9341_WriteBuffer>
 8000e94:	e000      	b.n	8000e98 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d23d      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d237      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dd05      	ble.n	8000efa <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	883b      	ldrh	r3, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f02:	8812      	ldrh	r2, [r2, #0]
 8000f04:	b292      	uxth	r2, r2
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd05      	ble.n	8000f16 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29c      	uxth	r4, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b9      	ldrh	r1, [r7, #4]
 8000f30:	88f8      	ldrh	r0, [r7, #6]
 8000f32:	4622      	mov	r2, r4
 8000f34:	f7ff fc9e 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe78 	bl	8000c3c <ILI9341_DrawColorBurst>
 8000f4c:	e000      	b.n	8000f50 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000002 	.word	0x20000002
 8000f5c:	20000000 	.word	0x20000000

08000f60 <scan_keypad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Local Keypad Scanning */
void scan_keypad() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
  set_rows();
 8000f66:	f000 f89d 	bl	80010a4 <set_rows>

  // read the columns
  int all_cols = get_cols();
 8000f6a:	f000 f903 	bl	8001174 <get_cols>
 8000f6e:	60f8      	str	r0, [r7, #12]
  int local_cols = all_cols & 0x0F;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	60bb      	str	r3, [r7, #8]
  int expander_cols = (all_cols & 0xF0) >> 4;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	111b      	asrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	607b      	str	r3, [r7, #4]
  
  // scan local cols
  for(int i = 0; i < 4; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e038      	b.n	8000ffa <scan_keypad+0x9a>
    if(local_cols & (1 << i)) {
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa42 f303 	asr.w	r3, r2, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d024      	beq.n	8000fe2 <scan_keypad+0x82>
    	if (keypresses[row][i] != 1) {
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <scan_keypad+0x128>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a3b      	ldr	r2, [pc, #236]	; (800108c <scan_keypad+0x12c>)
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	441a      	add	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d023      	beq.n	8000ff4 <scan_keypad+0x94>
    		keypresses[row][i] = 1;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <scan_keypad+0x128>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a36      	ldr	r2, [pc, #216]	; (800108c <scan_keypad+0x12c>)
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	441a      	add	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
    	    // WPM timer not enabled
    	    if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <scan_keypad+0x130>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <scan_keypad+0x6c>
    	    	HAL_TIM_Base_Start_IT(&htim7);
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <scan_keypad+0x134>)
 8000fc8:	f006 ff56 	bl	8007e78 <HAL_TIM_Base_Start_IT>
    	    }
    	    charCount++;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <scan_keypad+0x138>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <scan_keypad+0x138>)
 8000fd4:	6013      	str	r3, [r2, #0]
    	    charsInCycle++;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <scan_keypad+0x13c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	; (800109c <scan_keypad+0x13c>)
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e008      	b.n	8000ff4 <scan_keypad+0x94>
    	}
    }
    else {
      keypresses[row][i] = 0;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <scan_keypad+0x128>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <scan_keypad+0x12c>)
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	441a      	add	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	ddc3      	ble.n	8000f88 <scan_keypad+0x28>
    }
  }

  // scan expander cols
  for(int i = 0; i < 4; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e038      	b.n	8001078 <scan_keypad+0x118>
    if(expander_cols & (1 << i)) {
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	fa42 f303 	asr.w	r3, r2, r3
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d024      	beq.n	8001060 <scan_keypad+0x100>
      if (keypresses_2[row][i] != 1) {
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <scan_keypad+0x128>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <scan_keypad+0x140>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	441a      	add	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d023      	beq.n	8001072 <scan_keypad+0x112>
    	  keypresses_2[row][i] = 1;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <scan_keypad+0x128>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <scan_keypad+0x140>)
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	441a      	add	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
    	  // WPM timer not enabled
    	  if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <scan_keypad+0x130>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <scan_keypad+0xea>
    		  HAL_TIM_Base_Start_IT(&htim7);
 8001044:	4813      	ldr	r0, [pc, #76]	; (8001094 <scan_keypad+0x134>)
 8001046:	f006 ff17 	bl	8007e78 <HAL_TIM_Base_Start_IT>
    	  }
    	  charCount++;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <scan_keypad+0x138>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <scan_keypad+0x138>)
 8001052:	6013      	str	r3, [r2, #0]
    	  charsInCycle++;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <scan_keypad+0x13c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <scan_keypad+0x13c>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e008      	b.n	8001072 <scan_keypad+0x112>
      }
    }
    else {
      keypresses_2[row][i] = 0;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <scan_keypad+0x128>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <scan_keypad+0x140>)
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	441a      	add	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4413      	add	r3, r2
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++) {
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2b03      	cmp	r3, #3
 800107c:	ddc3      	ble.n	8001006 <scan_keypad+0xa6>
    }

  }

}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200003d0 	.word	0x200003d0
 800108c:	200003d4 	.word	0x200003d4
 8001090:	40010000 	.word	0x40010000
 8001094:	20000358 	.word	0x20000358
 8001098:	200003a8 	.word	0x200003a8
 800109c:	200003ac 	.word	0x200003ac
 80010a0:	200003e8 	.word	0x200003e8

080010a4 <set_rows>:

void set_rows() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
  // update row value
  row = (row + 1) % 4;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <set_rows+0xc4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	425a      	negs	r2, r3
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	bf58      	it	pl
 80010bc:	4253      	negpl	r3, r2
 80010be:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <set_rows+0xc4>)
 80010c0:	6013      	str	r3, [r2, #0]
  // set all rows to high on local keypad
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <set_rows+0xc8>)
 80010c8:	f001 ff36 	bl	8002f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2102      	movs	r1, #2
 80010d0:	4826      	ldr	r0, [pc, #152]	; (800116c <set_rows+0xc8>)
 80010d2:	f001 ff31 	bl	8002f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2104      	movs	r1, #4
 80010da:	4824      	ldr	r0, [pc, #144]	; (800116c <set_rows+0xc8>)
 80010dc:	f001 ff2c 	bl	8002f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2108      	movs	r1, #8
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <set_rows+0xc8>)
 80010e6:	f001 ff27 	bl	8002f38 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low
  switch(row) {
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <set_rows+0xc4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d822      	bhi.n	8001138 <set_rows+0x94>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <set_rows+0x54>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001115 	.word	0x08001115
 8001100:	08001121 	.word	0x08001121
 8001104:	0800112d 	.word	0x0800112d
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <set_rows+0xc8>)
 800110e:	f001 ff13 	bl	8002f38 <HAL_GPIO_WritePin>
      break;
 8001112:	e011      	b.n	8001138 <set_rows+0x94>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2102      	movs	r1, #2
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <set_rows+0xc8>)
 800111a:	f001 ff0d 	bl	8002f38 <HAL_GPIO_WritePin>
      break;
 800111e:	e00b      	b.n	8001138 <set_rows+0x94>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2104      	movs	r1, #4
 8001124:	4811      	ldr	r0, [pc, #68]	; (800116c <set_rows+0xc8>)
 8001126:	f001 ff07 	bl	8002f38 <HAL_GPIO_WritePin>
      break;
 800112a:	e005      	b.n	8001138 <set_rows+0x94>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2108      	movs	r1, #8
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <set_rows+0xc8>)
 8001132:	f001 ff01 	bl	8002f38 <HAL_GPIO_WritePin>
      break;
 8001136:	bf00      	nop
  }

  // set current row to low and others to high on gpio expander keypad
  uint8_t data[2] = {0x0A, ~( 8 >> row )};
 8001138:	230a      	movs	r3, #10
 800113a:	713b      	strb	r3, [r7, #4]
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <set_rows+0xc4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	fa42 f303 	asr.w	r3, r2, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2302      	movs	r3, #2
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <set_rows+0xcc>)
 800115c:	f002 f84a 	bl	80031f4 <HAL_I2C_Master_Transmit>

}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200003d0 	.word	0x200003d0
 800116c:	40020c00 	.word	0x40020c00
 8001170:	200001bc 	.word	0x200001bc

08001174 <get_cols>:

int get_cols() {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 4) & 0xF;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <get_cols+0x54>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	43db      	mvns	r3, r3
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	60fb      	str	r3, [r7, #12]

  // read the GPIO expander columns
  uint8_t data[1] = {0x09};
 8001188:	2309      	movs	r3, #9
 800118a:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800118c:	1d3a      	adds	r2, r7, #4
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <get_cols+0x58>)
 800119a:	f002 f82b 	bl	80031f4 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800119e:	1d3a      	adds	r2, r7, #4
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <get_cols+0x58>)
 80011ac:	f002 f920 	bl	80033f0 <HAL_I2C_Master_Receive>

  int expander_cols = data[0] & 0xF0;
 80011b0:	793b      	ldrb	r3, [r7, #4]
 80011b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b6:	60bb      	str	r3, [r7, #8]

  return local_cols | expander_cols;
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4313      	orrs	r3, r2
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	200001bc 	.word	0x200001bc

080011d0 <scan_rotary>:
/* END Local Keypad Scanning */

/* Rotary Encoder Scanning */
void scan_rotary() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  currentStateCLK = HAL_GPIO_ReadPin(GPIOC, ROT_CLCK_Pin);
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <scan_rotary+0xe4>)
 80011da:	f001 fe95 	bl	8002f08 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <scan_rotary+0xe8>)
 80011e4:	601a      	str	r2, [r3, #0]

  // if CLK pin has changed, then the rotary encoder has turned
  if (currentStateCLK != lastStateCLK && rotLock == 0 ) {// && rotLock == 0) {
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <scan_rotary+0xe8>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <scan_rotary+0xec>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d02e      	beq.n	8001250 <scan_rotary+0x80>
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <scan_rotary+0xf0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d12a      	bne.n	8001250 <scan_rotary+0x80>
    // if the DT state is different, then the encoder is rotating counter-clockwise
    currentStateDT = HAL_GPIO_ReadPin(GPIOC, ROT_DT_Pin);
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	482d      	ldr	r0, [pc, #180]	; (80012b4 <scan_rotary+0xe4>)
 80011fe:	f001 fe83 	bl	8002f08 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <scan_rotary+0xf4>)
 8001208:	601a      	str	r2, [r3, #0]

    if (currentStateDT != currentStateCLK) {
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <scan_rotary+0xf4>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <scan_rotary+0xe8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d008      	beq.n	8001228 <scan_rotary+0x58>
      // Volume Down
      rotary_keypresses[1] = 1;
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <scan_rotary+0xf8>)
 8001218:	2201      	movs	r2, #1
 800121a:	705a      	strb	r2, [r3, #1]
      turn_counter--;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <scan_rotary+0xfc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <scan_rotary+0xfc>)
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00d      	b.n	8001244 <scan_rotary+0x74>
    }

    // otherwise, it is turning clockwise
    else if (currentStateDT == currentStateCLK) {
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <scan_rotary+0xf4>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <scan_rotary+0xe8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d107      	bne.n	8001244 <scan_rotary+0x74>
      // Volume Up
      rotary_keypresses[2] = 1;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <scan_rotary+0xf8>)
 8001236:	2201      	movs	r2, #1
 8001238:	709a      	strb	r2, [r3, #2]
      turn_counter++;
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <scan_rotary+0xfc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <scan_rotary+0xfc>)
 8001242:	6013      	str	r3, [r2, #0]
    }
    rotLock++;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <scan_rotary+0xf0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <scan_rotary+0xf0>)
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e009      	b.n	8001264 <scan_rotary+0x94>

  }
  else if (rotLock == 0) {
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <scan_rotary+0xf0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <scan_rotary+0x94>
	  rotary_keypresses[1] = 0;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <scan_rotary+0xf8>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
	  rotary_keypresses[2] = 0;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <scan_rotary+0xf8>)
 8001260:	2200      	movs	r2, #0
 8001262:	709a      	strb	r2, [r3, #2]
  }

  lastStateCLK = currentStateCLK;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <scan_rotary+0xe8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <scan_rotary+0xec>)
 800126a:	6013      	str	r3, [r2, #0]

  // rotLock allows the rotary encoder's inputs to settle over a few extra clock cycles
  if(rotLock != 0) {
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <scan_rotary+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <scan_rotary+0xc2>
    rotLock = (rotLock + 1) % 150;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <scan_rotary+0xf0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <scan_rotary+0x100>)
 800127c:	fb83 1302 	smull	r1, r3, r3, r2
 8001280:	1119      	asrs	r1, r3, #4
 8001282:	17d3      	asrs	r3, r2, #31
 8001284:	1acb      	subs	r3, r1, r3
 8001286:	2196      	movs	r1, #150	; 0x96
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <scan_rotary+0xf0>)
 8001290:	6013      	str	r3, [r2, #0]
  }

  // if the state is low (default is high), turn toggle the LED
  if (HAL_GPIO_ReadPin(GPIOC, ROT_SW_Pin) == 0) {
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <scan_rotary+0xe4>)
 8001296:	f001 fe37 	bl	8002f08 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <scan_rotary+0xd8>
    // Volume Mute Toggle
	  rotary_keypresses[0] = 1;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <scan_rotary+0xf8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
  }
  else {
	  rotary_keypresses[0] = 0;
  }

}
 80012a6:	e002      	b.n	80012ae <scan_rotary+0xde>
	  rotary_keypresses[0] = 0;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <scan_rotary+0xf8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020800 	.word	0x40020800
 80012b8:	200003bc 	.word	0x200003bc
 80012bc:	200003c0 	.word	0x200003c0
 80012c0:	200003c8 	.word	0x200003c8
 80012c4:	200003c4 	.word	0x200003c4
 80012c8:	200003f8 	.word	0x200003f8
 80012cc:	200003a4 	.word	0x200003a4
 80012d0:	1b4e81b5 	.word	0x1b4e81b5

080012d4 <record_keys>:
/* END Rotary Encoder Scanning */

/* USB Functions */
void record_keys() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 80012da:	2208      	movs	r2, #8
 80012dc:	2100      	movs	r1, #0
 80012de:	4837      	ldr	r0, [pc, #220]	; (80013bc <record_keys+0xe8>)
 80012e0:	f00b f818 	bl	800c314 <memset>
  keycodeNum = 1;
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <record_keys+0xec>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < 4; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e01f      	b.n	8001330 <record_keys+0x5c>
	  for(int j = 0; j < 4; j++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e016      	b.n	8001324 <record_keys+0x50>
		  if(keypresses[i][j] == 1) {
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <record_keys+0xf0>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	441a      	add	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10a      	bne.n	800131e <record_keys+0x4a>
			  add_keypress(keys[i][j]);
 8001308:	492f      	ldr	r1, [pc, #188]	; (80013c8 <record_keys+0xf4>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4413      	add	r3, r2
 8001312:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f85f 	bl	80013dc <add_keypress>
	  for(int j = 0; j < 4; j++) {
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3301      	adds	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2b03      	cmp	r3, #3
 8001328:	dde5      	ble.n	80012f6 <record_keys+0x22>
  for(int i = 0; i < 4; i++) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b03      	cmp	r3, #3
 8001334:	dddc      	ble.n	80012f0 <record_keys+0x1c>
	    }
	  }
  }

  // Add GPIO Expander keypresses
  for(int i = 0; i < 4; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e01f      	b.n	800137c <record_keys+0xa8>
	  for(int j = 0; j < 4; j++) {
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	e016      	b.n	8001370 <record_keys+0x9c>
		  if(keypresses_2[i][j] == 1) {
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <record_keys+0xf8>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	441a      	add	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10a      	bne.n	800136a <record_keys+0x96>
			  add_keypress(keys_2[i][j]);
 8001354:	491e      	ldr	r1, [pc, #120]	; (80013d0 <record_keys+0xfc>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4413      	add	r3, r2
 800135e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f839 	bl	80013dc <add_keypress>
	  for(int j = 0; j < 4; j++) {
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b03      	cmp	r3, #3
 8001374:	dde5      	ble.n	8001342 <record_keys+0x6e>
  for(int i = 0; i < 4; i++) {
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b03      	cmp	r3, #3
 8001380:	dddc      	ble.n	800133c <record_keys+0x68>
		  }
	  }
  }

  // Add Rotary Encoder keypresses
  for(int i = 0; i < 4; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e010      	b.n	80013aa <record_keys+0xd6>
	  if(rotary_keypresses[i] == 1)
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <record_keys+0x100>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d107      	bne.n	80013a4 <record_keys+0xd0>
		  add_keypress(rotary_keys[i]);
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <record_keys+0x104>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f81c 	bl	80013dc <add_keypress>
  for(int i = 0; i < 4; i++) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	ddeb      	ble.n	8001388 <record_keys+0xb4>
  }

}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003fc 	.word	0x200003fc
 80013c0:	200003cc 	.word	0x200003cc
 80013c4:	200003d4 	.word	0x200003d4
 80013c8:	0801718c 	.word	0x0801718c
 80013cc:	200003e8 	.word	0x200003e8
 80013d0:	080171b4 	.word	0x080171b4
 80013d4:	200003f8 	.word	0x200003f8
 80013d8:	080171dc 	.word	0x080171dc

080013dc <add_keypress>:

void add_keypress(char key) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]

	if(key == (char)KEY_SHIFT) {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d103      	bne.n	80013f4 <add_keypress+0x18>
		keyboardhid.MODIFIER = 2;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <add_keypress+0x88>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	701a      	strb	r2, [r3, #0]
		return;
 80013f2:	e031      	b.n	8001458 <add_keypress+0x7c>
	}

	switch(keycodeNum) {
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <add_keypress+0x8c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d826      	bhi.n	800144c <add_keypress+0x70>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <add_keypress+0x28>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800141d 	.word	0x0800141d
 8001408:	08001425 	.word	0x08001425
 800140c:	0800142d 	.word	0x0800142d
 8001410:	08001435 	.word	0x08001435
 8001414:	0800143d 	.word	0x0800143d
 8001418:	08001445 	.word	0x08001445
			case 1:
			  keyboardhid.KEYCODE1 = key;
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <add_keypress+0x88>)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	7093      	strb	r3, [r2, #2]
			  break;
 8001422:	e014      	b.n	800144e <add_keypress+0x72>
			case 2:
			  keyboardhid.KEYCODE2 = key;
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <add_keypress+0x88>)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	70d3      	strb	r3, [r2, #3]
			  break;
 800142a:	e010      	b.n	800144e <add_keypress+0x72>
			case 3:
			  keyboardhid.KEYCODE3 = key;
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <add_keypress+0x88>)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	7113      	strb	r3, [r2, #4]
			  break;
 8001432:	e00c      	b.n	800144e <add_keypress+0x72>
			case 4:
			  keyboardhid.KEYCODE4 = key;
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <add_keypress+0x88>)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	7153      	strb	r3, [r2, #5]
			  break;
 800143a:	e008      	b.n	800144e <add_keypress+0x72>
			case 5:
			  keyboardhid.KEYCODE5 = key;
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <add_keypress+0x88>)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	7193      	strb	r3, [r2, #6]
			  break;
 8001442:	e004      	b.n	800144e <add_keypress+0x72>
			case 6:
			  keyboardhid.KEYCODE6 = key;
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <add_keypress+0x88>)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	71d3      	strb	r3, [r2, #7]
			  break;
 800144a:	e000      	b.n	800144e <add_keypress+0x72>
			default:
				break;
 800144c:	bf00      	nop
		  }
		  keycodeNum++;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <add_keypress+0x8c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <add_keypress+0x8c>)
 8001456:	6013      	str	r3, [r2, #0]

}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200003fc 	.word	0x200003fc
 8001468:	200003cc 	.word	0x200003cc

0800146c <switch_lcd>:
/* END USB Functions */

/* LCD Functions */
void switch_lcd() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  // switch LCD_*_PIN and LCD_*_PORT between LCD1_* and LCD2_*
  if(LCD_CS_PIN == LCD2_CS_PIN) {
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <switch_lcd+0x70>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001478:	d115      	bne.n	80014a6 <switch_lcd+0x3a>
	  LCD_CS_PORT = LCD1_CS_PORT;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <switch_lcd+0x74>)
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <switch_lcd+0x78>)
 800147e:	601a      	str	r2, [r3, #0]
	  LCD_CS_PIN = LCD1_CS_PIN;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <switch_lcd+0x70>)
 8001482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001486:	801a      	strh	r2, [r3, #0]
	  LCD_DC_PORT = LCD1_DC_PORT;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <switch_lcd+0x7c>)
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <switch_lcd+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
	  LCD_DC_PIN = LCD1_DC_PIN;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <switch_lcd+0x80>)
 8001490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001494:	801a      	strh	r2, [r3, #0]
	  LCD_RST_PORT = LCD1_RST_PORT;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <switch_lcd+0x84>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <switch_lcd+0x78>)
 800149a:	601a      	str	r2, [r3, #0]
	  LCD_RST_PIN = LCD1_RST_PIN;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <switch_lcd+0x88>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
	LCD_DC_PIN = LCD2_DC_PIN;
	LCD_RST_PORT = LCD2_RST_PORT;
	LCD_RST_PIN = LCD2_RST_PIN;
  }
}
 80014a4:	e014      	b.n	80014d0 <switch_lcd+0x64>
    LCD_CS_PORT = LCD2_CS_PORT;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <switch_lcd+0x74>)
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <switch_lcd+0x78>)
 80014aa:	601a      	str	r2, [r3, #0]
	LCD_CS_PIN = LCD2_CS_PIN;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <switch_lcd+0x70>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b2:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <switch_lcd+0x7c>)
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <switch_lcd+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
	LCD_DC_PIN = LCD2_DC_PIN;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <switch_lcd+0x80>)
 80014bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014c0:	801a      	strh	r2, [r3, #0]
	LCD_RST_PORT = LCD2_RST_PORT;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <switch_lcd+0x84>)
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <switch_lcd+0x78>)
 80014c6:	601a      	str	r2, [r3, #0]
	LCD_RST_PIN = LCD2_RST_PIN;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <switch_lcd+0x88>)
 80014ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ce:	801a      	strh	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004
 80014e4:	40021000 	.word	0x40021000
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20000010 	.word	0x20000010
 80014f0:	20000014 	.word	0x20000014
 80014f4:	20000018 	.word	0x20000018

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f000 fe1f 	bl	8002140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f8e3 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001506:	f000 faaf 	bl	8001a68 <MX_GPIO_Init>
  MX_DMA_Init();
 800150a:	f000 fa8d 	bl	8001a28 <MX_DMA_Init>
  MX_TIM4_Init();
 800150e:	f000 f9d3 	bl	80018b8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001512:	f000 fa1d 	bl	8001950 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001516:	f00a fa8d 	bl	800ba34 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 800151a:	f000 f93f 	bl	800179c <MX_I2C2_Init>
  MX_SPI1_Init();
 800151e:	f000 f995 	bl	800184c <MX_SPI1_Init>
  MX_TIM7_Init();
 8001522:	f000 fa4b 	bl	80019bc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCDs
  ILI9341_Init();
 8001526:	f7ff fa2f 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fb36 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(WHITE);
 8001530:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001534:	f7ff fc2c 	bl	8000d90 <ILI9341_FillScreen>

  switch_lcd();
 8001538:	f7ff ff98 	bl	800146c <switch_lcd>
  ILI9341_Init();
 800153c:	f7ff fa24 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fb2b 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(WHITE);
 8001546:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800154a:	f7ff fc21 	bl	8000d90 <ILI9341_FillScreen>

  char writeBuff[20];
  sprintf(writeBuff, "Words");
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	494c      	ldr	r1, [pc, #304]	; (8001684 <main+0x18c>)
 8001554:	4618      	mov	r0, r3
 8001556:	f00a fee5 	bl	800c324 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 85, BLACK, WHITE);
 800155a:	f107 001c 	add.w	r0, r7, #28
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2355      	movs	r3, #85	; 0x55
 800156a:	2219      	movs	r2, #25
 800156c:	4946      	ldr	r1, [pc, #280]	; (8001688 <main+0x190>)
 800156e:	f7ff f876 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Per");
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4945      	ldr	r1, [pc, #276]	; (800168c <main+0x194>)
 8001578:	4618      	mov	r0, r3
 800157a:	f00a fed3 	bl	800c324 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 135, BLACK, WHITE);
 800157e:	f107 001c 	add.w	r0, r7, #28
 8001582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2387      	movs	r3, #135	; 0x87
 800158e:	2219      	movs	r2, #25
 8001590:	493d      	ldr	r1, [pc, #244]	; (8001688 <main+0x190>)
 8001592:	f7ff f864 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Minute:");
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	493d      	ldr	r1, [pc, #244]	; (8001690 <main+0x198>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fec1 	bl	800c324 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 185, BLACK, WHITE);
 80015a2:	f107 001c 	add.w	r0, r7, #28
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	23b9      	movs	r3, #185	; 0xb9
 80015b2:	2219      	movs	r2, #25
 80015b4:	4934      	ldr	r1, [pc, #208]	; (8001688 <main+0x190>)
 80015b6:	f7ff f852 	bl	800065e <ILI9341_DrawText>

  switch_lcd();
 80015ba:	f7ff ff57 	bl	800146c <switch_lcd>
  sprintf(writeBuff, "Number of turns: ");
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4934      	ldr	r1, [pc, #208]	; (8001694 <main+0x19c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00a fead 	bl	800c324 <siprintf>
  ILI9341_DrawText(writeBuff, FONT6, 25, 110, BLACK, WHITE);
 80015ca:	f107 001c 	add.w	r0, r7, #28
 80015ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2300      	movs	r3, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	236e      	movs	r3, #110	; 0x6e
 80015da:	2219      	movs	r2, #25
 80015dc:	492e      	ldr	r1, [pc, #184]	; (8001698 <main+0x1a0>)
 80015de:	f7ff f83e 	bl	800065e <ILI9341_DrawText>
  switch_lcd();
 80015e2:	f7ff ff43 	bl	800146c <switch_lcd>

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 80015e6:	482d      	ldr	r0, [pc, #180]	; (800169c <main+0x1a4>)
 80015e8:	f006 fc46 	bl	8007e78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <main+0x1a8>)
 80015ee:	f006 fc43 	bl	8007e78 <HAL_TIM_Base_Start_IT>

  // init counter variables
  row = 0;
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <main+0x1ac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  keycodeNum = 1;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x1b0>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
  lastStateCLK = 0;
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <main+0x1b4>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
  rotLock = 0;
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <main+0x1b8>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

  lcd_counter = 0;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <main+0x1bc>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
  turn_counter = 1;
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <main+0x1c0>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  //ILI9341_FillScreen(WHITE);

	  // draw the counter to the lcd
	  if (writeScreen) {
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <main+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01b      	beq.n	8001656 <main+0x15e>
		  sprintf(buffer1, "%-3d", (int)wpm);
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <main+0x1c8>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	ee17 2a90 	vmov	r2, s15
 8001630:	4924      	ldr	r1, [pc, #144]	; (80016c4 <main+0x1cc>)
 8001632:	4618      	mov	r0, r3
 8001634:	f00a fe76 	bl	800c324 <siprintf>
		  ILI9341_DrawText(buffer1, FONT5, 	165, 185, BLACK, WHITE);
 8001638:	f107 0010 	add.w	r0, r7, #16
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2300      	movs	r3, #0
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	23b9      	movs	r3, #185	; 0xb9
 8001648:	22a5      	movs	r2, #165	; 0xa5
 800164a:	490f      	ldr	r1, [pc, #60]	; (8001688 <main+0x190>)
 800164c:	f7ff f807 	bl	800065e <ILI9341_DrawText>
		  writeScreen = 0;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <main+0x1c4>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
	  }

	  switch_lcd();
 8001656:	f7ff ff09 	bl	800146c <switch_lcd>

	  //ILI9341_FillScreen(WHITE);

	  // draw the counter to the lcd
	  sprintf(buffer2, "%d", turn_counter);
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <main+0x1c0>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	4919      	ldr	r1, [pc, #100]	; (80016c8 <main+0x1d0>)
 8001662:	4618      	mov	r0, r3
 8001664:	f00a fe5e 	bl	800c324 <siprintf>
	  ILI9341_DrawText(buffer2, FONT6, 190, 110, BLACK, WHITE);
 8001668:	1d38      	adds	r0, r7, #4
 800166a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	236e      	movs	r3, #110	; 0x6e
 8001676:	22be      	movs	r2, #190	; 0xbe
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <main+0x1a0>)
 800167a:	f7fe fff0 	bl	800065e <ILI9341_DrawText>

	  switch_lcd();
 800167e:	f7ff fef5 	bl	800146c <switch_lcd>
	  if (writeScreen) {
 8001682:	e7c8      	b.n	8001616 <main+0x11e>
 8001684:	0800cc18 	.word	0x0800cc18
 8001688:	08011ba8 	.word	0x08011ba8
 800168c:	0800cc20 	.word	0x0800cc20
 8001690:	0800cc24 	.word	0x0800cc24
 8001694:	0800cc2c 	.word	0x0800cc2c
 8001698:	0800cc84 	.word	0x0800cc84
 800169c:	200002c8 	.word	0x200002c8
 80016a0:	20000310 	.word	0x20000310
 80016a4:	200003d0 	.word	0x200003d0
 80016a8:	200003cc 	.word	0x200003cc
 80016ac:	200003c0 	.word	0x200003c0
 80016b0:	200003c8 	.word	0x200003c8
 80016b4:	200003a0 	.word	0x200003a0
 80016b8:	200003a4 	.word	0x200003a4
 80016bc:	2000001c 	.word	0x2000001c
 80016c0:	200003b8 	.word	0x200003b8
 80016c4:	0800cc40 	.word	0x0800cc40
 80016c8:	0800cc48 	.word	0x0800cc48

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b094      	sub	sp, #80	; 0x50
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f00a fe1a 	bl	800c314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <SystemClock_Config+0xc8>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a26      	ldr	r2, [pc, #152]	; (8001794 <SystemClock_Config+0xc8>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <SystemClock_Config+0xc8>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <SystemClock_Config+0xcc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a20      	ldr	r2, [pc, #128]	; (8001798 <SystemClock_Config+0xcc>)
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <SystemClock_Config+0xcc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001728:	2301      	movs	r3, #1
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800172c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800173c:	2304      	movs	r3, #4
 800173e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001740:	2348      	movs	r3, #72	; 0x48
 8001742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001744:	2302      	movs	r3, #2
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001748:	2303      	movs	r3, #3
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fae1 	bl	8006d18 <HAL_RCC_OscConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800175c:	f000 faaa 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001760:	230f      	movs	r3, #15
 8001762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001764:	2302      	movs	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2102      	movs	r1, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f005 fd43 	bl	8007208 <HAL_RCC_ClockConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001788:	f000 fa94 	bl	8001cb4 <Error_Handler>
  }
}
 800178c:	bf00      	nop
 800178e:	3750      	adds	r7, #80	; 0x50
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	40007000 	.word	0x40007000

0800179c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017a4:	4a27      	ldr	r2, [pc, #156]	; (8001844 <MX_I2C2_Init+0xa8>)
 80017a6:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017aa:	4a27      	ldr	r2, [pc, #156]	; (8001848 <MX_I2C2_Init+0xac>)
 80017ac:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017da:	4819      	ldr	r0, [pc, #100]	; (8001840 <MX_I2C2_Init+0xa4>)
 80017dc:	f001 fbc6 	bl	8002f6c <HAL_I2C_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80017e6:	f000 fa65 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  uint8_t iodir[2] = { 0x00 , 0xf0 };     // set pins 0-3 output and 4-7 as input
 80017ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017ee:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, iodir, 2, HAL_MAX_DELAY);
 80017f0:	f107 020c 	add.w	r2, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2302      	movs	r3, #2
 80017fc:	2140      	movs	r1, #64	; 0x40
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <MX_I2C2_Init+0xa4>)
 8001800:	f001 fcf8 	bl	80031f4 <HAL_I2C_Master_Transmit>
  uint8_t gppu[2] = { 0x06, 0xf0 };       // enable pull up resistors for pins 4-7
 8001804:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001808:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, gppu, 2, HAL_MAX_DELAY);
 800180a:	f107 0208 	add.w	r2, r7, #8
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2302      	movs	r3, #2
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <MX_I2C2_Init+0xa4>)
 800181a:	f001 fceb 	bl	80031f4 <HAL_I2C_Master_Transmit>
  uint8_t ipol[2] = { 0x01, 0xf0 };       // enable reverse for pins 4-7
 800181e:	f24f 0301 	movw	r3, #61441	; 0xf001
 8001822:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, ipol, 2, HAL_MAX_DELAY);
 8001824:	1d3a      	adds	r2, r7, #4
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2302      	movs	r3, #2
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_I2C2_Init+0xa4>)
 8001832:	f001 fcdf 	bl	80031f4 <HAL_I2C_Master_Transmit>

  /* USER CODE END I2C2_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200001bc 	.word	0x200001bc
 8001844:	40005800 	.word	0x40005800
 8001848:	00061a80 	.word	0x00061a80

0800184c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001880:	2208      	movs	r2, #8
 8001882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001898:	220a      	movs	r2, #10
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_SPI1_Init+0x64>)
 800189e:	f005 febf 	bl	8007620 <HAL_SPI_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018a8:	f000 fa04 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000210 	.word	0x20000210
 80018b4:	40013000 	.word	0x40013000

080018b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <MX_TIM4_Init+0x90>)
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <MX_TIM4_Init+0x94>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_TIM4_Init+0x90>)
 80018dc:	229f      	movs	r2, #159	; 0x9f
 80018de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <MX_TIM4_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_TIM4_Init+0x90>)
 80018e8:	2263      	movs	r2, #99	; 0x63
 80018ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_TIM4_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_TIM4_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <MX_TIM4_Init+0x90>)
 80018fa:	f006 fa6d 	bl	8007dd8 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001904:	f000 f9d6 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <MX_TIM4_Init+0x90>)
 8001916:	f006 fc56 	bl	80081c6 <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001920:	f000 f9c8 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_TIM4_Init+0x90>)
 8001932:	f006 fe71 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800193c:	f000 f9ba 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200002c8 	.word	0x200002c8
 800194c:	40000800 	.word	0x40000800

08001950 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_TIM6_Init+0x64>)
 8001960:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <MX_TIM6_Init+0x68>)
 8001962:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_TIM6_Init+0x64>)
 8001966:	f240 623f 	movw	r2, #1599	; 0x63f
 800196a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_TIM6_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_TIM6_Init+0x64>)
 8001974:	2213      	movs	r2, #19
 8001976:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_TIM6_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_TIM6_Init+0x64>)
 8001980:	f006 fa2a 	bl	8007dd8 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800198a:	f000 f993 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM6_Init+0x64>)
 800199c:	f006 fe3c 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019a6:	f000 f985 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000310 	.word	0x20000310
 80019b8:	40001000 	.word	0x40001000

080019bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_TIM7_Init+0x64>)
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <MX_TIM7_Init+0x68>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000 - 1;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_TIM7_Init+0x64>)
 80019d2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80019d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_TIM7_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000 - 1;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_TIM7_Init+0x64>)
 80019e0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_TIM7_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <MX_TIM7_Init+0x64>)
 80019ee:	f006 f9f3 	bl	8007dd8 <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80019f8:	f000 f95c 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_TIM7_Init+0x64>)
 8001a0a:	f006 fe05 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001a14:	f000 f94e 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000358 	.word	0x20000358
 8001a24:	40001400 	.word	0x40001400

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_DMA_Init+0x3c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <MX_DMA_Init+0x3c>)
 8001a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_DMA_Init+0x3c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	203b      	movs	r0, #59	; 0x3b
 8001a50:	f000 fce7 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a54:	203b      	movs	r0, #59	; 0x3b
 8001a56:	f000 fd00 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <MX_GPIO_Init+0x148>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LDC1_RESET_Pin|LCD2_RESET_Pin|LCD1_CS_Pin|LCD1_DC_Pin
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001b2c:	4821      	ldr	r0, [pc, #132]	; (8001bb4 <MX_GPIO_Init+0x14c>)
 8001b2e:	f001 fa03 	bl	8002f38 <HAL_GPIO_WritePin>
                          |LCD2_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	210f      	movs	r1, #15
 8001b36:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <MX_GPIO_Init+0x150>)
 8001b38:	f001 f9fe 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LDC1_RESET_Pin LCD2_RESET_Pin LCD1_CS_Pin LCD1_DC_Pin
                           LCD2_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LDC1_RESET_Pin|LCD2_RESET_Pin|LCD1_CS_Pin|LCD1_DC_Pin
 8001b3c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b40:	61fb      	str	r3, [r7, #28]
                          |LCD2_CS_Pin|LCD2_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <MX_GPIO_Init+0x14c>)
 8001b56:	f001 f83b 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_Pin ROT_DT_Pin ROT_CLCK_Pin */
  GPIO_InitStruct.Pin = ROT_SW_Pin|ROT_DT_Pin|ROT_CLCK_Pin;
 8001b5a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4813      	ldr	r0, [pc, #76]	; (8001bbc <MX_GPIO_Init+0x154>)
 8001b70:	f001 f82e 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8001b74:	230f      	movs	r3, #15
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <MX_GPIO_Init+0x150>)
 8001b8c:	f001 f820 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8001b90:	23f0      	movs	r3, #240	; 0xf0
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_GPIO_Init+0x150>)
 8001ba4:	f001 f814 	bl	8002bd0 <HAL_GPIO_Init>

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40020800 	.word	0x40020800

08001bc0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d107      	bne.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8001bd0:	f7ff fb80 	bl	80012d4 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	492c      	ldr	r1, [pc, #176]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bd8:	482c      	ldr	r0, [pc, #176]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001bda:	f008 fbb1 	bl	800a340 <USBD_HID_SendReport>
		numCycles++;
		wpm = (charCount / 5.0f) / ((1.0f * numCycles) / 60.0f);
		charsInCycle = 0;
		writeScreen = 1;
	}
}
 8001bde:	e04c      	b.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xba>
	else if (htim == &htim6) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d104      	bne.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x32>
		scan_keypad();
 8001be8:	f7ff f9ba 	bl	8000f60 <scan_keypad>
		scan_rotary();
 8001bec:	f7ff faf0 	bl	80011d0 <scan_rotary>
}
 8001bf0:	e043      	b.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xba>
	else if (htim == &htim7) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d13f      	bne.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xba>
		if (charsInCycle == 0) {
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d117      	bne.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x72>
			dryCycles++;
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c0a:	6013      	str	r3, [r2, #0]
			if (dryCycles == 5) {
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d10e      	bne.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x72>
				charCount = 0;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
				charsInCycle = 0;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
				dryCycles = 0;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
				numCycles = 0;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001c2e:	f006 f993 	bl	8007f58 <HAL_TIM_Base_Stop_IT>
		numCycles++;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a1a      	ldr	r2, [pc, #104]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c3a:	6013      	str	r3, [r2, #0]
		wpm = (charCount / 5.0f) / ((1.0f * numCycles) / 60.0f);
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c48:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001c4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8001ca8 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8001c60:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
		charsInCycle = 0;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
		writeScreen = 1;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002c8 	.word	0x200002c8
 8001c88:	200003fc 	.word	0x200003fc
 8001c8c:	20000410 	.word	0x20000410
 8001c90:	20000310 	.word	0x20000310
 8001c94:	20000358 	.word	0x20000358
 8001c98:	200003ac 	.word	0x200003ac
 8001c9c:	200003b4 	.word	0x200003b4
 8001ca0:	200003a8 	.word	0x200003a8
 8001ca4:	200003b0 	.word	0x200003b0
 8001ca8:	42700000 	.word	0x42700000
 8001cac:	200003b8 	.word	0x200003b8
 8001cb0:	2000001c 	.word	0x2000001c

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_MspInit+0x4c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_MspInit+0x4c>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_MspInit+0x4c>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_I2C_MspInit+0xa4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d13c      	bne.n	8001dac <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_I2C_MspInit+0xa8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_I2C_MspInit+0xa8>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_I2C_MspInit+0xa8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d54:	2312      	movs	r3, #18
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d60:	2304      	movs	r3, #4
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4814      	ldr	r0, [pc, #80]	; (8001dbc <HAL_I2C_MspInit+0xac>)
 8001d6c:	f000 ff30 	bl	8002bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_I2C_MspInit+0xa8>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_I2C_MspInit+0xa8>)
 8001d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_I2C_MspInit+0xa8>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2021      	movs	r0, #33	; 0x21
 8001d92:	f000 fb46 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d96:	2021      	movs	r0, #33	; 0x21
 8001d98:	f000 fb5f 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2022      	movs	r0, #34	; 0x22
 8001da2:	f000 fb3e 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001da6:	2022      	movs	r0, #34	; 0x22
 8001da8:	f000 fb57 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40005800 	.word	0x40005800
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <HAL_SPI_MspInit+0xe0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d159      	bne.n	8001e96 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HAL_SPI_MspInit+0xe4>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <HAL_SPI_MspInit+0xe4>)
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_SPI_MspInit+0xe4>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_SPI_MspInit+0xe4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_SPI_MspInit+0xe4>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <HAL_SPI_MspInit+0xe4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e1a:	23a0      	movs	r3, #160	; 0xa0
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <HAL_SPI_MspInit+0xe8>)
 8001e36:	f000 fecb 	bl	8002bd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_SPI_MspInit+0xf0>)
 8001e3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e7c:	f000 fb08 	bl	8002490 <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001e86:	f7ff ff15 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e8e:	649a      	str	r2, [r3, #72]	; 0x48
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_SPI_MspInit+0xec>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	20000268 	.word	0x20000268
 8001eb0:	40026458 	.word	0x40026458

08001eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d116      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	201e      	movs	r0, #30
 8001ee8:	f000 fa9b 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eec:	201e      	movs	r0, #30
 8001eee:	f000 fab4 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ef2:	e036      	b.n	8001f62 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_TIM_Base_MspInit+0xc0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d116      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2036      	movs	r0, #54	; 0x36
 8001f20:	f000 fa7f 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f24:	2036      	movs	r0, #54	; 0x36
 8001f26:	f000 fa98 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 8001f2a:	e01a      	b.n	8001f62 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_TIM_Base_MspInit+0xc4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d115      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2037      	movs	r0, #55	; 0x37
 8001f58:	f000 fa63 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f5c:	2037      	movs	r0, #55	; 0x37
 8001f5e:	f000 fa7c 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40000800 	.word	0x40000800
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40001000 	.word	0x40001000
 8001f78:	40001400 	.word	0x40001400

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc8:	f000 f90c 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM4_IRQHandler+0x10>)
 8001fd6:	f005 ffee 	bl	8007fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002c8 	.word	0x200002c8

08001fe4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <I2C2_EV_IRQHandler+0x10>)
 8001fea:	f001 fc27 	bl	800383c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200001bc 	.word	0x200001bc

08001ff8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <I2C2_ER_IRQHandler+0x10>)
 8001ffe:	f001 fd8e 	bl	8003b1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200001bc 	.word	0x200001bc

0800200c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <TIM6_DAC_IRQHandler+0x10>)
 8002012:	f005 ffd0 	bl	8007fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000310 	.word	0x20000310

08002020 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM7_IRQHandler+0x10>)
 8002026:	f005 ffc6 	bl	8007fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000358 	.word	0x20000358

08002034 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA2_Stream3_IRQHandler+0x10>)
 800203a:	f000 fb51 	bl	80026e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000268 	.word	0x20000268

08002048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <OTG_FS_IRQHandler+0x10>)
 800204e:	f003 fd4d 	bl	8005aec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000aec 	.word	0x20000aec

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f00a f918 	bl	800c2c0 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20020000 	.word	0x20020000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	20000404 	.word	0x20000404
 80020c4:	20001020 	.word	0x20001020

080020c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f0:	480d      	ldr	r0, [pc, #52]	; (8002128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002108:	4c0b      	ldr	r4, [pc, #44]	; (8002138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002116:	f7ff ffd7 	bl	80020c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211a:	f00a f8d7 	bl	800c2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7ff f9eb 	bl	80014f8 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002130:	08017248 	.word	0x08017248
  ldr r2, =_sbss
 8002134:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002138:	2000101c 	.word	0x2000101c

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_Init+0x40>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_Init+0x40>)
 8002156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_Init+0x40>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f94f 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff fda4 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f967 	bl	8002476 <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 f92f 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000020 	.word	0x20000020
 80021dc:	20000028 	.word	0x20000028
 80021e0:	20000024 	.word	0x20000024

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000028 	.word	0x20000028
 8002208:	20000408 	.word	0x20000408

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000408 	.word	0x20000408

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d005      	beq.n	800224a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_Delay+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224a:	bf00      	nop
 800224c:	f7ff ffde 	bl	800220c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d8f7      	bhi.n	800224c <HAL_Delay+0x28>
  {
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000028 	.word	0x20000028

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff feb6 	bl	800220c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e099      	b.n	80025e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024cc:	e00f      	b.n	80024ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ce:	f7ff fe9d 	bl	800220c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d908      	bls.n	80024ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e078      	b.n	80025e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e8      	bne.n	80024ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_DMA_Init+0x158>)
 8002508:	4013      	ands	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0307 	bic.w	r3, r3, #7
 800256e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b04      	cmp	r3, #4
 8002580:	d117      	bne.n	80025b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fa9f 	bl	8002ad8 <DMA_CheckFifoParam>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ae:	2301      	movs	r3, #1
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa56 	bl	8002a6c <DMA_CalcBaseAndBitshift>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	223f      	movs	r2, #63	; 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	f010803f 	.word	0xf010803f

080025ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_DMA_Start_IT+0x26>
 800260e:	2302      	movs	r3, #2
 8002610:	e040      	b.n	8002694 <HAL_DMA_Start_IT+0xa8>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d12f      	bne.n	8002686 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f9e8 	bl	8002a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	223f      	movs	r2, #63	; 0x3f
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0216 	orr.w	r2, r2, #22
 800265a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0208 	orr.w	r2, r2, #8
 8002672:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e005      	b.n	8002692 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002692:	7dfb      	ldrb	r3, [r7, #23]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d004      	beq.n	80026ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00c      	b.n	80026d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2205      	movs	r2, #5
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026ec:	4b8e      	ldr	r3, [pc, #568]	; (8002928 <HAL_DMA_IRQHandler+0x248>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a8e      	ldr	r2, [pc, #568]	; (800292c <HAL_DMA_IRQHandler+0x24c>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	2208      	movs	r2, #8
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01a      	beq.n	800274c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0204 	bic.w	r2, r2, #4
 8002732:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2208      	movs	r2, #8
 800273a:	409a      	lsls	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2201      	movs	r2, #1
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d012      	beq.n	8002782 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f043 0202 	orr.w	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2204      	movs	r2, #4
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d012      	beq.n	80027b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2204      	movs	r2, #4
 80027a6:	409a      	lsls	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f043 0204 	orr.w	r2, r3, #4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	2210      	movs	r2, #16
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d043      	beq.n	8002850 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03c      	beq.n	8002850 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	2210      	movs	r2, #16
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d024      	beq.n	8002850 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
 800280e:	e01f      	b.n	8002850 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e016      	b.n	8002850 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0208 	bic.w	r2, r2, #8
 800283e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2220      	movs	r2, #32
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 808f 	beq.w	8002980 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8087 	beq.w	8002980 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2220      	movs	r2, #32
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b05      	cmp	r3, #5
 8002888:	d136      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_IRQHandler+0x1da>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	223f      	movs	r2, #63	; 0x3f
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d07e      	beq.n	80029ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
        }
        return;
 80028f6:	e079      	b.n	80029ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01d      	beq.n	8002942 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	2b00      	cmp	r3, #0
 800291a:	d031      	beq.n	8002980 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
 8002924:	e02c      	b.n	8002980 <HAL_DMA_IRQHandler+0x2a0>
 8002926:	bf00      	nop
 8002928:	20000020 	.word	0x20000020
 800292c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d023      	beq.n	8002980 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
 8002940:	e01e      	b.n	8002980 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10f      	bne.n	8002970 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0210 	bic.w	r2, r2, #16
 800295e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	2b00      	cmp	r3, #0
 8002986:	d032      	beq.n	80029ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d022      	beq.n	80029da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2205      	movs	r2, #5
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3301      	adds	r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d307      	bcc.n	80029c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f2      	bne.n	80029ac <HAL_DMA_IRQHandler+0x2cc>
 80029c6:	e000      	b.n	80029ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
 80029ea:	e000      	b.n	80029ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80029ec:	bf00      	nop
    }
  }
}
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a02:	b2db      	uxtb	r3, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d108      	bne.n	8002a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4e:	e007      	b.n	8002a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3b10      	subs	r3, #16
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d909      	bls.n	8002aae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	1d1a      	adds	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8002aac:	e007      	b.n	8002abe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	aaaaaaab 	.word	0xaaaaaaab
 8002ad4:	080171fc 	.word	0x080171fc

08002ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11f      	bne.n	8002b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d856      	bhi.n	8002ba6 <DMA_CheckFifoParam+0xce>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x28>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b23 	.word	0x08002b23
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002ba7 	.word	0x08002ba7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d046      	beq.n	8002baa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e043      	b.n	8002baa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b2a:	d140      	bne.n	8002bae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e03d      	b.n	8002bae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	d121      	bne.n	8002b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d837      	bhi.n	8002bb2 <DMA_CheckFifoParam+0xda>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <DMA_CheckFifoParam+0x70>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b5f 	.word	0x08002b5f
 8002b50:	08002b59 	.word	0x08002b59
 8002b54:	08002b71 	.word	0x08002b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e030      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d025      	beq.n	8002bb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e022      	b.n	8002bb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b78:	d11f      	bne.n	8002bba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7e:	e01c      	b.n	8002bba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d903      	bls.n	8002b8e <DMA_CheckFifoParam+0xb6>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d003      	beq.n	8002b94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b8c:	e018      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      break;
 8002b92:	e015      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba4:	e00b      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e00a      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e008      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e006      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e004      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e16b      	b.n	8002ec4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f040 815a 	bne.w	8002ebe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d005      	beq.n	8002c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d130      	bne.n	8002c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0201 	and.w	r2, r3, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d017      	beq.n	8002cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d123      	bne.n	8002d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	08da      	lsrs	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3208      	adds	r2, #8
 8002d0e:	69b9      	ldr	r1, [r7, #24]
 8002d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80b4 	beq.w	8002ebe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	4b60      	ldr	r3, [pc, #384]	; (8002edc <HAL_GPIO_Init+0x30c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a5f      	ldr	r2, [pc, #380]	; (8002edc <HAL_GPIO_Init+0x30c>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_GPIO_Init+0x30c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d72:	4a5b      	ldr	r2, [pc, #364]	; (8002ee0 <HAL_GPIO_Init+0x310>)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	220f      	movs	r2, #15
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_GPIO_Init+0x314>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02b      	beq.n	8002df6 <HAL_GPIO_Init+0x226>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_GPIO_Init+0x318>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d025      	beq.n	8002df2 <HAL_GPIO_Init+0x222>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_GPIO_Init+0x31c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01f      	beq.n	8002dee <HAL_GPIO_Init+0x21e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <HAL_GPIO_Init+0x320>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_GPIO_Init+0x21a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <HAL_GPIO_Init+0x324>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x216>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <HAL_GPIO_Init+0x328>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x212>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <HAL_GPIO_Init+0x32c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x20e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <HAL_GPIO_Init+0x330>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x20a>
 8002dd6:	2307      	movs	r3, #7
 8002dd8:	e00e      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	e00c      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002dde:	2306      	movs	r3, #6
 8002de0:	e00a      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002de2:	2305      	movs	r3, #5
 8002de4:	e008      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e004      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e002      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_GPIO_Init+0x228>
 8002df6:	2300      	movs	r3, #0
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f002 0203 	and.w	r2, r2, #3
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	4093      	lsls	r3, r2
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e08:	4935      	ldr	r1, [pc, #212]	; (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3a:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e40:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb8:	4a12      	ldr	r2, [pc, #72]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	f67f ae90 	bls.w	8002bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020c00 	.word	0x40020c00
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40021400 	.word	0x40021400
 8002efc:	40021800 	.word	0x40021800
 8002f00:	40021c00 	.word	0x40021c00
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
 8002f24:	e001      	b.n	8002f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f54:	e003      	b.n	8002f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	041a      	lsls	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e12b      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe febc 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f004 fb12 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a81      	ldr	r2, [pc, #516]	; (80031e0 <HAL_I2C_Init+0x274>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d807      	bhi.n	8002ff0 <HAL_I2C_Init+0x84>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_I2C_Init+0x278>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e006      	b.n	8002ffe <HAL_I2C_Init+0x92>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a7d      	ldr	r2, [pc, #500]	; (80031e8 <HAL_I2C_Init+0x27c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e7      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a78      	ldr	r2, [pc, #480]	; (80031ec <HAL_I2C_Init+0x280>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_I2C_Init+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d802      	bhi.n	8003040 <HAL_I2C_Init+0xd4>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	e009      	b.n	8003054 <HAL_I2C_Init+0xe8>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <HAL_I2C_Init+0x284>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	3301      	adds	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	495c      	ldr	r1, [pc, #368]	; (80031e0 <HAL_I2C_Init+0x274>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d819      	bhi.n	80030a8 <HAL_I2C_Init+0x13c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003088:	400b      	ands	r3, r1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_I2C_Init+0x138>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e59      	subs	r1, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fbb1 f3f3 	udiv	r3, r1, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	e051      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e04f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_I2C_Init+0x168>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Init+0x18e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x196>
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <HAL_I2C_Init+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e58      	subs	r0, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	fbb0 f3f3 	udiv	r3, r0, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6911      	ldr	r1, [r2, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	000186a0 	.word	0x000186a0
 80031e4:	001e847f 	.word	0x001e847f
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	461a      	mov	r2, r3
 8003200:	460b      	mov	r3, r1
 8003202:	817b      	strh	r3, [r7, #10]
 8003204:	4613      	mov	r3, r2
 8003206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff f800 	bl	800220c <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	f040 80e0 	bne.w	80033dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	4970      	ldr	r1, [pc, #448]	; (80033e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f002 f8e6 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	e0d3      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_I2C_Master_Transmit+0x50>
 8003240:	2302      	movs	r3, #2
 8003242:	e0cc      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d007      	beq.n	800326a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2210      	movs	r2, #16
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a50      	ldr	r2, [pc, #320]	; (80033ec <HAL_I2C_Master_Transmit+0x1f8>)
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f001 fea8 	bl	8005008 <I2C_MasterRequestWrite>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e08d      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032d8:	e066      	b.n	80033a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f002 f960 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06b      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d11b      	bne.n	800337c <HAL_I2C_Master_Transmit+0x188>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f002 f950 	bl	8005626 <I2C_WaitOnBTFFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01a      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d194      	bne.n	80032da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	00100002 	.word	0x00100002
 80033ec:	ffff0000 	.word	0xffff0000

080033f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
 8003400:	4613      	mov	r3, r2
 8003402:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7fe ff02 	bl	800220c <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b20      	cmp	r3, #32
 8003414:	f040 820b 	bne.w	800382e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2319      	movs	r3, #25
 800341e:	2201      	movs	r2, #1
 8003420:	497c      	ldr	r1, [pc, #496]	; (8003614 <HAL_I2C_Master_Receive+0x224>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f001 ffe8 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	e1fe      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_I2C_Master_Receive+0x50>
 800343c:	2302      	movs	r3, #2
 800343e:	e1f7      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d007      	beq.n	8003466 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003474:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2222      	movs	r2, #34	; 0x22
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2210      	movs	r2, #16
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	893a      	ldrh	r2, [r7, #8]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_I2C_Master_Receive+0x228>)
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 fe2c 	bl	800510c <I2C_MasterRequestRead>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1b8      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e18c      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11b      	bne.n	800352e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e16c      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	2b02      	cmp	r3, #2
 8003534:	d11b      	bne.n	800356e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	e14c      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003594:	e138      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b03      	cmp	r3, #3
 800359c:	f200 80f1 	bhi.w	8003782 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d123      	bne.n	80035f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f002 f8ad 	bl	800570c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e139      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ee:	e10b      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d14e      	bne.n	8003696 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	2200      	movs	r2, #0
 8003600:	4906      	ldr	r1, [pc, #24]	; (800361c <HAL_I2C_Master_Receive+0x22c>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f001 fef8 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e10e      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
 8003612:	bf00      	nop
 8003614:	00100002 	.word	0x00100002
 8003618:	ffff0000 	.word	0xffff0000
 800361c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003694:	e0b8      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	2200      	movs	r2, #0
 800369e:	4966      	ldr	r1, [pc, #408]	; (8003838 <HAL_I2C_Master_Receive+0x448>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f001 fea9 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0bf      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	2200      	movs	r2, #0
 80036fa:	494f      	ldr	r1, [pc, #316]	; (8003838 <HAL_I2C_Master_Receive+0x448>)
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f001 fe7b 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e091      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003780:	e042      	b.n	8003808 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f001 ffc0 	bl	800570c <I2C_WaitOnRXNEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e04c      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d118      	bne.n	8003808 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f aec2 	bne.w	8003596 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	00010004 	.word	0x00010004

0800383c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b10      	cmp	r3, #16
 800386a:	d003      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x38>
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	f040 80c1 	bne.w	80039f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10d      	bne.n	80038aa <HAL_I2C_EV_IRQHandler+0x6e>
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003894:	d003      	beq.n	800389e <HAL_I2C_EV_IRQHandler+0x62>
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_EV_IRQHandler+0x66>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_I2C_EV_IRQHandler+0x68>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f000 8132 	beq.w	8003b0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x92>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	0a5b      	lsrs	r3, r3, #9
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f001 ffa8 	bl	8005816 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fd83 	bl	80043d2 <I2C_Master_SB>
 80038cc:	e092      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0xb2>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fdf9 	bl	80044de <I2C_Master_ADD10>
 80038ec:	e082      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0xd2>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	0a5b      	lsrs	r3, r3, #9
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fe13 	bl	8004532 <I2C_Master_ADDR>
 800390c:	e072      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03b      	beq.n	8003992 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	f000 80f3 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00f      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x11c>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	0a9b      	lsrs	r3, r3, #10
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x11c>
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f9f3 	bl	8003d3c <I2C_MasterTransmit_TXE>
 8003956:	e04d      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80d6 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	0a5b      	lsrs	r3, r3, #9
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80cf 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	2b21      	cmp	r3, #33	; 0x21
 8003978:	d103      	bne.n	8003982 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa7a 	bl	8003e74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003980:	e0c7      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	f040 80c4 	bne.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fae8 	bl	8003f60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003990:	e0bf      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	f000 80b7 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00f      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x194>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x194>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb5d 	bl	8004088 <I2C_MasterReceive_RXNE>
 80039ce:	e011      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 809a 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	0a5b      	lsrs	r3, r3, #9
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8093 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fc06 	bl	80041fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f2:	e08e      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039f4:	e08d      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e007      	b.n	8003a18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x20e>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	0a5b      	lsrs	r3, r3, #9
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 ffc4 	bl	80049d0 <I2C_Slave_ADDR>
 8003a48:	e066      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_I2C_EV_IRQHandler+0x22e>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a5b      	lsrs	r3, r3, #9
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fffe 	bl	8004a64 <I2C_Slave_STOPF>
 8003a68:	e056      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a6a:	7bbb      	ldrb	r3, [r7, #14]
 8003a6c:	2b21      	cmp	r3, #33	; 0x21
 8003a6e:	d002      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	2b29      	cmp	r3, #41	; 0x29
 8003a74:	d125      	bne.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	09db      	lsrs	r3, r3, #7
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00f      	beq.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x266>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	0a9b      	lsrs	r3, r3, #10
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x266>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 feda 	bl	8004854 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa0:	e039      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d033      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	0a5b      	lsrs	r3, r3, #9
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02d      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 ff07 	bl	80048ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac0:	e029      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	0a9b      	lsrs	r3, r3, #10
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 ff12 	bl	8004910 <I2C_SlaveReceive_RXNE>
 8003aec:	e014      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0a5b      	lsrs	r3, r3, #9
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 ff40 	bl	800498c <I2C_SlaveReceive_BTF>
 8003b0c:	e004      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08a      	sub	sp, #40	; 0x28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x4e>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b6a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	0a5b      	lsrs	r3, r3, #9
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_I2C_ER_IRQHandler+0x78>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003b94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	0a9b      	lsrs	r3, r3, #10
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03f      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d039      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003bae:	7efb      	ldrb	r3, [r7, #27]
 8003bb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bc8:	7ebb      	ldrb	r3, [r7, #26]
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d112      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b21      	cmp	r3, #33	; 0x21
 8003bd8:	d008      	beq.n	8003bec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b29      	cmp	r3, #41	; 0x29
 8003bde:	d005      	beq.n	8003bec <HAL_I2C_ER_IRQHandler+0xce>
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b28      	cmp	r3, #40	; 0x28
 8003be4:	d106      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b21      	cmp	r3, #33	; 0x21
 8003bea:	d103      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 f869 	bl	8004cc4 <I2C_Slave_AF>
 8003bf2:	e016      	b.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c06:	7efb      	ldrb	r3, [r7, #27]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d002      	beq.n	8003c12 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c0c:	7efb      	ldrb	r3, [r7, #27]
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	0adb      	lsrs	r3, r3, #11
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0x12e>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003c4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 f8a0 	bl	8004da4 <I2C_ITError>
  }
}
 8003c64:	bf00      	nop
 8003c66:	3728      	adds	r7, #40	; 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d150      	bne.n	8003e04 <I2C_MasterTransmit_TXE+0xc8>
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b21      	cmp	r3, #33	; 0x21
 8003d66:	d14d      	bne.n	8003e04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d01d      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d01a      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d7a:	d016      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2211      	movs	r2, #17
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff62 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003da8:	e060      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003db8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d107      	bne.n	8003df4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff7d 	bl	8003cec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003df2:	e03b      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff35 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e02:	e033      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b21      	cmp	r3, #33	; 0x21
 8003e08:	d005      	beq.n	8003e16 <I2C_MasterTransmit_TXE+0xda>
 8003e0a:	7bbb      	ldrb	r3, [r7, #14]
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d12d      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b22      	cmp	r3, #34	; 0x22
 8003e14:	d12a      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e30:	e01c      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d103      	bne.n	8003e46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f88e 	bl	8003f60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e44:	e012      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e6a:	e7ff      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b21      	cmp	r3, #33	; 0x21
 8003e8c:	d164      	bne.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ebc:	e04c      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d01d      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d01a      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed0:	d016      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ee0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2211      	movs	r2, #17
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff feb7 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
}
 8003efe:	e02b      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d107      	bne.n	8003f4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fed2 	bl	8003cec <HAL_I2C_MemTxCpltCallback>
}
 8003f48:	e006      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fe8a 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10b      	bne.n	8003f98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	1c9a      	adds	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003f96:	e073      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	121b      	asrs	r3, r3, #8
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fb2:	e065      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10b      	bne.n	8003fd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fd2:	e055      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d151      	bne.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b22      	cmp	r3, #34	; 0x22
 8003fe0:	d10d      	bne.n	8003ffe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ffc:	e040      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d112      	bne.n	8004034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004032:	e025      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d120      	bne.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b21      	cmp	r3, #33	; 0x21
 8004042:	d11d      	bne.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004052:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe36 	bl	8003cec <HAL_I2C_MemTxCpltCallback>
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b22      	cmp	r3, #34	; 0x22
 800409a:	f040 80ac 	bne.w	80041f6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d921      	bls.n	80040f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b03      	cmp	r3, #3
 80040da:	f040 808c 	bne.w	80041f6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80040ee:	e082      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d075      	beq.n	80041e4 <I2C_MasterReceive_RXNE+0x15c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d002      	beq.n	8004104 <I2C_MasterReceive_RXNE+0x7c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d16f      	bne.n	80041e4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f001 facf 	bl	80056a8 <I2C_WaitOnSTOPRequestThroughIT>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d142      	bne.n	8004196 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800412e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d10a      	bne.n	8004180 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fdc1 	bl	8003d00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800417e:	e03a      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2212      	movs	r2, #18
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fd76 	bl	8003c80 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004194:	e02f      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fd99 	bl	8003d14 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041e2:	e008      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	605a      	str	r2, [r3, #4]
}
 80041f4:	e7ff      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b04      	cmp	r3, #4
 8004214:	d11b      	bne.n	800424e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004224:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800424c:	e0bd      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d129      	bne.n	80042ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00a      	beq.n	8004284 <I2C_MasterReceive_BTF+0x86>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d007      	beq.n	8004284 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004282:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042aa:	e08e      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d176      	bne.n	80043a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d002      	beq.n	80042c2 <I2C_MasterReceive_BTF+0xc4>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d108      	bne.n	80042d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e019      	b.n	8004308 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d002      	beq.n	80042e0 <I2C_MasterReceive_BTF+0xe2>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d108      	bne.n	80042f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e00a      	b.n	8004308 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d007      	beq.n	8004308 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004362:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d10a      	bne.n	800438e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fcba 	bl	8003d00 <HAL_I2C_MemRxCpltCallback>
}
 800438c:	e01d      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2212      	movs	r2, #18
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fc6f 	bl	8003c80 <HAL_I2C_MasterRxCpltCallback>
}
 80043a2:	e012      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d117      	bne.n	8004416 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004400:	e067      	b.n	80044d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
}
 8004414:	e05d      	b.n	80044d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441e:	d133      	bne.n	8004488 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b21      	cmp	r3, #33	; 0x21
 800442a:	d109      	bne.n	8004440 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	e008      	b.n	8004452 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <I2C_Master_SB+0x92>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	2b00      	cmp	r3, #0
 800446a:	d032      	beq.n	80044d2 <I2C_Master_SB+0x100>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02d      	beq.n	80044d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004484:	605a      	str	r2, [r3, #4]
}
 8004486:	e024      	b.n	80044d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10e      	bne.n	80044ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	b29b      	uxth	r3, r3
 8004496:	11db      	asrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f063 030f 	orn	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
}
 80044ac:	e011      	b.n	80044d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10d      	bne.n	80044d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	11db      	asrs	r3, r3, #7
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0306 	and.w	r3, r3, #6
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f063 030e 	orn	r3, r3, #14
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <I2C_Master_ADD10+0x26>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <I2C_Master_ADD10+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004524:	605a      	str	r2, [r3, #4]
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004532:	b480      	push	{r7}
 8004534:	b091      	sub	sp, #68	; 0x44
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	; 0x22
 800455a:	f040 8169 	bne.w	8004830 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <I2C_Master_ADDR+0x54>
 8004566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d10b      	bne.n	8004586 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	633b      	str	r3, [r7, #48]	; 0x30
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	e160      	b.n	8004848 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11d      	bne.n	80045ca <I2C_Master_ADDR+0x98>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004596:	d118      	bne.n	80045ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	651a      	str	r2, [r3, #80]	; 0x50
 80045c8:	e13e      	b.n	8004848 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d113      	bne.n	80045fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e115      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	f040 808a 	bne.w	800471c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800460e:	d137      	bne.n	8004680 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462e:	d113      	bne.n	8004658 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	e0e7      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e0d3      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	2b08      	cmp	r3, #8
 8004684:	d02e      	beq.n	80046e4 <I2C_Master_ADDR+0x1b2>
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	2b20      	cmp	r3, #32
 800468a:	d02b      	beq.n	80046e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	2b12      	cmp	r3, #18
 8004690:	d102      	bne.n	8004698 <I2C_Master_ADDR+0x166>
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	2b01      	cmp	r3, #1
 8004696:	d125      	bne.n	80046e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	2b04      	cmp	r3, #4
 800469c:	d00e      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d00b      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d008      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e007      	b.n	80046cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	e0a1      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e085      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d14d      	bne.n	80047c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2b04      	cmp	r3, #4
 800472a:	d016      	beq.n	800475a <I2C_Master_ADDR+0x228>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b02      	cmp	r3, #2
 8004730:	d013      	beq.n	800475a <I2C_Master_ADDR+0x228>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b10      	cmp	r3, #16
 8004736:	d010      	beq.n	800475a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e007      	b.n	800476a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004778:	d117      	bne.n	80047aa <I2C_Master_ADDR+0x278>
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004780:	d00b      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d008      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	2b08      	cmp	r3, #8
 800478c:	d005      	beq.n	800479a <I2C_Master_ADDR+0x268>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	2b20      	cmp	r3, #32
 8004798:	d107      	bne.n	80047aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e032      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d117      	bne.n	8004812 <I2C_Master_ADDR+0x2e0>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e8:	d00b      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d008      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d005      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d002      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d107      	bne.n	8004812 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004810:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800482e:	e00b      	b.n	8004848 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	e7ff      	b.n	8004848 <I2C_Master_ADDR+0x316>
 8004848:	bf00      	nop
 800484a:	3744      	adds	r7, #68	; 0x44
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02b      	beq.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b29      	cmp	r3, #41	; 0x29
 80048a0:	d111      	bne.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2228      	movs	r2, #40	; 0x28
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff f9e7 	bl	8003c94 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d011      	beq.n	8004904 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02c      	beq.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d114      	bne.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b2a      	cmp	r3, #42	; 0x2a
 800495e:	d111      	bne.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2228      	movs	r2, #40	; 0x28
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f992 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d012      	beq.n	80049c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049ea:	2b28      	cmp	r3, #40	; 0x28
 80049ec:	d127      	bne.n	8004a3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	09db      	lsrs	r3, r3, #7
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	81bb      	strh	r3, [r7, #12]
 8004a20:	e002      	b.n	8004a28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a30:	89ba      	ldrh	r2, [r7, #12]
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff f940 	bl	8003cbc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a3c:	e00e      	b.n	8004a5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac0:	d172      	bne.n	8004ba8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b22      	cmp	r3, #34	; 0x22
 8004ac6:	d002      	beq.n	8004ace <I2C_Slave_STOPF+0x6a>
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b2a      	cmp	r3, #42	; 0x2a
 8004acc:	d135      	bne.n	8004b3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fd ff74 	bl	80029f4 <HAL_DMA_GetState>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d049      	beq.n	8004ba6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	4a69      	ldr	r2, [pc, #420]	; (8004cbc <I2C_Slave_STOPF+0x258>)
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd fdbc 	bl	800269c <HAL_DMA_Abort_IT>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03d      	beq.n	8004ba6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b38:	e035      	b.n	8004ba6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd ff3e 	bl	80029f4 <HAL_DMA_GetState>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d014      	beq.n	8004ba8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	4a4e      	ldr	r2, [pc, #312]	; (8004cbc <I2C_Slave_STOPF+0x258>)
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fd86 	bl	800269c <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
 8004ba4:	e000      	b.n	8004ba8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ba6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d03e      	beq.n	8004c30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d112      	bne.n	8004be6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d112      	bne.n	8004c1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0204 	orr.w	r2, r3, #4
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8b3 	bl	8004da4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c3e:	e039      	b.n	8004cb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b2a      	cmp	r3, #42	; 0x2a
 8004c44:	d109      	bne.n	8004c5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2228      	movs	r2, #40	; 0x28
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff f827 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b28      	cmp	r3, #40	; 0x28
 8004c64:	d111      	bne.n	8004c8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <I2C_Slave_STOPF+0x25c>)
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff f828 	bl	8003cd8 <HAL_I2C_ListenCpltCallback>
}
 8004c88:	e014      	b.n	8004cb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	2b22      	cmp	r3, #34	; 0x22
 8004c90:	d002      	beq.n	8004c98 <I2C_Slave_STOPF+0x234>
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b22      	cmp	r3, #34	; 0x22
 8004c96:	d10d      	bne.n	8004cb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fe fffa 	bl	8003ca8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	080052a9 	.word	0x080052a9
 8004cc0:	ffff0000 	.word	0xffff0000

08004cc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d002      	beq.n	8004ce6 <I2C_Slave_AF+0x22>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d129      	bne.n	8004d3a <I2C_Slave_AF+0x76>
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b28      	cmp	r3, #40	; 0x28
 8004cea:	d126      	bne.n	8004d3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <I2C_Slave_AF+0xdc>)
 8004cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe ffd0 	bl	8003cd8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d38:	e02e      	b.n	8004d98 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b21      	cmp	r3, #33	; 0x21
 8004d3e:	d126      	bne.n	8004d8e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <I2C_Slave_AF+0xdc>)
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2221      	movs	r2, #33	; 0x21
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d84:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fe ff84 	bl	8003c94 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d8c:	e004      	b.n	8004d98 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d96:	615a      	str	r2, [r3, #20]
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	ffff0000 	.word	0xffff0000

08004da4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d002      	beq.n	8004dc8 <I2C_ITError+0x24>
 8004dc2:	7bbb      	ldrb	r3, [r7, #14]
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d10a      	bne.n	8004dde <I2C_ITError+0x3a>
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b22      	cmp	r3, #34	; 0x22
 8004dcc:	d107      	bne.n	8004dde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004de4:	2b28      	cmp	r3, #40	; 0x28
 8004de6:	d107      	bne.n	8004df8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2228      	movs	r2, #40	; 0x28
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004df6:	e015      	b.n	8004e24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e06:	d00a      	beq.n	8004e1e <I2C_ITError+0x7a>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b60      	cmp	r3, #96	; 0x60
 8004e0c:	d007      	beq.n	8004e1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	d162      	bne.n	8004efa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d020      	beq.n	8004e94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4a6a      	ldr	r2, [pc, #424]	; (8005000 <I2C_ITError+0x25c>)
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd fc1c 	bl	800269c <HAL_DMA_Abort_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8089 	beq.w	8004f7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4798      	blx	r3
 8004e92:	e074      	b.n	8004f7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	4a59      	ldr	r2, [pc, #356]	; (8005000 <I2C_ITError+0x25c>)
 8004e9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd fbfb 	bl	800269c <HAL_DMA_Abort_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d068      	beq.n	8004f7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d10b      	bne.n	8004ed2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
 8004ef8:	e041      	b.n	8004f7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b60      	cmp	r3, #96	; 0x60
 8004f04:	d125      	bne.n	8004f52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d10b      	bne.n	8004f3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fe feec 	bl	8003d28 <HAL_I2C_AbortCpltCallback>
 8004f50:	e015      	b.n	8004f7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d10b      	bne.n	8004f78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fe fecb 	bl	8003d14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10e      	bne.n	8004fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d113      	bne.n	8004ff8 <I2C_ITError+0x254>
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b28      	cmp	r3, #40	; 0x28
 8004fd4:	d110      	bne.n	8004ff8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <I2C_ITError+0x260>)
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fe fe70 	bl	8003cd8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	080052a9 	.word	0x080052a9
 8005004:	ffff0000 	.word	0xffff0000

08005008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	460b      	mov	r3, r1
 8005016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d006      	beq.n	8005032 <I2C_MasterRequestWrite+0x2a>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d003      	beq.n	8005032 <I2C_MasterRequestWrite+0x2a>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005030:	d108      	bne.n	8005044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e00b      	b.n	800505c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	2b12      	cmp	r3, #18
 800504a:	d107      	bne.n	800505c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800505a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f9c5 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d103      	bne.n	800508c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e035      	b.n	80050fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005098:	d108      	bne.n	80050ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a8:	611a      	str	r2, [r3, #16]
 80050aa:	e01b      	b.n	80050e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050ac:	897b      	ldrh	r3, [r7, #10]
 80050ae:	11db      	asrs	r3, r3, #7
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0306 	and.w	r3, r3, #6
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f063 030f 	orn	r3, r3, #15
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	490e      	ldr	r1, [pc, #56]	; (8005104 <I2C_MasterRequestWrite+0xfc>)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f9eb 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e010      	b.n	80050fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4907      	ldr	r1, [pc, #28]	; (8005108 <I2C_MasterRequestWrite+0x100>)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f9db 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	00010008 	.word	0x00010008
 8005108:	00010002 	.word	0x00010002

0800510c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005130:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d006      	beq.n	8005146 <I2C_MasterRequestRead+0x3a>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d003      	beq.n	8005146 <I2C_MasterRequestRead+0x3a>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005144:	d108      	bne.n	8005158 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e00b      	b.n	8005170 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	2b11      	cmp	r3, #17
 800515e:	d107      	bne.n	8005170 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f93b 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00d      	beq.n	80051a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005196:	d103      	bne.n	80051a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e079      	b.n	8005298 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ac:	d108      	bne.n	80051c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	e05f      	b.n	8005280 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051c0:	897b      	ldrh	r3, [r7, #10]
 80051c2:	11db      	asrs	r3, r3, #7
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0306 	and.w	r3, r3, #6
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f063 030f 	orn	r3, r3, #15
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	4930      	ldr	r1, [pc, #192]	; (80052a0 <I2C_MasterRequestRead+0x194>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f961 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e054      	b.n	8005298 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4929      	ldr	r1, [pc, #164]	; (80052a4 <I2C_MasterRequestRead+0x198>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f951 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e044      	b.n	8005298 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005232:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f8d9 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	d103      	bne.n	8005264 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005262:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e017      	b.n	8005298 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005268:	897b      	ldrh	r3, [r7, #10]
 800526a:	11db      	asrs	r3, r3, #7
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0306 	and.w	r3, r3, #6
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f063 030e 	orn	r3, r3, #14
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4907      	ldr	r1, [pc, #28]	; (80052a4 <I2C_MasterRequestRead+0x198>)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f90d 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	00010008 	.word	0x00010008
 80052a4:	00010002 	.word	0x00010002

080052a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80052c2:	4b4b      	ldr	r3, [pc, #300]	; (80053f0 <I2C_DMAAbort+0x148>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	4a4a      	ldr	r2, [pc, #296]	; (80053f4 <I2C_DMAAbort+0x14c>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	0a1a      	lsrs	r2, r3, #8
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	00da      	lsls	r2, r3, #3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80052ee:	e00a      	b.n	8005306 <I2C_DMAAbort+0x5e>
    }
    count--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	d0ea      	beq.n	80052dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	2200      	movs	r2, #0
 8005314:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	2200      	movs	r2, #0
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	2200      	movs	r2, #0
 800534a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2200      	movs	r2, #0
 800535a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b60      	cmp	r3, #96	; 0x60
 8005376:	d10e      	bne.n	8005396 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800538e:	6978      	ldr	r0, [r7, #20]
 8005390:	f7fe fcca 	bl	8003d28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005394:	e027      	b.n	80053e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800539c:	2b28      	cmp	r3, #40	; 0x28
 800539e:	d117      	bne.n	80053d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2228      	movs	r2, #40	; 0x28
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053ce:	e007      	b.n	80053e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053e0:	6978      	ldr	r0, [r7, #20]
 80053e2:	f7fe fc97 	bl	8003d14 <HAL_I2C_ErrorCallback>
}
 80053e6:	bf00      	nop
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000020 	.word	0x20000020
 80053f4:	14f8b589 	.word	0x14f8b589

080053f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005408:	e025      	b.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d021      	beq.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fc fefb 	bl	800220c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e023      	b.n	800549e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10d      	bne.n	800547c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	e00c      	b.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	43da      	mvns	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	429a      	cmp	r2, r3
 800549a:	d0b6      	beq.n	800540a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b4:	e051      	b.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d123      	bne.n	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0204 	orr.w	r2, r3, #4
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e046      	b.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d021      	beq.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fc fe79 	bl	800220c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e020      	b.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10c      	bne.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	43da      	mvns	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e00b      	b.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	43da      	mvns	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d18d      	bne.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b0:	e02d      	b.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f900 	bl	80057b8 <I2C_IsAcknowledgeFailed>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02d      	b.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d021      	beq.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fc fe1f 	bl	800220c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d116      	bne.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e007      	b.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d1ca      	bne.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005632:	e02d      	b.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f8bf 	bl	80057b8 <I2C_IsAcknowledgeFailed>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e02d      	b.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d021      	beq.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564c:	f7fc fdde 	bl	800220c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d116      	bne.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e007      	b.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d1ca      	bne.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80056b4:	4b13      	ldr	r3, [pc, #76]	; (8005704 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	08db      	lsrs	r3, r3, #3
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	0a1a      	lsrs	r2, r3, #8
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d107      	bne.n	80056e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e008      	b.n	80056f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	d0e9      	beq.n	80056ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000020 	.word	0x20000020
 8005708:	14f8b589 	.word	0x14f8b589

0800570c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005718:	e042      	b.n	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b10      	cmp	r3, #16
 8005726:	d119      	bne.n	800575c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0210 	mvn.w	r2, #16
 8005730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e029      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575c:	f7fc fd56 	bl	800220c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d302      	bcc.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d116      	bne.n	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e007      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d1b5      	bne.n	800571a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ce:	d11b      	bne.n	8005808 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0204 	orr.w	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005826:	d103      	bne.n	8005830 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800582e:	e007      	b.n	8005840 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005838:	d102      	bne.n	8005840 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2208      	movs	r2, #8
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800584c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584e:	b08f      	sub	sp, #60	; 0x3c
 8005850:	af0a      	add	r7, sp, #40	; 0x28
 8005852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e10f      	b.n	8005a7e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f006 fa11 	bl	800bca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2203      	movs	r2, #3
 8005882:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f003 f860 	bl	8008962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	687e      	ldr	r6, [r7, #4]
 80058aa:	466d      	mov	r5, sp
 80058ac:	f106 0410 	add.w	r4, r6, #16
 80058b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80058c0:	1d33      	adds	r3, r6, #4
 80058c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058c4:	6838      	ldr	r0, [r7, #0]
 80058c6:	f002 ff37 	bl	8008738 <USB_CoreInit>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0d0      	b.n	8005a7e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f003 f84e 	bl	8008984 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	73fb      	strb	r3, [r7, #15]
 80058ec:	e04a      	b.n	8005984 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058ee:	7bfa      	ldrb	r2, [r7, #15]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	333d      	adds	r3, #61	; 0x3d
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	333c      	adds	r3, #60	; 0x3c
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005916:	7bfa      	ldrb	r2, [r7, #15]
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	b298      	uxth	r0, r3
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3344      	adds	r3, #68	; 0x44
 800592a:	4602      	mov	r2, r0
 800592c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	3340      	adds	r3, #64	; 0x40
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	3348      	adds	r3, #72	; 0x48
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005956:	7bfa      	ldrb	r2, [r7, #15]
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	334c      	adds	r3, #76	; 0x4c
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3354      	adds	r3, #84	; 0x54
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	3301      	adds	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	7bfa      	ldrb	r2, [r7, #15]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d3af      	bcc.n	80058ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
 8005992:	e044      	b.n	8005a1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005994:	7bfa      	ldrb	r2, [r7, #15]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059aa:	7bfa      	ldrb	r2, [r7, #15]
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059c0:	7bfa      	ldrb	r2, [r7, #15]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059ec:	7bfa      	ldrb	r2, [r7, #15]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d3b5      	bcc.n	8005994 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	687e      	ldr	r6, [r7, #4]
 8005a30:	466d      	mov	r5, sp
 8005a32:	f106 0410 	add.w	r4, r6, #16
 8005a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a46:	1d33      	adds	r3, r6, #4
 8005a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f002 ffe6 	bl	8008a1c <USB_DevInit>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e00d      	b.n	8005a7e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f004 f935 	bl	8009ce6 <USB_DevDisconnect>

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_PCD_Start+0x1c>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e020      	b.n	8005ae4 <HAL_PCD_Start+0x5e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d109      	bne.n	8005ac6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d005      	beq.n	8005ac6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 ff38 	bl	8008940 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f004 f8e5 	bl	8009ca4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b08d      	sub	sp, #52	; 0x34
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f004 f9a3 	bl	8009e4e <USB_GetMode>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 848a 	bne.w	8006424 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f004 f907 	bl	8009d28 <USB_ReadInterrupts>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8480 	beq.w	8006422 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f004 f8f4 	bl	8009d28 <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d107      	bne.n	8005b5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f002 0202 	and.w	r2, r2, #2
 8005b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f004 f8e2 	bl	8009d28 <USB_ReadInterrupts>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d161      	bne.n	8005c32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0210 	bic.w	r2, r2, #16
 8005b7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	0c5b      	lsrs	r3, r3, #17
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d124      	bne.n	8005bf4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d035      	beq.n	8005c22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6a38      	ldr	r0, [r7, #32]
 8005bca:	f003 ff19 	bl	8009a00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bda:	441a      	add	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bec:	441a      	add	r2, r3
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
 8005bf2:	e016      	b.n	8005c22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	0c5b      	lsrs	r3, r3, #17
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d110      	bne.n	8005c22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c06:	2208      	movs	r2, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6a38      	ldr	r0, [r7, #32]
 8005c0c:	f003 fef8 	bl	8009a00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c1c:	441a      	add	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0210 	orr.w	r2, r2, #16
 8005c30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f004 f876 	bl	8009d28 <USB_ReadInterrupts>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c46:	f040 80a7 	bne.w	8005d98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f004 f87b 	bl	8009d4e <USB_ReadDevAllOutEpInterrupt>
 8005c58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c5a:	e099      	b.n	8005d90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 808e 	beq.w	8005d84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f004 f89f 	bl	8009db6 <USB_ReadDevOutEPInterrupt>
 8005c78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	2301      	movs	r3, #1
 8005c94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 feab 	bl	80069f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 ff81 	bl	8006bc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2310      	movs	r3, #16
 8005cdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d030      	beq.n	8005d4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d109      	bne.n	8005d08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f006 f8c8 	bl	800bec8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	461a      	mov	r2, r3
 8005d46:	2302      	movs	r3, #2
 8005d48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	461a      	mov	r2, r3
 8005d62:	2320      	movs	r3, #32
 8005d64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	3301      	adds	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f47f af62 	bne.w	8005c5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f003 ffc3 	bl	8009d28 <USB_ReadInterrupts>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dac:	f040 80db 	bne.w	8005f66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f003 ffe4 	bl	8009d82 <USB_ReadDevAllInEpInterrupt>
 8005dba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005dc0:	e0cd      	b.n	8005f5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80c2 	beq.w	8005f52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f004 f80a 	bl	8009df2 <USB_ReadDevInEPInterrupt>
 8005dde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d057      	beq.n	8005e9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2201      	movs	r2, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d132      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	334c      	adds	r3, #76	; 0x4c
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4403      	add	r3, r0
 8005e48:	3348      	adds	r3, #72	; 0x48
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4419      	add	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4403      	add	r3, r0
 8005e5c:	334c      	adds	r3, #76	; 0x4c
 8005e5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d113      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x3a2>
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3354      	adds	r3, #84	; 0x54
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d108      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e86:	461a      	mov	r2, r3
 8005e88:	2101      	movs	r1, #1
 8005e8a:	f004 f811 	bl	8009eb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f005 ff92 	bl	800bdbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2310      	movs	r3, #16
 8005ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2340      	movs	r3, #64	; 0x40
 8005eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d023      	beq.n	8005f40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efa:	6a38      	ldr	r0, [r7, #32]
 8005efc:	f002 fef2 	bl	8008ce4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	3338      	adds	r3, #56	; 0x38
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	3304      	adds	r3, #4
 8005f12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d108      	bne.n	8005f2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f005 ffdf 	bl	800beec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fcc3 	bl	80068d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	3301      	adds	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f47f af2e 	bne.w	8005dc2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f003 fedc 	bl	8009d28 <USB_ReadInterrupts>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f7a:	d122      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d108      	bne.n	8005fac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 feab 	bl	8006d00 <HAL_PCDEx_LPM_Callback>
 8005faa:	e002      	b.n	8005fb2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f005 ff7d 	bl	800beac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f003 feae 	bl	8009d28 <USB_ReadInterrupts>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd6:	d112      	bne.n	8005ffe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d102      	bne.n	8005fee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f005 ff39 	bl	800be60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005ffc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f003 fe90 	bl	8009d28 <USB_ReadInterrupts>
 8006008:	4603      	mov	r3, r0
 800600a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006012:	f040 80b7 	bne.w	8006184 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2110      	movs	r1, #16
 8006030:	4618      	mov	r0, r3
 8006032:	f002 fe57 	bl	8008ce4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603a:	e046      	b.n	80060ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	461a      	mov	r2, r3
 800604a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800604e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800606e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006082:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	3301      	adds	r3, #1
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d3b3      	bcc.n	800603c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80060e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006100:	f043 030b 	orr.w	r3, r3, #11
 8006104:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006116:	f043 030b 	orr.w	r3, r3, #11
 800611a:	6453      	str	r3, [r2, #68]	; 0x44
 800611c:	e015      	b.n	800614a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006130:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006134:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006144:	f043 030b 	orr.w	r3, r3, #11
 8006148:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006158:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800615c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800616e:	461a      	mov	r2, r3
 8006170:	f003 fe9e 	bl	8009eb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f003 fdcd 	bl	8009d28 <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006198:	d124      	bne.n	80061e4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f003 fe63 	bl	8009e6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f002 fe18 	bl	8008dde <USB_GetDevSpeed>
 80061ae:	4603      	mov	r3, r0
 80061b0:	461a      	mov	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681c      	ldr	r4, [r3, #0]
 80061ba:	f001 fa11 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 80061be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	4620      	mov	r0, r4
 80061ca:	f002 fb17 	bl	80087fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f005 fe1d 	bl	800be0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80061e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f003 fd9d 	bl	8009d28 <USB_ReadInterrupts>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d10a      	bne.n	800620e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f005 fdfa 	bl	800bdf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695a      	ldr	r2, [r3, #20]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f002 0208 	and.w	r2, r2, #8
 800620c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f003 fd88 	bl	8009d28 <USB_ReadInterrupts>
 8006218:	4603      	mov	r3, r0
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d122      	bne.n	8006268 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800622e:	2301      	movs	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
 8006232:	e014      	b.n	800625e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fb0f 	bl	8006876 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	3301      	adds	r3, #1
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006264:	429a      	cmp	r2, r3
 8006266:	d3e5      	bcc.n	8006234 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f003 fd5b 	bl	8009d28 <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800627c:	d13b      	bne.n	80062f6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800627e:	2301      	movs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	e02b      	b.n	80062dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3340      	adds	r3, #64	; 0x40
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d115      	bne.n	80062d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80062aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	da12      	bge.n	80062d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b4:	4613      	mov	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	333f      	adds	r3, #63	; 0x3f
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fad0 	bl	8006876 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	3301      	adds	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d3ce      	bcc.n	8006284 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695a      	ldr	r2, [r3, #20]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80062f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f003 fd14 	bl	8009d28 <USB_ReadInterrupts>
 8006300:	4603      	mov	r3, r0
 8006302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800630a:	d155      	bne.n	80063b8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800630c:	2301      	movs	r3, #1
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
 8006310:	e045      	b.n	800639e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d12e      	bne.n	8006398 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800633a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800633c:	2b00      	cmp	r3, #0
 800633e:	da2b      	bge.n	8006398 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800634c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006350:	429a      	cmp	r2, r3
 8006352:	d121      	bne.n	8006398 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006394:	6053      	str	r3, [r2, #4]
            break;
 8006396:	e007      	b.n	80063a8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	3301      	adds	r3, #1
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3b4      	bcc.n	8006312 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80063b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f003 fcb3 	bl	8009d28 <USB_ReadInterrupts>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063cc:	d10a      	bne.n	80063e4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f005 fd9e 	bl	800bf10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80063e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f003 fc9d 	bl	8009d28 <USB_ReadInterrupts>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d115      	bne.n	8006424 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f005 fd8e 	bl	800bf2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	e000      	b.n	8006424 <HAL_PCD_IRQHandler+0x938>
      return;
 8006422:	bf00      	nop
    }
  }
}
 8006424:	3734      	adds	r7, #52	; 0x34
 8006426:	46bd      	mov	sp, r7
 8006428:	bd90      	pop	{r4, r7, pc}

0800642a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_PCD_SetAddress+0x1a>
 8006440:	2302      	movs	r3, #2
 8006442:	e013      	b.n	800646c <HAL_PCD_SetAddress+0x42>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4611      	mov	r1, r2
 800645c:	4618      	mov	r0, r3
 800645e:	f003 fbfb 	bl	8009c58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	4603      	mov	r3, r0
 8006484:	70fb      	strb	r3, [r7, #3]
 8006486:	460b      	mov	r3, r1
 8006488:	803b      	strh	r3, [r7, #0]
 800648a:	4613      	mov	r3, r2
 800648c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006496:	2b00      	cmp	r3, #0
 8006498:	da0f      	bge.n	80064ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	3338      	adds	r3, #56	; 0x38
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	3304      	adds	r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	705a      	strb	r2, [r3, #1]
 80064b8:	e00f      	b.n	80064da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	f003 020f 	and.w	r2, r3, #15
 80064c0:	4613      	mov	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4413      	add	r3, r2
 80064d0:	3304      	adds	r3, #4
 80064d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80064e6:	883a      	ldrh	r2, [r7, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	78ba      	ldrb	r2, [r7, #2]
 80064f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006504:	78bb      	ldrb	r3, [r7, #2]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d102      	bne.n	8006510 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_PCD_EP_Open+0xaa>
 800651a:	2302      	movs	r3, #2
 800651c:	e00e      	b.n	800653c <HAL_PCD_EP_Open+0xc8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fc7b 	bl	8008e28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800653a:	7afb      	ldrb	r3, [r7, #11]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006554:	2b00      	cmp	r3, #0
 8006556:	da0f      	bge.n	8006578 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	f003 020f 	and.w	r2, r3, #15
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	3338      	adds	r3, #56	; 0x38
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	705a      	strb	r2, [r3, #1]
 8006576:	e00f      	b.n	8006598 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	3304      	adds	r3, #4
 8006590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_PCD_EP_Close+0x6e>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e00e      	b.n	80065d0 <HAL_PCD_EP_Close+0x8c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f002 fcb9 	bl	8008f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	460b      	mov	r3, r1
 80065e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	4613      	mov	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	3304      	adds	r3, #4
 8006600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2200      	movs	r2, #0
 8006618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	b2da      	uxtb	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d102      	bne.n	8006634 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	f002 ff98 	bl	8009580 <USB_EP0StartXfer>
 8006650:	e008      	b.n	8006664 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6979      	ldr	r1, [r7, #20]
 8006660:	f002 fd46 	bl	80090f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
 800667a:	460b      	mov	r3, r1
 800667c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	f003 020f 	and.w	r2, r3, #15
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	3338      	adds	r3, #56	; 0x38
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	3304      	adds	r3, #4
 8006694:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2201      	movs	r2, #1
 80066ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066ae:	7afb      	ldrb	r3, [r7, #11]
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d102      	bne.n	80066c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	f002 ff4e 	bl	8009580 <USB_EP0StartXfer>
 80066e4:	e008      	b.n	80066f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	f002 fcfc 	bl	80090f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d901      	bls.n	8006720 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e050      	b.n	80067c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006724:	2b00      	cmp	r3, #0
 8006726:	da0f      	bge.n	8006748 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	f003 020f 	and.w	r2, r3, #15
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	3338      	adds	r3, #56	; 0x38
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	3304      	adds	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	705a      	strb	r2, [r3, #1]
 8006746:	e00d      	b.n	8006764 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	b2da      	uxtb	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_PCD_EP_SetStall+0x82>
 8006780:	2302      	movs	r3, #2
 8006782:	e01e      	b.n	80067c2 <HAL_PCD_EP_SetStall+0xc0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	4618      	mov	r0, r3
 8006794:	f003 f98c 	bl	8009ab0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	b2d9      	uxtb	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067b2:	461a      	mov	r2, r3
 80067b4:	f003 fb7c 	bl	8009eb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	f003 020f 	and.w	r2, r3, #15
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d901      	bls.n	80067e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e042      	b.n	800686e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da0f      	bge.n	8006810 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	f003 020f 	and.w	r2, r3, #15
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	3338      	adds	r3, #56	; 0x38
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	705a      	strb	r2, [r3, #1]
 800680e:	e00f      	b.n	8006830 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	f003 020f 	and.w	r2, r3, #15
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	3304      	adds	r3, #4
 8006828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_PCD_EP_ClrStall+0x86>
 800684c:	2302      	movs	r3, #2
 800684e:	e00e      	b.n	800686e <HAL_PCD_EP_ClrStall+0xa4>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68f9      	ldr	r1, [r7, #12]
 800685e:	4618      	mov	r0, r3
 8006860:	f003 f994 	bl	8009b8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006886:	2b00      	cmp	r3, #0
 8006888:	da0c      	bge.n	80068a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	3338      	adds	r3, #56	; 0x38
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e00c      	b.n	80068be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	3304      	adds	r3, #4
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f002 ffb3 	bl	8009830 <USB_EPStopXfer>
 80068ca:	4603      	mov	r3, r0
 80068cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80068ce:	7afb      	ldrb	r3, [r7, #11]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af02      	add	r7, sp, #8
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	3338      	adds	r3, #56	; 0x38
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4413      	add	r3, r2
 80068fc:	3304      	adds	r3, #4
 80068fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	429a      	cmp	r2, r3
 800690a:	d901      	bls.n	8006910 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e06c      	b.n	80069ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	429a      	cmp	r2, r3
 8006924:	d902      	bls.n	800692c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	3303      	adds	r3, #3
 8006930:	089b      	lsrs	r3, r3, #2
 8006932:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006934:	e02b      	b.n	800698e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	429a      	cmp	r2, r3
 800694a:	d902      	bls.n	8006952 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3303      	adds	r3, #3
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6919      	ldr	r1, [r3, #16]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800696a:	b2db      	uxtb	r3, r3
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4603      	mov	r3, r0
 8006970:	6978      	ldr	r0, [r7, #20]
 8006972:	f003 f807 	bl	8009984 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	441a      	add	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	b29b      	uxth	r3, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d809      	bhi.n	80069b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d203      	bcs.n	80069b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1be      	bne.n	8006936 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d811      	bhi.n	80069e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	2201      	movs	r2, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	43db      	mvns	r3, r3
 80069de:	6939      	ldr	r1, [r7, #16]
 80069e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e4:	4013      	ands	r3, r2
 80069e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	333c      	adds	r3, #60	; 0x3c
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d17b      	bne.n	8006b22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4a61      	ldr	r2, [pc, #388]	; (8006bbc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f240 80b9 	bls.w	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80b3 	beq.w	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	461a      	mov	r2, r3
 8006a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5c:	6093      	str	r3, [r2, #8]
 8006a5e:	e0a7      	b.n	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a76:	461a      	mov	r2, r3
 8006a78:	2320      	movs	r3, #32
 8006a7a:	6093      	str	r3, [r2, #8]
 8006a7c:	e098      	b.n	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 8093 	bne.w	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4a4b      	ldr	r2, [pc, #300]	; (8006bbc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d90f      	bls.n	8006ab2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aae:	6093      	str	r3, [r2, #8]
 8006ab0:	e07e      	b.n	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	0159      	lsls	r1, r3, #5
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d114      	bne.n	8006b14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006afc:	461a      	mov	r2, r3
 8006afe:	2101      	movs	r1, #1
 8006b00:	f003 f9d6 	bl	8009eb0 <USB_EP0_OutStart>
 8006b04:	e006      	b.n	8006b14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	441a      	add	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f005 f934 	bl	800bd88 <HAL_PCD_DataOutStageCallback>
 8006b20:	e046      	b.n	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d124      	bne.n	8006b74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b40:	461a      	mov	r2, r3
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	6093      	str	r3, [r2, #8]
 8006b48:	e032      	b.n	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	461a      	mov	r2, r3
 8006b62:	2320      	movs	r3, #32
 8006b64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f005 f90b 	bl	800bd88 <HAL_PCD_DataOutStageCallback>
 8006b72:	e01d      	b.n	8006bb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d114      	bne.n	8006ba4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d108      	bne.n	8006ba4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	f003 f986 	bl	8009eb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f005 f8ec 	bl	800bd88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	4f54300a 	.word	0x4f54300a
 8006bc0:	4f54310a 	.word	0x4f54310a

08006bc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	333c      	adds	r3, #60	; 0x3c
 8006bdc:	3304      	adds	r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d90e      	bls.n	8006c18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	461a      	mov	r2, r3
 8006c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f005 f8a3 	bl	800bd64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d90c      	bls.n	8006c40 <PCD_EP_OutSetupPacket_int+0x7c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d108      	bne.n	8006c40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	f003 f938 	bl	8009eb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	4f54300a 	.word	0x4f54300a

08006c50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d107      	bne.n	8006c7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c6e:	883b      	ldrh	r3, [r7, #0]
 8006c70:	0419      	lsls	r1, r3, #16
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c7c:	e028      	b.n	8006cd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
 8006c90:	e00d      	b.n	8006cae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	0c1b      	lsrs	r3, r3, #16
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	3301      	adds	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3ec      	bcc.n	8006c92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006cb8:	883b      	ldrh	r3, [r7, #0]
 8006cba:	0418      	lsls	r0, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4302      	orrs	r2, r0
 8006cc8:	3340      	adds	r3, #64	; 0x40
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	887a      	ldrh	r2, [r7, #2]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e267      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d075      	beq.n	8006e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d36:	4b88      	ldr	r3, [pc, #544]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 030c 	and.w	r3, r3, #12
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d00c      	beq.n	8006d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d42:	4b85      	ldr	r3, [pc, #532]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d112      	bne.n	8006d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d4e:	4b82      	ldr	r3, [pc, #520]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d5a:	d10b      	bne.n	8006d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5c:	4b7e      	ldr	r3, [pc, #504]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d05b      	beq.n	8006e20 <HAL_RCC_OscConfig+0x108>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d157      	bne.n	8006e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e242      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCC_OscConfig+0x74>
 8006d7e:	4b76      	ldr	r3, [pc, #472]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a75      	ldr	r2, [pc, #468]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e01d      	b.n	8006dc8 <HAL_RCC_OscConfig+0xb0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCC_OscConfig+0x98>
 8006d96:	4b70      	ldr	r3, [pc, #448]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6f      	ldr	r2, [pc, #444]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	4b6d      	ldr	r3, [pc, #436]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a6c      	ldr	r2, [pc, #432]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e00b      	b.n	8006dc8 <HAL_RCC_OscConfig+0xb0>
 8006db0:	4b69      	ldr	r3, [pc, #420]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a68      	ldr	r2, [pc, #416]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b66      	ldr	r3, [pc, #408]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a65      	ldr	r2, [pc, #404]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d013      	beq.n	8006df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7fb fa1c 	bl	800220c <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd8:	f7fb fa18 	bl	800220c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	; 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e207      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dea:	4b5b      	ldr	r3, [pc, #364]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xc0>
 8006df6:	e014      	b.n	8006e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df8:	f7fb fa08 	bl	800220c <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e00:	f7fb fa04 	bl	800220c <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b64      	cmp	r3, #100	; 0x64
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e1f3      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e12:	4b51      	ldr	r3, [pc, #324]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1f0      	bne.n	8006e00 <HAL_RCC_OscConfig+0xe8>
 8006e1e:	e000      	b.n	8006e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d063      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e2e:	4b4a      	ldr	r3, [pc, #296]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d11c      	bne.n	8006e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e46:	4b44      	ldr	r3, [pc, #272]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d116      	bne.n	8006e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e52:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_RCC_OscConfig+0x152>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d001      	beq.n	8006e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e1c7      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e6a:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4937      	ldr	r1, [pc, #220]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7e:	e03a      	b.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d020      	beq.n	8006eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e88:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <HAL_RCC_OscConfig+0x244>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8e:	f7fb f9bd 	bl	800220c <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e96:	f7fb f9b9 	bl	800220c <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e1a8      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f0      	beq.n	8006e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4925      	ldr	r1, [pc, #148]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	600b      	str	r3, [r1, #0]
 8006ec8:	e015      	b.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <HAL_RCC_OscConfig+0x244>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed0:	f7fb f99c 	bl	800220c <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ed8:	f7fb f998 	bl	800220c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e187      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d036      	beq.n	8006f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d016      	beq.n	8006f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <HAL_RCC_OscConfig+0x248>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7fb f97c 	bl	800220c <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f18:	f7fb f978 	bl	800220c <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e167      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0x200>
 8006f36:	e01b      	b.n	8006f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_RCC_OscConfig+0x248>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3e:	f7fb f965 	bl	800220c <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f44:	e00e      	b.n	8006f64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f46:	f7fb f961 	bl	800220c <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d907      	bls.n	8006f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e150      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	42470000 	.word	0x42470000
 8006f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f64:	4b88      	ldr	r3, [pc, #544]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ea      	bne.n	8006f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8097 	beq.w	80070ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f82:	4b81      	ldr	r3, [pc, #516]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10f      	bne.n	8006fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	4b7d      	ldr	r3, [pc, #500]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	4a7c      	ldr	r2, [pc, #496]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f9e:	4b7a      	ldr	r3, [pc, #488]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fae:	4b77      	ldr	r3, [pc, #476]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d118      	bne.n	8006fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fba:	4b74      	ldr	r3, [pc, #464]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a73      	ldr	r2, [pc, #460]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fc6:	f7fb f921 	bl	800220c <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fce:	f7fb f91d 	bl	800220c <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e10c      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe0:	4b6a      	ldr	r3, [pc, #424]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0f0      	beq.n	8006fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d106      	bne.n	8007002 <HAL_RCC_OscConfig+0x2ea>
 8006ff4:	4b64      	ldr	r3, [pc, #400]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	4a63      	ldr	r2, [pc, #396]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8007000:	e01c      	b.n	800703c <HAL_RCC_OscConfig+0x324>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b05      	cmp	r3, #5
 8007008:	d10c      	bne.n	8007024 <HAL_RCC_OscConfig+0x30c>
 800700a:	4b5f      	ldr	r3, [pc, #380]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	4a5e      	ldr	r2, [pc, #376]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007010:	f043 0304 	orr.w	r3, r3, #4
 8007014:	6713      	str	r3, [r2, #112]	; 0x70
 8007016:	4b5c      	ldr	r3, [pc, #368]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	4a5b      	ldr	r2, [pc, #364]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	6713      	str	r3, [r2, #112]	; 0x70
 8007022:	e00b      	b.n	800703c <HAL_RCC_OscConfig+0x324>
 8007024:	4b58      	ldr	r3, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	4a57      	ldr	r2, [pc, #348]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	6713      	str	r3, [r2, #112]	; 0x70
 8007030:	4b55      	ldr	r3, [pc, #340]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007034:	4a54      	ldr	r2, [pc, #336]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007036:	f023 0304 	bic.w	r3, r3, #4
 800703a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d015      	beq.n	8007070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7fb f8e2 	bl	800220c <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704a:	e00a      	b.n	8007062 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800704c:	f7fb f8de 	bl	800220c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	f241 3288 	movw	r2, #5000	; 0x1388
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e0cb      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007062:	4b49      	ldr	r3, [pc, #292]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ee      	beq.n	800704c <HAL_RCC_OscConfig+0x334>
 800706e:	e014      	b.n	800709a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007070:	f7fb f8cc 	bl	800220c <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007076:	e00a      	b.n	800708e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007078:	f7fb f8c8 	bl	800220c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	; 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e0b5      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800708e:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1ee      	bne.n	8007078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d105      	bne.n	80070ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a0:	4b39      	ldr	r3, [pc, #228]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	4a38      	ldr	r2, [pc, #224]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80a1 	beq.w	80071f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070b6:	4b34      	ldr	r3, [pc, #208]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 030c 	and.w	r3, r3, #12
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d05c      	beq.n	800717c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d141      	bne.n	800714e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ca:	4b31      	ldr	r3, [pc, #196]	; (8007190 <HAL_RCC_OscConfig+0x478>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d0:	f7fb f89c 	bl	800220c <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d6:	e008      	b.n	80070ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070d8:	f7fb f898 	bl	800220c <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e087      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ea:	4b27      	ldr	r3, [pc, #156]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f0      	bne.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	019b      	lsls	r3, r3, #6
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	3b01      	subs	r3, #1
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	061b      	lsls	r3, r3, #24
 800711a:	491b      	ldr	r1, [pc, #108]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800711c:	4313      	orrs	r3, r2
 800711e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <HAL_RCC_OscConfig+0x478>)
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007126:	f7fb f871 	bl	800220c <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712e:	f7fb f86d 	bl	800220c <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e05c      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007140:	4b11      	ldr	r3, [pc, #68]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x416>
 800714c:	e054      	b.n	80071f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <HAL_RCC_OscConfig+0x478>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7fb f85a 	bl	800220c <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715c:	f7fb f856 	bl	800220c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e045      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x444>
 800717a:	e03d      	b.n	80071f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d107      	bne.n	8007194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e038      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
 8007188:	40023800 	.word	0x40023800
 800718c:	40007000 	.word	0x40007000
 8007190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <HAL_RCC_OscConfig+0x4ec>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d028      	beq.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d121      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d11a      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071c4:	4013      	ands	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d111      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	085b      	lsrs	r3, r3, #1
 80071dc:	3b01      	subs	r3, #1
 80071de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d107      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d001      	beq.n	80071f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800

08007208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0cc      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800721c:	4b68      	ldr	r3, [pc, #416]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d90c      	bls.n	8007244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722a:	4b65      	ldr	r3, [pc, #404]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007232:	4b63      	ldr	r3, [pc, #396]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d001      	beq.n	8007244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0b8      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d020      	beq.n	8007292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800725c:	4b59      	ldr	r3, [pc, #356]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4a58      	ldr	r2, [pc, #352]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007274:	4b53      	ldr	r3, [pc, #332]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4a52      	ldr	r2, [pc, #328]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800727e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007280:	4b50      	ldr	r3, [pc, #320]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	494d      	ldr	r1, [pc, #308]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	4313      	orrs	r3, r2
 8007290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d044      	beq.n	8007328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d107      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a6:	4b47      	ldr	r3, [pc, #284]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d119      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e07f      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d003      	beq.n	80072c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c6:	4b3f      	ldr	r3, [pc, #252]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e06f      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d6:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e067      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072e6:	4b37      	ldr	r3, [pc, #220]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 0203 	bic.w	r2, r3, #3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	4934      	ldr	r1, [pc, #208]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072f8:	f7fa ff88 	bl	800220c <HAL_GetTick>
 80072fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fe:	e00a      	b.n	8007316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007300:	f7fa ff84 	bl	800220c <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	f241 3288 	movw	r2, #5000	; 0x1388
 800730e:	4293      	cmp	r3, r2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e04f      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007316:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 020c 	and.w	r2, r3, #12
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	429a      	cmp	r2, r3
 8007326:	d1eb      	bne.n	8007300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007328:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d20c      	bcs.n	8007350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007336:	4b22      	ldr	r3, [pc, #136]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e032      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800735c:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4916      	ldr	r1, [pc, #88]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800736a:	4313      	orrs	r3, r2
 800736c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	490e      	ldr	r1, [pc, #56]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800738e:	f000 f821 	bl	80073d4 <HAL_RCC_GetSysClockFreq>
 8007392:	4602      	mov	r2, r0
 8007394:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	091b      	lsrs	r3, r3, #4
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	490a      	ldr	r1, [pc, #40]	; (80073c8 <HAL_RCC_ClockConfig+0x1c0>)
 80073a0:	5ccb      	ldrb	r3, [r1, r3]
 80073a2:	fa22 f303 	lsr.w	r3, r2, r3
 80073a6:	4a09      	ldr	r2, [pc, #36]	; (80073cc <HAL_RCC_ClockConfig+0x1c4>)
 80073a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fa fee8 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40023c00 	.word	0x40023c00
 80073c4:	40023800 	.word	0x40023800
 80073c8:	080171e4 	.word	0x080171e4
 80073cc:	20000020 	.word	0x20000020
 80073d0:	20000024 	.word	0x20000024

080073d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d8:	b094      	sub	sp, #80	; 0x50
 80073da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	647b      	str	r3, [r7, #68]	; 0x44
 80073e0:	2300      	movs	r3, #0
 80073e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073e4:	2300      	movs	r3, #0
 80073e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073ec:	4b79      	ldr	r3, [pc, #484]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d00d      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0x40>
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	f200 80e1 	bhi.w	80075c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x34>
 8007402:	2b04      	cmp	r3, #4
 8007404:	d003      	beq.n	800740e <HAL_RCC_GetSysClockFreq+0x3a>
 8007406:	e0db      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007408:	4b73      	ldr	r3, [pc, #460]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800740a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800740c:	e0db      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800740e:	4b73      	ldr	r3, [pc, #460]	; (80075dc <HAL_RCC_GetSysClockFreq+0x208>)
 8007410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007412:	e0d8      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007414:	4b6f      	ldr	r3, [pc, #444]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800741c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800741e:	4b6d      	ldr	r3, [pc, #436]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d063      	beq.n	80074f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800742a:	4b6a      	ldr	r3, [pc, #424]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	099b      	lsrs	r3, r3, #6
 8007430:	2200      	movs	r2, #0
 8007432:	63bb      	str	r3, [r7, #56]	; 0x38
 8007434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743c:	633b      	str	r3, [r7, #48]	; 0x30
 800743e:	2300      	movs	r3, #0
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
 8007442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007446:	4622      	mov	r2, r4
 8007448:	462b      	mov	r3, r5
 800744a:	f04f 0000 	mov.w	r0, #0
 800744e:	f04f 0100 	mov.w	r1, #0
 8007452:	0159      	lsls	r1, r3, #5
 8007454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007458:	0150      	lsls	r0, r2, #5
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4621      	mov	r1, r4
 8007460:	1a51      	subs	r1, r2, r1
 8007462:	6139      	str	r1, [r7, #16]
 8007464:	4629      	mov	r1, r5
 8007466:	eb63 0301 	sbc.w	r3, r3, r1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007478:	4659      	mov	r1, fp
 800747a:	018b      	lsls	r3, r1, #6
 800747c:	4651      	mov	r1, sl
 800747e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007482:	4651      	mov	r1, sl
 8007484:	018a      	lsls	r2, r1, #6
 8007486:	4651      	mov	r1, sl
 8007488:	ebb2 0801 	subs.w	r8, r2, r1
 800748c:	4659      	mov	r1, fp
 800748e:	eb63 0901 	sbc.w	r9, r3, r1
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800749e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074a6:	4690      	mov	r8, r2
 80074a8:	4699      	mov	r9, r3
 80074aa:	4623      	mov	r3, r4
 80074ac:	eb18 0303 	adds.w	r3, r8, r3
 80074b0:	60bb      	str	r3, [r7, #8]
 80074b2:	462b      	mov	r3, r5
 80074b4:	eb49 0303 	adc.w	r3, r9, r3
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074c6:	4629      	mov	r1, r5
 80074c8:	024b      	lsls	r3, r1, #9
 80074ca:	4621      	mov	r1, r4
 80074cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074d0:	4621      	mov	r1, r4
 80074d2:	024a      	lsls	r2, r1, #9
 80074d4:	4610      	mov	r0, r2
 80074d6:	4619      	mov	r1, r3
 80074d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074da:	2200      	movs	r2, #0
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074e4:	f7f8 fec4 	bl	8000270 <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4613      	mov	r3, r2
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f0:	e058      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074f2:	4b38      	ldr	r3, [pc, #224]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	099b      	lsrs	r3, r3, #6
 80074f8:	2200      	movs	r2, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	4611      	mov	r1, r2
 80074fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007502:	623b      	str	r3, [r7, #32]
 8007504:	2300      	movs	r3, #0
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
 8007508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	f04f 0000 	mov.w	r0, #0
 8007514:	f04f 0100 	mov.w	r1, #0
 8007518:	0159      	lsls	r1, r3, #5
 800751a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800751e:	0150      	lsls	r0, r2, #5
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4641      	mov	r1, r8
 8007526:	ebb2 0a01 	subs.w	sl, r2, r1
 800752a:	4649      	mov	r1, r9
 800752c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800753c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007544:	ebb2 040a 	subs.w	r4, r2, sl
 8007548:	eb63 050b 	sbc.w	r5, r3, fp
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	00eb      	lsls	r3, r5, #3
 8007556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800755a:	00e2      	lsls	r2, r4, #3
 800755c:	4614      	mov	r4, r2
 800755e:	461d      	mov	r5, r3
 8007560:	4643      	mov	r3, r8
 8007562:	18e3      	adds	r3, r4, r3
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	464b      	mov	r3, r9
 8007568:	eb45 0303 	adc.w	r3, r5, r3
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800757a:	4629      	mov	r1, r5
 800757c:	028b      	lsls	r3, r1, #10
 800757e:	4621      	mov	r1, r4
 8007580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007584:	4621      	mov	r1, r4
 8007586:	028a      	lsls	r2, r1, #10
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758e:	2200      	movs	r2, #0
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	61fa      	str	r2, [r7, #28]
 8007594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007598:	f7f8 fe6a 	bl	8000270 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4613      	mov	r3, r2
 80075a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	3301      	adds	r3, #1
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075be:	e002      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3750      	adds	r7, #80	; 0x50
 80075cc:	46bd      	mov	sp, r7
 80075ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	00f42400 	.word	0x00f42400
 80075dc:	007a1200 	.word	0x007a1200

080075e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075e4:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000020 	.word	0x20000020

080075f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075fc:	f7ff fff0 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	0a9b      	lsrs	r3, r3, #10
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4903      	ldr	r1, [pc, #12]	; (800761c <HAL_RCC_GetPCLK1Freq+0x24>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40023800 	.word	0x40023800
 800761c:	080171f4 	.word	0x080171f4

08007620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e07b      	b.n	800772a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b00      	cmp	r3, #0
 8007638:	d108      	bne.n	800764c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007642:	d009      	beq.n	8007658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	61da      	str	r2, [r3, #28]
 800764a:	e005      	b.n	8007658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fa fba4 	bl	8001dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800768e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076dc:	ea42 0103 	orr.w	r1, r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	0c1b      	lsrs	r3, r3, #16
 80076f6:	f003 0104 	and.w	r1, r3, #4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f003 0210 	and.w	r2, r3, #16
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b088      	sub	sp, #32
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_SPI_Transmit+0x22>
 8007750:	2302      	movs	r3, #2
 8007752:	e126      	b.n	80079a2 <HAL_SPI_Transmit+0x270>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800775c:	f7fa fd56 	bl	800220c <HAL_GetTick>
 8007760:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b01      	cmp	r3, #1
 8007770:	d002      	beq.n	8007778 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007772:	2302      	movs	r3, #2
 8007774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007776:	e10b      	b.n	8007990 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_Transmit+0x52>
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007788:	e102      	b.n	8007990 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2203      	movs	r2, #3
 800778e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d0:	d10f      	bne.n	80077f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	d007      	beq.n	8007810 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800780e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007818:	d14b      	bne.n	80078b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_SPI_Transmit+0xf6>
 8007822:	8afb      	ldrh	r3, [r7, #22]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d13e      	bne.n	80078a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	1c9a      	adds	r2, r3, #2
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800784c:	e02b      	b.n	80078a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b02      	cmp	r3, #2
 800785a:	d112      	bne.n	8007882 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	881a      	ldrh	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	1c9a      	adds	r2, r3, #2
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007880:	e011      	b.n	80078a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007882:	f7fa fcc3 	bl	800220c <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d803      	bhi.n	800789a <HAL_SPI_Transmit+0x168>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d102      	bne.n	80078a0 <HAL_SPI_Transmit+0x16e>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078a4:	e074      	b.n	8007990 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1ce      	bne.n	800784e <HAL_SPI_Transmit+0x11c>
 80078b0:	e04c      	b.n	800794c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_SPI_Transmit+0x18e>
 80078ba:	8afb      	ldrh	r3, [r7, #22]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d140      	bne.n	8007942 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078e6:	e02c      	b.n	8007942 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d113      	bne.n	800791e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	86da      	strh	r2, [r3, #54]	; 0x36
 800791c:	e011      	b.n	8007942 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800791e:	f7fa fc75 	bl	800220c <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d803      	bhi.n	8007936 <HAL_SPI_Transmit+0x204>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d102      	bne.n	800793c <HAL_SPI_Transmit+0x20a>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007940:	e026      	b.n	8007990 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1cd      	bne.n	80078e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f9ff 	bl	8007d54 <SPI_EndRxTxTransaction>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e000      	b.n	8007990 <HAL_SPI_Transmit+0x25e>
  }

error:
 800798e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_SPI_Transmit_DMA+0x20>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e09b      	b.n	8007b04 <HAL_SPI_Transmit_DMA+0x158>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d002      	beq.n	80079e6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
 80079e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079e4:	e089      	b.n	8007afa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_SPI_Transmit_DMA+0x46>
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079f6:	e080      	b.n	8007afa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2203      	movs	r2, #3
 80079fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	88fa      	ldrh	r2, [r7, #6]
 8007a16:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3e:	d10f      	bne.n	8007a60 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a64:	4a29      	ldr	r2, [pc, #164]	; (8007b0c <HAL_SPI_Transmit_DMA+0x160>)
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6c:	4a28      	ldr	r2, [pc, #160]	; (8007b10 <HAL_SPI_Transmit_DMA+0x164>)
 8007a6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a74:	4a27      	ldr	r2, [pc, #156]	; (8007b14 <HAL_SPI_Transmit_DMA+0x168>)
 8007a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a96:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a98:	f7fa fda8 	bl	80025ec <HAL_DMA_Start_IT>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00c      	beq.n	8007abc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	f043 0210 	orr.w	r2, r3, #16
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007aba:	e01e      	b.n	8007afa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d007      	beq.n	8007ada <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0220 	orr.w	r2, r2, #32
 8007ae8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0202 	orr.w	r2, r2, #2
 8007af8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	08007be9 	.word	0x08007be9
 8007b10:	08007b41 	.word	0x08007b41
 8007b14:	08007c05 	.word	0x08007c05

08007b18 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b4e:	f7fa fb5d 	bl	800220c <HAL_GetTick>
 8007b52:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b62:	d03b      	beq.n	8007bdc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0220 	bic.w	r2, r2, #32
 8007b72:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0202 	bic.w	r2, r2, #2
 8007b82:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	2164      	movs	r1, #100	; 0x64
 8007b88:	6978      	ldr	r0, [r7, #20]
 8007b8a:	f000 f8e3 	bl	8007d54 <SPI_EndRxTxTransaction>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f7ff ffa9 	bl	8007b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007bda:	e002      	b.n	8007be2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007bdc:	6978      	ldr	r0, [r7, #20]
 8007bde:	f7f8 fd87 	bl	80006f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff ff8e 	bl	8007b18 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0203 	bic.w	r2, r2, #3
 8007c20:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	f043 0210 	orr.w	r2, r3, #16
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff ff78 	bl	8007b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c3c:	bf00      	nop
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c54:	f7fa fada 	bl	800220c <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	4413      	add	r3, r2
 8007c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c64:	f7fa fad2 	bl	800220c <HAL_GetTick>
 8007c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c6a:	4b39      	ldr	r3, [pc, #228]	; (8007d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	015b      	lsls	r3, r3, #5
 8007c70:	0d1b      	lsrs	r3, r3, #20
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c7a:	e054      	b.n	8007d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d050      	beq.n	8007d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c84:	f7fa fac2 	bl	800220c <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d902      	bls.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d13d      	bne.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cb2:	d111      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbc:	d004      	beq.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc6:	d107      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce0:	d10f      	bne.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e017      	b.n	8007d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d19b      	bne.n	8007c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000020 	.word	0x20000020

08007d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d60:	4b1b      	ldr	r3, [pc, #108]	; (8007dd0 <SPI_EndRxTxTransaction+0x7c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <SPI_EndRxTxTransaction+0x80>)
 8007d66:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6a:	0d5b      	lsrs	r3, r3, #21
 8007d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d7e:	d112      	bne.n	8007da6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	2180      	movs	r1, #128	; 0x80
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff ff5a 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d016      	beq.n	8007dc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f043 0220 	orr.w	r2, r3, #32
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e00f      	b.n	8007dc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbc:	2b80      	cmp	r3, #128	; 0x80
 8007dbe:	d0f2      	beq.n	8007da6 <SPI_EndRxTxTransaction+0x52>
 8007dc0:	e000      	b.n	8007dc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007dc2:	bf00      	nop
  }

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000020 	.word	0x20000020
 8007dd4:	165e9f81 	.word	0x165e9f81

08007dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e041      	b.n	8007e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fa f858 	bl	8001eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f000 fac4 	bl	80083a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d001      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e04e      	b.n	8007f2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a23      	ldr	r2, [pc, #140]	; (8007f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d022      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d01d      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d018      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a1e      	ldr	r2, [pc, #120]	; (8007f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	; (8007f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1b      	ldr	r2, [pc, #108]	; (8007f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d009      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d111      	bne.n	8007f1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b06      	cmp	r3, #6
 8007f08:	d010      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0201 	orr.w	r2, r2, #1
 8007f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f1a:	e007      	b.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40000c00 	.word	0x40000c00
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40001800 	.word	0x40001800

08007f58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0201 	bic.w	r2, r2, #1
 8007f6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6a1a      	ldr	r2, [r3, #32]
 8007f76:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10f      	bne.n	8007fa0 <HAL_TIM_Base_Stop_IT+0x48>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a1a      	ldr	r2, [r3, #32]
 8007f86:	f240 4344 	movw	r3, #1092	; 0x444
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d107      	bne.n	8007fa0 <HAL_TIM_Base_Stop_IT+0x48>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0201 	bic.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d122      	bne.n	8008012 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d11b      	bne.n	8008012 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f06f 0202 	mvn.w	r2, #2
 8007fe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9b5 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8007ffe:	e005      	b.n	800800c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9a7 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9b8 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d122      	bne.n	8008066 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b04      	cmp	r3, #4
 800802c:	d11b      	bne.n	8008066 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f06f 0204 	mvn.w	r2, #4
 8008036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f98b 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8008052:	e005      	b.n	8008060 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f97d 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f98e 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d122      	bne.n	80080ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b08      	cmp	r3, #8
 8008080:	d11b      	bne.n	80080ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f06f 0208 	mvn.w	r2, #8
 800808a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2204      	movs	r2, #4
 8008090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f961 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 80080a6:	e005      	b.n	80080b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f953 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f964 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d122      	bne.n	800810e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	2b10      	cmp	r3, #16
 80080d4:	d11b      	bne.n	800810e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f06f 0210 	mvn.w	r2, #16
 80080de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2208      	movs	r2, #8
 80080e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f937 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 80080fa:	e005      	b.n	8008108 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f929 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f93a 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b01      	cmp	r3, #1
 800811a:	d10e      	bne.n	800813a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b01      	cmp	r3, #1
 8008128:	d107      	bne.n	800813a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f06f 0201 	mvn.w	r2, #1
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7f9 fd43 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008144:	2b80      	cmp	r3, #128	; 0x80
 8008146:	d10e      	bne.n	8008166 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d107      	bne.n	8008166 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800815e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fadf 	bl	8008724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d10e      	bne.n	8008192 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d107      	bne.n	8008192 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800818a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f8ff 	bl	8008390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b20      	cmp	r3, #32
 800819e:	d10e      	bne.n	80081be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d107      	bne.n	80081be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f06f 0220 	mvn.w	r2, #32
 80081b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 faa9 	bl	8008710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_TIM_ConfigClockSource+0x1c>
 80081de:	2302      	movs	r3, #2
 80081e0:	e0b4      	b.n	800834c <HAL_TIM_ConfigClockSource+0x186>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008200:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008208:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800821a:	d03e      	beq.n	800829a <HAL_TIM_ConfigClockSource+0xd4>
 800821c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008220:	f200 8087 	bhi.w	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008228:	f000 8086 	beq.w	8008338 <HAL_TIM_ConfigClockSource+0x172>
 800822c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008230:	d87f      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 8008232:	2b70      	cmp	r3, #112	; 0x70
 8008234:	d01a      	beq.n	800826c <HAL_TIM_ConfigClockSource+0xa6>
 8008236:	2b70      	cmp	r3, #112	; 0x70
 8008238:	d87b      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 800823a:	2b60      	cmp	r3, #96	; 0x60
 800823c:	d050      	beq.n	80082e0 <HAL_TIM_ConfigClockSource+0x11a>
 800823e:	2b60      	cmp	r3, #96	; 0x60
 8008240:	d877      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 8008242:	2b50      	cmp	r3, #80	; 0x50
 8008244:	d03c      	beq.n	80082c0 <HAL_TIM_ConfigClockSource+0xfa>
 8008246:	2b50      	cmp	r3, #80	; 0x50
 8008248:	d873      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d058      	beq.n	8008300 <HAL_TIM_ConfigClockSource+0x13a>
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d86f      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 8008252:	2b30      	cmp	r3, #48	; 0x30
 8008254:	d064      	beq.n	8008320 <HAL_TIM_ConfigClockSource+0x15a>
 8008256:	2b30      	cmp	r3, #48	; 0x30
 8008258:	d86b      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 800825a:	2b20      	cmp	r3, #32
 800825c:	d060      	beq.n	8008320 <HAL_TIM_ConfigClockSource+0x15a>
 800825e:	2b20      	cmp	r3, #32
 8008260:	d867      	bhi.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d05c      	beq.n	8008320 <HAL_TIM_ConfigClockSource+0x15a>
 8008266:	2b10      	cmp	r3, #16
 8008268:	d05a      	beq.n	8008320 <HAL_TIM_ConfigClockSource+0x15a>
 800826a:	e062      	b.n	8008332 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f000 f9ac 	bl	80085d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800828e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	609a      	str	r2, [r3, #8]
      break;
 8008298:	e04f      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6899      	ldr	r1, [r3, #8]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f000 f995 	bl	80085d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082bc:	609a      	str	r2, [r3, #8]
      break;
 80082be:	e03c      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	6859      	ldr	r1, [r3, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	461a      	mov	r2, r3
 80082ce:	f000 f909 	bl	80084e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2150      	movs	r1, #80	; 0x50
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f962 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 80082de:	e02c      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	6859      	ldr	r1, [r3, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	461a      	mov	r2, r3
 80082ee:	f000 f928 	bl	8008542 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2160      	movs	r1, #96	; 0x60
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f952 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 80082fe:	e01c      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	6859      	ldr	r1, [r3, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	461a      	mov	r2, r3
 800830e:	f000 f8e9 	bl	80084e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2140      	movs	r1, #64	; 0x40
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f942 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 800831e:	e00c      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f000 f939 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 8008330:	e003      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	73fb      	strb	r3, [r7, #15]
      break;
 8008336:	e000      	b.n	800833a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008338:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a40      	ldr	r2, [pc, #256]	; (80084b8 <TIM_Base_SetConfig+0x114>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c2:	d00f      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3d      	ldr	r2, [pc, #244]	; (80084bc <TIM_Base_SetConfig+0x118>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00b      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a3c      	ldr	r2, [pc, #240]	; (80084c0 <TIM_Base_SetConfig+0x11c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d007      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3b      	ldr	r2, [pc, #236]	; (80084c4 <TIM_Base_SetConfig+0x120>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a3a      	ldr	r2, [pc, #232]	; (80084c8 <TIM_Base_SetConfig+0x124>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d108      	bne.n	80083f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2f      	ldr	r2, [pc, #188]	; (80084b8 <TIM_Base_SetConfig+0x114>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d02b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008404:	d027      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a2c      	ldr	r2, [pc, #176]	; (80084bc <TIM_Base_SetConfig+0x118>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d023      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a2b      	ldr	r2, [pc, #172]	; (80084c0 <TIM_Base_SetConfig+0x11c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01f      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2a      	ldr	r2, [pc, #168]	; (80084c4 <TIM_Base_SetConfig+0x120>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a29      	ldr	r2, [pc, #164]	; (80084c8 <TIM_Base_SetConfig+0x124>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d017      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a28      	ldr	r2, [pc, #160]	; (80084cc <TIM_Base_SetConfig+0x128>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a27      	ldr	r2, [pc, #156]	; (80084d0 <TIM_Base_SetConfig+0x12c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a26      	ldr	r2, [pc, #152]	; (80084d4 <TIM_Base_SetConfig+0x130>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a25      	ldr	r2, [pc, #148]	; (80084d8 <TIM_Base_SetConfig+0x134>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a24      	ldr	r2, [pc, #144]	; (80084dc <TIM_Base_SetConfig+0x138>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a23      	ldr	r2, [pc, #140]	; (80084e0 <TIM_Base_SetConfig+0x13c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d108      	bne.n	8008468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <TIM_Base_SetConfig+0x114>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_Base_SetConfig+0xf8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <TIM_Base_SetConfig+0x124>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d103      	bne.n	80084a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	615a      	str	r2, [r3, #20]
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40010000 	.word	0x40010000
 80084bc:	40000400 	.word	0x40000400
 80084c0:	40000800 	.word	0x40000800
 80084c4:	40000c00 	.word	0x40000c00
 80084c8:	40010400 	.word	0x40010400
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40014400 	.word	0x40014400
 80084d4:	40014800 	.word	0x40014800
 80084d8:	40001800 	.word	0x40001800
 80084dc:	40001c00 	.word	0x40001c00
 80084e0:	40002000 	.word	0x40002000

080084e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f023 0201 	bic.w	r2, r3, #1
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800850e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4313      	orrs	r3, r2
 8008518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f023 030a 	bic.w	r3, r3, #10
 8008520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008542:	b480      	push	{r7}
 8008544:	b087      	sub	sp, #28
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f023 0210 	bic.w	r2, r3, #16
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800856c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800857e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	f043 0307 	orr.w	r3, r3, #7
 80085c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	609a      	str	r2, [r3, #8]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	021a      	lsls	r2, r3, #8
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	609a      	str	r2, [r3, #8]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e05a      	b.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a21      	ldr	r2, [pc, #132]	; (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d022      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867c:	d01d      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d018      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00e      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a17      	ldr	r2, [pc, #92]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10c      	bne.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40010000 	.word	0x40010000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40010400 	.word	0x40010400
 8008708:	40014000 	.word	0x40014000
 800870c:	40001800 	.word	0x40001800

08008710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008738:	b084      	sub	sp, #16
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	f107 001c 	add.w	r0, r7, #28
 8008746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	2b01      	cmp	r3, #1
 800874e:	d122      	bne.n	8008796 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877a:	2b01      	cmp	r3, #1
 800877c:	d105      	bne.n	800878a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fbee 	bl	8009f6c <USB_CoreReset>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]
 8008794:	e01a      	b.n	80087cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fbe2 	bl	8009f6c <USB_CoreReset>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80087ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	639a      	str	r2, [r3, #56]	; 0x38
 80087be:	e005      	b.n	80087cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d10b      	bne.n	80087ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f043 0206 	orr.w	r2, r3, #6
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f043 0220 	orr.w	r2, r3, #32
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087f6:	b004      	add	sp, #16
 80087f8:	4770      	bx	lr
	...

080087fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d165      	bne.n	80088dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4a41      	ldr	r2, [pc, #260]	; (8008918 <USB_SetTurnaroundTime+0x11c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d906      	bls.n	8008826 <USB_SetTurnaroundTime+0x2a>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4a40      	ldr	r2, [pc, #256]	; (800891c <USB_SetTurnaroundTime+0x120>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d202      	bcs.n	8008826 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008820:	230f      	movs	r3, #15
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	e062      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4a3c      	ldr	r2, [pc, #240]	; (800891c <USB_SetTurnaroundTime+0x120>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d306      	bcc.n	800883c <USB_SetTurnaroundTime+0x40>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4a3b      	ldr	r2, [pc, #236]	; (8008920 <USB_SetTurnaroundTime+0x124>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d202      	bcs.n	800883c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008836:	230e      	movs	r3, #14
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	e057      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4a38      	ldr	r2, [pc, #224]	; (8008920 <USB_SetTurnaroundTime+0x124>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d306      	bcc.n	8008852 <USB_SetTurnaroundTime+0x56>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4a37      	ldr	r2, [pc, #220]	; (8008924 <USB_SetTurnaroundTime+0x128>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d202      	bcs.n	8008852 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800884c:	230d      	movs	r3, #13
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	e04c      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4a33      	ldr	r2, [pc, #204]	; (8008924 <USB_SetTurnaroundTime+0x128>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d306      	bcc.n	8008868 <USB_SetTurnaroundTime+0x6c>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4a32      	ldr	r2, [pc, #200]	; (8008928 <USB_SetTurnaroundTime+0x12c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d802      	bhi.n	8008868 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008862:	230c      	movs	r3, #12
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	e041      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4a2f      	ldr	r2, [pc, #188]	; (8008928 <USB_SetTurnaroundTime+0x12c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d906      	bls.n	800887e <USB_SetTurnaroundTime+0x82>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4a2e      	ldr	r2, [pc, #184]	; (800892c <USB_SetTurnaroundTime+0x130>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d802      	bhi.n	800887e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008878:	230b      	movs	r3, #11
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	e036      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	4a2a      	ldr	r2, [pc, #168]	; (800892c <USB_SetTurnaroundTime+0x130>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d906      	bls.n	8008894 <USB_SetTurnaroundTime+0x98>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4a29      	ldr	r2, [pc, #164]	; (8008930 <USB_SetTurnaroundTime+0x134>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d802      	bhi.n	8008894 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800888e:	230a      	movs	r3, #10
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	e02b      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4a26      	ldr	r2, [pc, #152]	; (8008930 <USB_SetTurnaroundTime+0x134>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d906      	bls.n	80088aa <USB_SetTurnaroundTime+0xae>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4a25      	ldr	r2, [pc, #148]	; (8008934 <USB_SetTurnaroundTime+0x138>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d202      	bcs.n	80088aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80088a4:	2309      	movs	r3, #9
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e020      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4a21      	ldr	r2, [pc, #132]	; (8008934 <USB_SetTurnaroundTime+0x138>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d306      	bcc.n	80088c0 <USB_SetTurnaroundTime+0xc4>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4a20      	ldr	r2, [pc, #128]	; (8008938 <USB_SetTurnaroundTime+0x13c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d802      	bhi.n	80088c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80088ba:	2308      	movs	r3, #8
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	e015      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4a1d      	ldr	r2, [pc, #116]	; (8008938 <USB_SetTurnaroundTime+0x13c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d906      	bls.n	80088d6 <USB_SetTurnaroundTime+0xda>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4a1c      	ldr	r2, [pc, #112]	; (800893c <USB_SetTurnaroundTime+0x140>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d202      	bcs.n	80088d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088d0:	2307      	movs	r3, #7
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	e00a      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088d6:	2306      	movs	r3, #6
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	e007      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80088e2:	2309      	movs	r3, #9
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	e001      	b.n	80088ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80088e8:	2309      	movs	r3, #9
 80088ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	029b      	lsls	r3, r3, #10
 8008900:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008904:	431a      	orrs	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	00d8acbf 	.word	0x00d8acbf
 800891c:	00e4e1c0 	.word	0x00e4e1c0
 8008920:	00f42400 	.word	0x00f42400
 8008924:	01067380 	.word	0x01067380
 8008928:	011a499f 	.word	0x011a499f
 800892c:	01312cff 	.word	0x01312cff
 8008930:	014ca43f 	.word	0x014ca43f
 8008934:	016e3600 	.word	0x016e3600
 8008938:	01a6ab1f 	.word	0x01a6ab1f
 800893c:	01e84800 	.word	0x01e84800

08008940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f043 0201 	orr.w	r2, r3, #1
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f023 0201 	bic.w	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d115      	bne.n	80089d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089b2:	2001      	movs	r0, #1
 80089b4:	f7f9 fc36 	bl	8002224 <HAL_Delay>
      ms++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fa45 	bl	8009e4e <USB_GetMode>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d01e      	beq.n	8008a08 <USB_SetCurrentMode+0x84>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b31      	cmp	r3, #49	; 0x31
 80089ce:	d9f0      	bls.n	80089b2 <USB_SetCurrentMode+0x2e>
 80089d0:	e01a      	b.n	8008a08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d115      	bne.n	8008a04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089e4:	2001      	movs	r0, #1
 80089e6:	f7f9 fc1d 	bl	8002224 <HAL_Delay>
      ms++;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 fa2c 	bl	8009e4e <USB_GetMode>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <USB_SetCurrentMode+0x84>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b31      	cmp	r3, #49	; 0x31
 8008a00:	d9f0      	bls.n	80089e4 <USB_SetCurrentMode+0x60>
 8008a02:	e001      	b.n	8008a08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e005      	b.n	8008a14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b32      	cmp	r3, #50	; 0x32
 8008a0c:	d101      	bne.n	8008a12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a36:	2300      	movs	r3, #0
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	e009      	b.n	8008a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3340      	adds	r3, #64	; 0x40
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b0e      	cmp	r3, #14
 8008a54:	d9f2      	bls.n	8008a3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d11c      	bne.n	8008a96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a6a:	f043 0302 	orr.w	r3, r3, #2
 8008a6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38
 8008a94:	e00b      	b.n	8008aae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac8:	461a      	mov	r2, r3
 8008aca:	680b      	ldr	r3, [r1, #0]
 8008acc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d10c      	bne.n	8008aee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d104      	bne.n	8008ae4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008ada:	2100      	movs	r1, #0
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f965 	bl	8008dac <USB_SetDevSpeed>
 8008ae2:	e008      	b.n	8008af6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f960 	bl	8008dac <USB_SetDevSpeed>
 8008aec:	e003      	b.n	8008af6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008aee:	2103      	movs	r1, #3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f95b 	bl	8008dac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008af6:	2110      	movs	r1, #16
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f8f3 	bl	8008ce4 <USB_FlushTxFifo>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f91f 	bl	8008d4c <USB_FlushRxFifo>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b36:	461a      	mov	r2, r3
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	e043      	b.n	8008bca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b58:	d118      	bne.n	8008b8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	e013      	b.n	8008b9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	461a      	mov	r2, r3
 8008b84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	e008      	b.n	8008b9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	461a      	mov	r2, r3
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	461a      	mov	r2, r3
 8008bac:	2300      	movs	r3, #0
 8008bae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d3b7      	bcc.n	8008b42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	e043      	b.n	8008c60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bee:	d118      	bne.n	8008c22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c02:	461a      	mov	r2, r3
 8008c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e013      	b.n	8008c34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e008      	b.n	8008c34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	461a      	mov	r2, r3
 8008c30:	2300      	movs	r3, #0
 8008c32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c40:	461a      	mov	r2, r3
 8008c42:	2300      	movs	r3, #0
 8008c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	461a      	mov	r2, r3
 8008c54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d3b7      	bcc.n	8008bd8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d105      	bne.n	8008c9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f043 0210 	orr.w	r2, r3, #16
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <USB_DevInit+0x2c4>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d005      	beq.n	8008cba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f043 0208 	orr.w	r2, r3, #8
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d107      	bne.n	8008cd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cc8:	f043 0304 	orr.w	r3, r3, #4
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cdc:	b004      	add	sp, #16
 8008cde:	4770      	bx	lr
 8008ce0:	803c3800 	.word	0x803c3800

08008ce4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4a13      	ldr	r2, [pc, #76]	; (8008d48 <USB_FlushTxFifo+0x64>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d901      	bls.n	8008d04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e01b      	b.n	8008d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	daf2      	bge.n	8008cf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	019b      	lsls	r3, r3, #6
 8008d14:	f043 0220 	orr.w	r2, r3, #32
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4a08      	ldr	r2, [pc, #32]	; (8008d48 <USB_FlushTxFifo+0x64>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d901      	bls.n	8008d2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e006      	b.n	8008d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d0f0      	beq.n	8008d1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	00030d40 	.word	0x00030d40

08008d4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <USB_FlushRxFifo+0x5c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d901      	bls.n	8008d6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e018      	b.n	8008d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	daf2      	bge.n	8008d58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2210      	movs	r2, #16
 8008d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a08      	ldr	r2, [pc, #32]	; (8008da8 <USB_FlushRxFifo+0x5c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e006      	b.n	8008d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0310 	and.w	r3, r3, #16
 8008d96:	2b10      	cmp	r3, #16
 8008d98:	d0f0      	beq.n	8008d7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	00030d40 	.word	0x00030d40

08008dac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b087      	sub	sp, #28
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 0306 	and.w	r3, r3, #6
 8008df6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
 8008e02:	e00a      	b.n	8008e1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d002      	beq.n	8008e10 <USB_GetDevSpeed+0x32>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b06      	cmp	r3, #6
 8008e0e:	d102      	bne.n	8008e16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e10:	2302      	movs	r3, #2
 8008e12:	75fb      	strb	r3, [r7, #23]
 8008e14:	e001      	b.n	8008e1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e16:	230f      	movs	r3, #15
 8008e18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d13a      	bne.n	8008eba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4a:	69da      	ldr	r2, [r3, #28]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 030f 	and.w	r3, r3, #15
 8008e54:	2101      	movs	r1, #1
 8008e56:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	68f9      	ldr	r1, [r7, #12]
 8008e5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e62:	4313      	orrs	r3, r2
 8008e64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d155      	bne.n	8008f28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	059b      	lsls	r3, r3, #22
 8008e9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	e036      	b.n	8008f28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec0:	69da      	ldr	r2, [r3, #28]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 030f 	and.w	r3, r3, #15
 8008eca:	2101      	movs	r1, #1
 8008ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed0:	041b      	lsls	r3, r3, #16
 8008ed2:	68f9      	ldr	r1, [r7, #12]
 8008ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11a      	bne.n	8008f28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d161      	bne.n	8009018 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f6a:	d11f      	bne.n	8008fac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	0151      	lsls	r1, r2, #5
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	440a      	add	r2, r1
 8008fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008faa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 030f 	and.w	r3, r3, #15
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	68f9      	ldr	r1, [r7, #12]
 8008fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fcc:	4013      	ands	r3, r2
 8008fce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	69da      	ldr	r2, [r3, #28]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	0159      	lsls	r1, r3, #5
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	440b      	add	r3, r1
 800900a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900e:	4619      	mov	r1, r3
 8009010:	4b35      	ldr	r3, [pc, #212]	; (80090e8 <USB_DeactivateEndpoint+0x1b0>)
 8009012:	4013      	ands	r3, r2
 8009014:	600b      	str	r3, [r1, #0]
 8009016:	e060      	b.n	80090da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800902a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800902e:	d11f      	bne.n	8009070 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	440a      	add	r2, r1
 8009046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800904a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800904e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	440a      	add	r2, r1
 8009066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800906e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	2101      	movs	r1, #1
 8009082:	fa01 f303 	lsl.w	r3, r1, r3
 8009086:	041b      	lsls	r3, r3, #16
 8009088:	43db      	mvns	r3, r3
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009090:	4013      	ands	r3, r2
 8009092:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	2101      	movs	r1, #1
 80090a6:	fa01 f303 	lsl.w	r3, r1, r3
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	43db      	mvns	r3, r3
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b4:	4013      	ands	r3, r2
 80090b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	0159      	lsls	r1, r3, #5
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	440b      	add	r3, r1
 80090ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d2:	4619      	mov	r1, r3
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <USB_DeactivateEndpoint+0x1b4>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	ec337800 	.word	0xec337800
 80090ec:	eff37800 	.word	0xeff37800

080090f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	; 0x28
 80090f4:	af02      	add	r7, sp, #8
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 815c 	bne.w	80093ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d132      	bne.n	8009180 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	0151      	lsls	r1, r2, #5
 800912c:	69fa      	ldr	r2, [r7, #28]
 800912e:	440a      	add	r2, r1
 8009130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009134:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009138:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800913c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800915c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	0151      	lsls	r1, r2, #5
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	440a      	add	r2, r1
 8009174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009178:	0cdb      	lsrs	r3, r3, #19
 800917a:	04db      	lsls	r3, r3, #19
 800917c:	6113      	str	r3, [r2, #16]
 800917e:	e074      	b.n	800926a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	0151      	lsls	r1, r2, #5
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	440a      	add	r2, r1
 8009196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919a:	0cdb      	lsrs	r3, r3, #19
 800919c:	04db      	lsls	r3, r3, #19
 800919e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	0151      	lsls	r1, r2, #5
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	440a      	add	r2, r1
 80091b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6999      	ldr	r1, [r3, #24]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	440b      	add	r3, r1
 80091dc:	1e59      	subs	r1, r3, #1
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80091e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091e8:	4b9d      	ldr	r3, [pc, #628]	; (8009460 <USB_EPStartXfer+0x370>)
 80091ea:	400b      	ands	r3, r1
 80091ec:	69b9      	ldr	r1, [r7, #24]
 80091ee:	0148      	lsls	r0, r1, #5
 80091f0:	69f9      	ldr	r1, [r7, #28]
 80091f2:	4401      	add	r1, r0
 80091f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091f8:	4313      	orrs	r3, r2
 80091fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009208:	691a      	ldr	r2, [r3, #16]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009212:	69b9      	ldr	r1, [r7, #24]
 8009214:	0148      	lsls	r0, r1, #5
 8009216:	69f9      	ldr	r1, [r7, #28]
 8009218:	4401      	add	r1, r0
 800921a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800921e:	4313      	orrs	r3, r2
 8009220:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	791b      	ldrb	r3, [r3, #4]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d11f      	bne.n	800926a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009248:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009264:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009268:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d14b      	bne.n	8009308 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	461a      	mov	r2, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	791b      	ldrb	r3, [r3, #4]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d128      	bne.n	80092e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d110      	bne.n	80092c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	e00f      	b.n	80092e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	e133      	b.n	8009570 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	0151      	lsls	r1, r2, #5
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	440a      	add	r2, r1
 800931e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009322:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009326:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	791b      	ldrb	r3, [r3, #4]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d015      	beq.n	800935c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 811b 	beq.w	8009570 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	2101      	movs	r1, #1
 800934c:	fa01 f303 	lsl.w	r3, r1, r3
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009356:	4313      	orrs	r3, r2
 8009358:	634b      	str	r3, [r1, #52]	; 0x34
 800935a:	e109      	b.n	8009570 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009368:	2b00      	cmp	r3, #0
 800936a:	d110      	bne.n	800938e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	e00f      	b.n	80093ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6919      	ldr	r1, [r3, #16]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	b298      	uxth	r0, r3
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4603      	mov	r3, r0
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fade 	bl	8009984 <USB_WritePacket>
 80093c8:	e0d2      	b.n	8009570 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e4:	0cdb      	lsrs	r3, r3, #19
 80093e6:	04db      	lsls	r3, r3, #19
 80093e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009404:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009408:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800940c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d126      	bne.n	8009464 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009422:	691a      	ldr	r2, [r3, #16]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800942c:	69b9      	ldr	r1, [r7, #24]
 800942e:	0148      	lsls	r0, r1, #5
 8009430:	69f9      	ldr	r1, [r7, #28]
 8009432:	4401      	add	r1, r0
 8009434:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009438:	4313      	orrs	r3, r2
 800943a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800945a:	6113      	str	r3, [r2, #16]
 800945c:	e03a      	b.n	80094d4 <USB_EPStartXfer+0x3e4>
 800945e:	bf00      	nop
 8009460:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4413      	add	r3, r2
 800946e:	1e5a      	subs	r2, r3, #1
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	fbb2 f3f3 	udiv	r3, r2, r3
 8009478:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	8afa      	ldrh	r2, [r7, #22]
 8009480:	fb03 f202 	mul.w	r2, r3, r2
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	8afb      	ldrh	r3, [r7, #22]
 8009498:	04d9      	lsls	r1, r3, #19
 800949a:	4b38      	ldr	r3, [pc, #224]	; (800957c <USB_EPStartXfer+0x48c>)
 800949c:	400b      	ands	r3, r1
 800949e:	69b9      	ldr	r1, [r7, #24]
 80094a0:	0148      	lsls	r0, r1, #5
 80094a2:	69f9      	ldr	r1, [r7, #28]
 80094a4:	4401      	add	r1, r0
 80094a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094aa:	4313      	orrs	r3, r2
 80094ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ba:	691a      	ldr	r2, [r3, #16]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094c4:	69b9      	ldr	r1, [r7, #24]
 80094c6:	0148      	lsls	r0, r1, #5
 80094c8:	69f9      	ldr	r1, [r7, #28]
 80094ca:	4401      	add	r1, r0
 80094cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094d0:	4313      	orrs	r3, r2
 80094d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d10d      	bne.n	80094f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6919      	ldr	r1, [r3, #16]
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f2:	460a      	mov	r2, r1
 80094f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	791b      	ldrb	r3, [r3, #4]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d128      	bne.n	8009550 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950a:	2b00      	cmp	r3, #0
 800950c:	d110      	bne.n	8009530 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69ba      	ldr	r2, [r7, #24]
 800951e:	0151      	lsls	r1, r2, #5
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	440a      	add	r2, r1
 8009524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	e00f      	b.n	8009550 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800954e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	0151      	lsls	r1, r2, #5
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	440a      	add	r2, r1
 8009566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800956e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	1ff80000 	.word	0x1ff80000

08009580 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b01      	cmp	r3, #1
 800959e:	f040 80ce 	bne.w	800973e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d132      	bne.n	8009610 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	0151      	lsls	r1, r2, #5
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	440a      	add	r2, r1
 8009604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009608:	0cdb      	lsrs	r3, r3, #19
 800960a:	04db      	lsls	r3, r3, #19
 800960c:	6113      	str	r3, [r2, #16]
 800960e:	e04e      	b.n	80096ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	0151      	lsls	r1, r2, #5
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	440a      	add	r2, r1
 8009626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962a:	0cdb      	lsrs	r3, r3, #19
 800962c:	04db      	lsls	r3, r3, #19
 800962e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	440a      	add	r2, r1
 8009646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800964a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800964e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009652:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	429a      	cmp	r2, r3
 800965e:	d903      	bls.n	8009668 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800969e:	6939      	ldr	r1, [r7, #16]
 80096a0:	0148      	lsls	r0, r1, #5
 80096a2:	6979      	ldr	r1, [r7, #20]
 80096a4:	4401      	add	r1, r0
 80096a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096aa:	4313      	orrs	r3, r2
 80096ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d11e      	bne.n	80096f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c8:	461a      	mov	r2, r3
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e097      	b.n	8009822 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800970c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009710:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8083 	beq.w	8009822 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	2101      	movs	r1, #1
 800972e:	fa01 f303 	lsl.w	r3, r1, r3
 8009732:	6979      	ldr	r1, [r7, #20]
 8009734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009738:	4313      	orrs	r3, r2
 800973a:	634b      	str	r3, [r1, #52]	; 0x34
 800973c:	e071      	b.n	8009822 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	0151      	lsls	r1, r2, #5
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	440a      	add	r2, r1
 8009754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009758:	0cdb      	lsrs	r3, r3, #19
 800975a:	04db      	lsls	r3, r3, #19
 800975c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800977c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009780:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	0151      	lsls	r1, r2, #5
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	440a      	add	r2, r1
 80097b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	691a      	ldr	r2, [r3, #16]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097d0:	6939      	ldr	r1, [r7, #16]
 80097d2:	0148      	lsls	r0, r1, #5
 80097d4:	6979      	ldr	r1, [r7, #20]
 80097d6:	4401      	add	r1, r0
 80097d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097dc:	4313      	orrs	r3, r2
 80097de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d10d      	bne.n	8009802 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6919      	ldr	r1, [r3, #16]
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	460a      	mov	r2, r1
 8009800:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009820:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	371c      	adds	r7, #28
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d14a      	bne.n	80098e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009866:	f040 8086 	bne.w	8009976 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	7812      	ldrb	r2, [r2, #0]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009888:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800988c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	7812      	ldrb	r2, [r2, #0]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80098be:	4293      	cmp	r3, r2
 80098c0:	d902      	bls.n	80098c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]
          break;
 80098c6:	e056      	b.n	8009976 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e0:	d0e7      	beq.n	80098b2 <USB_EPStopXfer+0x82>
 80098e2:	e048      	b.n	8009976 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098fc:	d13b      	bne.n	8009976 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	7812      	ldrb	r2, [r2, #0]
 8009912:	0151      	lsls	r1, r2, #5
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	440a      	add	r2, r1
 8009918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800991c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009920:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	440a      	add	r2, r1
 800993c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009944:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009952:	4293      	cmp	r3, r2
 8009954:	d902      	bls.n	800995c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
          break;
 800995a:	e00c      	b.n	8009976 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009974:	d0e7      	beq.n	8009946 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
}
 8009978:	4618      	mov	r0, r3
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009984:	b480      	push	{r7}
 8009986:	b089      	sub	sp, #36	; 0x24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	460b      	mov	r3, r1
 8009994:	71fb      	strb	r3, [r7, #7]
 8009996:	4613      	mov	r3, r2
 8009998:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80099a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d123      	bne.n	80099f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099aa:	88bb      	ldrh	r3, [r7, #4]
 80099ac:	3303      	adds	r3, #3
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	e018      	b.n	80099ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	031a      	lsls	r2, r3, #12
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c4:	461a      	mov	r2, r3
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	3301      	adds	r3, #1
 80099d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	3301      	adds	r3, #1
 80099d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	3301      	adds	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	3301      	adds	r3, #1
 80099e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	3301      	adds	r3, #1
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d3e2      	bcc.n	80099b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3724      	adds	r7, #36	; 0x24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b08b      	sub	sp, #44	; 0x2c
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	089b      	lsrs	r3, r3, #2
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a1e:	88fb      	ldrh	r3, [r7, #6]
 8009a20:	f003 0303 	and.w	r3, r3, #3
 8009a24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	623b      	str	r3, [r7, #32]
 8009a2a:	e014      	b.n	8009a56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	3301      	adds	r3, #1
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	3301      	adds	r3, #1
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	3301      	adds	r3, #1
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	6a3a      	ldr	r2, [r7, #32]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d3e6      	bcc.n	8009a2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a5e:	8bfb      	ldrh	r3, [r7, #30]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d01e      	beq.n	8009aa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f107 0310 	add.w	r3, r7, #16
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	fa22 f303 	lsr.w	r3, r2, r3
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	701a      	strb	r2, [r3, #0]
      i++;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	3301      	adds	r3, #1
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a96:	8bfb      	ldrh	r3, [r7, #30]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a9c:	8bfb      	ldrh	r3, [r7, #30]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1ea      	bne.n	8009a78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	372c      	adds	r7, #44	; 0x2c
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d12c      	bne.n	8009b26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	db12      	blt.n	8009b04 <USB_EPSetStall+0x54>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00f      	beq.n	8009b04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	0151      	lsls	r1, r2, #5
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	440a      	add	r2, r1
 8009afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	e02b      	b.n	8009b7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	db12      	blt.n	8009b5e <USB_EPSetStall+0xae>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00f      	beq.n	8009b5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d128      	bne.n	8009bfa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	0151      	lsls	r1, r2, #5
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	440a      	add	r2, r1
 8009bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d003      	beq.n	8009bd8 <USB_EPClearStall+0x4c>
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	791b      	ldrb	r3, [r3, #4]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d138      	bne.n	8009c4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	e027      	b.n	8009c4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	791b      	ldrb	r3, [r3, #4]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d003      	beq.n	8009c2a <USB_EPClearStall+0x9e>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	791b      	ldrb	r3, [r3, #4]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d10f      	bne.n	8009c4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	0151      	lsls	r1, r2, #5
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	440a      	add	r2, r1
 8009c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c8c:	68f9      	ldr	r1, [r7, #12]
 8009c8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c92:	4313      	orrs	r3, r2
 8009c94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cbe:	f023 0303 	bic.w	r3, r3, #3
 8009cc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cd2:	f023 0302 	bic.w	r3, r3, #2
 8009cd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d14:	f043 0302 	orr.w	r3, r3, #2
 8009d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d40:	68fb      	ldr	r3, [r7, #12]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	0c1b      	lsrs	r3, r3, #16
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	4013      	ands	r3, r2
 8009da4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	b29b      	uxth	r3, r3
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4013      	ands	r3, r2
 8009de2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009de4:	68bb      	ldr	r3, [r7, #8]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b087      	sub	sp, #28
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	f003 030f 	and.w	r3, r3, #15
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e22:	01db      	lsls	r3, r3, #7
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e40:	68bb      	ldr	r3, [r7, #8]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e88:	f023 0307 	bic.w	r3, r3, #7
 8009e8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ea0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	333c      	adds	r3, #60	; 0x3c
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	4a26      	ldr	r2, [pc, #152]	; (8009f68 <USB_EP0_OutStart+0xb8>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d90a      	bls.n	8009eea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ee4:	d101      	bne.n	8009eea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e037      	b.n	8009f5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f18:	f043 0318 	orr.w	r3, r3, #24
 8009f1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d10f      	bne.n	8009f58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	4f54300a 	.word	0x4f54300a

08009f6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4a13      	ldr	r2, [pc, #76]	; (8009fd0 <USB_CoreReset+0x64>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d901      	bls.n	8009f8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e01b      	b.n	8009fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	daf2      	bge.n	8009f78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	f043 0201 	orr.w	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4a09      	ldr	r2, [pc, #36]	; (8009fd0 <USB_CoreReset+0x64>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d901      	bls.n	8009fb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e006      	b.n	8009fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d0f0      	beq.n	8009fa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	00030d40 	.word	0x00030d40

08009fd4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009fe0:	2010      	movs	r0, #16
 8009fe2:	f002 f929 	bl	800c238 <USBD_static_malloc>
 8009fe6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d109      	bne.n	800a002 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	32b0      	adds	r2, #176	; 0xb0
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ffe:	2302      	movs	r3, #2
 800a000:	e048      	b.n	800a094 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	32b0      	adds	r2, #176	; 0xb0
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	32b0      	adds	r2, #176	; 0xb0
 800a01c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	7c1b      	ldrb	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10d      	bne.n	800a04a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a02e:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <USBD_HID_Init+0xc8>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	f003 020f 	and.w	r2, r3, #15
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	3326      	adds	r3, #38	; 0x26
 800a044:	2207      	movs	r2, #7
 800a046:	801a      	strh	r2, [r3, #0]
 800a048:	e00c      	b.n	800a064 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a04a:	4b14      	ldr	r3, [pc, #80]	; (800a09c <USBD_HID_Init+0xc8>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	f003 020f 	and.w	r2, r3, #15
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	440b      	add	r3, r1
 800a05e:	3326      	adds	r3, #38	; 0x26
 800a060:	220a      	movs	r2, #10
 800a062:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <USBD_HID_Init+0xc8>)
 800a066:	7819      	ldrb	r1, [r3, #0]
 800a068:	2304      	movs	r3, #4
 800a06a:	2203      	movs	r2, #3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 ffd2 	bl	800c016 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800a072:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <USBD_HID_Init+0xc8>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	f003 020f 	and.w	r2, r3, #15
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	3324      	adds	r3, #36	; 0x24
 800a088:	2201      	movs	r2, #1
 800a08a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200000ea 	.word	0x200000ea

0800a0a0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800a0ac:	4b1f      	ldr	r3, [pc, #124]	; (800a12c <USBD_HID_DeInit+0x8c>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f001 ffd5 	bl	800c062 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a0b8:	4b1c      	ldr	r3, [pc, #112]	; (800a12c <USBD_HID_DeInit+0x8c>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f003 020f 	and.w	r2, r3, #15
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3324      	adds	r3, #36	; 0x24
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a0d2:	4b16      	ldr	r3, [pc, #88]	; (800a12c <USBD_HID_DeInit+0x8c>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f003 020f 	and.w	r2, r3, #15
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	3326      	adds	r3, #38	; 0x26
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	32b0      	adds	r2, #176	; 0xb0
 800a0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d011      	beq.n	800a122 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	32b0      	adds	r2, #176	; 0xb0
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 f8a1 	bl	800c254 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	32b0      	adds	r2, #176	; 0xb0
 800a11c:	2100      	movs	r1, #0
 800a11e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	200000ea 	.word	0x200000ea

0800a130 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	32b0      	adds	r2, #176	; 0xb0
 800a144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a148:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a158:	2303      	movs	r3, #3
 800a15a:	e0e8      	b.n	800a32e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a164:	2b00      	cmp	r3, #0
 800a166:	d046      	beq.n	800a1f6 <USBD_HID_Setup+0xc6>
 800a168:	2b20      	cmp	r3, #32
 800a16a:	f040 80d8 	bne.w	800a31e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	3b02      	subs	r3, #2
 800a174:	2b09      	cmp	r3, #9
 800a176:	d836      	bhi.n	800a1e6 <USBD_HID_Setup+0xb6>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <USBD_HID_Setup+0x50>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a1d7 	.word	0x0800a1d7
 800a184:	0800a1b7 	.word	0x0800a1b7
 800a188:	0800a1e7 	.word	0x0800a1e7
 800a18c:	0800a1e7 	.word	0x0800a1e7
 800a190:	0800a1e7 	.word	0x0800a1e7
 800a194:	0800a1e7 	.word	0x0800a1e7
 800a198:	0800a1e7 	.word	0x0800a1e7
 800a19c:	0800a1e7 	.word	0x0800a1e7
 800a1a0:	0800a1c5 	.word	0x0800a1c5
 800a1a4:	0800a1a9 	.word	0x0800a1a9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	885b      	ldrh	r3, [r3, #2]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	601a      	str	r2, [r3, #0]
          break;
 800a1b4:	e01e      	b.n	800a1f4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fbd5 	bl	800b96c <USBD_CtlSendData>
          break;
 800a1c2:	e017      	b.n	800a1f4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	885b      	ldrh	r3, [r3, #2]
 800a1c8:	0a1b      	lsrs	r3, r3, #8
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	605a      	str	r2, [r3, #4]
          break;
 800a1d4:	e00e      	b.n	800a1f4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 fbc4 	bl	800b96c <USBD_CtlSendData>
          break;
 800a1e4:	e006      	b.n	800a1f4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 fb4e 	bl	800b88a <USBD_CtlError>
          ret = USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a1f2:	bf00      	nop
      }
      break;
 800a1f4:	e09a      	b.n	800a32c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b0b      	cmp	r3, #11
 800a1fc:	f200 8086 	bhi.w	800a30c <USBD_HID_Setup+0x1dc>
 800a200:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <USBD_HID_Setup+0xd8>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a239 	.word	0x0800a239
 800a20c:	0800a31b 	.word	0x0800a31b
 800a210:	0800a30d 	.word	0x0800a30d
 800a214:	0800a30d 	.word	0x0800a30d
 800a218:	0800a30d 	.word	0x0800a30d
 800a21c:	0800a30d 	.word	0x0800a30d
 800a220:	0800a263 	.word	0x0800a263
 800a224:	0800a30d 	.word	0x0800a30d
 800a228:	0800a30d 	.word	0x0800a30d
 800a22c:	0800a30d 	.word	0x0800a30d
 800a230:	0800a2bb 	.word	0x0800a2bb
 800a234:	0800a2e5 	.word	0x0800a2e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b03      	cmp	r3, #3
 800a242:	d107      	bne.n	800a254 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a244:	f107 030a 	add.w	r3, r7, #10
 800a248:	2202      	movs	r2, #2
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 fb8d 	bl	800b96c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a252:	e063      	b.n	800a31c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f001 fb17 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 800a25c:	2303      	movs	r3, #3
 800a25e:	75fb      	strb	r3, [r7, #23]
          break;
 800a260:	e05c      	b.n	800a31c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	885b      	ldrh	r3, [r3, #2]
 800a266:	0a1b      	lsrs	r3, r3, #8
 800a268:	b29b      	uxth	r3, r3
 800a26a:	2b22      	cmp	r3, #34	; 0x22
 800a26c:	d108      	bne.n	800a280 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	88db      	ldrh	r3, [r3, #6]
 800a272:	2b4a      	cmp	r3, #74	; 0x4a
 800a274:	bf28      	it	cs
 800a276:	234a      	movcs	r3, #74	; 0x4a
 800a278:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a27a:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <USBD_HID_Setup+0x208>)
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	e015      	b.n	800a2ac <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	885b      	ldrh	r3, [r3, #2]
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	b29b      	uxth	r3, r3
 800a288:	2b21      	cmp	r3, #33	; 0x21
 800a28a:	d108      	bne.n	800a29e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800a28c:	4b2b      	ldr	r3, [pc, #172]	; (800a33c <USBD_HID_Setup+0x20c>)
 800a28e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	88db      	ldrh	r3, [r3, #6]
 800a294:	2b09      	cmp	r3, #9
 800a296:	bf28      	it	cs
 800a298:	2309      	movcs	r3, #9
 800a29a:	82bb      	strh	r3, [r7, #20]
 800a29c:	e006      	b.n	800a2ac <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f001 faf2 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	75fb      	strb	r3, [r7, #23]
            break;
 800a2aa:	e037      	b.n	800a31c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ac:	8abb      	ldrh	r3, [r7, #20]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6939      	ldr	r1, [r7, #16]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 fb5a 	bl	800b96c <USBD_CtlSendData>
          break;
 800a2b8:	e030      	b.n	800a31c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d107      	bne.n	800a2d6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fb4c 	bl	800b96c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2d4:	e022      	b.n	800a31c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fad6 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2e2:	e01b      	b.n	800a31c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d106      	bne.n	800a2fe <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2fc:	e00e      	b.n	800a31c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 fac2 	bl	800b88a <USBD_CtlError>
            ret = USBD_FAIL;
 800a306:	2303      	movs	r3, #3
 800a308:	75fb      	strb	r3, [r7, #23]
          break;
 800a30a:	e007      	b.n	800a31c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fabb 	bl	800b88a <USBD_CtlError>
          ret = USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	75fb      	strb	r3, [r7, #23]
          break;
 800a318:	e000      	b.n	800a31c <USBD_HID_Setup+0x1ec>
          break;
 800a31a:	bf00      	nop
      }
      break;
 800a31c:	e006      	b.n	800a32c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 fab2 	bl	800b88a <USBD_CtlError>
      ret = USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	75fb      	strb	r3, [r7, #23]
      break;
 800a32a:	bf00      	nop
  }

  return (uint8_t)ret;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	200000a0 	.word	0x200000a0
 800a33c:	20000088 	.word	0x20000088

0800a340 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	32b0      	adds	r2, #176	; 0xb0
 800a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a364:	2303      	movs	r3, #3
 800a366:	e014      	b.n	800a392 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b03      	cmp	r3, #3
 800a372:	d10d      	bne.n	800a390 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	7b1b      	ldrb	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d109      	bne.n	800a390 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2201      	movs	r2, #1
 800a380:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800a382:	4b06      	ldr	r3, [pc, #24]	; (800a39c <USBD_HID_SendReport+0x5c>)
 800a384:	7819      	ldrb	r1, [r3, #0]
 800a386:	88fb      	ldrh	r3, [r7, #6]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f001 ff11 	bl	800c1b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	200000ea 	.word	0x200000ea

0800a3a0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a3a8:	2181      	movs	r1, #129	; 0x81
 800a3aa:	4809      	ldr	r0, [pc, #36]	; (800a3d0 <USBD_HID_GetFSCfgDesc+0x30>)
 800a3ac:	f000 fc35 	bl	800ac1a <USBD_GetEpDesc>
 800a3b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2222      	movs	r2, #34	; 0x22
 800a3c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a3c4:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000064 	.word	0x20000064

0800a3d4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a3dc:	2181      	movs	r1, #129	; 0x81
 800a3de:	4809      	ldr	r0, [pc, #36]	; (800a404 <USBD_HID_GetHSCfgDesc+0x30>)
 800a3e0:	f000 fc1b 	bl	800ac1a <USBD_GetEpDesc>
 800a3e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2207      	movs	r2, #7
 800a3f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2222      	movs	r2, #34	; 0x22
 800a3f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a3f8:	4b02      	ldr	r3, [pc, #8]	; (800a404 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000064 	.word	0x20000064

0800a408 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a410:	2181      	movs	r1, #129	; 0x81
 800a412:	4809      	ldr	r0, [pc, #36]	; (800a438 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a414:	f000 fc01 	bl	800ac1a <USBD_GetEpDesc>
 800a418:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	220a      	movs	r2, #10
 800a424:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2222      	movs	r2, #34	; 0x22
 800a42a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a42c:	4b02      	ldr	r3, [pc, #8]	; (800a438 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000064 	.word	0x20000064

0800a43c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32b0      	adds	r2, #176	; 0xb0
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	2200      	movs	r2, #0
 800a458:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	220a      	movs	r2, #10
 800a474:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a476:	4b03      	ldr	r3, [pc, #12]	; (800a484 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	20000094 	.word	0x20000094

0800a488 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e01f      	b.n	800a4e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	79fa      	ldrb	r2, [r7, #7]
 800a4d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f001 fd37 	bl	800bf48 <USBD_LL_Init>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e025      	b.n	800a54c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	32ae      	adds	r2, #174	; 0xae
 800a512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00f      	beq.n	800a53c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	32ae      	adds	r2, #174	; 0xae
 800a526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	f107 020e 	add.w	r2, r7, #14
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	4602      	mov	r2, r0
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fd3f 	bl	800bfe0 <USBD_LL_Start>
 800a562:	4603      	mov	r3, r0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	460b      	mov	r3, r1
 800a58c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	78fa      	ldrb	r2, [r7, #3]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	78fa      	ldrb	r2, [r7, #3]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	4798      	blx	r3
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f001 f908 	bl	800b816 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a614:	461a      	mov	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a622:	f003 031f 	and.w	r3, r3, #31
 800a626:	2b02      	cmp	r3, #2
 800a628:	d01a      	beq.n	800a660 <USBD_LL_SetupStage+0x72>
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d822      	bhi.n	800a674 <USBD_LL_SetupStage+0x86>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <USBD_LL_SetupStage+0x4a>
 800a632:	2b01      	cmp	r3, #1
 800a634:	d00a      	beq.n	800a64c <USBD_LL_SetupStage+0x5e>
 800a636:	e01d      	b.n	800a674 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fb5f 	bl	800ad04 <USBD_StdDevReq>
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]
      break;
 800a64a:	e020      	b.n	800a68e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fbc7 	bl	800ade8 <USBD_StdItfReq>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]
      break;
 800a65e:	e016      	b.n	800a68e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fc29 	bl	800aec0 <USBD_StdEPReq>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
      break;
 800a672:	e00c      	b.n	800a68e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a67a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fd0c 	bl	800c0a0 <USBD_LL_StallEP>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
      break;
 800a68c:	bf00      	nop
  }

  return ret;
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d16e      	bne.n	800a78e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	f040 8098 	bne.w	800a7f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	689a      	ldr	r2, [r3, #8]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d913      	bls.n	800a6f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	bf28      	it	cs
 800a6ea:	4613      	movcs	r3, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f001 f967 	bl	800b9c4 <USBD_CtlContinueRx>
 800a6f6:	e07d      	b.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6fe:	f003 031f 	and.w	r3, r3, #31
 800a702:	2b02      	cmp	r3, #2
 800a704:	d014      	beq.n	800a730 <USBD_LL_DataOutStage+0x98>
 800a706:	2b02      	cmp	r3, #2
 800a708:	d81d      	bhi.n	800a746 <USBD_LL_DataOutStage+0xae>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <USBD_LL_DataOutStage+0x7c>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d003      	beq.n	800a71a <USBD_LL_DataOutStage+0x82>
 800a712:	e018      	b.n	800a746 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	75bb      	strb	r3, [r7, #22]
            break;
 800a718:	e018      	b.n	800a74c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a720:	b2db      	uxtb	r3, r3
 800a722:	4619      	mov	r1, r3
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 fa5e 	bl	800abe6 <USBD_CoreFindIF>
 800a72a:	4603      	mov	r3, r0
 800a72c:	75bb      	strb	r3, [r7, #22]
            break;
 800a72e:	e00d      	b.n	800a74c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a736:	b2db      	uxtb	r3, r3
 800a738:	4619      	mov	r1, r3
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fa60 	bl	800ac00 <USBD_CoreFindEP>
 800a740:	4603      	mov	r3, r0
 800a742:	75bb      	strb	r3, [r7, #22]
            break;
 800a744:	e002      	b.n	800a74c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	75bb      	strb	r3, [r7, #22]
            break;
 800a74a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a74c:	7dbb      	ldrb	r3, [r7, #22]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d119      	bne.n	800a786 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d113      	bne.n	800a786 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a75e:	7dba      	ldrb	r2, [r7, #22]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	32ae      	adds	r2, #174	; 0xae
 800a764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a76e:	7dba      	ldrb	r2, [r7, #22]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a776:	7dba      	ldrb	r2, [r7, #22]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	32ae      	adds	r2, #174	; 0xae
 800a77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f001 f92d 	bl	800b9e6 <USBD_CtlSendStatus>
 800a78c:	e032      	b.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a78e:	7afb      	ldrb	r3, [r7, #11]
 800a790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a794:	b2db      	uxtb	r3, r3
 800a796:	4619      	mov	r1, r3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fa31 	bl	800ac00 <USBD_CoreFindEP>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7a2:	7dbb      	ldrb	r3, [r7, #22]
 800a7a4:	2bff      	cmp	r3, #255	; 0xff
 800a7a6:	d025      	beq.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
 800a7a8:	7dbb      	ldrb	r3, [r7, #22]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d122      	bne.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d117      	bne.n	800a7ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7ba:	7dba      	ldrb	r2, [r7, #22]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	32ae      	adds	r2, #174	; 0xae
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00f      	beq.n	800a7ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7ca:	7dba      	ldrb	r2, [r7, #22]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7d2:	7dba      	ldrb	r2, [r7, #22]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	32ae      	adds	r2, #174	; 0xae
 800a7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	7afa      	ldrb	r2, [r7, #11]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	e000      	b.n	800a7f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	460b      	mov	r3, r1
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d16f      	bne.n	800a8f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3314      	adds	r3, #20
 800a816:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d15a      	bne.n	800a8d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d914      	bls.n	800a858 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	461a      	mov	r2, r3
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f001 f8ac 	bl	800b9a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a84a:	2300      	movs	r3, #0
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f001 fccf 	bl	800c1f4 <USBD_LL_PrepareReceive>
 800a856:	e03f      	b.n	800a8d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	429a      	cmp	r2, r3
 800a862:	d11c      	bne.n	800a89e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d316      	bcc.n	800a89e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d20f      	bcs.n	800a89e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f001 f88d 	bl	800b9a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	2100      	movs	r1, #0
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 fcac 	bl	800c1f4 <USBD_LL_PrepareReceive>
 800a89c:	e01c      	b.n	800a8d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d10f      	bne.n	800a8ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d009      	beq.n	800a8ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ca:	2180      	movs	r1, #128	; 0x80
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f001 fbe7 	bl	800c0a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f001 f89a 	bl	800ba0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d03a      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fe42 	bl	800a56c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a8f0:	e032      	b.n	800a958 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f97f 	bl	800ac00 <USBD_CoreFindEP>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	2bff      	cmp	r3, #255	; 0xff
 800a90a:	d025      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d122      	bne.n	800a958 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d11c      	bne.n	800a958 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a91e:	7dfa      	ldrb	r2, [r7, #23]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	32ae      	adds	r2, #174	; 0xae
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d014      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a92e:	7dfa      	ldrb	r2, [r7, #23]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a936:	7dfa      	ldrb	r2, [r7, #23]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	32ae      	adds	r2, #174	; 0xae
 800a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	7afa      	ldrb	r2, [r7, #11]
 800a944:	4611      	mov	r1, r2
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	4798      	blx	r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a94e:	7dbb      	ldrb	r3, [r7, #22]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a954:	7dbb      	ldrb	r3, [r7, #22]
 800a956:	e000      	b.n	800a95a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d014      	beq.n	800a9c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6852      	ldr	r2, [r2, #4]
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 fb21 	bl	800c016 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2240      	movs	r2, #64	; 0x40
 800a9e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2180      	movs	r1, #128	; 0x80
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fb13 	bl	800c016 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2240      	movs	r2, #64	; 0x40
 800a9fa:	621a      	str	r2, [r3, #32]

  return ret;
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2204      	movs	r2, #4
 800aa40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b04      	cmp	r3, #4
 800aa64:	d106      	bne.n	800aa74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d110      	bne.n	800aab8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d005      	beq.n	800aab8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	32ae      	adds	r2, #174	; 0xae
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e01c      	b.n	800ab1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d115      	bne.n	800ab1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	32ae      	adds	r2, #174	; 0xae
 800aafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	32ae      	adds	r2, #174	; 0xae
 800ab0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	78fa      	ldrb	r2, [r7, #3]
 800ab16:	4611      	mov	r1, r2
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	32ae      	adds	r2, #174	; 0xae
 800ab3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e01c      	b.n	800ab82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d115      	bne.n	800ab80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	32ae      	adds	r2, #174	; 0xae
 800ab5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	32ae      	adds	r2, #174	; 0xae
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	78fa      	ldrb	r2, [r7, #3]
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00e      	beq.n	800abdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	6852      	ldr	r2, [r2, #4]
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	4611      	mov	r1, r2
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	4798      	blx	r3
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abd8:	2303      	movs	r3, #3
 800abda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	460b      	mov	r3, r1
 800abf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	885b      	ldrh	r3, [r3, #2]
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d920      	bls.n	800ac84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac4a:	e013      	b.n	800ac74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac4c:	f107 030a 	add.w	r3, r7, #10
 800ac50:	4619      	mov	r1, r3
 800ac52:	6978      	ldr	r0, [r7, #20]
 800ac54:	f000 f81b 	bl	800ac8e <USBD_GetNextDesc>
 800ac58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	2b05      	cmp	r3, #5
 800ac60:	d108      	bne.n	800ac74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	789b      	ldrb	r3, [r3, #2]
 800ac6a:	78fa      	ldrb	r2, [r7, #3]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d008      	beq.n	800ac82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac70:	2300      	movs	r3, #0
 800ac72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	885b      	ldrh	r3, [r3, #2]
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	897b      	ldrh	r3, [r7, #10]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d8e5      	bhi.n	800ac4c <USBD_GetEpDesc+0x32>
 800ac80:	e000      	b.n	800ac84 <USBD_GetEpDesc+0x6a>
          break;
 800ac82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac84:	693b      	ldr	r3, [r7, #16]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	881a      	ldrh	r2, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	4413      	add	r3, r2
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4413      	add	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acba:	68fb      	ldr	r3, [r7, #12]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	3301      	adds	r3, #1
 800acde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ace6:	8a3b      	ldrh	r3, [r7, #16]
 800ace8:	021b      	lsls	r3, r3, #8
 800acea:	b21a      	sxth	r2, r3
 800acec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	b21b      	sxth	r3, r3
 800acf4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acf6:	89fb      	ldrh	r3, [r7, #14]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad1a:	2b40      	cmp	r3, #64	; 0x40
 800ad1c:	d005      	beq.n	800ad2a <USBD_StdDevReq+0x26>
 800ad1e:	2b40      	cmp	r3, #64	; 0x40
 800ad20:	d857      	bhi.n	800add2 <USBD_StdDevReq+0xce>
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00f      	beq.n	800ad46 <USBD_StdDevReq+0x42>
 800ad26:	2b20      	cmp	r3, #32
 800ad28:	d153      	bne.n	800add2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	32ae      	adds	r2, #174	; 0xae
 800ad34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4798      	blx	r3
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
      break;
 800ad44:	e04a      	b.n	800addc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	2b09      	cmp	r3, #9
 800ad4c:	d83b      	bhi.n	800adc6 <USBD_StdDevReq+0xc2>
 800ad4e:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <USBD_StdDevReq+0x50>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ada9 	.word	0x0800ada9
 800ad58:	0800adbd 	.word	0x0800adbd
 800ad5c:	0800adc7 	.word	0x0800adc7
 800ad60:	0800adb3 	.word	0x0800adb3
 800ad64:	0800adc7 	.word	0x0800adc7
 800ad68:	0800ad87 	.word	0x0800ad87
 800ad6c:	0800ad7d 	.word	0x0800ad7d
 800ad70:	0800adc7 	.word	0x0800adc7
 800ad74:	0800ad9f 	.word	0x0800ad9f
 800ad78:	0800ad91 	.word	0x0800ad91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa3c 	bl	800b1fc <USBD_GetDescriptor>
          break;
 800ad84:	e024      	b.n	800add0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fba1 	bl	800b4d0 <USBD_SetAddress>
          break;
 800ad8e:	e01f      	b.n	800add0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fbe0 	bl	800b558 <USBD_SetConfig>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73fb      	strb	r3, [r7, #15]
          break;
 800ad9c:	e018      	b.n	800add0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc83 	bl	800b6ac <USBD_GetConfig>
          break;
 800ada6:	e013      	b.n	800add0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fcb4 	bl	800b718 <USBD_GetStatus>
          break;
 800adb0:	e00e      	b.n	800add0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fce3 	bl	800b780 <USBD_SetFeature>
          break;
 800adba:	e009      	b.n	800add0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fd07 	bl	800b7d2 <USBD_ClrFeature>
          break;
 800adc4:	e004      	b.n	800add0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fd5e 	bl	800b88a <USBD_CtlError>
          break;
 800adce:	bf00      	nop
      }
      break;
 800add0:	e004      	b.n	800addc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fd58 	bl	800b88a <USBD_CtlError>
      break;
 800adda:	bf00      	nop
  }

  return ret;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop

0800ade8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d005      	beq.n	800ae0e <USBD_StdItfReq+0x26>
 800ae02:	2b40      	cmp	r3, #64	; 0x40
 800ae04:	d852      	bhi.n	800aeac <USBD_StdItfReq+0xc4>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <USBD_StdItfReq+0x26>
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d14e      	bne.n	800aeac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	3b01      	subs	r3, #1
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d840      	bhi.n	800ae9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	889b      	ldrh	r3, [r3, #4]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d836      	bhi.n	800ae94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	889b      	ldrh	r3, [r3, #4]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff fed9 	bl	800abe6 <USBD_CoreFindIF>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	2bff      	cmp	r3, #255	; 0xff
 800ae3c:	d01d      	beq.n	800ae7a <USBD_StdItfReq+0x92>
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d11a      	bne.n	800ae7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae44:	7bba      	ldrb	r2, [r7, #14]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	32ae      	adds	r2, #174	; 0xae
 800ae4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00f      	beq.n	800ae74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae54:	7bba      	ldrb	r2, [r7, #14]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae5c:	7bba      	ldrb	r2, [r7, #14]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	32ae      	adds	r2, #174	; 0xae
 800ae62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae72:	e004      	b.n	800ae7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae78:	e001      	b.n	800ae7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	88db      	ldrh	r3, [r3, #6]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d110      	bne.n	800aea8 <USBD_StdItfReq+0xc0>
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10d      	bne.n	800aea8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fdaa 	bl	800b9e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae92:	e009      	b.n	800aea8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fcf7 	bl	800b88a <USBD_CtlError>
          break;
 800ae9c:	e004      	b.n	800aea8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fcf2 	bl	800b88a <USBD_CtlError>
          break;
 800aea6:	e000      	b.n	800aeaa <USBD_StdItfReq+0xc2>
          break;
 800aea8:	bf00      	nop
      }
      break;
 800aeaa:	e004      	b.n	800aeb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fceb 	bl	800b88a <USBD_CtlError>
      break;
 800aeb4:	bf00      	nop
  }

  return ret;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	889b      	ldrh	r3, [r3, #4]
 800aed2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aedc:	2b40      	cmp	r3, #64	; 0x40
 800aede:	d007      	beq.n	800aef0 <USBD_StdEPReq+0x30>
 800aee0:	2b40      	cmp	r3, #64	; 0x40
 800aee2:	f200 817f 	bhi.w	800b1e4 <USBD_StdEPReq+0x324>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d02a      	beq.n	800af40 <USBD_StdEPReq+0x80>
 800aeea:	2b20      	cmp	r3, #32
 800aeec:	f040 817a 	bne.w	800b1e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff fe83 	bl	800ac00 <USBD_CoreFindEP>
 800aefa:	4603      	mov	r3, r0
 800aefc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aefe:	7b7b      	ldrb	r3, [r7, #13]
 800af00:	2bff      	cmp	r3, #255	; 0xff
 800af02:	f000 8174 	beq.w	800b1ee <USBD_StdEPReq+0x32e>
 800af06:	7b7b      	ldrb	r3, [r7, #13]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f040 8170 	bne.w	800b1ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af0e:	7b7a      	ldrb	r2, [r7, #13]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af16:	7b7a      	ldrb	r2, [r7, #13]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	32ae      	adds	r2, #174	; 0xae
 800af1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 8163 	beq.w	800b1ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af28:	7b7a      	ldrb	r2, [r7, #13]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	32ae      	adds	r2, #174	; 0xae
 800af2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af3e:	e156      	b.n	800b1ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	785b      	ldrb	r3, [r3, #1]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d008      	beq.n	800af5a <USBD_StdEPReq+0x9a>
 800af48:	2b03      	cmp	r3, #3
 800af4a:	f300 8145 	bgt.w	800b1d8 <USBD_StdEPReq+0x318>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 809b 	beq.w	800b08a <USBD_StdEPReq+0x1ca>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d03c      	beq.n	800afd2 <USBD_StdEPReq+0x112>
 800af58:	e13e      	b.n	800b1d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b02      	cmp	r3, #2
 800af64:	d002      	beq.n	800af6c <USBD_StdEPReq+0xac>
 800af66:	2b03      	cmp	r3, #3
 800af68:	d016      	beq.n	800af98 <USBD_StdEPReq+0xd8>
 800af6a:	e02c      	b.n	800afc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00d      	beq.n	800af8e <USBD_StdEPReq+0xce>
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	2b80      	cmp	r3, #128	; 0x80
 800af76:	d00a      	beq.n	800af8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 f88f 	bl	800c0a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af82:	2180      	movs	r1, #128	; 0x80
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f001 f88b 	bl	800c0a0 <USBD_LL_StallEP>
 800af8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af8c:	e020      	b.n	800afd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fc7a 	bl	800b88a <USBD_CtlError>
              break;
 800af96:	e01b      	b.n	800afd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	885b      	ldrh	r3, [r3, #2]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10e      	bne.n	800afbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <USBD_StdEPReq+0xfe>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b80      	cmp	r3, #128	; 0x80
 800afaa:	d008      	beq.n	800afbe <USBD_StdEPReq+0xfe>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	88db      	ldrh	r3, [r3, #6]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f871 	bl	800c0a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fd11 	bl	800b9e6 <USBD_CtlSendStatus>

              break;
 800afc4:	e004      	b.n	800afd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fc5e 	bl	800b88a <USBD_CtlError>
              break;
 800afce:	bf00      	nop
          }
          break;
 800afd0:	e107      	b.n	800b1e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d002      	beq.n	800afe4 <USBD_StdEPReq+0x124>
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d016      	beq.n	800b010 <USBD_StdEPReq+0x150>
 800afe2:	e04b      	b.n	800b07c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <USBD_StdEPReq+0x146>
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b80      	cmp	r3, #128	; 0x80
 800afee:	d00a      	beq.n	800b006 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f853 	bl	800c0a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800affa:	2180      	movs	r1, #128	; 0x80
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f84f 	bl	800c0a0 <USBD_LL_StallEP>
 800b002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b004:	e040      	b.n	800b088 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc3e 	bl	800b88a <USBD_CtlError>
              break;
 800b00e:	e03b      	b.n	800b088 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d136      	bne.n	800b086 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 f859 	bl	800c0de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fcda 	bl	800b9e6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7ff fde2 	bl	800ac00 <USBD_CoreFindEP>
 800b03c:	4603      	mov	r3, r0
 800b03e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b040:	7b7b      	ldrb	r3, [r7, #13]
 800b042:	2bff      	cmp	r3, #255	; 0xff
 800b044:	d01f      	beq.n	800b086 <USBD_StdEPReq+0x1c6>
 800b046:	7b7b      	ldrb	r3, [r7, #13]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11c      	bne.n	800b086 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b04c:	7b7a      	ldrb	r2, [r7, #13]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b054:	7b7a      	ldrb	r2, [r7, #13]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	32ae      	adds	r2, #174	; 0xae
 800b05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d010      	beq.n	800b086 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b064:	7b7a      	ldrb	r2, [r7, #13]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	32ae      	adds	r2, #174	; 0xae
 800b06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b07a:	e004      	b.n	800b086 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fc03 	bl	800b88a <USBD_CtlError>
              break;
 800b084:	e000      	b.n	800b088 <USBD_StdEPReq+0x1c8>
              break;
 800b086:	bf00      	nop
          }
          break;
 800b088:	e0ab      	b.n	800b1e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d002      	beq.n	800b09c <USBD_StdEPReq+0x1dc>
 800b096:	2b03      	cmp	r3, #3
 800b098:	d032      	beq.n	800b100 <USBD_StdEPReq+0x240>
 800b09a:	e097      	b.n	800b1cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <USBD_StdEPReq+0x1f2>
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	2b80      	cmp	r3, #128	; 0x80
 800b0a6:	d004      	beq.n	800b0b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fbed 	bl	800b88a <USBD_CtlError>
                break;
 800b0b0:	e091      	b.n	800b1d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	da0b      	bge.n	800b0d2 <USBD_StdEPReq+0x212>
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	3310      	adds	r3, #16
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	e00b      	b.n	800b0ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fc37 	bl	800b96c <USBD_CtlSendData>
              break;
 800b0fe:	e06a      	b.n	800b1d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b104:	2b00      	cmp	r3, #0
 800b106:	da11      	bge.n	800b12c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	f003 020f 	and.w	r2, r3, #15
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	4613      	mov	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	440b      	add	r3, r1
 800b11a:	3324      	adds	r3, #36	; 0x24
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d117      	bne.n	800b152 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fbb0 	bl	800b88a <USBD_CtlError>
                  break;
 800b12a:	e054      	b.n	800b1d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	f003 020f 	and.w	r2, r3, #15
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d104      	bne.n	800b152 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fb9d 	bl	800b88a <USBD_CtlError>
                  break;
 800b150:	e041      	b.n	800b1d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b156:	2b00      	cmp	r3, #0
 800b158:	da0b      	bge.n	800b172 <USBD_StdEPReq+0x2b2>
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	3310      	adds	r3, #16
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	3304      	adds	r3, #4
 800b170:	e00b      	b.n	800b18a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	4413      	add	r3, r2
 800b188:	3304      	adds	r3, #4
 800b18a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <USBD_StdEPReq+0x2d8>
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b80      	cmp	r3, #128	; 0x80
 800b196:	d103      	bne.n	800b1a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e00e      	b.n	800b1be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 ffb9 	bl	800c11c <USBD_LL_IsStallEP>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	e002      	b.n	800b1be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fbd1 	bl	800b96c <USBD_CtlSendData>
              break;
 800b1ca:	e004      	b.n	800b1d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fb5b 	bl	800b88a <USBD_CtlError>
              break;
 800b1d4:	bf00      	nop
          }
          break;
 800b1d6:	e004      	b.n	800b1e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fb55 	bl	800b88a <USBD_CtlError>
          break;
 800b1e0:	bf00      	nop
      }
      break;
 800b1e2:	e005      	b.n	800b1f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb4f 	bl	800b88a <USBD_CtlError>
      break;
 800b1ec:	e000      	b.n	800b1f0 <USBD_StdEPReq+0x330>
      break;
 800b1ee:	bf00      	nop
  }

  return ret;
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	b29b      	uxth	r3, r3
 800b21a:	3b01      	subs	r3, #1
 800b21c:	2b06      	cmp	r3, #6
 800b21e:	f200 8128 	bhi.w	800b472 <USBD_GetDescriptor+0x276>
 800b222:	a201      	add	r2, pc, #4	; (adr r2, 800b228 <USBD_GetDescriptor+0x2c>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b245 	.word	0x0800b245
 800b22c:	0800b25d 	.word	0x0800b25d
 800b230:	0800b29d 	.word	0x0800b29d
 800b234:	0800b473 	.word	0x0800b473
 800b238:	0800b473 	.word	0x0800b473
 800b23c:	0800b413 	.word	0x0800b413
 800b240:	0800b43f 	.word	0x0800b43f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	7c12      	ldrb	r2, [r2, #16]
 800b250:	f107 0108 	add.w	r1, r7, #8
 800b254:	4610      	mov	r0, r2
 800b256:	4798      	blx	r3
 800b258:	60f8      	str	r0, [r7, #12]
      break;
 800b25a:	e112      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	7c1b      	ldrb	r3, [r3, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10d      	bne.n	800b280 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26c:	f107 0208 	add.w	r2, r7, #8
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	2202      	movs	r2, #2
 800b27c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b27e:	e100      	b.n	800b482 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	f107 0208 	add.w	r2, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	2202      	movs	r2, #2
 800b298:	701a      	strb	r2, [r3, #0]
      break;
 800b29a:	e0f2      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	885b      	ldrh	r3, [r3, #2]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	f200 80ac 	bhi.w	800b400 <USBD_GetDescriptor+0x204>
 800b2a8:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <USBD_GetDescriptor+0xb4>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b2c9 	.word	0x0800b2c9
 800b2b4:	0800b2fd 	.word	0x0800b2fd
 800b2b8:	0800b331 	.word	0x0800b331
 800b2bc:	0800b365 	.word	0x0800b365
 800b2c0:	0800b399 	.word	0x0800b399
 800b2c4:	0800b3cd 	.word	0x0800b3cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	7c12      	ldrb	r2, [r2, #16]
 800b2e0:	f107 0108 	add.w	r1, r7, #8
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
 800b2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ea:	e091      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 facb 	bl	800b88a <USBD_CtlError>
            err++;
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fa:	e089      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	7c12      	ldrb	r2, [r2, #16]
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31e:	e077      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fab1 	bl	800b88a <USBD_CtlError>
            err++;
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	3301      	adds	r3, #1
 800b32c:	72fb      	strb	r3, [r7, #11]
          break;
 800b32e:	e06f      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00b      	beq.n	800b354 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	7c12      	ldrb	r2, [r2, #16]
 800b348:	f107 0108 	add.w	r1, r7, #8
 800b34c:	4610      	mov	r0, r2
 800b34e:	4798      	blx	r3
 800b350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b352:	e05d      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fa97 	bl	800b88a <USBD_CtlError>
            err++;
 800b35c:	7afb      	ldrb	r3, [r7, #11]
 800b35e:	3301      	adds	r3, #1
 800b360:	72fb      	strb	r3, [r7, #11]
          break;
 800b362:	e055      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00b      	beq.n	800b388 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	7c12      	ldrb	r2, [r2, #16]
 800b37c:	f107 0108 	add.w	r1, r7, #8
 800b380:	4610      	mov	r0, r2
 800b382:	4798      	blx	r3
 800b384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b386:	e043      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa7d 	bl	800b88a <USBD_CtlError>
            err++;
 800b390:	7afb      	ldrb	r3, [r7, #11]
 800b392:	3301      	adds	r3, #1
 800b394:	72fb      	strb	r3, [r7, #11]
          break;
 800b396:	e03b      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3aa:	695b      	ldr	r3, [r3, #20]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	7c12      	ldrb	r2, [r2, #16]
 800b3b0:	f107 0108 	add.w	r1, r7, #8
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4798      	blx	r3
 800b3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ba:	e029      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa63 	bl	800b88a <USBD_CtlError>
            err++;
 800b3c4:	7afb      	ldrb	r3, [r7, #11]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ca:	e021      	b.n	800b410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	7c12      	ldrb	r2, [r2, #16]
 800b3e4:	f107 0108 	add.w	r1, r7, #8
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ee:	e00f      	b.n	800b410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fa49 	bl	800b88a <USBD_CtlError>
            err++;
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fe:	e007      	b.n	800b410 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa41 	bl	800b88a <USBD_CtlError>
          err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b40e:	bf00      	nop
      }
      break;
 800b410:	e037      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b422:	f107 0208 	add.w	r2, r7, #8
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b42c:	e029      	b.n	800b482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa2a 	bl	800b88a <USBD_CtlError>
        err++;
 800b436:	7afb      	ldrb	r3, [r7, #11]
 800b438:	3301      	adds	r3, #1
 800b43a:	72fb      	strb	r3, [r7, #11]
      break;
 800b43c:	e021      	b.n	800b482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	7c1b      	ldrb	r3, [r3, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10d      	bne.n	800b462 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44e:	f107 0208 	add.w	r2, r7, #8
 800b452:	4610      	mov	r0, r2
 800b454:	4798      	blx	r3
 800b456:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	2207      	movs	r2, #7
 800b45e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b460:	e00f      	b.n	800b482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fa10 	bl	800b88a <USBD_CtlError>
        err++;
 800b46a:	7afb      	ldrb	r3, [r7, #11]
 800b46c:	3301      	adds	r3, #1
 800b46e:	72fb      	strb	r3, [r7, #11]
      break;
 800b470:	e007      	b.n	800b482 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa08 	bl	800b88a <USBD_CtlError>
      err++;
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	3301      	adds	r3, #1
 800b47e:	72fb      	strb	r3, [r7, #11]
      break;
 800b480:	bf00      	nop
  }

  if (err != 0U)
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11e      	bne.n	800b4c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	88db      	ldrh	r3, [r3, #6]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d016      	beq.n	800b4be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b490:	893b      	ldrh	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00e      	beq.n	800b4b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	88da      	ldrh	r2, [r3, #6]
 800b49a:	893b      	ldrh	r3, [r7, #8]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bf28      	it	cs
 800b4a0:	4613      	movcs	r3, r2
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4a6:	893b      	ldrh	r3, [r7, #8]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fa5d 	bl	800b96c <USBD_CtlSendData>
 800b4b2:	e009      	b.n	800b4c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9e7 	bl	800b88a <USBD_CtlError>
 800b4bc:	e004      	b.n	800b4c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa91 	bl	800b9e6 <USBD_CtlSendStatus>
 800b4c4:	e000      	b.n	800b4c8 <USBD_GetDescriptor+0x2cc>
    return;
 800b4c6:	bf00      	nop
  }
}
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop

0800b4d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	889b      	ldrh	r3, [r3, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d131      	bne.n	800b546 <USBD_SetAddress+0x76>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	88db      	ldrh	r3, [r3, #6]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d12d      	bne.n	800b546 <USBD_SetAddress+0x76>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	2b7f      	cmp	r3, #127	; 0x7f
 800b4f0:	d829      	bhi.n	800b546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	885b      	ldrh	r3, [r3, #2]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d104      	bne.n	800b514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f9bc 	bl	800b88a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b512:	e01d      	b.n	800b550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	7bfa      	ldrb	r2, [r7, #15]
 800b518:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fe27 	bl	800c174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fa5d 	bl	800b9e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d004      	beq.n	800b53c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2202      	movs	r2, #2
 800b536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53a:	e009      	b.n	800b550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b544:	e004      	b.n	800b550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f99e 	bl	800b88a <USBD_CtlError>
  }
}
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	4b4e      	ldr	r3, [pc, #312]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b56e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b570:	4b4d      	ldr	r3, [pc, #308]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d905      	bls.n	800b584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f985 	bl	800b88a <USBD_CtlError>
    return USBD_FAIL;
 800b580:	2303      	movs	r3, #3
 800b582:	e08c      	b.n	800b69e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d002      	beq.n	800b596 <USBD_SetConfig+0x3e>
 800b590:	2b03      	cmp	r3, #3
 800b592:	d029      	beq.n	800b5e8 <USBD_SetConfig+0x90>
 800b594:	e075      	b.n	800b682 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b596:	4b44      	ldr	r3, [pc, #272]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d020      	beq.n	800b5e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b59e:	4b42      	ldr	r3, [pc, #264]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5a8:	4b3f      	ldr	r3, [pc, #252]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7fe ffe7 	bl	800a582 <USBD_SetClassConfig>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d008      	beq.n	800b5d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f962 	bl	800b88a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5ce:	e065      	b.n	800b69c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fa08 	bl	800b9e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2203      	movs	r2, #3
 800b5da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5de:	e05d      	b.n	800b69c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fa00 	bl	800b9e6 <USBD_CtlSendStatus>
      break;
 800b5e6:	e059      	b.n	800b69c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5e8:	4b2f      	ldr	r3, [pc, #188]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d112      	bne.n	800b616 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b5f8:	4b2b      	ldr	r3, [pc, #172]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b602:	4b29      	ldr	r3, [pc, #164]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7fe ffd6 	bl	800a5ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9e9 	bl	800b9e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b614:	e042      	b.n	800b69c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b616:	4b24      	ldr	r3, [pc, #144]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d02a      	beq.n	800b67a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7fe ffc4 	bl	800a5ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b632:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b63c:	4b1a      	ldr	r3, [pc, #104]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7fe ff9d 	bl	800a582 <USBD_SetClassConfig>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00f      	beq.n	800b672 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f918 	bl	800b88a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7fe ffa9 	bl	800a5ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2202      	movs	r2, #2
 800b66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b670:	e014      	b.n	800b69c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9b7 	bl	800b9e6 <USBD_CtlSendStatus>
      break;
 800b678:	e010      	b.n	800b69c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9b3 	bl	800b9e6 <USBD_CtlSendStatus>
      break;
 800b680:	e00c      	b.n	800b69c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f900 	bl	800b88a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b68a:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <USBD_SetConfig+0x150>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fe ff92 	bl	800a5ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b696:	2303      	movs	r3, #3
 800b698:	73fb      	strb	r3, [r7, #15]
      break;
 800b69a:	bf00      	nop
  }

  return ret;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	2000040c 	.word	0x2000040c

0800b6ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	88db      	ldrh	r3, [r3, #6]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d004      	beq.n	800b6c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f8e2 	bl	800b88a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6c6:	e023      	b.n	800b710 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	dc02      	bgt.n	800b6da <USBD_GetConfig+0x2e>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc03      	bgt.n	800b6e0 <USBD_GetConfig+0x34>
 800b6d8:	e015      	b.n	800b706 <USBD_GetConfig+0x5a>
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d00b      	beq.n	800b6f6 <USBD_GetConfig+0x4a>
 800b6de:	e012      	b.n	800b706 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f93c 	bl	800b96c <USBD_CtlSendData>
        break;
 800b6f4:	e00c      	b.n	800b710 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f934 	bl	800b96c <USBD_CtlSendData>
        break;
 800b704:	e004      	b.n	800b710 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f8be 	bl	800b88a <USBD_CtlError>
        break;
 800b70e:	bf00      	nop
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	3b01      	subs	r3, #1
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d81e      	bhi.n	800b76e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	88db      	ldrh	r3, [r3, #6]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d004      	beq.n	800b742 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f8a5 	bl	800b88a <USBD_CtlError>
        break;
 800b740:	e01a      	b.n	800b778 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d005      	beq.n	800b75e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f043 0202 	orr.w	r2, r3, #2
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	330c      	adds	r3, #12
 800b762:	2202      	movs	r2, #2
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f900 	bl	800b96c <USBD_CtlSendData>
      break;
 800b76c:	e004      	b.n	800b778 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f88a 	bl	800b88a <USBD_CtlError>
      break;
 800b776:	bf00      	nop
  }
}
 800b778:	bf00      	nop
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d107      	bne.n	800b7a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f923 	bl	800b9e6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7a0:	e013      	b.n	800b7ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	885b      	ldrh	r3, [r3, #2]
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d10b      	bne.n	800b7c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	889b      	ldrh	r3, [r3, #4]
 800b7ae:	0a1b      	lsrs	r3, r3, #8
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f913 	bl	800b9e6 <USBD_CtlSendStatus>
}
 800b7c0:	e003      	b.n	800b7ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f860 	bl	800b88a <USBD_CtlError>
}
 800b7ca:	bf00      	nop
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b082      	sub	sp, #8
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d80b      	bhi.n	800b802 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	885b      	ldrh	r3, [r3, #2]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10c      	bne.n	800b80c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f8f3 	bl	800b9e6 <USBD_CtlSendStatus>
      }
      break;
 800b800:	e004      	b.n	800b80c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f840 	bl	800b88a <USBD_CtlError>
      break;
 800b80a:	e000      	b.n	800b80e <USBD_ClrFeature+0x3c>
      break;
 800b80c:	bf00      	nop
  }
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3301      	adds	r3, #1
 800b83e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7ff fa41 	bl	800acc8 <SWAPBYTE>
 800b846:	4603      	mov	r3, r0
 800b848:	461a      	mov	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3301      	adds	r3, #1
 800b852:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3301      	adds	r3, #1
 800b858:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f7ff fa34 	bl	800acc8 <SWAPBYTE>
 800b860:	4603      	mov	r3, r0
 800b862:	461a      	mov	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff fa27 	bl	800acc8 <SWAPBYTE>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	80da      	strh	r2, [r3, #6]
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b894:	2180      	movs	r1, #128	; 0x80
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fc02 	bl	800c0a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b89c:	2100      	movs	r1, #0
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fbfe 	bl	800c0a0 <USBD_LL_StallEP>
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d036      	beq.n	800b930 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8c6:	6938      	ldr	r0, [r7, #16]
 800b8c8:	f000 f836 	bl	800b938 <USBD_GetLen>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	4413      	add	r3, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8fc:	e013      	b.n	800b926 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	4413      	add	r3, r2
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	7812      	ldrb	r2, [r2, #0]
 800b908:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	3301      	adds	r3, #1
 800b90e:	613b      	str	r3, [r7, #16]
    idx++;
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	3301      	adds	r3, #1
 800b914:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4413      	add	r3, r2
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	3301      	adds	r3, #1
 800b924:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e7      	bne.n	800b8fe <USBD_GetString+0x52>
 800b92e:	e000      	b.n	800b932 <USBD_GetString+0x86>
    return;
 800b930:	bf00      	nop
  }
}
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b948:	e005      	b.n	800b956 <USBD_GetLen+0x1e>
  {
    len++;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	3301      	adds	r3, #1
 800b94e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	3301      	adds	r3, #1
 800b954:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1f5      	bne.n	800b94a <USBD_GetLen+0x12>
  }

  return len;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	2100      	movs	r1, #0
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f000 fc0d 	bl	800c1b2 <USBD_LL_Transmit>

  return USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	60b9      	str	r1, [r7, #8]
 800b9ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 fbfc 	bl	800c1b2 <USBD_LL_Transmit>

  return USBD_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f000 fc0c 	bl	800c1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2204      	movs	r2, #4
 800b9f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fbd8 	bl	800c1b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2205      	movs	r2, #5
 800ba18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2100      	movs	r1, #0
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fbe6 	bl	800c1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	490e      	ldr	r1, [pc, #56]	; (800ba74 <MX_USB_DEVICE_Init+0x40>)
 800ba3c:	480e      	ldr	r0, [pc, #56]	; (800ba78 <MX_USB_DEVICE_Init+0x44>)
 800ba3e:	f7fe fd23 	bl	800a488 <USBD_Init>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba48:	f7f6 f934 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ba4c:	490b      	ldr	r1, [pc, #44]	; (800ba7c <MX_USB_DEVICE_Init+0x48>)
 800ba4e:	480a      	ldr	r0, [pc, #40]	; (800ba78 <MX_USB_DEVICE_Init+0x44>)
 800ba50:	f7fe fd4a 	bl	800a4e8 <USBD_RegisterClass>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba5a:	f7f6 f92b 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba5e:	4806      	ldr	r0, [pc, #24]	; (800ba78 <MX_USB_DEVICE_Init+0x44>)
 800ba60:	f7fe fd78 	bl	800a554 <USBD_Start>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800ba6a:	f7f6 f923 	bl	8001cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba6e:	bf00      	nop
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	200000ec 	.word	0x200000ec
 800ba78:	20000410 	.word	0x20000410
 800ba7c:	2000002c 	.word	0x2000002c

0800ba80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	6039      	str	r1, [r7, #0]
 800ba8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2212      	movs	r2, #18
 800ba90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba92:	4b03      	ldr	r3, [pc, #12]	; (800baa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	20000108 	.word	0x20000108

0800baa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2204      	movs	r2, #4
 800bab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bab6:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	2000011c 	.word	0x2000011c

0800bac8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	4603      	mov	r3, r0
 800bad0:	6039      	str	r1, [r7, #0]
 800bad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d105      	bne.n	800bae6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	4907      	ldr	r1, [pc, #28]	; (800bafc <USBD_FS_ProductStrDescriptor+0x34>)
 800bade:	4808      	ldr	r0, [pc, #32]	; (800bb00 <USBD_FS_ProductStrDescriptor+0x38>)
 800bae0:	f7ff fee4 	bl	800b8ac <USBD_GetString>
 800bae4:	e004      	b.n	800baf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	4904      	ldr	r1, [pc, #16]	; (800bafc <USBD_FS_ProductStrDescriptor+0x34>)
 800baea:	4805      	ldr	r0, [pc, #20]	; (800bb00 <USBD_FS_ProductStrDescriptor+0x38>)
 800baec:	f7ff fede 	bl	800b8ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800baf0:	4b02      	ldr	r3, [pc, #8]	; (800bafc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	200006ec 	.word	0x200006ec
 800bb00:	0800cc4c 	.word	0x0800cc4c

0800bb04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	4904      	ldr	r1, [pc, #16]	; (800bb24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb14:	4804      	ldr	r0, [pc, #16]	; (800bb28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb16:	f7ff fec9 	bl	800b8ac <USBD_GetString>
  return USBD_StrDesc;
 800bb1a:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	200006ec 	.word	0x200006ec
 800bb28:	0800cc54 	.word	0x0800cc54

0800bb2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	221a      	movs	r2, #26
 800bb3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb3e:	f000 f843 	bl	800bbc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb42:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20000120 	.word	0x20000120

0800bb50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	6039      	str	r1, [r7, #0]
 800bb5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d105      	bne.n	800bb6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	4907      	ldr	r1, [pc, #28]	; (800bb84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb66:	4808      	ldr	r0, [pc, #32]	; (800bb88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb68:	f7ff fea0 	bl	800b8ac <USBD_GetString>
 800bb6c:	e004      	b.n	800bb78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	4904      	ldr	r1, [pc, #16]	; (800bb84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb72:	4805      	ldr	r0, [pc, #20]	; (800bb88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb74:	f7ff fe9a 	bl	800b8ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb78:	4b02      	ldr	r3, [pc, #8]	; (800bb84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	200006ec 	.word	0x200006ec
 800bb88:	0800cc68 	.word	0x0800cc68

0800bb8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	6039      	str	r1, [r7, #0]
 800bb96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d105      	bne.n	800bbaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4907      	ldr	r1, [pc, #28]	; (800bbc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bba2:	4808      	ldr	r0, [pc, #32]	; (800bbc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bba4:	f7ff fe82 	bl	800b8ac <USBD_GetString>
 800bba8:	e004      	b.n	800bbb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	4904      	ldr	r1, [pc, #16]	; (800bbc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbae:	4805      	ldr	r0, [pc, #20]	; (800bbc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbb0:	f7ff fe7c 	bl	800b8ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbb4:	4b02      	ldr	r3, [pc, #8]	; (800bbc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200006ec 	.word	0x200006ec
 800bbc4:	0800cc74 	.word	0x0800cc74

0800bbc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbce:	4b0f      	ldr	r3, [pc, #60]	; (800bc0c <Get_SerialNum+0x44>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <Get_SerialNum+0x48>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bbda:	4b0e      	ldr	r3, [pc, #56]	; (800bc14 <Get_SerialNum+0x4c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d009      	beq.n	800bc02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bbee:	2208      	movs	r2, #8
 800bbf0:	4909      	ldr	r1, [pc, #36]	; (800bc18 <Get_SerialNum+0x50>)
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f000 f814 	bl	800bc20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bbf8:	2204      	movs	r2, #4
 800bbfa:	4908      	ldr	r1, [pc, #32]	; (800bc1c <Get_SerialNum+0x54>)
 800bbfc:	68b8      	ldr	r0, [r7, #8]
 800bbfe:	f000 f80f 	bl	800bc20 <IntToUnicode>
  }
}
 800bc02:	bf00      	nop
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	1fff7a10 	.word	0x1fff7a10
 800bc10:	1fff7a14 	.word	0x1fff7a14
 800bc14:	1fff7a18 	.word	0x1fff7a18
 800bc18:	20000122 	.word	0x20000122
 800bc1c:	20000132 	.word	0x20000132

0800bc20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc32:	2300      	movs	r3, #0
 800bc34:	75fb      	strb	r3, [r7, #23]
 800bc36:	e027      	b.n	800bc88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	0f1b      	lsrs	r3, r3, #28
 800bc3c:	2b09      	cmp	r3, #9
 800bc3e:	d80b      	bhi.n	800bc58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	0f1b      	lsrs	r3, r3, #28
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	440b      	add	r3, r1
 800bc50:	3230      	adds	r2, #48	; 0x30
 800bc52:	b2d2      	uxtb	r2, r2
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	e00a      	b.n	800bc6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	0f1b      	lsrs	r3, r3, #28
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	4619      	mov	r1, r3
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	440b      	add	r3, r1
 800bc68:	3237      	adds	r2, #55	; 0x37
 800bc6a:	b2d2      	uxtb	r2, r2
 800bc6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	011b      	lsls	r3, r3, #4
 800bc72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	3301      	adds	r3, #1
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	2200      	movs	r2, #0
 800bc80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	3301      	adds	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
 800bc88:	7dfa      	ldrb	r2, [r7, #23]
 800bc8a:	79fb      	ldrb	r3, [r7, #7]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d3d3      	bcc.n	800bc38 <IntToUnicode+0x18>
  }
}
 800bc90:	bf00      	nop
 800bc92:	bf00      	nop
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
	...

0800bca0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08a      	sub	sp, #40	; 0x28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bca8:	f107 0314 	add.w	r3, r7, #20
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]
 800bcb0:	605a      	str	r2, [r3, #4]
 800bcb2:	609a      	str	r2, [r3, #8]
 800bcb4:	60da      	str	r2, [r3, #12]
 800bcb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcc0:	d147      	bne.n	800bd52 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	613b      	str	r3, [r7, #16]
 800bcc6:	4b25      	ldr	r3, [pc, #148]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcca:	4a24      	ldr	r2, [pc, #144]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bccc:	f043 0301 	orr.w	r3, r3, #1
 800bcd0:	6313      	str	r3, [r2, #48]	; 0x30
 800bcd2:	4b22      	ldr	r3, [pc, #136]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	613b      	str	r3, [r7, #16]
 800bcdc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bcde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bce4:	2300      	movs	r3, #0
 800bce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcec:	f107 0314 	add.w	r3, r7, #20
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	481b      	ldr	r0, [pc, #108]	; (800bd60 <HAL_PCD_MspInit+0xc0>)
 800bcf4:	f7f6 ff6c 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bcf8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bcfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd06:	2303      	movs	r3, #3
 800bd08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd0a:	230a      	movs	r3, #10
 800bd0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd0e:	f107 0314 	add.w	r3, r7, #20
 800bd12:	4619      	mov	r1, r3
 800bd14:	4812      	ldr	r0, [pc, #72]	; (800bd60 <HAL_PCD_MspInit+0xc0>)
 800bd16:	f7f6 ff5b 	bl	8002bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd1a:	4b10      	ldr	r3, [pc, #64]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1e:	4a0f      	ldr	r2, [pc, #60]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bd20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd24:	6353      	str	r3, [r2, #52]	; 0x34
 800bd26:	2300      	movs	r3, #0
 800bd28:	60fb      	str	r3, [r7, #12]
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2e:	4a0b      	ldr	r2, [pc, #44]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bd30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd34:	6453      	str	r3, [r2, #68]	; 0x44
 800bd36:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <HAL_PCD_MspInit+0xbc>)
 800bd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd42:	2200      	movs	r2, #0
 800bd44:	2100      	movs	r1, #0
 800bd46:	2043      	movs	r0, #67	; 0x43
 800bd48:	f7f6 fb6b 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd4c:	2043      	movs	r0, #67	; 0x43
 800bd4e:	f7f6 fb84 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd52:	bf00      	nop
 800bd54:	3728      	adds	r7, #40	; 0x28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	40023800 	.word	0x40023800
 800bd60:	40020000 	.word	0x40020000

0800bd64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	f7fe fc37 	bl	800a5ee <USBD_LL_SetupStage>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd9a:	78fa      	ldrb	r2, [r7, #3]
 800bd9c:	6879      	ldr	r1, [r7, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	440b      	add	r3, r1
 800bda8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	f7fe fc71 	bl	800a698 <USBD_LL_DataOutStage>
}
 800bdb6:	bf00      	nop
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bdd0:	78fa      	ldrb	r2, [r7, #3]
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	440b      	add	r3, r1
 800bdde:	334c      	adds	r3, #76	; 0x4c
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	78fb      	ldrb	r3, [r7, #3]
 800bde4:	4619      	mov	r1, r3
 800bde6:	f7fe fd0a 	bl	800a7fe <USBD_LL_DataInStage>
}
 800bdea:	bf00      	nop
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b082      	sub	sp, #8
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be00:	4618      	mov	r0, r3
 800be02:	f7fe fe3e 	bl	800aa82 <USBD_LL_SOF>
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be16:	2301      	movs	r3, #1
 800be18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]
 800be26:	e008      	b.n	800be3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d102      	bne.n	800be36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be30:	2301      	movs	r3, #1
 800be32:	73fb      	strb	r3, [r7, #15]
 800be34:	e001      	b.n	800be3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be36:	f7f5 ff3d 	bl	8001cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be40:	7bfa      	ldrb	r2, [r7, #15]
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe fdde 	bl	800aa06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fd86 	bl	800a962 <USBD_LL_Reset>
}
 800be56:	bf00      	nop
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fe fdd9 	bl	800aa26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6812      	ldr	r2, [r2, #0]
 800be82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d005      	beq.n	800bea0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be94:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <HAL_PCD_SuspendCallback+0x48>)
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	4a03      	ldr	r2, [pc, #12]	; (800bea8 <HAL_PCD_SuspendCallback+0x48>)
 800be9a:	f043 0306 	orr.w	r3, r3, #6
 800be9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	e000ed00 	.word	0xe000ed00

0800beac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe fdc9 	bl	800aa52 <USBD_LL_Resume>
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	460b      	mov	r3, r1
 800bed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe fe21 	bl	800ab26 <USBD_LL_IsoOUTIncomplete>
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800befe:	78fa      	ldrb	r2, [r7, #3]
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe fddd 	bl	800aac2 <USBD_LL_IsoINIncomplete>
}
 800bf08:	bf00      	nop
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fe fe33 	bl	800ab8a <USBD_LL_DevConnected>
}
 800bf24:	bf00      	nop
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fe30 	bl	800aba0 <USBD_LL_DevDisconnected>
}
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d13c      	bne.n	800bfd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bf58:	4a20      	ldr	r2, [pc, #128]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a1e      	ldr	r2, [pc, #120]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf68:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bf70:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf72:	2204      	movs	r2, #4
 800bf74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf76:	4b19      	ldr	r3, [pc, #100]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf78:	2202      	movs	r2, #2
 800bf7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf7c:	4b17      	ldr	r3, [pc, #92]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf82:	4b16      	ldr	r3, [pc, #88]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf84:	2202      	movs	r2, #2
 800bf86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bf88:	4b14      	ldr	r3, [pc, #80]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bf8e:	4b13      	ldr	r3, [pc, #76]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 800bf94:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bf9a:	4b10      	ldr	r3, [pc, #64]	; (800bfdc <USBD_LL_Init+0x94>)
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bfa0:	4b0e      	ldr	r3, [pc, #56]	; (800bfdc <USBD_LL_Init+0x94>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bfa6:	480d      	ldr	r0, [pc, #52]	; (800bfdc <USBD_LL_Init+0x94>)
 800bfa8:	f7f9 fc50 	bl	800584c <HAL_PCD_Init>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bfb2:	f7f5 fe7f 	bl	8001cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bfb6:	2180      	movs	r1, #128	; 0x80
 800bfb8:	4808      	ldr	r0, [pc, #32]	; (800bfdc <USBD_LL_Init+0x94>)
 800bfba:	f7fa fe90 	bl	8006cde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bfbe:	2240      	movs	r2, #64	; 0x40
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4806      	ldr	r0, [pc, #24]	; (800bfdc <USBD_LL_Init+0x94>)
 800bfc4:	f7fa fe44 	bl	8006c50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bfc8:	2280      	movs	r2, #128	; 0x80
 800bfca:	2101      	movs	r1, #1
 800bfcc:	4803      	ldr	r0, [pc, #12]	; (800bfdc <USBD_LL_Init+0x94>)
 800bfce:	f7fa fe3f 	bl	8006c50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	20000aec 	.word	0x20000aec

0800bfe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7f9 fd45 	bl	8005a86 <HAL_PCD_Start>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	4618      	mov	r0, r3
 800c004:	f000 f930 	bl	800c268 <USBD_Get_USB_Status>
 800c008:	4603      	mov	r3, r0
 800c00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	4608      	mov	r0, r1
 800c020:	4611      	mov	r1, r2
 800c022:	461a      	mov	r2, r3
 800c024:	4603      	mov	r3, r0
 800c026:	70fb      	strb	r3, [r7, #3]
 800c028:	460b      	mov	r3, r1
 800c02a:	70bb      	strb	r3, [r7, #2]
 800c02c:	4613      	mov	r3, r2
 800c02e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c03e:	78bb      	ldrb	r3, [r7, #2]
 800c040:	883a      	ldrh	r2, [r7, #0]
 800c042:	78f9      	ldrb	r1, [r7, #3]
 800c044:	f7fa fa16 	bl	8006474 <HAL_PCD_EP_Open>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f90a 	bl	800c268 <USBD_Get_USB_Status>
 800c054:	4603      	mov	r3, r0
 800c056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c058:	7bbb      	ldrb	r3, [r7, #14]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	460b      	mov	r3, r1
 800c06c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c07c:	78fa      	ldrb	r2, [r7, #3]
 800c07e:	4611      	mov	r1, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f7fa fa5f 	bl	8006544 <HAL_PCD_EP_Close>
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 f8eb 	bl	800c268 <USBD_Get_USB_Status>
 800c092:	4603      	mov	r3, r0
 800c094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c096:	7bbb      	ldrb	r3, [r7, #14]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0ba:	78fa      	ldrb	r2, [r7, #3]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fa fb1f 	bl	8006702 <HAL_PCD_EP_SetStall>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 f8cc 	bl	800c268 <USBD_Get_USB_Status>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0f8:	78fa      	ldrb	r2, [r7, #3]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fa fb64 	bl	80067ca <HAL_PCD_EP_ClrStall>
 800c102:	4603      	mov	r3, r0
 800c104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 f8ad 	bl	800c268 <USBD_Get_USB_Status>
 800c10e:	4603      	mov	r3, r0
 800c110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c112:	7bbb      	ldrb	r3, [r7, #14]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c12e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c134:	2b00      	cmp	r3, #0
 800c136:	da0b      	bge.n	800c150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c13e:	68f9      	ldr	r1, [r7, #12]
 800c140:	4613      	mov	r3, r2
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	440b      	add	r3, r1
 800c14a:	333e      	adds	r3, #62	; 0x3e
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	e00b      	b.n	800c168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c156:	68f9      	ldr	r1, [r7, #12]
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c166:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	4611      	mov	r1, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f7fa f949 	bl	800642a <HAL_PCD_SetAddress>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 f862 	bl	800c268 <USBD_Get_USB_Status>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b086      	sub	sp, #24
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	60f8      	str	r0, [r7, #12]
 800c1ba:	607a      	str	r2, [r7, #4]
 800c1bc:	603b      	str	r3, [r7, #0]
 800c1be:	460b      	mov	r3, r1
 800c1c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1d0:	7af9      	ldrb	r1, [r7, #11]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	f7fa fa4a 	bl	800666e <HAL_PCD_EP_Transmit>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 f841 	bl	800c268 <USBD_Get_USB_Status>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	607a      	str	r2, [r7, #4]
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	460b      	mov	r3, r1
 800c202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c212:	7af9      	ldrb	r1, [r7, #11]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	f7fa f9de 	bl	80065d8 <HAL_PCD_EP_Receive>
 800c21c:	4603      	mov	r3, r0
 800c21e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c220:	7dfb      	ldrb	r3, [r7, #23]
 800c222:	4618      	mov	r0, r3
 800c224:	f000 f820 	bl	800c268 <USBD_Get_USB_Status>
 800c228:	4603      	mov	r3, r0
 800c22a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c22c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c240:	4b03      	ldr	r3, [pc, #12]	; (800c250 <USBD_static_malloc+0x18>)
}
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	20000ff8 	.word	0x20000ff8

0800c254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]

}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c276:	79fb      	ldrb	r3, [r7, #7]
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d817      	bhi.n	800c2ac <USBD_Get_USB_Status+0x44>
 800c27c:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <USBD_Get_USB_Status+0x1c>)
 800c27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c282:	bf00      	nop
 800c284:	0800c295 	.word	0x0800c295
 800c288:	0800c29b 	.word	0x0800c29b
 800c28c:	0800c2a1 	.word	0x0800c2a1
 800c290:	0800c2a7 	.word	0x0800c2a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]
    break;
 800c298:	e00b      	b.n	800c2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c29a:	2303      	movs	r3, #3
 800c29c:	73fb      	strb	r3, [r7, #15]
    break;
 800c29e:	e008      	b.n	800c2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a4:	e005      	b.n	800c2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2aa:	e002      	b.n	800c2b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b0:	bf00      	nop
  }
  return usb_status;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <__errno>:
 800c2c0:	4b01      	ldr	r3, [pc, #4]	; (800c2c8 <__errno+0x8>)
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	2000013c 	.word	0x2000013c

0800c2cc <__libc_init_array>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	4d0d      	ldr	r5, [pc, #52]	; (800c304 <__libc_init_array+0x38>)
 800c2d0:	4c0d      	ldr	r4, [pc, #52]	; (800c308 <__libc_init_array+0x3c>)
 800c2d2:	1b64      	subs	r4, r4, r5
 800c2d4:	10a4      	asrs	r4, r4, #2
 800c2d6:	2600      	movs	r6, #0
 800c2d8:	42a6      	cmp	r6, r4
 800c2da:	d109      	bne.n	800c2f0 <__libc_init_array+0x24>
 800c2dc:	4d0b      	ldr	r5, [pc, #44]	; (800c30c <__libc_init_array+0x40>)
 800c2de:	4c0c      	ldr	r4, [pc, #48]	; (800c310 <__libc_init_array+0x44>)
 800c2e0:	f000 fc8e 	bl	800cc00 <_init>
 800c2e4:	1b64      	subs	r4, r4, r5
 800c2e6:	10a4      	asrs	r4, r4, #2
 800c2e8:	2600      	movs	r6, #0
 800c2ea:	42a6      	cmp	r6, r4
 800c2ec:	d105      	bne.n	800c2fa <__libc_init_array+0x2e>
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
 800c2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2f4:	4798      	blx	r3
 800c2f6:	3601      	adds	r6, #1
 800c2f8:	e7ee      	b.n	800c2d8 <__libc_init_array+0xc>
 800c2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2fe:	4798      	blx	r3
 800c300:	3601      	adds	r6, #1
 800c302:	e7f2      	b.n	800c2ea <__libc_init_array+0x1e>
 800c304:	08017240 	.word	0x08017240
 800c308:	08017240 	.word	0x08017240
 800c30c:	08017240 	.word	0x08017240
 800c310:	08017244 	.word	0x08017244

0800c314 <memset>:
 800c314:	4402      	add	r2, r0
 800c316:	4603      	mov	r3, r0
 800c318:	4293      	cmp	r3, r2
 800c31a:	d100      	bne.n	800c31e <memset+0xa>
 800c31c:	4770      	bx	lr
 800c31e:	f803 1b01 	strb.w	r1, [r3], #1
 800c322:	e7f9      	b.n	800c318 <memset+0x4>

0800c324 <siprintf>:
 800c324:	b40e      	push	{r1, r2, r3}
 800c326:	b500      	push	{lr}
 800c328:	b09c      	sub	sp, #112	; 0x70
 800c32a:	ab1d      	add	r3, sp, #116	; 0x74
 800c32c:	9002      	str	r0, [sp, #8]
 800c32e:	9006      	str	r0, [sp, #24]
 800c330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c334:	4809      	ldr	r0, [pc, #36]	; (800c35c <siprintf+0x38>)
 800c336:	9107      	str	r1, [sp, #28]
 800c338:	9104      	str	r1, [sp, #16]
 800c33a:	4909      	ldr	r1, [pc, #36]	; (800c360 <siprintf+0x3c>)
 800c33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c340:	9105      	str	r1, [sp, #20]
 800c342:	6800      	ldr	r0, [r0, #0]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	a902      	add	r1, sp, #8
 800c348:	f000 f868 	bl	800c41c <_svfiprintf_r>
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	2200      	movs	r2, #0
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	b01c      	add	sp, #112	; 0x70
 800c354:	f85d eb04 	ldr.w	lr, [sp], #4
 800c358:	b003      	add	sp, #12
 800c35a:	4770      	bx	lr
 800c35c:	2000013c 	.word	0x2000013c
 800c360:	ffff0208 	.word	0xffff0208

0800c364 <__ssputs_r>:
 800c364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	688e      	ldr	r6, [r1, #8]
 800c36a:	429e      	cmp	r6, r3
 800c36c:	4682      	mov	sl, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	4690      	mov	r8, r2
 800c372:	461f      	mov	r7, r3
 800c374:	d838      	bhi.n	800c3e8 <__ssputs_r+0x84>
 800c376:	898a      	ldrh	r2, [r1, #12]
 800c378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c37c:	d032      	beq.n	800c3e4 <__ssputs_r+0x80>
 800c37e:	6825      	ldr	r5, [r4, #0]
 800c380:	6909      	ldr	r1, [r1, #16]
 800c382:	eba5 0901 	sub.w	r9, r5, r1
 800c386:	6965      	ldr	r5, [r4, #20]
 800c388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c390:	3301      	adds	r3, #1
 800c392:	444b      	add	r3, r9
 800c394:	106d      	asrs	r5, r5, #1
 800c396:	429d      	cmp	r5, r3
 800c398:	bf38      	it	cc
 800c39a:	461d      	movcc	r5, r3
 800c39c:	0553      	lsls	r3, r2, #21
 800c39e:	d531      	bpl.n	800c404 <__ssputs_r+0xa0>
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	f000 fb63 	bl	800ca6c <_malloc_r>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	b950      	cbnz	r0, 800c3c0 <__ssputs_r+0x5c>
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	f8ca 3000 	str.w	r3, [sl]
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c0:	6921      	ldr	r1, [r4, #16]
 800c3c2:	464a      	mov	r2, r9
 800c3c4:	f000 fabe 	bl	800c944 <memcpy>
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	6126      	str	r6, [r4, #16]
 800c3d6:	6165      	str	r5, [r4, #20]
 800c3d8:	444e      	add	r6, r9
 800c3da:	eba5 0509 	sub.w	r5, r5, r9
 800c3de:	6026      	str	r6, [r4, #0]
 800c3e0:	60a5      	str	r5, [r4, #8]
 800c3e2:	463e      	mov	r6, r7
 800c3e4:	42be      	cmp	r6, r7
 800c3e6:	d900      	bls.n	800c3ea <__ssputs_r+0x86>
 800c3e8:	463e      	mov	r6, r7
 800c3ea:	6820      	ldr	r0, [r4, #0]
 800c3ec:	4632      	mov	r2, r6
 800c3ee:	4641      	mov	r1, r8
 800c3f0:	f000 fab6 	bl	800c960 <memmove>
 800c3f4:	68a3      	ldr	r3, [r4, #8]
 800c3f6:	1b9b      	subs	r3, r3, r6
 800c3f8:	60a3      	str	r3, [r4, #8]
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	4433      	add	r3, r6
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	2000      	movs	r0, #0
 800c402:	e7db      	b.n	800c3bc <__ssputs_r+0x58>
 800c404:	462a      	mov	r2, r5
 800c406:	f000 fba5 	bl	800cb54 <_realloc_r>
 800c40a:	4606      	mov	r6, r0
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d1e1      	bne.n	800c3d4 <__ssputs_r+0x70>
 800c410:	6921      	ldr	r1, [r4, #16]
 800c412:	4650      	mov	r0, sl
 800c414:	f000 fabe 	bl	800c994 <_free_r>
 800c418:	e7c7      	b.n	800c3aa <__ssputs_r+0x46>
	...

0800c41c <_svfiprintf_r>:
 800c41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	4698      	mov	r8, r3
 800c422:	898b      	ldrh	r3, [r1, #12]
 800c424:	061b      	lsls	r3, r3, #24
 800c426:	b09d      	sub	sp, #116	; 0x74
 800c428:	4607      	mov	r7, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	4614      	mov	r4, r2
 800c42e:	d50e      	bpl.n	800c44e <_svfiprintf_r+0x32>
 800c430:	690b      	ldr	r3, [r1, #16]
 800c432:	b963      	cbnz	r3, 800c44e <_svfiprintf_r+0x32>
 800c434:	2140      	movs	r1, #64	; 0x40
 800c436:	f000 fb19 	bl	800ca6c <_malloc_r>
 800c43a:	6028      	str	r0, [r5, #0]
 800c43c:	6128      	str	r0, [r5, #16]
 800c43e:	b920      	cbnz	r0, 800c44a <_svfiprintf_r+0x2e>
 800c440:	230c      	movs	r3, #12
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	f04f 30ff 	mov.w	r0, #4294967295
 800c448:	e0d1      	b.n	800c5ee <_svfiprintf_r+0x1d2>
 800c44a:	2340      	movs	r3, #64	; 0x40
 800c44c:	616b      	str	r3, [r5, #20]
 800c44e:	2300      	movs	r3, #0
 800c450:	9309      	str	r3, [sp, #36]	; 0x24
 800c452:	2320      	movs	r3, #32
 800c454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c458:	f8cd 800c 	str.w	r8, [sp, #12]
 800c45c:	2330      	movs	r3, #48	; 0x30
 800c45e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c608 <_svfiprintf_r+0x1ec>
 800c462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c466:	f04f 0901 	mov.w	r9, #1
 800c46a:	4623      	mov	r3, r4
 800c46c:	469a      	mov	sl, r3
 800c46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c472:	b10a      	cbz	r2, 800c478 <_svfiprintf_r+0x5c>
 800c474:	2a25      	cmp	r2, #37	; 0x25
 800c476:	d1f9      	bne.n	800c46c <_svfiprintf_r+0x50>
 800c478:	ebba 0b04 	subs.w	fp, sl, r4
 800c47c:	d00b      	beq.n	800c496 <_svfiprintf_r+0x7a>
 800c47e:	465b      	mov	r3, fp
 800c480:	4622      	mov	r2, r4
 800c482:	4629      	mov	r1, r5
 800c484:	4638      	mov	r0, r7
 800c486:	f7ff ff6d 	bl	800c364 <__ssputs_r>
 800c48a:	3001      	adds	r0, #1
 800c48c:	f000 80aa 	beq.w	800c5e4 <_svfiprintf_r+0x1c8>
 800c490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c492:	445a      	add	r2, fp
 800c494:	9209      	str	r2, [sp, #36]	; 0x24
 800c496:	f89a 3000 	ldrb.w	r3, [sl]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 80a2 	beq.w	800c5e4 <_svfiprintf_r+0x1c8>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4aa:	f10a 0a01 	add.w	sl, sl, #1
 800c4ae:	9304      	str	r3, [sp, #16]
 800c4b0:	9307      	str	r3, [sp, #28]
 800c4b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4b6:	931a      	str	r3, [sp, #104]	; 0x68
 800c4b8:	4654      	mov	r4, sl
 800c4ba:	2205      	movs	r2, #5
 800c4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c0:	4851      	ldr	r0, [pc, #324]	; (800c608 <_svfiprintf_r+0x1ec>)
 800c4c2:	f7f3 fe85 	bl	80001d0 <memchr>
 800c4c6:	9a04      	ldr	r2, [sp, #16]
 800c4c8:	b9d8      	cbnz	r0, 800c502 <_svfiprintf_r+0xe6>
 800c4ca:	06d0      	lsls	r0, r2, #27
 800c4cc:	bf44      	itt	mi
 800c4ce:	2320      	movmi	r3, #32
 800c4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d4:	0711      	lsls	r1, r2, #28
 800c4d6:	bf44      	itt	mi
 800c4d8:	232b      	movmi	r3, #43	; 0x2b
 800c4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4de:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e4:	d015      	beq.n	800c512 <_svfiprintf_r+0xf6>
 800c4e6:	9a07      	ldr	r2, [sp, #28]
 800c4e8:	4654      	mov	r4, sl
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	f04f 0c0a 	mov.w	ip, #10
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4f6:	3b30      	subs	r3, #48	; 0x30
 800c4f8:	2b09      	cmp	r3, #9
 800c4fa:	d94e      	bls.n	800c59a <_svfiprintf_r+0x17e>
 800c4fc:	b1b0      	cbz	r0, 800c52c <_svfiprintf_r+0x110>
 800c4fe:	9207      	str	r2, [sp, #28]
 800c500:	e014      	b.n	800c52c <_svfiprintf_r+0x110>
 800c502:	eba0 0308 	sub.w	r3, r0, r8
 800c506:	fa09 f303 	lsl.w	r3, r9, r3
 800c50a:	4313      	orrs	r3, r2
 800c50c:	9304      	str	r3, [sp, #16]
 800c50e:	46a2      	mov	sl, r4
 800c510:	e7d2      	b.n	800c4b8 <_svfiprintf_r+0x9c>
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	1d19      	adds	r1, r3, #4
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	9103      	str	r1, [sp, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	bfbb      	ittet	lt
 800c51e:	425b      	neglt	r3, r3
 800c520:	f042 0202 	orrlt.w	r2, r2, #2
 800c524:	9307      	strge	r3, [sp, #28]
 800c526:	9307      	strlt	r3, [sp, #28]
 800c528:	bfb8      	it	lt
 800c52a:	9204      	strlt	r2, [sp, #16]
 800c52c:	7823      	ldrb	r3, [r4, #0]
 800c52e:	2b2e      	cmp	r3, #46	; 0x2e
 800c530:	d10c      	bne.n	800c54c <_svfiprintf_r+0x130>
 800c532:	7863      	ldrb	r3, [r4, #1]
 800c534:	2b2a      	cmp	r3, #42	; 0x2a
 800c536:	d135      	bne.n	800c5a4 <_svfiprintf_r+0x188>
 800c538:	9b03      	ldr	r3, [sp, #12]
 800c53a:	1d1a      	adds	r2, r3, #4
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	9203      	str	r2, [sp, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	bfb8      	it	lt
 800c544:	f04f 33ff 	movlt.w	r3, #4294967295
 800c548:	3402      	adds	r4, #2
 800c54a:	9305      	str	r3, [sp, #20]
 800c54c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c618 <_svfiprintf_r+0x1fc>
 800c550:	7821      	ldrb	r1, [r4, #0]
 800c552:	2203      	movs	r2, #3
 800c554:	4650      	mov	r0, sl
 800c556:	f7f3 fe3b 	bl	80001d0 <memchr>
 800c55a:	b140      	cbz	r0, 800c56e <_svfiprintf_r+0x152>
 800c55c:	2340      	movs	r3, #64	; 0x40
 800c55e:	eba0 000a 	sub.w	r0, r0, sl
 800c562:	fa03 f000 	lsl.w	r0, r3, r0
 800c566:	9b04      	ldr	r3, [sp, #16]
 800c568:	4303      	orrs	r3, r0
 800c56a:	3401      	adds	r4, #1
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c572:	4826      	ldr	r0, [pc, #152]	; (800c60c <_svfiprintf_r+0x1f0>)
 800c574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c578:	2206      	movs	r2, #6
 800c57a:	f7f3 fe29 	bl	80001d0 <memchr>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d038      	beq.n	800c5f4 <_svfiprintf_r+0x1d8>
 800c582:	4b23      	ldr	r3, [pc, #140]	; (800c610 <_svfiprintf_r+0x1f4>)
 800c584:	bb1b      	cbnz	r3, 800c5ce <_svfiprintf_r+0x1b2>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	3307      	adds	r3, #7
 800c58a:	f023 0307 	bic.w	r3, r3, #7
 800c58e:	3308      	adds	r3, #8
 800c590:	9303      	str	r3, [sp, #12]
 800c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c594:	4433      	add	r3, r6
 800c596:	9309      	str	r3, [sp, #36]	; 0x24
 800c598:	e767      	b.n	800c46a <_svfiprintf_r+0x4e>
 800c59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59e:	460c      	mov	r4, r1
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	e7a5      	b.n	800c4f0 <_svfiprintf_r+0xd4>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	3401      	adds	r4, #1
 800c5a8:	9305      	str	r3, [sp, #20]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	f04f 0c0a 	mov.w	ip, #10
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b6:	3a30      	subs	r2, #48	; 0x30
 800c5b8:	2a09      	cmp	r2, #9
 800c5ba:	d903      	bls.n	800c5c4 <_svfiprintf_r+0x1a8>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d0c5      	beq.n	800c54c <_svfiprintf_r+0x130>
 800c5c0:	9105      	str	r1, [sp, #20]
 800c5c2:	e7c3      	b.n	800c54c <_svfiprintf_r+0x130>
 800c5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e7f0      	b.n	800c5b0 <_svfiprintf_r+0x194>
 800c5ce:	ab03      	add	r3, sp, #12
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <_svfiprintf_r+0x1f8>)
 800c5d6:	a904      	add	r1, sp, #16
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f3af 8000 	nop.w
 800c5de:	1c42      	adds	r2, r0, #1
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	d1d6      	bne.n	800c592 <_svfiprintf_r+0x176>
 800c5e4:	89ab      	ldrh	r3, [r5, #12]
 800c5e6:	065b      	lsls	r3, r3, #25
 800c5e8:	f53f af2c 	bmi.w	800c444 <_svfiprintf_r+0x28>
 800c5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ee:	b01d      	add	sp, #116	; 0x74
 800c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f4:	ab03      	add	r3, sp, #12
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	462a      	mov	r2, r5
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <_svfiprintf_r+0x1f8>)
 800c5fc:	a904      	add	r1, sp, #16
 800c5fe:	4638      	mov	r0, r7
 800c600:	f000 f87a 	bl	800c6f8 <_printf_i>
 800c604:	e7eb      	b.n	800c5de <_svfiprintf_r+0x1c2>
 800c606:	bf00      	nop
 800c608:	08017204 	.word	0x08017204
 800c60c:	0801720e 	.word	0x0801720e
 800c610:	00000000 	.word	0x00000000
 800c614:	0800c365 	.word	0x0800c365
 800c618:	0801720a 	.word	0x0801720a

0800c61c <_printf_common>:
 800c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	4616      	mov	r6, r2
 800c622:	4699      	mov	r9, r3
 800c624:	688a      	ldr	r2, [r1, #8]
 800c626:	690b      	ldr	r3, [r1, #16]
 800c628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c62c:	4293      	cmp	r3, r2
 800c62e:	bfb8      	it	lt
 800c630:	4613      	movlt	r3, r2
 800c632:	6033      	str	r3, [r6, #0]
 800c634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c638:	4607      	mov	r7, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	b10a      	cbz	r2, 800c642 <_printf_common+0x26>
 800c63e:	3301      	adds	r3, #1
 800c640:	6033      	str	r3, [r6, #0]
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	0699      	lsls	r1, r3, #26
 800c646:	bf42      	ittt	mi
 800c648:	6833      	ldrmi	r3, [r6, #0]
 800c64a:	3302      	addmi	r3, #2
 800c64c:	6033      	strmi	r3, [r6, #0]
 800c64e:	6825      	ldr	r5, [r4, #0]
 800c650:	f015 0506 	ands.w	r5, r5, #6
 800c654:	d106      	bne.n	800c664 <_printf_common+0x48>
 800c656:	f104 0a19 	add.w	sl, r4, #25
 800c65a:	68e3      	ldr	r3, [r4, #12]
 800c65c:	6832      	ldr	r2, [r6, #0]
 800c65e:	1a9b      	subs	r3, r3, r2
 800c660:	42ab      	cmp	r3, r5
 800c662:	dc26      	bgt.n	800c6b2 <_printf_common+0x96>
 800c664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c668:	1e13      	subs	r3, r2, #0
 800c66a:	6822      	ldr	r2, [r4, #0]
 800c66c:	bf18      	it	ne
 800c66e:	2301      	movne	r3, #1
 800c670:	0692      	lsls	r2, r2, #26
 800c672:	d42b      	bmi.n	800c6cc <_printf_common+0xb0>
 800c674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c678:	4649      	mov	r1, r9
 800c67a:	4638      	mov	r0, r7
 800c67c:	47c0      	blx	r8
 800c67e:	3001      	adds	r0, #1
 800c680:	d01e      	beq.n	800c6c0 <_printf_common+0xa4>
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	68e5      	ldr	r5, [r4, #12]
 800c686:	6832      	ldr	r2, [r6, #0]
 800c688:	f003 0306 	and.w	r3, r3, #6
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	bf08      	it	eq
 800c690:	1aad      	subeq	r5, r5, r2
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	bf0c      	ite	eq
 800c698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c69c:	2500      	movne	r5, #0
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	bfc4      	itt	gt
 800c6a2:	1a9b      	subgt	r3, r3, r2
 800c6a4:	18ed      	addgt	r5, r5, r3
 800c6a6:	2600      	movs	r6, #0
 800c6a8:	341a      	adds	r4, #26
 800c6aa:	42b5      	cmp	r5, r6
 800c6ac:	d11a      	bne.n	800c6e4 <_printf_common+0xc8>
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	e008      	b.n	800c6c4 <_printf_common+0xa8>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4652      	mov	r2, sl
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	47c0      	blx	r8
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d103      	bne.n	800c6c8 <_printf_common+0xac>
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c8:	3501      	adds	r5, #1
 800c6ca:	e7c6      	b.n	800c65a <_printf_common+0x3e>
 800c6cc:	18e1      	adds	r1, r4, r3
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	2030      	movs	r0, #48	; 0x30
 800c6d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6d6:	4422      	add	r2, r4
 800c6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6e0:	3302      	adds	r3, #2
 800c6e2:	e7c7      	b.n	800c674 <_printf_common+0x58>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	47c0      	blx	r8
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d0e6      	beq.n	800c6c0 <_printf_common+0xa4>
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	e7d9      	b.n	800c6aa <_printf_common+0x8e>
	...

0800c6f8 <_printf_i>:
 800c6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fc:	7e0f      	ldrb	r7, [r1, #24]
 800c6fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c700:	2f78      	cmp	r7, #120	; 0x78
 800c702:	4691      	mov	r9, r2
 800c704:	4680      	mov	r8, r0
 800c706:	460c      	mov	r4, r1
 800c708:	469a      	mov	sl, r3
 800c70a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c70e:	d807      	bhi.n	800c720 <_printf_i+0x28>
 800c710:	2f62      	cmp	r7, #98	; 0x62
 800c712:	d80a      	bhi.n	800c72a <_printf_i+0x32>
 800c714:	2f00      	cmp	r7, #0
 800c716:	f000 80d8 	beq.w	800c8ca <_printf_i+0x1d2>
 800c71a:	2f58      	cmp	r7, #88	; 0x58
 800c71c:	f000 80a3 	beq.w	800c866 <_printf_i+0x16e>
 800c720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c728:	e03a      	b.n	800c7a0 <_printf_i+0xa8>
 800c72a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c72e:	2b15      	cmp	r3, #21
 800c730:	d8f6      	bhi.n	800c720 <_printf_i+0x28>
 800c732:	a101      	add	r1, pc, #4	; (adr r1, 800c738 <_printf_i+0x40>)
 800c734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c738:	0800c791 	.word	0x0800c791
 800c73c:	0800c7a5 	.word	0x0800c7a5
 800c740:	0800c721 	.word	0x0800c721
 800c744:	0800c721 	.word	0x0800c721
 800c748:	0800c721 	.word	0x0800c721
 800c74c:	0800c721 	.word	0x0800c721
 800c750:	0800c7a5 	.word	0x0800c7a5
 800c754:	0800c721 	.word	0x0800c721
 800c758:	0800c721 	.word	0x0800c721
 800c75c:	0800c721 	.word	0x0800c721
 800c760:	0800c721 	.word	0x0800c721
 800c764:	0800c8b1 	.word	0x0800c8b1
 800c768:	0800c7d5 	.word	0x0800c7d5
 800c76c:	0800c893 	.word	0x0800c893
 800c770:	0800c721 	.word	0x0800c721
 800c774:	0800c721 	.word	0x0800c721
 800c778:	0800c8d3 	.word	0x0800c8d3
 800c77c:	0800c721 	.word	0x0800c721
 800c780:	0800c7d5 	.word	0x0800c7d5
 800c784:	0800c721 	.word	0x0800c721
 800c788:	0800c721 	.word	0x0800c721
 800c78c:	0800c89b 	.word	0x0800c89b
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	1d1a      	adds	r2, r3, #4
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	602a      	str	r2, [r5, #0]
 800c798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c79c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e0a3      	b.n	800c8ec <_printf_i+0x1f4>
 800c7a4:	6820      	ldr	r0, [r4, #0]
 800c7a6:	6829      	ldr	r1, [r5, #0]
 800c7a8:	0606      	lsls	r6, r0, #24
 800c7aa:	f101 0304 	add.w	r3, r1, #4
 800c7ae:	d50a      	bpl.n	800c7c6 <_printf_i+0xce>
 800c7b0:	680e      	ldr	r6, [r1, #0]
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	2e00      	cmp	r6, #0
 800c7b6:	da03      	bge.n	800c7c0 <_printf_i+0xc8>
 800c7b8:	232d      	movs	r3, #45	; 0x2d
 800c7ba:	4276      	negs	r6, r6
 800c7bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7c0:	485e      	ldr	r0, [pc, #376]	; (800c93c <_printf_i+0x244>)
 800c7c2:	230a      	movs	r3, #10
 800c7c4:	e019      	b.n	800c7fa <_printf_i+0x102>
 800c7c6:	680e      	ldr	r6, [r1, #0]
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7ce:	bf18      	it	ne
 800c7d0:	b236      	sxthne	r6, r6
 800c7d2:	e7ef      	b.n	800c7b4 <_printf_i+0xbc>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	6820      	ldr	r0, [r4, #0]
 800c7d8:	1d19      	adds	r1, r3, #4
 800c7da:	6029      	str	r1, [r5, #0]
 800c7dc:	0601      	lsls	r1, r0, #24
 800c7de:	d501      	bpl.n	800c7e4 <_printf_i+0xec>
 800c7e0:	681e      	ldr	r6, [r3, #0]
 800c7e2:	e002      	b.n	800c7ea <_printf_i+0xf2>
 800c7e4:	0646      	lsls	r6, r0, #25
 800c7e6:	d5fb      	bpl.n	800c7e0 <_printf_i+0xe8>
 800c7e8:	881e      	ldrh	r6, [r3, #0]
 800c7ea:	4854      	ldr	r0, [pc, #336]	; (800c93c <_printf_i+0x244>)
 800c7ec:	2f6f      	cmp	r7, #111	; 0x6f
 800c7ee:	bf0c      	ite	eq
 800c7f0:	2308      	moveq	r3, #8
 800c7f2:	230a      	movne	r3, #10
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7fa:	6865      	ldr	r5, [r4, #4]
 800c7fc:	60a5      	str	r5, [r4, #8]
 800c7fe:	2d00      	cmp	r5, #0
 800c800:	bfa2      	ittt	ge
 800c802:	6821      	ldrge	r1, [r4, #0]
 800c804:	f021 0104 	bicge.w	r1, r1, #4
 800c808:	6021      	strge	r1, [r4, #0]
 800c80a:	b90e      	cbnz	r6, 800c810 <_printf_i+0x118>
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	d04d      	beq.n	800c8ac <_printf_i+0x1b4>
 800c810:	4615      	mov	r5, r2
 800c812:	fbb6 f1f3 	udiv	r1, r6, r3
 800c816:	fb03 6711 	mls	r7, r3, r1, r6
 800c81a:	5dc7      	ldrb	r7, [r0, r7]
 800c81c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c820:	4637      	mov	r7, r6
 800c822:	42bb      	cmp	r3, r7
 800c824:	460e      	mov	r6, r1
 800c826:	d9f4      	bls.n	800c812 <_printf_i+0x11a>
 800c828:	2b08      	cmp	r3, #8
 800c82a:	d10b      	bne.n	800c844 <_printf_i+0x14c>
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	07de      	lsls	r6, r3, #31
 800c830:	d508      	bpl.n	800c844 <_printf_i+0x14c>
 800c832:	6923      	ldr	r3, [r4, #16]
 800c834:	6861      	ldr	r1, [r4, #4]
 800c836:	4299      	cmp	r1, r3
 800c838:	bfde      	ittt	le
 800c83a:	2330      	movle	r3, #48	; 0x30
 800c83c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c840:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c844:	1b52      	subs	r2, r2, r5
 800c846:	6122      	str	r2, [r4, #16]
 800c848:	f8cd a000 	str.w	sl, [sp]
 800c84c:	464b      	mov	r3, r9
 800c84e:	aa03      	add	r2, sp, #12
 800c850:	4621      	mov	r1, r4
 800c852:	4640      	mov	r0, r8
 800c854:	f7ff fee2 	bl	800c61c <_printf_common>
 800c858:	3001      	adds	r0, #1
 800c85a:	d14c      	bne.n	800c8f6 <_printf_i+0x1fe>
 800c85c:	f04f 30ff 	mov.w	r0, #4294967295
 800c860:	b004      	add	sp, #16
 800c862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c866:	4835      	ldr	r0, [pc, #212]	; (800c93c <_printf_i+0x244>)
 800c868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c86c:	6829      	ldr	r1, [r5, #0]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	f851 6b04 	ldr.w	r6, [r1], #4
 800c874:	6029      	str	r1, [r5, #0]
 800c876:	061d      	lsls	r5, r3, #24
 800c878:	d514      	bpl.n	800c8a4 <_printf_i+0x1ac>
 800c87a:	07df      	lsls	r7, r3, #31
 800c87c:	bf44      	itt	mi
 800c87e:	f043 0320 	orrmi.w	r3, r3, #32
 800c882:	6023      	strmi	r3, [r4, #0]
 800c884:	b91e      	cbnz	r6, 800c88e <_printf_i+0x196>
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	f023 0320 	bic.w	r3, r3, #32
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	2310      	movs	r3, #16
 800c890:	e7b0      	b.n	800c7f4 <_printf_i+0xfc>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	f043 0320 	orr.w	r3, r3, #32
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	2378      	movs	r3, #120	; 0x78
 800c89c:	4828      	ldr	r0, [pc, #160]	; (800c940 <_printf_i+0x248>)
 800c89e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8a2:	e7e3      	b.n	800c86c <_printf_i+0x174>
 800c8a4:	0659      	lsls	r1, r3, #25
 800c8a6:	bf48      	it	mi
 800c8a8:	b2b6      	uxthmi	r6, r6
 800c8aa:	e7e6      	b.n	800c87a <_printf_i+0x182>
 800c8ac:	4615      	mov	r5, r2
 800c8ae:	e7bb      	b.n	800c828 <_printf_i+0x130>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	6826      	ldr	r6, [r4, #0]
 800c8b4:	6961      	ldr	r1, [r4, #20]
 800c8b6:	1d18      	adds	r0, r3, #4
 800c8b8:	6028      	str	r0, [r5, #0]
 800c8ba:	0635      	lsls	r5, r6, #24
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	d501      	bpl.n	800c8c4 <_printf_i+0x1cc>
 800c8c0:	6019      	str	r1, [r3, #0]
 800c8c2:	e002      	b.n	800c8ca <_printf_i+0x1d2>
 800c8c4:	0670      	lsls	r0, r6, #25
 800c8c6:	d5fb      	bpl.n	800c8c0 <_printf_i+0x1c8>
 800c8c8:	8019      	strh	r1, [r3, #0]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	4615      	mov	r5, r2
 800c8d0:	e7ba      	b.n	800c848 <_printf_i+0x150>
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	1d1a      	adds	r2, r3, #4
 800c8d6:	602a      	str	r2, [r5, #0]
 800c8d8:	681d      	ldr	r5, [r3, #0]
 800c8da:	6862      	ldr	r2, [r4, #4]
 800c8dc:	2100      	movs	r1, #0
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7f3 fc76 	bl	80001d0 <memchr>
 800c8e4:	b108      	cbz	r0, 800c8ea <_printf_i+0x1f2>
 800c8e6:	1b40      	subs	r0, r0, r5
 800c8e8:	6060      	str	r0, [r4, #4]
 800c8ea:	6863      	ldr	r3, [r4, #4]
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f4:	e7a8      	b.n	800c848 <_printf_i+0x150>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	47d0      	blx	sl
 800c900:	3001      	adds	r0, #1
 800c902:	d0ab      	beq.n	800c85c <_printf_i+0x164>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	079b      	lsls	r3, r3, #30
 800c908:	d413      	bmi.n	800c932 <_printf_i+0x23a>
 800c90a:	68e0      	ldr	r0, [r4, #12]
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	4298      	cmp	r0, r3
 800c910:	bfb8      	it	lt
 800c912:	4618      	movlt	r0, r3
 800c914:	e7a4      	b.n	800c860 <_printf_i+0x168>
 800c916:	2301      	movs	r3, #1
 800c918:	4632      	mov	r2, r6
 800c91a:	4649      	mov	r1, r9
 800c91c:	4640      	mov	r0, r8
 800c91e:	47d0      	blx	sl
 800c920:	3001      	adds	r0, #1
 800c922:	d09b      	beq.n	800c85c <_printf_i+0x164>
 800c924:	3501      	adds	r5, #1
 800c926:	68e3      	ldr	r3, [r4, #12]
 800c928:	9903      	ldr	r1, [sp, #12]
 800c92a:	1a5b      	subs	r3, r3, r1
 800c92c:	42ab      	cmp	r3, r5
 800c92e:	dcf2      	bgt.n	800c916 <_printf_i+0x21e>
 800c930:	e7eb      	b.n	800c90a <_printf_i+0x212>
 800c932:	2500      	movs	r5, #0
 800c934:	f104 0619 	add.w	r6, r4, #25
 800c938:	e7f5      	b.n	800c926 <_printf_i+0x22e>
 800c93a:	bf00      	nop
 800c93c:	08017215 	.word	0x08017215
 800c940:	08017226 	.word	0x08017226

0800c944 <memcpy>:
 800c944:	440a      	add	r2, r1
 800c946:	4291      	cmp	r1, r2
 800c948:	f100 33ff 	add.w	r3, r0, #4294967295
 800c94c:	d100      	bne.n	800c950 <memcpy+0xc>
 800c94e:	4770      	bx	lr
 800c950:	b510      	push	{r4, lr}
 800c952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c95a:	4291      	cmp	r1, r2
 800c95c:	d1f9      	bne.n	800c952 <memcpy+0xe>
 800c95e:	bd10      	pop	{r4, pc}

0800c960 <memmove>:
 800c960:	4288      	cmp	r0, r1
 800c962:	b510      	push	{r4, lr}
 800c964:	eb01 0402 	add.w	r4, r1, r2
 800c968:	d902      	bls.n	800c970 <memmove+0x10>
 800c96a:	4284      	cmp	r4, r0
 800c96c:	4623      	mov	r3, r4
 800c96e:	d807      	bhi.n	800c980 <memmove+0x20>
 800c970:	1e43      	subs	r3, r0, #1
 800c972:	42a1      	cmp	r1, r4
 800c974:	d008      	beq.n	800c988 <memmove+0x28>
 800c976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c97e:	e7f8      	b.n	800c972 <memmove+0x12>
 800c980:	4402      	add	r2, r0
 800c982:	4601      	mov	r1, r0
 800c984:	428a      	cmp	r2, r1
 800c986:	d100      	bne.n	800c98a <memmove+0x2a>
 800c988:	bd10      	pop	{r4, pc}
 800c98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c992:	e7f7      	b.n	800c984 <memmove+0x24>

0800c994 <_free_r>:
 800c994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c996:	2900      	cmp	r1, #0
 800c998:	d044      	beq.n	800ca24 <_free_r+0x90>
 800c99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c99e:	9001      	str	r0, [sp, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c9a6:	bfb8      	it	lt
 800c9a8:	18e4      	addlt	r4, r4, r3
 800c9aa:	f000 f913 	bl	800cbd4 <__malloc_lock>
 800c9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ca28 <_free_r+0x94>)
 800c9b0:	9801      	ldr	r0, [sp, #4]
 800c9b2:	6813      	ldr	r3, [r2, #0]
 800c9b4:	b933      	cbnz	r3, 800c9c4 <_free_r+0x30>
 800c9b6:	6063      	str	r3, [r4, #4]
 800c9b8:	6014      	str	r4, [r2, #0]
 800c9ba:	b003      	add	sp, #12
 800c9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c0:	f000 b90e 	b.w	800cbe0 <__malloc_unlock>
 800c9c4:	42a3      	cmp	r3, r4
 800c9c6:	d908      	bls.n	800c9da <_free_r+0x46>
 800c9c8:	6825      	ldr	r5, [r4, #0]
 800c9ca:	1961      	adds	r1, r4, r5
 800c9cc:	428b      	cmp	r3, r1
 800c9ce:	bf01      	itttt	eq
 800c9d0:	6819      	ldreq	r1, [r3, #0]
 800c9d2:	685b      	ldreq	r3, [r3, #4]
 800c9d4:	1949      	addeq	r1, r1, r5
 800c9d6:	6021      	streq	r1, [r4, #0]
 800c9d8:	e7ed      	b.n	800c9b6 <_free_r+0x22>
 800c9da:	461a      	mov	r2, r3
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	b10b      	cbz	r3, 800c9e4 <_free_r+0x50>
 800c9e0:	42a3      	cmp	r3, r4
 800c9e2:	d9fa      	bls.n	800c9da <_free_r+0x46>
 800c9e4:	6811      	ldr	r1, [r2, #0]
 800c9e6:	1855      	adds	r5, r2, r1
 800c9e8:	42a5      	cmp	r5, r4
 800c9ea:	d10b      	bne.n	800ca04 <_free_r+0x70>
 800c9ec:	6824      	ldr	r4, [r4, #0]
 800c9ee:	4421      	add	r1, r4
 800c9f0:	1854      	adds	r4, r2, r1
 800c9f2:	42a3      	cmp	r3, r4
 800c9f4:	6011      	str	r1, [r2, #0]
 800c9f6:	d1e0      	bne.n	800c9ba <_free_r+0x26>
 800c9f8:	681c      	ldr	r4, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	6053      	str	r3, [r2, #4]
 800c9fe:	4421      	add	r1, r4
 800ca00:	6011      	str	r1, [r2, #0]
 800ca02:	e7da      	b.n	800c9ba <_free_r+0x26>
 800ca04:	d902      	bls.n	800ca0c <_free_r+0x78>
 800ca06:	230c      	movs	r3, #12
 800ca08:	6003      	str	r3, [r0, #0]
 800ca0a:	e7d6      	b.n	800c9ba <_free_r+0x26>
 800ca0c:	6825      	ldr	r5, [r4, #0]
 800ca0e:	1961      	adds	r1, r4, r5
 800ca10:	428b      	cmp	r3, r1
 800ca12:	bf04      	itt	eq
 800ca14:	6819      	ldreq	r1, [r3, #0]
 800ca16:	685b      	ldreq	r3, [r3, #4]
 800ca18:	6063      	str	r3, [r4, #4]
 800ca1a:	bf04      	itt	eq
 800ca1c:	1949      	addeq	r1, r1, r5
 800ca1e:	6021      	streq	r1, [r4, #0]
 800ca20:	6054      	str	r4, [r2, #4]
 800ca22:	e7ca      	b.n	800c9ba <_free_r+0x26>
 800ca24:	b003      	add	sp, #12
 800ca26:	bd30      	pop	{r4, r5, pc}
 800ca28:	2000100c 	.word	0x2000100c

0800ca2c <sbrk_aligned>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	4e0e      	ldr	r6, [pc, #56]	; (800ca68 <sbrk_aligned+0x3c>)
 800ca30:	460c      	mov	r4, r1
 800ca32:	6831      	ldr	r1, [r6, #0]
 800ca34:	4605      	mov	r5, r0
 800ca36:	b911      	cbnz	r1, 800ca3e <sbrk_aligned+0x12>
 800ca38:	f000 f8bc 	bl	800cbb4 <_sbrk_r>
 800ca3c:	6030      	str	r0, [r6, #0]
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4628      	mov	r0, r5
 800ca42:	f000 f8b7 	bl	800cbb4 <_sbrk_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	d00a      	beq.n	800ca60 <sbrk_aligned+0x34>
 800ca4a:	1cc4      	adds	r4, r0, #3
 800ca4c:	f024 0403 	bic.w	r4, r4, #3
 800ca50:	42a0      	cmp	r0, r4
 800ca52:	d007      	beq.n	800ca64 <sbrk_aligned+0x38>
 800ca54:	1a21      	subs	r1, r4, r0
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 f8ac 	bl	800cbb4 <_sbrk_r>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d101      	bne.n	800ca64 <sbrk_aligned+0x38>
 800ca60:	f04f 34ff 	mov.w	r4, #4294967295
 800ca64:	4620      	mov	r0, r4
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	20001010 	.word	0x20001010

0800ca6c <_malloc_r>:
 800ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	1ccd      	adds	r5, r1, #3
 800ca72:	f025 0503 	bic.w	r5, r5, #3
 800ca76:	3508      	adds	r5, #8
 800ca78:	2d0c      	cmp	r5, #12
 800ca7a:	bf38      	it	cc
 800ca7c:	250c      	movcc	r5, #12
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	4607      	mov	r7, r0
 800ca82:	db01      	blt.n	800ca88 <_malloc_r+0x1c>
 800ca84:	42a9      	cmp	r1, r5
 800ca86:	d905      	bls.n	800ca94 <_malloc_r+0x28>
 800ca88:	230c      	movs	r3, #12
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	2600      	movs	r6, #0
 800ca8e:	4630      	mov	r0, r6
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca94:	4e2e      	ldr	r6, [pc, #184]	; (800cb50 <_malloc_r+0xe4>)
 800ca96:	f000 f89d 	bl	800cbd4 <__malloc_lock>
 800ca9a:	6833      	ldr	r3, [r6, #0]
 800ca9c:	461c      	mov	r4, r3
 800ca9e:	bb34      	cbnz	r4, 800caee <_malloc_r+0x82>
 800caa0:	4629      	mov	r1, r5
 800caa2:	4638      	mov	r0, r7
 800caa4:	f7ff ffc2 	bl	800ca2c <sbrk_aligned>
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	4604      	mov	r4, r0
 800caac:	d14d      	bne.n	800cb4a <_malloc_r+0xde>
 800caae:	6834      	ldr	r4, [r6, #0]
 800cab0:	4626      	mov	r6, r4
 800cab2:	2e00      	cmp	r6, #0
 800cab4:	d140      	bne.n	800cb38 <_malloc_r+0xcc>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	4631      	mov	r1, r6
 800caba:	4638      	mov	r0, r7
 800cabc:	eb04 0803 	add.w	r8, r4, r3
 800cac0:	f000 f878 	bl	800cbb4 <_sbrk_r>
 800cac4:	4580      	cmp	r8, r0
 800cac6:	d13a      	bne.n	800cb3e <_malloc_r+0xd2>
 800cac8:	6821      	ldr	r1, [r4, #0]
 800caca:	3503      	adds	r5, #3
 800cacc:	1a6d      	subs	r5, r5, r1
 800cace:	f025 0503 	bic.w	r5, r5, #3
 800cad2:	3508      	adds	r5, #8
 800cad4:	2d0c      	cmp	r5, #12
 800cad6:	bf38      	it	cc
 800cad8:	250c      	movcc	r5, #12
 800cada:	4629      	mov	r1, r5
 800cadc:	4638      	mov	r0, r7
 800cade:	f7ff ffa5 	bl	800ca2c <sbrk_aligned>
 800cae2:	3001      	adds	r0, #1
 800cae4:	d02b      	beq.n	800cb3e <_malloc_r+0xd2>
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	442b      	add	r3, r5
 800caea:	6023      	str	r3, [r4, #0]
 800caec:	e00e      	b.n	800cb0c <_malloc_r+0xa0>
 800caee:	6822      	ldr	r2, [r4, #0]
 800caf0:	1b52      	subs	r2, r2, r5
 800caf2:	d41e      	bmi.n	800cb32 <_malloc_r+0xc6>
 800caf4:	2a0b      	cmp	r2, #11
 800caf6:	d916      	bls.n	800cb26 <_malloc_r+0xba>
 800caf8:	1961      	adds	r1, r4, r5
 800cafa:	42a3      	cmp	r3, r4
 800cafc:	6025      	str	r5, [r4, #0]
 800cafe:	bf18      	it	ne
 800cb00:	6059      	strne	r1, [r3, #4]
 800cb02:	6863      	ldr	r3, [r4, #4]
 800cb04:	bf08      	it	eq
 800cb06:	6031      	streq	r1, [r6, #0]
 800cb08:	5162      	str	r2, [r4, r5]
 800cb0a:	604b      	str	r3, [r1, #4]
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	f104 060b 	add.w	r6, r4, #11
 800cb12:	f000 f865 	bl	800cbe0 <__malloc_unlock>
 800cb16:	f026 0607 	bic.w	r6, r6, #7
 800cb1a:	1d23      	adds	r3, r4, #4
 800cb1c:	1af2      	subs	r2, r6, r3
 800cb1e:	d0b6      	beq.n	800ca8e <_malloc_r+0x22>
 800cb20:	1b9b      	subs	r3, r3, r6
 800cb22:	50a3      	str	r3, [r4, r2]
 800cb24:	e7b3      	b.n	800ca8e <_malloc_r+0x22>
 800cb26:	6862      	ldr	r2, [r4, #4]
 800cb28:	42a3      	cmp	r3, r4
 800cb2a:	bf0c      	ite	eq
 800cb2c:	6032      	streq	r2, [r6, #0]
 800cb2e:	605a      	strne	r2, [r3, #4]
 800cb30:	e7ec      	b.n	800cb0c <_malloc_r+0xa0>
 800cb32:	4623      	mov	r3, r4
 800cb34:	6864      	ldr	r4, [r4, #4]
 800cb36:	e7b2      	b.n	800ca9e <_malloc_r+0x32>
 800cb38:	4634      	mov	r4, r6
 800cb3a:	6876      	ldr	r6, [r6, #4]
 800cb3c:	e7b9      	b.n	800cab2 <_malloc_r+0x46>
 800cb3e:	230c      	movs	r3, #12
 800cb40:	603b      	str	r3, [r7, #0]
 800cb42:	4638      	mov	r0, r7
 800cb44:	f000 f84c 	bl	800cbe0 <__malloc_unlock>
 800cb48:	e7a1      	b.n	800ca8e <_malloc_r+0x22>
 800cb4a:	6025      	str	r5, [r4, #0]
 800cb4c:	e7de      	b.n	800cb0c <_malloc_r+0xa0>
 800cb4e:	bf00      	nop
 800cb50:	2000100c 	.word	0x2000100c

0800cb54 <_realloc_r>:
 800cb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb58:	4680      	mov	r8, r0
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	b921      	cbnz	r1, 800cb6a <_realloc_r+0x16>
 800cb60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb64:	4611      	mov	r1, r2
 800cb66:	f7ff bf81 	b.w	800ca6c <_malloc_r>
 800cb6a:	b92a      	cbnz	r2, 800cb78 <_realloc_r+0x24>
 800cb6c:	f7ff ff12 	bl	800c994 <_free_r>
 800cb70:	4625      	mov	r5, r4
 800cb72:	4628      	mov	r0, r5
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb78:	f000 f838 	bl	800cbec <_malloc_usable_size_r>
 800cb7c:	4284      	cmp	r4, r0
 800cb7e:	4607      	mov	r7, r0
 800cb80:	d802      	bhi.n	800cb88 <_realloc_r+0x34>
 800cb82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb86:	d812      	bhi.n	800cbae <_realloc_r+0x5a>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	f7ff ff6e 	bl	800ca6c <_malloc_r>
 800cb90:	4605      	mov	r5, r0
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d0ed      	beq.n	800cb72 <_realloc_r+0x1e>
 800cb96:	42bc      	cmp	r4, r7
 800cb98:	4622      	mov	r2, r4
 800cb9a:	4631      	mov	r1, r6
 800cb9c:	bf28      	it	cs
 800cb9e:	463a      	movcs	r2, r7
 800cba0:	f7ff fed0 	bl	800c944 <memcpy>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7ff fef4 	bl	800c994 <_free_r>
 800cbac:	e7e1      	b.n	800cb72 <_realloc_r+0x1e>
 800cbae:	4635      	mov	r5, r6
 800cbb0:	e7df      	b.n	800cb72 <_realloc_r+0x1e>
	...

0800cbb4 <_sbrk_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d06      	ldr	r5, [pc, #24]	; (800cbd0 <_sbrk_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	f7f5 fa4c 	bl	800205c <_sbrk>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_sbrk_r+0x1a>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_sbrk_r+0x1a>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	20001014 	.word	0x20001014

0800cbd4 <__malloc_lock>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__malloc_lock+0x8>)
 800cbd6:	f000 b811 	b.w	800cbfc <__retarget_lock_acquire_recursive>
 800cbda:	bf00      	nop
 800cbdc:	20001018 	.word	0x20001018

0800cbe0 <__malloc_unlock>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__malloc_unlock+0x8>)
 800cbe2:	f000 b80c 	b.w	800cbfe <__retarget_lock_release_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	20001018 	.word	0x20001018

0800cbec <_malloc_usable_size_r>:
 800cbec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf0:	1f18      	subs	r0, r3, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bfbc      	itt	lt
 800cbf6:	580b      	ldrlt	r3, [r1, r0]
 800cbf8:	18c0      	addlt	r0, r0, r3
 800cbfa:	4770      	bx	lr

0800cbfc <__retarget_lock_acquire_recursive>:
 800cbfc:	4770      	bx	lr

0800cbfe <__retarget_lock_release_recursive>:
 800cbfe:	4770      	bx	lr

0800cc00 <_init>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	bf00      	nop
 800cc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc06:	bc08      	pop	{r3}
 800cc08:	469e      	mov	lr, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_fini>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr
