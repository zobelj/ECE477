
F407_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800ba88  0800ba88  0001ba88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc00  0800bc00  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc00  0800bc00  0001bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc08  0800bc08  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc08  0800bc08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bc10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00000c50  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20000dd0  20000dd0  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f8b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000378d  00000000  00000000  0003913b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001508  00000000  00000000  0003df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000065a0  00000000  00000000  0003f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5ab  00000000  00000000  000459f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2be8  00000000  00000000  00060fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133b8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006804  00000000  00000000  00133bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba70 	.word	0x0800ba70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000184 	.word	0x20000184
 80001cc:	0800ba70 	.word	0x0800ba70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <scan_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Local Keypad Scanning */
void scan_keypad() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  set_rows();
 800057a:	f000 f847 	bl	800060c <set_rows>

  // read the columns
  int local_cols = get_cols();
 800057e:	f000 f8f1 	bl	8000764 <get_cols>
 8000582:	6038      	str	r0, [r7, #0]
  //int local_cols = all_cols & 0x0F;
  //int expander_cols = (all_cols & 0xF0) >> 4;

  // scan local cols
  for(int i = 0; i < nCols1; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	e030      	b.n	80005ec <scan_keypad+0x78>
    if(local_cols & (1 << i)) {
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	fa42 f303 	asr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d019      	beq.n	80005ce <scan_keypad+0x5a>
    	if (keypresses1[row][i] != 1) {
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <scan_keypad+0x8c>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4919      	ldr	r1, [pc, #100]	; (8000604 <scan_keypad+0x90>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	18ca      	adds	r2, r1, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d018      	beq.n	80005e6 <scan_keypad+0x72>
    		keypresses1[row][i] = 1;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <scan_keypad+0x8c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4912      	ldr	r1, [pc, #72]	; (8000604 <scan_keypad+0x90>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4413      	add	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	18ca      	adds	r2, r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e00b      	b.n	80005e6 <scan_keypad+0x72>
//    	    charCount++;
//    	    charsInCycle++;
    	}
    }
    else {
      keypresses1[row][i] = 0;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <scan_keypad+0x8c>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <scan_keypad+0x90>)
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	18ca      	adds	r2, r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < nCols1; i++) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <scan_keypad+0x94>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbc9      	blt.n	800058a <scan_keypad+0x16>
//      keypresses2[row][i] = 0;
//    }
//
//  }

}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200003ac 	.word	0x200003ac
 8000604:	2000019c 	.word	0x2000019c
 8000608:	20000004 	.word	0x20000004

0800060c <set_rows>:

void set_rows() {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
  // update row value
  row = (row + 1) % nRows1;
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <set_rows+0x144>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a4e      	ldr	r2, [pc, #312]	; (8000754 <set_rows+0x148>)
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000620:	fb01 f202 	mul.w	r2, r1, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	4a4a      	ldr	r2, [pc, #296]	; (8000750 <set_rows+0x144>)
 8000628:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2101      	movs	r1, #1
 800062e:	484a      	ldr	r0, [pc, #296]	; (8000758 <set_rows+0x14c>)
 8000630:	f001 fcc6 	bl	8001fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2102      	movs	r1, #2
 8000638:	4847      	ldr	r0, [pc, #284]	; (8000758 <set_rows+0x14c>)
 800063a:	f001 fcc1 	bl	8001fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2104      	movs	r1, #4
 8000642:	4845      	ldr	r0, [pc, #276]	; (8000758 <set_rows+0x14c>)
 8000644:	f001 fcbc 	bl	8001fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2108      	movs	r1, #8
 800064c:	4842      	ldr	r0, [pc, #264]	; (8000758 <set_rows+0x14c>)
 800064e:	f001 fcb7 	bl	8001fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2110      	movs	r1, #16
 8000656:	4840      	ldr	r0, [pc, #256]	; (8000758 <set_rows+0x14c>)
 8000658:	f001 fcb2 	bl	8001fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2120      	movs	r1, #32
 8000660:	483d      	ldr	r0, [pc, #244]	; (8000758 <set_rows+0x14c>)
 8000662:	f001 fcad 	bl	8001fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	483b      	ldr	r0, [pc, #236]	; (8000758 <set_rows+0x14c>)
 800066c:	f001 fca8 	bl	8001fc0 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low and last row back to high
  switch(row) {
 8000670:	4b37      	ldr	r3, [pc, #220]	; (8000750 <set_rows+0x144>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d83b      	bhi.n	80006f0 <set_rows+0xe4>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <set_rows+0x74>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	0800069d 	.word	0x0800069d
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080006b5 	.word	0x080006b5
 800068c:	080006c1 	.word	0x080006c1
 8000690:	080006cd 	.word	0x080006cd
 8000694:	080006d9 	.word	0x080006d9
 8000698:	080006e5 	.word	0x080006e5
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2101      	movs	r1, #1
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <set_rows+0x14c>)
 80006a2:	f001 fc8d 	bl	8001fc0 <HAL_GPIO_WritePin>
      break;
 80006a6:	e023      	b.n	80006f0 <set_rows+0xe4>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	482a      	ldr	r0, [pc, #168]	; (8000758 <set_rows+0x14c>)
 80006ae:	f001 fc87 	bl	8001fc0 <HAL_GPIO_WritePin>
      break;
 80006b2:	e01d      	b.n	80006f0 <set_rows+0xe4>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	4827      	ldr	r0, [pc, #156]	; (8000758 <set_rows+0x14c>)
 80006ba:	f001 fc81 	bl	8001fc0 <HAL_GPIO_WritePin>
      break;
 80006be:	e017      	b.n	80006f0 <set_rows+0xe4>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2108      	movs	r1, #8
 80006c4:	4824      	ldr	r0, [pc, #144]	; (8000758 <set_rows+0x14c>)
 80006c6:	f001 fc7b 	bl	8001fc0 <HAL_GPIO_WritePin>
      break;
 80006ca:	e011      	b.n	80006f0 <set_rows+0xe4>
    case 4:
      HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2110      	movs	r1, #16
 80006d0:	4821      	ldr	r0, [pc, #132]	; (8000758 <set_rows+0x14c>)
 80006d2:	f001 fc75 	bl	8001fc0 <HAL_GPIO_WritePin>
      break;
 80006d6:	e00b      	b.n	80006f0 <set_rows+0xe4>
    case 5:
	  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2120      	movs	r1, #32
 80006dc:	481e      	ldr	r0, [pc, #120]	; (8000758 <set_rows+0x14c>)
 80006de:	f001 fc6f 	bl	8001fc0 <HAL_GPIO_WritePin>
	  break;
 80006e2:	e005      	b.n	80006f0 <set_rows+0xe4>
    case 6:
	  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <set_rows+0x14c>)
 80006ea:	f001 fc69 	bl	8001fc0 <HAL_GPIO_WritePin>
	  break;
 80006ee:	bf00      	nop
  // set current row to low and others to high on gpio expander keypad



  // ! GPIOB2 - GPIOB7 maps to row0 - row5, GPIOA7 maps to row6
  if (row != 6){
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <set_rows+0x144>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b06      	cmp	r3, #6
 80006f6:	d016      	beq.n	8000726 <set_rows+0x11a>
	  uint8_t data[3] = {0x14, ~( 0x4 << row ), ~0}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
 80006f8:	2314      	movs	r3, #20
 80006fa:	713b      	strb	r3, [r7, #4]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <set_rows+0x144>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2204      	movs	r2, #4
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	717b      	strb	r3, [r7, #5]
 800070e:	23ff      	movs	r3, #255	; 0xff
 8000710:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 8000712:	1d3a      	adds	r2, r7, #4
 8000714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2302      	movs	r3, #2
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <set_rows+0x150>)
 8000720:	f001 fdac 	bl	800227c <HAL_I2C_Master_Transmit>
  } else {
	  uint8_t data[3] = {0x14, ~0, ~(0x0080)}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
  }
}
 8000724:	e010      	b.n	8000748 <set_rows+0x13c>
	  uint8_t data[3] = {0x14, ~0, ~(0x0080)}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <set_rows+0x154>)
 8000728:	463b      	mov	r3, r7
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	8019      	strh	r1, [r3, #0]
 8000730:	3302      	adds	r3, #2
 8000732:	0c12      	lsrs	r2, r2, #16
 8000734:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 8000736:	463a      	mov	r2, r7
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2302      	movs	r3, #2
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <set_rows+0x150>)
 8000744:	f001 fd9a 	bl	800227c <HAL_I2C_Master_Transmit>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200003ac 	.word	0x200003ac
 8000754:	20000000 	.word	0x20000000
 8000758:	40020c00 	.word	0x40020c00
 800075c:	200001c8 	.word	0x200001c8
 8000760:	0800ba88 	.word	0x0800ba88

08000764 <get_cols>:

int get_cols() {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af02      	add	r7, sp, #8
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 7) & 0x3F;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <get_cols+0x48>)
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	09db      	lsrs	r3, r3, #7
 8000770:	43db      	mvns	r3, r3
 8000772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000776:	607b      	str	r3, [r7, #4]

  // read the GPIO expander columns
  // ! GPIOA0 - GPIOA5 maps to col0 - col5
  uint8_t data[2] = {0x12, 0x00}; // addr 0x12 for IOCON.BANK = 0, 0x09 for IOCON.BANK = 1
 8000778:	2312      	movs	r3, #18
 800077a:	803b      	strh	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800077c:	463a      	mov	r2, r7
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <get_cols+0x4c>)
 800078a:	f001 fd77 	bl	800227c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800078e:	463a      	mov	r2, r7
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <get_cols+0x4c>)
 800079c:	f001 fe6c 	bl	8002478 <HAL_I2C_Master_Receive>

  //int expander_cols = data[0] & 0xF0;

  return local_cols;// | expander_cols;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	200001c8 	.word	0x200001c8

080007b4 <record_keys>:

/* USB Functions */
void record_keys() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 80007ba:	2208      	movs	r2, #8
 80007bc:	2100      	movs	r1, #0
 80007be:	481d      	ldr	r0, [pc, #116]	; (8000834 <record_keys+0x80>)
 80007c0:	f00a f962 	bl	800aa88 <memset>
  keycodeNum = 1;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <record_keys+0x84>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < nRows1; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	e027      	b.n	8000820 <record_keys+0x6c>
	  for(int j = 0; j < nCols1; j++) {
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	e01c      	b.n	8000810 <record_keys+0x5c>
		  if(keypresses1[i][j] == 1) {
 80007d6:	4919      	ldr	r1, [pc, #100]	; (800083c <record_keys+0x88>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	18ca      	adds	r2, r1, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10d      	bne.n	800080a <record_keys+0x56>
			  add_keypress(layout1[i][j]);
 80007ee:	4914      	ldr	r1, [pc, #80]	; (8000840 <record_keys+0x8c>)
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f821 	bl	800084c <add_keypress>
	  for(int j = 0; j < nCols1; j++) {
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <record_keys+0x90>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	dbdd      	blt.n	80007d6 <record_keys+0x22>
  for(int i = 0; i < nRows1; i++) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <record_keys+0x94>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbd2      	blt.n	80007d0 <record_keys+0x1c>
//  for(int i = 0; i < 4; i++) {
//	  if(rotary_keypresses[i] == 1)
//		  add_keypress(rotary_keys[i]);
//  }

}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200003b0 	.word	0x200003b0
 8000838:	20000008 	.word	0x20000008
 800083c:	2000019c 	.word	0x2000019c
 8000840:	0800baf4 	.word	0x0800baf4
 8000844:	20000004 	.word	0x20000004
 8000848:	20000000 	.word	0x20000000

0800084c <add_keypress>:

void add_keypress(char key) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
//	if(key == (char)KEY_LSHIFT) {
//		keyboardhid.MODIFIER = 2;
//		return;
//	}

	switch(keycodeNum) {
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <add_keypress+0x7c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3b01      	subs	r3, #1
 800085c:	2b05      	cmp	r3, #5
 800085e:	d827      	bhi.n	80008b0 <add_keypress+0x64>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <add_keypress+0x1c>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	08000881 	.word	0x08000881
 800086c:	08000889 	.word	0x08000889
 8000870:	08000891 	.word	0x08000891
 8000874:	08000899 	.word	0x08000899
 8000878:	080008a1 	.word	0x080008a1
 800087c:	080008a9 	.word	0x080008a9
			case 1:
			  keyboardhid.KEYCODE1 = key;
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <add_keypress+0x80>)
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	7093      	strb	r3, [r2, #2]
			  break;
 8000886:	e014      	b.n	80008b2 <add_keypress+0x66>
			case 2:
			  keyboardhid.KEYCODE2 = key;
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <add_keypress+0x80>)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	70d3      	strb	r3, [r2, #3]
			  break;
 800088e:	e010      	b.n	80008b2 <add_keypress+0x66>
			case 3:
			  keyboardhid.KEYCODE3 = key;
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <add_keypress+0x80>)
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	7113      	strb	r3, [r2, #4]
			  break;
 8000896:	e00c      	b.n	80008b2 <add_keypress+0x66>
			case 4:
			  keyboardhid.KEYCODE4 = key;
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <add_keypress+0x80>)
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	7153      	strb	r3, [r2, #5]
			  break;
 800089e:	e008      	b.n	80008b2 <add_keypress+0x66>
			case 5:
			  keyboardhid.KEYCODE5 = key;
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <add_keypress+0x80>)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	7193      	strb	r3, [r2, #6]
			  break;
 80008a6:	e004      	b.n	80008b2 <add_keypress+0x66>
			case 6:
			  keyboardhid.KEYCODE6 = key;
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <add_keypress+0x80>)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	71d3      	strb	r3, [r2, #7]
			  break;
 80008ae:	e000      	b.n	80008b2 <add_keypress+0x66>
			default:
				break;
 80008b0:	bf00      	nop
		  }
		  keycodeNum++;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <add_keypress+0x7c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <add_keypress+0x7c>)
 80008ba:	6013      	str	r3, [r2, #0]

}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000008 	.word	0x20000008
 80008cc:	200003b0 	.word	0x200003b0

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fd16 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f81c 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f9be 	bl	8000c5c <MX_GPIO_Init>
  MX_DMA_Init();
 80008e0:	f000 f99c 	bl	8000c1c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80008e4:	f009 fc6e 	bl	800a1c4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80008e8:	f000 f8e0 	bl	8000aac <MX_TIM4_Init>
  MX_TIM6_Init();
 80008ec:	f000 f92a 	bl	8000b44 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008f0:	f000 f95e 	bl	8000bb0 <MX_TIM7_Init>
  MX_I2C2_Init();
 80008f4:	f000 f876 	bl	80009e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80008f8:	f000 f8a2 	bl	8000a40 <MX_SPI1_Init>
//  sprintf(writeBuff, "Number of turns: ");
//  ILI9341_DrawText(writeBuff, FONT4, 25, 110, BLACK, WHITE);
//  switch_lcd();

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <main+0x3c>)
 80008fe:	f005 fe95 	bl	800662c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <main+0x40>)
 8000904:	f005 fe92 	bl	800662c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  //char buffer1[10];
  //char buffer2[10];

  while (1)
 8000908:	e7fe      	b.n	8000908 <main+0x38>
 800090a:	bf00      	nop
 800090c:	200002d4 	.word	0x200002d4
 8000910:	2000031c 	.word	0x2000031c

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f00a f8b0 	bl	800aa88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <SystemClock_Config+0xc8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a26      	ldr	r2, [pc, #152]	; (80009dc <SystemClock_Config+0xc8>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <SystemClock_Config+0xc8>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <SystemClock_Config+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <SystemClock_Config+0xcc>)
 800095e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <SystemClock_Config+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000974:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000988:	2348      	movs	r3, #72	; 0x48
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000990:	2303      	movs	r3, #3
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f005 f8eb 	bl	8005b74 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a4:	f000 fa0c 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fb4d 	bl	8006064 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009d0:	f000 f9f6 	bl	8000dc0 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	; 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C2_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_I2C2_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C2_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_I2C2_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C2_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_I2C2_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_I2C2_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_I2C2_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_I2C2_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_I2C2_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_I2C2_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_I2C2_Init+0x50>)
 8000a22:	f001 fae7 	bl	8001ff4 <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 f9c8 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001c8 	.word	0x200001c8
 8000a38:	40005800 	.word	0x40005800
 8000a3c:	00061a80 	.word	0x00061a80

08000a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a92:	f005 fcf3 	bl	800647c <HAL_SPI_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a9c:	f000 f990 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000021c 	.word	0x2000021c
 8000aa8:	40013000 	.word	0x40013000

08000aac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000aca:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <MX_TIM4_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000ad0:	229f      	movs	r2, #159	; 0x9f
 8000ad2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000adc:	2263      	movs	r2, #99	; 0x63
 8000ade:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000aee:	f005 fd4e 	bl	800658e <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000af8:	f000 f962 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000b0a:	f005 ff07 	bl	800691c <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000b14:	f000 f954 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM4_Init+0x90>)
 8000b26:	f006 f923 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000b30:	f000 f946 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200002d4 	.word	0x200002d4
 8000b40:	40000800 	.word	0x40000800

08000b44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <MX_TIM6_Init+0x68>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b5a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000b5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b68:	2213      	movs	r2, #19
 8000b6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b74:	f005 fd0b 	bl	800658e <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b7e:	f000 f91f 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b90:	f006 f8ee 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b9a:	f000 f911 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000031c 	.word	0x2000031c
 8000bac:	40001000 	.word	0x40001000

08000bb0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_TIM7_Init+0x68>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000-1;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000bc6:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000bca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000-1;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000bd4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000bd8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000be2:	f005 fcd4 	bl	800658e <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000bec:	f000 f8e8 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_TIM7_Init+0x64>)
 8000bfe:	f006 f8b7 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f000 f8da 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000364 	.word	0x20000364
 8000c18:	40001400 	.word	0x40001400

08000c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_DMA_Init+0x3c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <MX_DMA_Init+0x3c>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_DMA_Init+0x3c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	203b      	movs	r0, #59	; 0x3b
 8000c44:	f000 fccf 	bl	80015e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c48:	203b      	movs	r0, #59	; 0x3b
 8000c4a:	f000 fce8 	bl	800161e <HAL_NVIC_EnableIRQ>

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b3e      	ldr	r3, [pc, #248]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a3d      	ldr	r2, [pc, #244]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a36      	ldr	r2, [pc, #216]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_GPIO_Init+0x114>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DC_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000d04:	481b      	ldr	r0, [pc, #108]	; (8000d74 <MX_GPIO_Init+0x118>)
 8000d06:	f001 f95b 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	217f      	movs	r1, #127	; 0x7f
 8000d0e:	481a      	ldr	r0, [pc, #104]	; (8000d78 <MX_GPIO_Init+0x11c>)
 8000d10:	f001 f956 	bl	8001fc0 <HAL_GPIO_WritePin>
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin ENC_A_Pin ENC_B_Pin ENC_SW_Pin
                           COL0_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8000d14:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d18:	617b      	str	r3, [r7, #20]
                          |COL5_Pin|ENC_A_Pin|ENC_B_Pin|ENC_SW_Pin
                          |COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_GPIO_Init+0x11c>)
 8000d2a:	f000 ffad 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DC_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin;
 8000d2e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <MX_GPIO_Init+0x118>)
 8000d48:	f000 ff9e 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin ROW5_Pin ROW6_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8000d4c:	237f      	movs	r3, #127	; 0x7f
 8000d4e:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_GPIO_Init+0x11c>)
 8000d64:	f000 ff90 	bl	8001c88 <HAL_GPIO_Init>

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020c00 	.word	0x40020c00

08000d7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d107      	bne.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8000d8c:	f7ff fd12 	bl	80007b4 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8000d90:	2208      	movs	r2, #8
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d96:	f007 fe7f 	bl	8008a98 <USBD_HID_SendReport>
//		numCycles++;
//		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
//		charsInCycle = 0;

	}
}
 8000d9a:	e005      	b.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim == &htim6) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d101      	bne.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		scan_keypad();
 8000da4:	f7ff fbe6 	bl	8000574 <scan_keypad>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200002d4 	.word	0x200002d4
 8000db4:	200003b0 	.word	0x200003b0
 8000db8:	200003c4 	.word	0x200003c4
 8000dbc:	2000031c 	.word	0x2000031c

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_I2C_MspInit+0x94>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d134      	bne.n	8000ea8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <HAL_I2C_MspInit+0x9c>)
 8000e78:	f000 ff06 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_I2C_MspInit+0x98>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2021      	movs	r0, #33	; 0x21
 8000e9e:	f000 fba2 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ea2:	2021      	movs	r0, #33	; 0x21
 8000ea4:	f000 fbbb 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020400 	.word	0x40020400

08000ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d159      	bne.n	8000f92 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a2e      	ldr	r2, [pc, #184]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <HAL_SPI_MspInit+0xe8>)
 8000f32:	f000 fea9 	bl	8001c88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f38:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_SPI_MspInit+0xf0>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f3e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f78:	f000 fb6c 	bl	8001654 <HAL_DMA_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000f82:	f7ff ff1d 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f8a:	649a      	str	r2, [r3, #72]	; 0x48
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_SPI_MspInit+0xec>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40013000 	.word	0x40013000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	20000274 	.word	0x20000274
 8000fac:	40026458 	.word	0x40026458

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a2a      	ldr	r2, [pc, #168]	; (8001068 <HAL_TIM_Base_MspInit+0xb8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d116      	bne.n	8000ff0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	201e      	movs	r0, #30
 8000fe4:	f000 faff 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fe8:	201e      	movs	r0, #30
 8000fea:	f000 fb18 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fee:	e036      	b.n	800105e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d116      	bne.n	8001028 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2036      	movs	r0, #54	; 0x36
 800101c:	f000 fae3 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001020:	2036      	movs	r0, #54	; 0x36
 8001022:	f000 fafc 	bl	800161e <HAL_NVIC_EnableIRQ>
}
 8001026:	e01a      	b.n	800105e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_TIM_Base_MspInit+0xc4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d115      	bne.n	800105e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2037      	movs	r0, #55	; 0x37
 8001054:	f000 fac7 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001058:	2037      	movs	r0, #55	; 0x37
 800105a:	f000 fae0 	bl	800161e <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40000800 	.word	0x40000800
 800106c:	40023800 	.word	0x40023800
 8001070:	40001000 	.word	0x40001000
 8001074:	40001400 	.word	0x40001400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f970 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM4_IRQHandler+0x10>)
 80010d2:	f005 fb1b 	bl	800670c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200002d4 	.word	0x200002d4

080010e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <I2C2_EV_IRQHandler+0x10>)
 80010e6:	f001 fbed 	bl	80028c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001c8 	.word	0x200001c8

080010f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM6_DAC_IRQHandler+0x10>)
 80010fa:	f005 fb07 	bl	800670c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000031c 	.word	0x2000031c

08001108 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <TIM7_IRQHandler+0x10>)
 800110e:	f005 fafd 	bl	800670c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000364 	.word	0x20000364

0800111c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DMA2_Stream3_IRQHandler+0x10>)
 8001122:	f000 fb67 	bl	80017f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000274 	.word	0x20000274

08001130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <OTG_FS_IRQHandler+0x10>)
 8001136:	f003 fc07 	bl	8004948 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200008a0 	.word	0x200008a0

08001144 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
	}

return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e009      	b.n	80011a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <_write+0x12>
	}
	return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_close>:

int _close(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011de:	605a      	str	r2, [r3, #4]
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_isatty>:

int _isatty(int file)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	return 1;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
	return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f009 fbf0 	bl	800aa34 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20020000 	.word	0x20020000
 8001280:	00000400 	.word	0x00000400
 8001284:	200003b8 	.word	0x200003b8
 8001288:	20000dd0 	.word	0x20000dd0

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff ffd7 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f009 fbaf 	bl	800aa40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff faf5 	bl	80008d0 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80012f4:	0800bc10 	.word	0x0800bc10
  ldr r2, =_sbss
 80012f8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80012fc:	20000dd0 	.word	0x20000dd0

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 f94f 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fd48 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f967 	bl	800163a <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001384:	f000 f92f 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	20000014 	.word	0x20000014
 80013a4:	20000010 	.word	0x20000010

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000014 	.word	0x20000014
 80013cc:	200003bc 	.word	0x200003bc

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200003bc 	.word	0x200003bc

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000014 	.word	0x20000014

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff29 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff3e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff8e 	bl	8001524 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff feb6 	bl	80013d0 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e099      	b.n	80017a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001690:	e00f      	b.n	80016b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001692:	f7ff fe9d 	bl	80013d0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b05      	cmp	r3, #5
 800169e:	d908      	bls.n	80016b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2220      	movs	r2, #32
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2203      	movs	r2, #3
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e078      	b.n	80017a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e8      	bne.n	8001692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_DMA_Init+0x158>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4313      	orrs	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2b04      	cmp	r3, #4
 800170a:	d107      	bne.n	800171c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4313      	orrs	r3, r2
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f023 0307 	bic.w	r3, r3, #7
 8001732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	4313      	orrs	r3, r2
 800173c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	2b04      	cmp	r3, #4
 8001744:	d117      	bne.n	8001776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4313      	orrs	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00e      	beq.n	8001776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fa19 	bl	8001b90 <DMA_CheckFifoParam>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001772:	2301      	movs	r3, #1
 8001774:	e016      	b.n	80017a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f9d0 	bl	8001b24 <DMA_CalcBaseAndBitshift>
 8001784:	4603      	mov	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	223f      	movs	r2, #63	; 0x3f
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	f010803f 	.word	0xf010803f

080017b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d004      	beq.n	80017ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00c      	b.n	80017e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2205      	movs	r2, #5
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001800:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <HAL_DMA_IRQHandler+0x248>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a8e      	ldr	r2, [pc, #568]	; (8001a40 <HAL_DMA_IRQHandler+0x24c>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a9b      	lsrs	r3, r3, #10
 800180c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2208      	movs	r2, #8
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2208      	movs	r2, #8
 800184e:	409a      	lsls	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2201      	movs	r2, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2204      	movs	r2, #4
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d012      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2204      	movs	r2, #4
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2210      	movs	r2, #16
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d043      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03c      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2210      	movs	r2, #16
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d018      	beq.n	8001936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
 8001922:	e01f      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01b      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e016      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2220      	movs	r2, #32
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 808f 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8087 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2220      	movs	r2, #32
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b05      	cmp	r3, #5
 800199c:	d136      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0216 	bic.w	r2, r2, #22
 80019ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_DMA_IRQHandler+0x1da>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	223f      	movs	r2, #63	; 0x3f
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d07e      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
        }
        return;
 8001a0a:	e079      	b.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01d      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e02c      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e01e      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0210 	bic.w	r2, r2, #16
 8001a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d032      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2205      	movs	r2, #5
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d307      	bcc.n	8001adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x2cc>
 8001ada:	e000      	b.n	8001ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b00:	bf00      	nop
    }
  }
}
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b16:	b2db      	uxtb	r3, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3b10      	subs	r3, #16
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <DMA_CalcBaseAndBitshift+0x64>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <DMA_CalcBaseAndBitshift+0x68>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d909      	bls.n	8001b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b5a:	f023 0303 	bic.w	r3, r3, #3
 8001b5e:	1d1a      	adds	r2, r3, #4
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	659a      	str	r2, [r3, #88]	; 0x58
 8001b64:	e007      	b.n	8001b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	aaaaaaab 	.word	0xaaaaaaab
 8001b8c:	0800bb60 	.word	0x0800bb60

08001b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d11f      	bne.n	8001bea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d856      	bhi.n	8001c5e <DMA_CheckFifoParam+0xce>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <DMA_CheckFifoParam+0x28>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bdb 	.word	0x08001bdb
 8001bc0:	08001bc9 	.word	0x08001bc9
 8001bc4:	08001c5f 	.word	0x08001c5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d046      	beq.n	8001c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd8:	e043      	b.n	8001c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be2:	d140      	bne.n	8001c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be8:	e03d      	b.n	8001c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf2:	d121      	bne.n	8001c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d837      	bhi.n	8001c6a <DMA_CheckFifoParam+0xda>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <DMA_CheckFifoParam+0x70>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c11 	.word	0x08001c11
 8001c04:	08001c17 	.word	0x08001c17
 8001c08:	08001c11 	.word	0x08001c11
 8001c0c:	08001c29 	.word	0x08001c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
      break;
 8001c14:	e030      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d025      	beq.n	8001c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c26:	e022      	b.n	8001c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c30:	d11f      	bne.n	8001c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c36:	e01c      	b.n	8001c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d903      	bls.n	8001c46 <DMA_CheckFifoParam+0xb6>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d003      	beq.n	8001c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c44:	e018      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      break;
 8001c4a:	e015      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00e      	beq.n	8001c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5c:	e00b      	b.n	8001c76 <DMA_CheckFifoParam+0xe6>
      break;
 8001c5e:	bf00      	nop
 8001c60:	e00a      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      break;
 8001c62:	bf00      	nop
 8001c64:	e008      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      break;
 8001c66:	bf00      	nop
 8001c68:	e006      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      break;
 8001c6a:	bf00      	nop
 8001c6c:	e004      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      break;
 8001c6e:	bf00      	nop
 8001c70:	e002      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c72:	bf00      	nop
 8001c74:	e000      	b.n	8001c78 <DMA_CheckFifoParam+0xe8>
      break;
 8001c76:	bf00      	nop
    }
  } 
  
  return status; 
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e16b      	b.n	8001f7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 815a 	bne.w	8001f76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d005      	beq.n	8001cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d130      	bne.n	8001d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d017      	beq.n	8001d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d123      	bne.n	8001dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80b4 	beq.w	8001f76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <HAL_GPIO_Init+0x30c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <HAL_GPIO_Init+0x30c>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_GPIO_Init+0x30c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <HAL_GPIO_Init+0x310>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_GPIO_Init+0x314>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_GPIO_Init+0x226>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a51      	ldr	r2, [pc, #324]	; (8001fa0 <HAL_GPIO_Init+0x318>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x222>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a50      	ldr	r2, [pc, #320]	; (8001fa4 <HAL_GPIO_Init+0x31c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x21e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4f      	ldr	r2, [pc, #316]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x21a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x216>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <HAL_GPIO_Init+0x328>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x212>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	; (8001fb8 <HAL_GPIO_Init+0x330>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x20a>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00e      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00c      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001e96:	2306      	movs	r3, #6
 8001e98:	e00a      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec0:	4935      	ldr	r1, [pc, #212]	; (8001f98 <HAL_GPIO_Init+0x310>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ece:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef2:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f70:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b0f      	cmp	r3, #15
 8001f80:	f67f ae90 	bls.w	8001ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021c00 	.word	0x40021c00
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e12b      	b.n	800225e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fefe 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002058:	f004 f9fc 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a81      	ldr	r2, [pc, #516]	; (8002268 <HAL_I2C_Init+0x274>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d807      	bhi.n	8002078 <HAL_I2C_Init+0x84>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a80      	ldr	r2, [pc, #512]	; (800226c <HAL_I2C_Init+0x278>)
 800206c:	4293      	cmp	r3, r2
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e006      	b.n	8002086 <HAL_I2C_Init+0x92>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a7d      	ldr	r2, [pc, #500]	; (8002270 <HAL_I2C_Init+0x27c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0e7      	b.n	800225e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a78      	ldr	r2, [pc, #480]	; (8002274 <HAL_I2C_Init+0x280>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a6a      	ldr	r2, [pc, #424]	; (8002268 <HAL_I2C_Init+0x274>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d802      	bhi.n	80020c8 <HAL_I2C_Init+0xd4>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	e009      	b.n	80020dc <HAL_I2C_Init+0xe8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a69      	ldr	r2, [pc, #420]	; (8002278 <HAL_I2C_Init+0x284>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	3301      	adds	r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	495c      	ldr	r1, [pc, #368]	; (8002268 <HAL_I2C_Init+0x274>)
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d819      	bhi.n	8002130 <HAL_I2C_Init+0x13c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e59      	subs	r1, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fbb1 f3f3 	udiv	r3, r1, r3
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002110:	400b      	ands	r3, r1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_I2C_Init+0x138>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e59      	subs	r1, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fbb1 f3f3 	udiv	r3, r1, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212a:	e051      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 800212c:	2304      	movs	r3, #4
 800212e:	e04f      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d111      	bne.n	800215c <HAL_I2C_Init+0x168>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e012      	b.n	8002182 <HAL_I2C_Init+0x18e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	0099      	lsls	r1, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Init+0x196>
 8002186:	2301      	movs	r3, #1
 8002188:	e022      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10e      	bne.n	80021b0 <HAL_I2C_Init+0x1bc>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1e58      	subs	r0, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	440b      	add	r3, r1
 80021a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	6809      	ldr	r1, [r1, #0]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6911      	ldr	r1, [r2, #16]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68d2      	ldr	r2, [r2, #12]
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	430b      	orrs	r3, r1
 8002212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	000186a0 	.word	0x000186a0
 800226c:	001e847f 	.word	0x001e847f
 8002270:	003d08ff 	.word	0x003d08ff
 8002274:	431bde83 	.word	0x431bde83
 8002278:	10624dd3 	.word	0x10624dd3

0800227c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
 800228c:	4613      	mov	r3, r2
 800228e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff f89e 	bl	80013d0 <HAL_GetTick>
 8002294:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	f040 80e0 	bne.w	8002464 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2319      	movs	r3, #25
 80022aa:	2201      	movs	r2, #1
 80022ac:	4970      	ldr	r1, [pc, #448]	; (8002470 <HAL_I2C_Master_Transmit+0x1f4>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f001 ffd0 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0d3      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x50>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0cc      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ea>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d007      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002300:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2221      	movs	r2, #33	; 0x21
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2210      	movs	r2, #16
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	893a      	ldrh	r2, [r7, #8]
 8002322:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a50      	ldr	r2, [pc, #320]	; (8002474 <HAL_I2C_Master_Transmit+0x1f8>)
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 fd92 	bl	8003e64 <I2C_MasterRequestWrite>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e08d      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002360:	e066      	b.n	8002430 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	6a39      	ldr	r1, [r7, #32]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f002 f84a 	bl	8004400 <I2C_WaitOnTXEFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b04      	cmp	r3, #4
 8002378:	d107      	bne.n	800238a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06b      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d11b      	bne.n	8002404 <HAL_I2C_Master_Transmit+0x188>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d017      	beq.n	8002404 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f002 f83a 	bl	8004482 <I2C_WaitOnBTFFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b04      	cmp	r3, #4
 800241a:	d107      	bne.n	800242c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e01a      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d194      	bne.n	8002362 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	00100002 	.word	0x00100002
 8002474:	ffff0000 	.word	0xffff0000

08002478 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	460b      	mov	r3, r1
 8002486:	817b      	strh	r3, [r7, #10]
 8002488:	4613      	mov	r3, r2
 800248a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7fe ffa0 	bl	80013d0 <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b20      	cmp	r3, #32
 800249c:	f040 820b 	bne.w	80028b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2319      	movs	r3, #25
 80024a6:	2201      	movs	r2, #1
 80024a8:	497c      	ldr	r1, [pc, #496]	; (800269c <HAL_I2C_Master_Receive+0x224>)
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f001 fed2 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
 80024b8:	e1fe      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_I2C_Master_Receive+0x50>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e1f7      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d007      	beq.n	80024ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2222      	movs	r2, #34	; 0x22
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2210      	movs	r2, #16
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	893a      	ldrh	r2, [r7, #8]
 800251e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_I2C_Master_Receive+0x228>)
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002530:	8979      	ldrh	r1, [r7, #10]
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f001 fd16 	bl	8003f68 <I2C_MasterRequestRead>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1b8      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	623b      	str	r3, [r7, #32]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e18c      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b01      	cmp	r3, #1
 800257c:	d11b      	bne.n	80025b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e16c      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d11b      	bne.n	80025f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	e14c      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800261c:	e138      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	2b03      	cmp	r3, #3
 8002624:	f200 80f1 	bhi.w	800280a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	2b01      	cmp	r3, #1
 800262e:	d123      	bne.n	8002678 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f001 ff97 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e139      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002676:	e10b      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b02      	cmp	r3, #2
 800267e:	d14e      	bne.n	800271e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	2200      	movs	r2, #0
 8002688:	4906      	ldr	r1, [pc, #24]	; (80026a4 <HAL_I2C_Master_Receive+0x22c>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f001 fde2 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e10e      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
 800269a:	bf00      	nop
 800269c:	00100002 	.word	0x00100002
 80026a0:	ffff0000 	.word	0xffff0000
 80026a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271c:	e0b8      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	2200      	movs	r2, #0
 8002726:	4966      	ldr	r1, [pc, #408]	; (80028c0 <HAL_I2C_Master_Receive+0x448>)
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f001 fd93 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0bf      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2200      	movs	r2, #0
 8002782:	494f      	ldr	r1, [pc, #316]	; (80028c0 <HAL_I2C_Master_Receive+0x448>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f001 fd65 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e091      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002808:	e042      	b.n	8002890 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f001 feaa 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e04c      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d118      	bne.n	8002890 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	f47f aec2 	bne.w	800261e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	00010004 	.word	0x00010004

080028c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d003      	beq.n	80028fc <HAL_I2C_EV_IRQHandler+0x38>
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	f040 80c1 	bne.w	8002a7e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_I2C_EV_IRQHandler+0x6e>
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800291c:	d003      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x62>
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002924:	d101      	bne.n	800292a <HAL_I2C_EV_IRQHandler+0x66>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_I2C_EV_IRQHandler+0x68>
 800292a:	2300      	movs	r3, #0
 800292c:	2b01      	cmp	r3, #1
 800292e:	f000 8132 	beq.w	8002b96 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x92>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f001 fe92 	bl	8004672 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fcdc 	bl	800330c <I2C_Master_SB>
 8002954:	e092      	b.n	8002a7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0xb2>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	0a5b      	lsrs	r3, r3, #9
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fd52 	bl	8003418 <I2C_Master_ADD10>
 8002974:	e082      	b.n	8002a7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_I2C_EV_IRQHandler+0xd2>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fd6c 	bl	800346c <I2C_Master_ADDR>
 8002994:	e072      	b.n	8002a7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d03b      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b0:	f000 80f3 	beq.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	09db      	lsrs	r3, r3, #7
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00f      	beq.n	80029e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	0a9b      	lsrs	r3, r3, #10
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f94c 	bl	8002c76 <I2C_MasterTransmit_TXE>
 80029de:	e04d      	b.n	8002a7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80d6 	beq.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	0a5b      	lsrs	r3, r3, #9
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80cf 	beq.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	2b21      	cmp	r3, #33	; 0x21
 8002a00:	d103      	bne.n	8002a0a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9d3 	bl	8002dae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a08:	e0c7      	b.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	f040 80c4 	bne.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa41 	bl	8002e9a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a18:	e0bf      	b.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a28:	f000 80b7 	beq.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00f      	beq.n	8002a58 <HAL_I2C_EV_IRQHandler+0x194>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_I2C_EV_IRQHandler+0x194>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fab6 	bl	8002fc2 <I2C_MasterReceive_RXNE>
 8002a56:	e011      	b.n	8002a7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 809a 	beq.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	0a5b      	lsrs	r3, r3, #9
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8093 	beq.w	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fb5f 	bl	8003138 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a7a:	e08e      	b.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a7c:	e08d      	b.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e007      	b.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	0a5b      	lsrs	r3, r3, #9
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ac8:	69b9      	ldr	r1, [r7, #24]
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 ff1d 	bl	800390a <I2C_Slave_ADDR>
 8002ad0:	e066      	b.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	0a5b      	lsrs	r3, r3, #9
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 ff58 	bl	80039a0 <I2C_Slave_STOPF>
 8002af0:	e056      	b.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	2b21      	cmp	r3, #33	; 0x21
 8002af6:	d002      	beq.n	8002afe <HAL_I2C_EV_IRQHandler+0x23a>
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	2b29      	cmp	r3, #41	; 0x29
 8002afc:	d125      	bne.n	8002b4a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	09db      	lsrs	r3, r3, #7
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00f      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0x266>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	0a9b      	lsrs	r3, r3, #10
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0x266>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fe33 	bl	800378e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b28:	e039      	b.n	8002b9e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d033      	beq.n	8002b9e <HAL_I2C_EV_IRQHandler+0x2da>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	0a5b      	lsrs	r3, r3, #9
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02d      	beq.n	8002b9e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fe60 	bl	8003808 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b48:	e029      	b.n	8002b9e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	0a9b      	lsrs	r3, r3, #10
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fe6b 	bl	800384a <I2C_SlaveReceive_RXNE>
 8002b74:	e014      	b.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00e      	beq.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	0a5b      	lsrs	r3, r3, #9
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fe99 	bl	80038c6 <I2C_SlaveReceive_BTF>
 8002b94:	e004      	b.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
 8002c02:	4613      	mov	r3, r2
 8002c04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d150      	bne.n	8002d3e <I2C_MasterTransmit_TXE+0xc8>
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b21      	cmp	r3, #33	; 0x21
 8002ca0:	d14d      	bne.n	8002d3e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d01d      	beq.n	8002ce4 <I2C_MasterTransmit_TXE+0x6e>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d01a      	beq.n	8002ce4 <I2C_MasterTransmit_TXE+0x6e>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb4:	d016      	beq.n	8002ce4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2211      	movs	r2, #17
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff62 	bl	8002ba6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ce2:	e060      	b.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d107      	bne.n	8002d2e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ff7d 	bl	8002c26 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d2c:	e03b      	b.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff35 	bl	8002ba6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d3c:	e033      	b.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b21      	cmp	r3, #33	; 0x21
 8002d42:	d005      	beq.n	8002d50 <I2C_MasterTransmit_TXE+0xda>
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d12d      	bne.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b22      	cmp	r3, #34	; 0x22
 8002d4e:	d12a      	bne.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d6a:	e01c      	b.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d103      	bne.n	8002d80 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f88e 	bl	8002e9a <I2C_MemoryTransmit_TXE_BTF>
}
 8002d7e:	e012      	b.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002da4:	e7ff      	b.n	8002da6 <I2C_MasterTransmit_TXE+0x130>
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b21      	cmp	r3, #33	; 0x21
 8002dc6:	d164      	bne.n	8002e92 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002df6:	e04c      	b.n	8002e92 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d01d      	beq.n	8002e3a <I2C_MasterTransmit_BTF+0x8c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d01a      	beq.n	8002e3a <I2C_MasterTransmit_BTF+0x8c>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e0a:	d016      	beq.n	8002e3a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2211      	movs	r2, #17
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff feb7 	bl	8002ba6 <HAL_I2C_MasterTxCpltCallback>
}
 8002e38:	e02b      	b.n	8002e92 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e48:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e58:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d107      	bne.n	8002e84 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fed2 	bl	8002c26 <HAL_I2C_MemTxCpltCallback>
}
 8002e82:	e006      	b.n	8002e92 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fe8a 	bl	8002ba6 <HAL_I2C_MasterTxCpltCallback>
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11d      	bne.n	8002eee <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10b      	bne.n	8002ed2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	1c9a      	adds	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ed0:	e073      	b.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	121b      	asrs	r3, r3, #8
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eec:	e065      	b.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10b      	bne.n	8002f0e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f0c:	e055      	b.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d151      	bne.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b22      	cmp	r3, #34	; 0x22
 8002f1a:	d10d      	bne.n	8002f38 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f36:	e040      	b.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d015      	beq.n	8002f6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b21      	cmp	r3, #33	; 0x21
 8002f46:	d112      	bne.n	8002f6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f6c:	e025      	b.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d120      	bne.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b21      	cmp	r3, #33	; 0x21
 8002f7c:	d11d      	bne.n	8002fba <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f8c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fe36 	bl	8002c26 <HAL_I2C_MemTxCpltCallback>
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b22      	cmp	r3, #34	; 0x22
 8002fd4:	f040 80ac 	bne.w	8003130 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d921      	bls.n	800302a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b03      	cmp	r3, #3
 8003014:	f040 808c 	bne.w	8003130 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003026:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003028:	e082      	b.n	8003130 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	2b02      	cmp	r3, #2
 8003030:	d075      	beq.n	800311e <I2C_MasterReceive_RXNE+0x15c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d002      	beq.n	800303e <I2C_MasterReceive_RXNE+0x7c>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d16f      	bne.n	800311e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fa60 	bl	8004504 <I2C_WaitOnSTOPRequestThroughIT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003058:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003068:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d10a      	bne.n	80030ba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fdc1 	bl	8002c3a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030b8:	e03a      	b.n	8003130 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2212      	movs	r2, #18
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fd76 	bl	8002bba <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030ce:	e02f      	b.n	8003130 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fd99 	bl	8002c4e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800311c:	e008      	b.n	8003130 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	605a      	str	r2, [r3, #4]
}
 800312e:	e7ff      	b.n	8003130 <I2C_MasterReceive_RXNE+0x16e>
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11b      	bne.n	8003188 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003186:	e0bd      	b.n	8003304 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d129      	bne.n	80031e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00a      	beq.n	80031be <I2C_MasterReceive_BTF+0x86>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d007      	beq.n	80031be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031e4:	e08e      	b.n	8003304 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d176      	bne.n	80032de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <I2C_MasterReceive_BTF+0xc4>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d108      	bne.n	800320e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e019      	b.n	8003242 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d002      	beq.n	800321a <I2C_MasterReceive_BTF+0xe2>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d108      	bne.n	800322c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e00a      	b.n	8003242 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d007      	beq.n	8003242 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800329c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d10a      	bne.n	80032c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fcba 	bl	8002c3a <HAL_I2C_MemRxCpltCallback>
}
 80032c6:	e01d      	b.n	8003304 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2212      	movs	r2, #18
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fc6f 	bl	8002bba <HAL_I2C_MasterRxCpltCallback>
}
 80032dc:	e012      	b.n	8003304 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d117      	bne.n	8003350 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003338:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800333a:	e067      	b.n	800340c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]
}
 800334e:	e05d      	b.n	800340c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003358:	d133      	bne.n	80033c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b21      	cmp	r3, #33	; 0x21
 8003364:	d109      	bne.n	800337a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003376:	611a      	str	r2, [r3, #16]
 8003378:	e008      	b.n	800338c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <I2C_Master_SB+0x92>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d032      	beq.n	800340c <I2C_Master_SB+0x100>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02d      	beq.n	800340c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033be:	605a      	str	r2, [r3, #4]
}
 80033c0:	e024      	b.n	800340c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	11db      	asrs	r3, r3, #7
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 0306 	and.w	r3, r3, #6
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f063 030f 	orn	r3, r3, #15
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	611a      	str	r2, [r3, #16]
}
 80033e6:	e011      	b.n	800340c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10d      	bne.n	800340c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	11db      	asrs	r3, r3, #7
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f063 030e 	orn	r3, r3, #14
 8003404:	b2da      	uxtb	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	b2da      	uxtb	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <I2C_Master_ADD10+0x26>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <I2C_Master_ADD10+0x48>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b091      	sub	sp, #68	; 0x44
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b22      	cmp	r3, #34	; 0x22
 8003494:	f040 8169 	bne.w	800376a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <I2C_Master_ADDR+0x54>
 80034a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d10b      	bne.n	80034c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a8:	2300      	movs	r3, #0
 80034aa:	633b      	str	r3, [r7, #48]	; 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	e160      	b.n	8003782 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d11d      	bne.n	8003504 <I2C_Master_ADDR+0x98>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034d0:	d118      	bne.n	8003504 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	651a      	str	r2, [r3, #80]	; 0x50
 8003502:	e13e      	b.n	8003782 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e115      	b.n	8003762 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 808a 	bne.w	8003656 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003548:	d137      	bne.n	80035ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003568:	d113      	bne.n	8003592 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	e0e7      	b.n	8003762 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e0d3      	b.n	8003762 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d02e      	beq.n	800361e <I2C_Master_ADDR+0x1b2>
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d02b      	beq.n	800361e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d102      	bne.n	80035d2 <I2C_Master_ADDR+0x166>
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d125      	bne.n	800361e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d00e      	beq.n	80035f6 <I2C_Master_ADDR+0x18a>
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d00b      	beq.n	80035f6 <I2C_Master_ADDR+0x18a>
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d008      	beq.n	80035f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e007      	b.n	8003606 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003604:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	e0a1      	b.n	8003762 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e085      	b.n	8003762 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d14d      	bne.n	80036fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	2b04      	cmp	r3, #4
 8003664:	d016      	beq.n	8003694 <I2C_Master_ADDR+0x228>
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b02      	cmp	r3, #2
 800366a:	d013      	beq.n	8003694 <I2C_Master_ADDR+0x228>
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b10      	cmp	r3, #16
 8003670:	d010      	beq.n	8003694 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003680:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e007      	b.n	80036a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b2:	d117      	bne.n	80036e4 <I2C_Master_ADDR+0x278>
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ba:	d00b      	beq.n	80036d4 <I2C_Master_ADDR+0x268>
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d008      	beq.n	80036d4 <I2C_Master_ADDR+0x268>
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d005      	beq.n	80036d4 <I2C_Master_ADDR+0x268>
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d002      	beq.n	80036d4 <I2C_Master_ADDR+0x268>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d107      	bne.n	80036e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	e032      	b.n	8003762 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800370a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800371a:	d117      	bne.n	800374c <I2C_Master_ADDR+0x2e0>
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003722:	d00b      	beq.n	800373c <I2C_Master_ADDR+0x2d0>
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	2b01      	cmp	r3, #1
 8003728:	d008      	beq.n	800373c <I2C_Master_ADDR+0x2d0>
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	2b08      	cmp	r3, #8
 800372e:	d005      	beq.n	800373c <I2C_Master_ADDR+0x2d0>
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	2b10      	cmp	r3, #16
 8003734:	d002      	beq.n	800373c <I2C_Master_ADDR+0x2d0>
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	2b20      	cmp	r3, #32
 800373a:	d107      	bne.n	800374c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800374a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003768:	e00b      	b.n	8003782 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	e7ff      	b.n	8003782 <I2C_Master_ADDR+0x316>
 8003782:	bf00      	nop
 8003784:	3744      	adds	r7, #68	; 0x44
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d02b      	beq.n	8003800 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d114      	bne.n	8003800 <I2C_SlaveTransmit_TXE+0x72>
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b29      	cmp	r3, #41	; 0x29
 80037da:	d111      	bne.n	8003800 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2221      	movs	r2, #33	; 0x21
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2228      	movs	r2, #40	; 0x28
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff f9e7 	bl	8002bce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d011      	beq.n	800383e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02c      	beq.n	80038be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d114      	bne.n	80038be <I2C_SlaveReceive_RXNE+0x74>
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b2a      	cmp	r3, #42	; 0x2a
 8003898:	d111      	bne.n	80038be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2222      	movs	r2, #34	; 0x22
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2228      	movs	r2, #40	; 0x28
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff f992 	bl	8002be2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d012      	beq.n	80038fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003924:	2b28      	cmp	r3, #40	; 0x28
 8003926:	d127      	bne.n	8003978 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003936:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	09db      	lsrs	r3, r3, #7
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	81bb      	strh	r3, [r7, #12]
 800395a:	e002      	b.n	8003962 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800396a:	89ba      	ldrh	r2, [r7, #12]
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff f940 	bl	8002bf6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003976:	e00e      	b.n	8003996 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fc:	d172      	bne.n	8003ae4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b22      	cmp	r3, #34	; 0x22
 8003a02:	d002      	beq.n	8003a0a <I2C_Slave_STOPF+0x6a>
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b2a      	cmp	r3, #42	; 0x2a
 8003a08:	d135      	bne.n	8003a76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f860 	bl	8001b08 <HAL_DMA_GetState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d049      	beq.n	8003ae2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	4a69      	ldr	r2, [pc, #420]	; (8003bf8 <I2C_Slave_STOPF+0x258>)
 8003a54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fea8 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03d      	beq.n	8003ae2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a70:	4610      	mov	r0, r2
 8003a72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a74:	e035      	b.n	8003ae2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe f82a 	bl	8001b08 <HAL_DMA_GetState>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d014      	beq.n	8003ae4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	4a4e      	ldr	r2, [pc, #312]	; (8003bf8 <I2C_Slave_STOPF+0x258>)
 8003ac0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fe72 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003adc:	4610      	mov	r0, r2
 8003ade:	4798      	blx	r3
 8003ae0:	e000      	b.n	8003ae4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ae2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d03e      	beq.n	8003b6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d112      	bne.n	8003b22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d112      	bne.n	8003b56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f843 	bl	8003c00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b7a:	e039      	b.n	8003bf0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b80:	d109      	bne.n	8003b96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2228      	movs	r2, #40	; 0x28
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff f826 	bl	8002be2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b28      	cmp	r3, #40	; 0x28
 8003ba0:	d111      	bne.n	8003bc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <I2C_Slave_STOPF+0x25c>)
 8003ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff f827 	bl	8002c12 <HAL_I2C_ListenCpltCallback>
}
 8003bc4:	e014      	b.n	8003bf0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	2b22      	cmp	r3, #34	; 0x22
 8003bcc:	d002      	beq.n	8003bd4 <I2C_Slave_STOPF+0x234>
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b22      	cmp	r3, #34	; 0x22
 8003bd2:	d10d      	bne.n	8003bf0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fff9 	bl	8002be2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08004105 	.word	0x08004105
 8003bfc:	ffff0000 	.word	0xffff0000

08003c00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c18:	7bbb      	ldrb	r3, [r7, #14]
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d002      	beq.n	8003c24 <I2C_ITError+0x24>
 8003c1e:	7bbb      	ldrb	r3, [r7, #14]
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d10a      	bne.n	8003c3a <I2C_ITError+0x3a>
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b22      	cmp	r3, #34	; 0x22
 8003c28:	d107      	bne.n	8003c3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c40:	2b28      	cmp	r3, #40	; 0x28
 8003c42:	d107      	bne.n	8003c54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2228      	movs	r2, #40	; 0x28
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c52:	e015      	b.n	8003c80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c62:	d00a      	beq.n	8003c7a <I2C_ITError+0x7a>
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b60      	cmp	r3, #96	; 0x60
 8003c68:	d007      	beq.n	8003c7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8e:	d162      	bne.n	8003d56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d020      	beq.n	8003cf0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <I2C_ITError+0x25c>)
 8003cb4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd fd78 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8089 	beq.w	8003dda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cea:	4610      	mov	r0, r2
 8003cec:	4798      	blx	r3
 8003cee:	e074      	b.n	8003dda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	4a59      	ldr	r2, [pc, #356]	; (8003e5c <I2C_ITError+0x25c>)
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fd fd57 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d068      	beq.n	8003dda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d10b      	bne.n	8003d2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
 8003d54:	e041      	b.n	8003dda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b60      	cmp	r3, #96	; 0x60
 8003d60:	d125      	bne.n	8003dae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d10b      	bne.n	8003d96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fe ff5b 	bl	8002c62 <HAL_I2C_AbortCpltCallback>
 8003dac:	e015      	b.n	8003dda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d10b      	bne.n	8003dd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fe ff3a 	bl	8002c4e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10e      	bne.n	8003e08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d113      	bne.n	8003e54 <I2C_ITError+0x254>
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b28      	cmp	r3, #40	; 0x28
 8003e30:	d110      	bne.n	8003e54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <I2C_ITError+0x260>)
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fedf 	bl	8002c12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	08004105 	.word	0x08004105
 8003e60:	ffff0000 	.word	0xffff0000

08003e64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	460b      	mov	r3, r1
 8003e72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d006      	beq.n	8003e8e <I2C_MasterRequestWrite+0x2a>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d003      	beq.n	8003e8e <I2C_MasterRequestWrite+0x2a>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e8c:	d108      	bne.n	8003ea0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e00b      	b.n	8003eb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	2b12      	cmp	r3, #18
 8003ea6:	d107      	bne.n	8003eb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f9c5 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	d103      	bne.n	8003ee8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e035      	b.n	8003f58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef4:	d108      	bne.n	8003f08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e01b      	b.n	8003f40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	11db      	asrs	r3, r3, #7
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f063 030f 	orn	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	490e      	ldr	r1, [pc, #56]	; (8003f60 <I2C_MasterRequestWrite+0xfc>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f9eb 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e010      	b.n	8003f58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4907      	ldr	r1, [pc, #28]	; (8003f64 <I2C_MasterRequestWrite+0x100>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f9db 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	00010008 	.word	0x00010008
 8003f64:	00010002 	.word	0x00010002

08003f68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	460b      	mov	r3, r1
 8003f76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d006      	beq.n	8003fa2 <I2C_MasterRequestRead+0x3a>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d003      	beq.n	8003fa2 <I2C_MasterRequestRead+0x3a>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa0:	d108      	bne.n	8003fb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e00b      	b.n	8003fcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b11      	cmp	r3, #17
 8003fba:	d107      	bne.n	8003fcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f93b 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff2:	d103      	bne.n	8003ffc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e079      	b.n	80040f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004008:	d108      	bne.n	800401c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
 800401a:	e05f      	b.n	80040dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800401c:	897b      	ldrh	r3, [r7, #10]
 800401e:	11db      	asrs	r3, r3, #7
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0306 	and.w	r3, r3, #6
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f063 030f 	orn	r3, r3, #15
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4930      	ldr	r1, [pc, #192]	; (80040fc <I2C_MasterRequestRead+0x194>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f961 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e054      	b.n	80040f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4929      	ldr	r1, [pc, #164]	; (8004100 <I2C_MasterRequestRead+0x198>)
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f951 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e044      	b.n	80040f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f8d9 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d103      	bne.n	80040c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e017      	b.n	80040f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040c4:	897b      	ldrh	r3, [r7, #10]
 80040c6:	11db      	asrs	r3, r3, #7
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 0306 	and.w	r3, r3, #6
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f063 030e 	orn	r3, r3, #14
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4907      	ldr	r1, [pc, #28]	; (8004100 <I2C_MasterRequestRead+0x198>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f90d 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	00010008 	.word	0x00010008
 8004100:	00010002 	.word	0x00010002

08004104 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <I2C_DMAAbort+0x148>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <I2C_DMAAbort+0x14c>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a1a      	lsrs	r2, r3, #8
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00da      	lsls	r2, r3, #3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800414a:	e00a      	b.n	8004162 <I2C_DMAAbort+0x5e>
    }
    count--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d0ea      	beq.n	8004138 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	2200      	movs	r2, #0
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004190:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	2200      	movs	r2, #0
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b60      	cmp	r3, #96	; 0x60
 80041d2:	d10e      	bne.n	80041f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ea:	6978      	ldr	r0, [r7, #20]
 80041ec:	f7fe fd39 	bl	8002c62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f0:	e027      	b.n	8004242 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041f8:	2b28      	cmp	r3, #40	; 0x28
 80041fa:	d117      	bne.n	800422c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2228      	movs	r2, #40	; 0x28
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800422a:	e007      	b.n	800423c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7fe fd06 	bl	8002c4e <HAL_I2C_ErrorCallback>
}
 8004242:	bf00      	nop
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000000c 	.word	0x2000000c
 8004250:	14f8b589 	.word	0x14f8b589

08004254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004264:	e025      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426c:	d021      	beq.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fd f8af 	bl	80013d0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e023      	b.n	80042fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10d      	bne.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	e00c      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d0b6      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004310:	e051      	b.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004320:	d123      	bne.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e046      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004370:	d021      	beq.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fd f82d 	bl	80013d0 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e020      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10c      	bne.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e00b      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d18d      	bne.n	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440c:	e02d      	b.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f900 	bl	8004614 <I2C_IsAcknowledgeFailed>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02d      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004424:	d021      	beq.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fc ffd3 	bl	80013d0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d1ca      	bne.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448e:	e02d      	b.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f8bf 	bl	8004614 <I2C_IsAcknowledgeFailed>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e02d      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a6:	d021      	beq.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fc ff92 	bl	80013d0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d1ca      	bne.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	0a1a      	lsrs	r2, r3, #8
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b01      	subs	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e008      	b.n	8004554 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d0e9      	beq.n	8004526 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000000c 	.word	0x2000000c
 8004564:	14f8b589 	.word	0x14f8b589

08004568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004574:	e042      	b.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d119      	bne.n	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e029      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fc ff0a 	bl	80013d0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d1b5      	bne.n	8004576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d11b      	bne.n	8004664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f043 0204 	orr.w	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004682:	d103      	bne.n	800468c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800468a:	e007      	b.n	800469c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004694:	d102      	bne.n	800469c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2208      	movs	r2, #8
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	b08f      	sub	sp, #60	; 0x3c
 80046ac:	af0a      	add	r7, sp, #40	; 0x28
 80046ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e10f      	b.n	80048da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f005 feab 	bl	800a430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f002 fcde 	bl	80070ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	687e      	ldr	r6, [r7, #4]
 8004706:	466d      	mov	r5, sp
 8004708:	f106 0410 	add.w	r4, r6, #16
 800470c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004714:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004718:	e885 0003 	stmia.w	r5, {r0, r1}
 800471c:	1d33      	adds	r3, r6, #4
 800471e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004720:	6838      	ldr	r0, [r7, #0]
 8004722:	f002 fbb5 	bl	8006e90 <USB_CoreInit>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d0      	b.n	80048da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f002 fccc 	bl	80070dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e04a      	b.n	80047e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800474a:	7bfa      	ldrb	r2, [r7, #15]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	333d      	adds	r3, #61	; 0x3d
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	333c      	adds	r3, #60	; 0x3c
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004772:	7bfa      	ldrb	r2, [r7, #15]
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	b298      	uxth	r0, r3
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3344      	adds	r3, #68	; 0x44
 8004786:	4602      	mov	r2, r0
 8004788:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3340      	adds	r3, #64	; 0x40
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3348      	adds	r3, #72	; 0x48
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	334c      	adds	r3, #76	; 0x4c
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3354      	adds	r3, #84	; 0x54
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	3301      	adds	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d3af      	bcc.n	800474a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
 80047ee:	e044      	b.n	800487a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047f0:	7bfa      	ldrb	r2, [r7, #15]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004818:	7bfa      	ldrb	r2, [r7, #15]
 800481a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004832:	7bfa      	ldrb	r2, [r7, #15]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800485e:	7bfa      	ldrb	r2, [r7, #15]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	3301      	adds	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d3b5      	bcc.n	80047f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	687e      	ldr	r6, [r7, #4]
 800488c:	466d      	mov	r5, sp
 800488e:	f106 0410 	add.w	r4, r6, #16
 8004892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800489a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800489e:	e885 0003 	stmia.w	r5, {r0, r1}
 80048a2:	1d33      	adds	r3, r6, #4
 80048a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	f002 fc64 	bl	8007174 <USB_DevInit>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e00d      	b.n	80048da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 fdb3 	bl	800843e <USB_DevDisconnect>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_PCD_Start+0x1c>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e020      	b.n	8004940 <HAL_PCD_Start+0x5e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	2b01      	cmp	r3, #1
 800490c:	d109      	bne.n	8004922 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004912:	2b01      	cmp	r3, #1
 8004914:	d005      	beq.n	8004922 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f002 fbb6 	bl	8007098 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f003 fd63 	bl	80083fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b08d      	sub	sp, #52	; 0x34
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f003 fe21 	bl	80085a6 <USB_GetMode>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	f040 848a 	bne.w	8005280 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f003 fd85 	bl	8008480 <USB_ReadInterrupts>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8480 	beq.w	800527e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f003 fd72 	bl	8008480 <USB_ReadInterrupts>
 800499c:	4603      	mov	r3, r0
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d107      	bne.n	80049b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f002 0202 	and.w	r2, r2, #2
 80049b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f003 fd60 	bl	8008480 <USB_ReadInterrupts>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d161      	bne.n	8004a8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0210 	bic.w	r2, r2, #16
 80049d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 020f 	and.w	r2, r3, #15
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	3304      	adds	r3, #4
 80049f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	0c5b      	lsrs	r3, r3, #17
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d124      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d035      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	6a38      	ldr	r0, [r7, #32]
 8004a26:	f003 fb97 	bl	8008158 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a36:	441a      	add	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a48:	441a      	add	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	621a      	str	r2, [r3, #32]
 8004a4e:	e016      	b.n	8004a7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	0c5b      	lsrs	r3, r3, #17
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d110      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a62:	2208      	movs	r2, #8
 8004a64:	4619      	mov	r1, r3
 8004a66:	6a38      	ldr	r0, [r7, #32]
 8004a68:	f003 fb76 	bl	8008158 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a78:	441a      	add	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0210 	orr.w	r2, r2, #16
 8004a8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f003 fcf4 	bl	8008480 <USB_ReadInterrupts>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004aa2:	f040 80a7 	bne.w	8004bf4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f003 fcf9 	bl	80084a6 <USB_ReadDevAllOutEpInterrupt>
 8004ab4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004ab6:	e099      	b.n	8004bec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 808e 	beq.w	8004be0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fd1d 	bl	800850e <USB_ReadDevOutEPInterrupt>
 8004ad4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	2301      	movs	r3, #1
 8004af0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 feab 	bl	8005850 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	2308      	movs	r3, #8
 8004b14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 ff81 	bl	8005a20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	461a      	mov	r2, r3
 8004b36:	2310      	movs	r3, #16
 8004b38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d030      	beq.n	8004ba6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d109      	bne.n	8004b64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	3304      	adds	r3, #4
 8004b78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d108      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f005 fd54 	bl	800a63c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2320      	movs	r3, #32
 8004bc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bde:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	3301      	adds	r3, #1
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f47f af62 	bne.w	8004ab8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f003 fc41 	bl	8008480 <USB_ReadInterrupts>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c08:	f040 80db 	bne.w	8004dc2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 fc62 	bl	80084da <USB_ReadDevAllInEpInterrupt>
 8004c16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c1c:	e0cd      	b.n	8004dba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80c2 	beq.w	8004dae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 fc88 	bl	800854a <USB_ReadDevInEPInterrupt>
 8004c3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d057      	beq.n	8004cf6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69f9      	ldr	r1, [r7, #28]
 8004c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c66:	4013      	ands	r3, r2
 8004c68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c76:	461a      	mov	r2, r3
 8004c78:	2301      	movs	r3, #1
 8004c7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d132      	bne.n	8004cea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	334c      	adds	r3, #76	; 0x4c
 8004c94:	6819      	ldr	r1, [r3, #0]
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4403      	add	r3, r0
 8004ca4:	3348      	adds	r3, #72	; 0x48
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4419      	add	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4403      	add	r3, r0
 8004cb8:	334c      	adds	r3, #76	; 0x4c
 8004cba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d113      	bne.n	8004cea <HAL_PCD_IRQHandler+0x3a2>
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3354      	adds	r3, #84	; 0x54
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d108      	bne.n	8004cea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	f003 fc8f 	bl	8008608 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f005 fc1e 	bl	800a532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2308      	movs	r3, #8
 8004d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	2340      	movs	r3, #64	; 0x40
 8004d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d023      	beq.n	8004d9c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d56:	6a38      	ldr	r0, [r7, #32]
 8004d58:	f002 fb70 	bl	800743c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3338      	adds	r3, #56	; 0x38
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	78db      	ldrb	r3, [r3, #3]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d108      	bne.n	8004d8a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f005 fc6b 	bl	800a660 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	461a      	mov	r2, r3
 8004d98:	2302      	movs	r3, #2
 8004d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fcc3 	bl	8005734 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	3301      	adds	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f47f af2e 	bne.w	8004c1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f003 fb5a 	bl	8008480 <USB_ReadInterrupts>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd6:	d122      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d108      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 feab 	bl	8005b5c <HAL_PCDEx_LPM_Callback>
 8004e06:	e002      	b.n	8004e0e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f005 fc09 	bl	800a620 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fb2c 	bl	8008480 <USB_ReadInterrupts>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	d112      	bne.n	8004e5a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d102      	bne.n	8004e4a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f005 fbc5 	bl	800a5d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e58:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f003 fb0e 	bl	8008480 <USB_ReadInterrupts>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	f040 80b7 	bne.w	8004fe0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2110      	movs	r1, #16
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f002 fad5 	bl	800743c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e96:	e046      	b.n	8004f26 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eaa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ede:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004efe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	3301      	adds	r3, #1
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3b3      	bcc.n	8004e98 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d016      	beq.n	8004f7a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f5c:	f043 030b 	orr.w	r3, r3, #11
 8004f60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f72:	f043 030b 	orr.w	r3, r3, #11
 8004f76:	6453      	str	r3, [r2, #68]	; 0x44
 8004f78:	e015      	b.n	8004fa6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f8c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f90:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa0:	f043 030b 	orr.w	r3, r3, #11
 8004fa4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fb8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f003 fb1c 	bl	8008608 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f003 fa4b 	bl	8008480 <USB_ReadInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d124      	bne.n	8005040 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 fae1 	bl	80085c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f002 fa96 	bl	8007536 <USB_GetDevSpeed>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	f001 fa11 	bl	800643c <HAL_RCC_GetHCLKFreq>
 800501a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	4620      	mov	r0, r4
 8005026:	f001 ff95 	bl	8006f54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f005 faa9 	bl	800a582 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800503e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f003 fa1b 	bl	8008480 <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d10a      	bne.n	800506a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f005 fa86 	bl	800a566 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f002 0208 	and.w	r2, r2, #8
 8005068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f003 fa06 	bl	8008480 <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d122      	bne.n	80050c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800508a:	2301      	movs	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	e014      	b.n	80050ba <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fb0f 	bl	80056d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	3301      	adds	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3e5      	bcc.n	8005090 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f003 f9d9 	bl	8008480 <USB_ReadInterrupts>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d8:	d13b      	bne.n	8005152 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050da:	2301      	movs	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	e02b      	b.n	8005138 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	3340      	adds	r3, #64	; 0x40
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d115      	bne.n	8005132 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005106:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	da12      	bge.n	8005132 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	333f      	adds	r3, #63	; 0x3f
 800511c:	2201      	movs	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005128:	b2db      	uxtb	r3, r3
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fad0 	bl	80056d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	3301      	adds	r3, #1
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513e:	429a      	cmp	r2, r3
 8005140:	d3ce      	bcc.n	80050e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f003 f992 	bl	8008480 <USB_ReadInterrupts>
 800515c:	4603      	mov	r3, r0
 800515e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005166:	d155      	bne.n	8005214 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005168:	2301      	movs	r3, #1
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	e045      	b.n	80051fa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d12e      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005196:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005198:	2b00      	cmp	r3, #0
 800519a:	da2b      	bge.n	80051f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80051a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d121      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051c2:	2201      	movs	r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f0:	6053      	str	r3, [r2, #4]
            break;
 80051f2:	e007      	b.n	8005204 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	3301      	adds	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005200:	429a      	cmp	r2, r3
 8005202:	d3b4      	bcc.n	800516e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f003 f931 	bl	8008480 <USB_ReadInterrupts>
 800521e:	4603      	mov	r3, r0
 8005220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d10a      	bne.n	8005240 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f005 fa2a 	bl	800a684 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800523e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f003 f91b 	bl	8008480 <USB_ReadInterrupts>
 800524a:	4603      	mov	r3, r0
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d115      	bne.n	8005280 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f005 fa1a 	bl	800a6a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	e000      	b.n	8005280 <HAL_PCD_IRQHandler+0x938>
      return;
 800527e:	bf00      	nop
    }
  }
}
 8005280:	3734      	adds	r7, #52	; 0x34
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}

08005286 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_PCD_SetAddress+0x1a>
 800529c:	2302      	movs	r3, #2
 800529e:	e013      	b.n	80052c8 <HAL_PCD_SetAddress+0x42>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f003 f879 	bl	80083b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	4608      	mov	r0, r1
 80052da:	4611      	mov	r1, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	70fb      	strb	r3, [r7, #3]
 80052e2:	460b      	mov	r3, r1
 80052e4:	803b      	strh	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da0f      	bge.n	8005316 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	3338      	adds	r3, #56	; 0x38
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	3304      	adds	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	705a      	strb	r2, [r3, #1]
 8005314:	e00f      	b.n	8005336 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005342:	883a      	ldrh	r2, [r7, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	78ba      	ldrb	r2, [r7, #2]
 800534c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005360:	78bb      	ldrb	r3, [r7, #2]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d102      	bne.n	800536c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_PCD_EP_Open+0xaa>
 8005376:	2302      	movs	r3, #2
 8005378:	e00e      	b.n	8005398 <HAL_PCD_EP_Open+0xc8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	4618      	mov	r0, r3
 800538a:	f002 f8f9 	bl	8007580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005396:	7afb      	ldrb	r3, [r7, #11]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da0f      	bge.n	80053d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	3338      	adds	r3, #56	; 0x38
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	705a      	strb	r2, [r3, #1]
 80053d2:	e00f      	b.n	80053f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 020f 	and.w	r2, r3, #15
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4413      	add	r3, r2
 80053ea:	3304      	adds	r3, #4
 80053ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_PCD_EP_Close+0x6e>
 800540a:	2302      	movs	r3, #2
 800540c:	e00e      	b.n	800542c <HAL_PCD_EP_Close+0x8c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	4618      	mov	r0, r3
 800541e:	f002 f937 	bl	8007690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	460b      	mov	r3, r1
 8005442:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005444:	7afb      	ldrb	r3, [r7, #11]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	4613      	mov	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	3304      	adds	r3, #4
 800545c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005476:	7afb      	ldrb	r3, [r7, #11]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	b2da      	uxtb	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005490:	7afb      	ldrb	r3, [r7, #11]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	6979      	ldr	r1, [r7, #20]
 80054a8:	f002 fc16 	bl	8007cd8 <USB_EP0StartXfer>
 80054ac:	e008      	b.n	80054c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	f002 f9c4 	bl	8007848 <USB_EPStartXfer>
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	460b      	mov	r3, r1
 80054d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	3338      	adds	r3, #56	; 0x38
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	3304      	adds	r3, #4
 80054f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2200      	movs	r2, #0
 8005502:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2201      	movs	r2, #1
 8005508:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800550a:	7afb      	ldrb	r3, [r7, #11]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	b2da      	uxtb	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005524:	7afb      	ldrb	r3, [r7, #11]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6979      	ldr	r1, [r7, #20]
 800553c:	f002 fbcc 	bl	8007cd8 <USB_EP0StartXfer>
 8005540:	e008      	b.n	8005554 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	f002 f97a 	bl	8007848 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d901      	bls.n	800557c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e050      	b.n	800561e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800557c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005580:	2b00      	cmp	r3, #0
 8005582:	da0f      	bge.n	80055a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f003 020f 	and.w	r2, r3, #15
 800558a:	4613      	mov	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	3338      	adds	r3, #56	; 0x38
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4413      	add	r3, r2
 8005598:	3304      	adds	r3, #4
 800559a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	705a      	strb	r2, [r3, #1]
 80055a2:	e00d      	b.n	80055c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	3304      	adds	r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_PCD_EP_SetStall+0x82>
 80055dc:	2302      	movs	r3, #2
 80055de:	e01e      	b.n	800561e <HAL_PCD_EP_SetStall+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 fe0a 	bl	8008208 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	b2d9      	uxtb	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800560e:	461a      	mov	r2, r3
 8005610:	f002 fffa 	bl	8008608 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	d901      	bls.n	8005644 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e042      	b.n	80056ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005648:	2b00      	cmp	r3, #0
 800564a:	da0f      	bge.n	800566c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	3338      	adds	r3, #56	; 0x38
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	3304      	adds	r3, #4
 8005662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	705a      	strb	r2, [r3, #1]
 800566a:	e00f      	b.n	800568c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	3304      	adds	r3, #4
 8005684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_PCD_EP_ClrStall+0x86>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e00e      	b.n	80056ca <HAL_PCD_EP_ClrStall+0xa4>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 fe12 	bl	80082e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80056de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	da0c      	bge.n	8005700 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	3338      	adds	r3, #56	; 0x38
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	3304      	adds	r3, #4
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e00c      	b.n	800571a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	3304      	adds	r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f002 fc31 	bl	8007f88 <USB_EPStopXfer>
 8005726:	4603      	mov	r3, r0
 8005728:	72fb      	strb	r3, [r7, #11]

  return ret;
 800572a:	7afb      	ldrb	r3, [r7, #11]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	3338      	adds	r3, #56	; 0x38
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4413      	add	r3, r2
 8005758:	3304      	adds	r3, #4
 800575a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1a      	ldr	r2, [r3, #32]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	429a      	cmp	r2, r3
 8005766:	d901      	bls.n	800576c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e06c      	b.n	8005846 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	429a      	cmp	r2, r3
 8005780:	d902      	bls.n	8005788 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3303      	adds	r3, #3
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005790:	e02b      	b.n	80057ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d902      	bls.n	80057ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	3303      	adds	r3, #3
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6919      	ldr	r1, [r3, #16]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	4603      	mov	r3, r0
 80057cc:	6978      	ldr	r0, [r7, #20]
 80057ce:	f002 fc85 	bl	80080dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	441a      	add	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d809      	bhi.n	8005814 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1a      	ldr	r2, [r3, #32]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005808:	429a      	cmp	r2, r3
 800580a:	d203      	bcs.n	8005814 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1be      	bne.n	8005792 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	429a      	cmp	r2, r3
 800581e:	d811      	bhi.n	8005844 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	2201      	movs	r2, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	43db      	mvns	r3, r3
 800583a:	6939      	ldr	r1, [r7, #16]
 800583c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005840:	4013      	ands	r3, r2
 8005842:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	333c      	adds	r3, #60	; 0x3c
 8005868:	3304      	adds	r3, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d17b      	bne.n	800597e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d015      	beq.n	80058bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4a61      	ldr	r2, [pc, #388]	; (8005a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	f240 80b9 	bls.w	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80b3 	beq.w	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b8:	6093      	str	r3, [r2, #8]
 80058ba:	e0a7      	b.n	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	461a      	mov	r2, r3
 80058d4:	2320      	movs	r3, #32
 80058d6:	6093      	str	r3, [r2, #8]
 80058d8:	e098      	b.n	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 8093 	bne.w	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	4a4b      	ldr	r2, [pc, #300]	; (8005a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d90f      	bls.n	800590e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	6093      	str	r3, [r2, #8]
 800590c:	e07e      	b.n	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4413      	add	r3, r2
 8005920:	3304      	adds	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	0159      	lsls	r1, r3, #5
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	440b      	add	r3, r1
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d114      	bne.n	8005970 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005958:	461a      	mov	r2, r3
 800595a:	2101      	movs	r1, #1
 800595c:	f002 fe54 	bl	8008608 <USB_EP0_OutStart>
 8005960:	e006      	b.n	8005970 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	441a      	add	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f004 fdc0 	bl	800a4fc <HAL_PCD_DataOutStageCallback>
 800597c:	e046      	b.n	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4a26      	ldr	r2, [pc, #152]	; (8005a1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d124      	bne.n	80059d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	461a      	mov	r2, r3
 800599e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a2:	6093      	str	r3, [r2, #8]
 80059a4:	e032      	b.n	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	461a      	mov	r2, r3
 80059be:	2320      	movs	r3, #32
 80059c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f004 fd97 	bl	800a4fc <HAL_PCD_DataOutStageCallback>
 80059ce:	e01d      	b.n	8005a0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d114      	bne.n	8005a00 <PCD_EP_OutXfrComplete_int+0x1b0>
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059f8:	461a      	mov	r2, r3
 80059fa:	2100      	movs	r1, #0
 80059fc:	f002 fe04 	bl	8008608 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f004 fd78 	bl	800a4fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	4f54300a 	.word	0x4f54300a
 8005a1c:	4f54310a 	.word	0x4f54310a

08005a20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	333c      	adds	r3, #60	; 0x3c
 8005a38:	3304      	adds	r3, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d90e      	bls.n	8005a74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f004 fd2f 	bl	800a4d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d90c      	bls.n	8005a9c <PCD_EP_OutSetupPacket_int+0x7c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d108      	bne.n	8005a9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a94:	461a      	mov	r2, r3
 8005a96:	2101      	movs	r1, #1
 8005a98:	f002 fdb6 	bl	8008608 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	4f54300a 	.word	0x4f54300a

08005aac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005aca:	883b      	ldrh	r3, [r7, #0]
 8005acc:	0419      	lsls	r1, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ad8:	e028      	b.n	8005b2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	0c1b      	lsrs	r3, r3, #16
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
 8005aec:	e00d      	b.n	8005b0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	3340      	adds	r3, #64	; 0x40
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	3301      	adds	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3ec      	bcc.n	8005aee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b14:	883b      	ldrh	r3, [r7, #0]
 8005b16:	0418      	lsls	r0, r3, #16
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6819      	ldr	r1, [r3, #0]
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	4302      	orrs	r2, r0
 8005b24:	3340      	adds	r3, #64	; 0x40
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e267      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d075      	beq.n	8005c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b92:	4b88      	ldr	r3, [pc, #544]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9e:	4b85      	ldr	r3, [pc, #532]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d112      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005baa:	4b82      	ldr	r3, [pc, #520]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	4b7e      	ldr	r3, [pc, #504]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05b      	beq.n	8005c7c <HAL_RCC_OscConfig+0x108>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d157      	bne.n	8005c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e242      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCC_OscConfig+0x74>
 8005bda:	4b76      	ldr	r3, [pc, #472]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a75      	ldr	r2, [pc, #468]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e01d      	b.n	8005c24 <HAL_RCC_OscConfig+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x98>
 8005bf2:	4b70      	ldr	r3, [pc, #448]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6f      	ldr	r2, [pc, #444]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4b6d      	ldr	r3, [pc, #436]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a6c      	ldr	r2, [pc, #432]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0xb0>
 8005c0c:	4b69      	ldr	r3, [pc, #420]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a68      	ldr	r2, [pc, #416]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	4b66      	ldr	r3, [pc, #408]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a65      	ldr	r2, [pc, #404]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d013      	beq.n	8005c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fb fbd0 	bl	80013d0 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fb fbcc 	bl	80013d0 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e207      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	4b5b      	ldr	r3, [pc, #364]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0xc0>
 8005c52:	e014      	b.n	8005c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fb fbbc 	bl	80013d0 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c5c:	f7fb fbb8 	bl	80013d0 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b64      	cmp	r3, #100	; 0x64
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e1f3      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6e:	4b51      	ldr	r3, [pc, #324]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0xe8>
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d063      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00b      	beq.n	8005cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c96:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d11c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ca2:	4b44      	ldr	r3, [pc, #272]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d116      	bne.n	8005cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cae:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x152>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e1c7      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc6:	4b3b      	ldr	r3, [pc, #236]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4937      	ldr	r1, [pc, #220]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cda:	e03a      	b.n	8005d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d020      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce4:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <HAL_RCC_OscConfig+0x244>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fb fb71 	bl	80013d0 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fb fb6d 	bl	80013d0 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e1a8      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d04:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4925      	ldr	r1, [pc, #148]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]
 8005d24:	e015      	b.n	8005d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_OscConfig+0x244>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fb fb50 	bl	80013d0 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d34:	f7fb fb4c 	bl	80013d0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e187      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d46:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d036      	beq.n	8005dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <HAL_RCC_OscConfig+0x248>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fb fb30 	bl	80013d0 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d74:	f7fb fb2c 	bl	80013d0 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e167      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0x200>
 8005d92:	e01b      	b.n	8005dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_RCC_OscConfig+0x248>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9a:	f7fb fb19 	bl	80013d0 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da0:	e00e      	b.n	8005dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da2:	f7fb fb15 	bl	80013d0 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d907      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e150      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
 8005db4:	40023800 	.word	0x40023800
 8005db8:	42470000 	.word	0x42470000
 8005dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc0:	4b88      	ldr	r3, [pc, #544]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ea      	bne.n	8005da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8097 	beq.w	8005f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dde:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	4b7d      	ldr	r3, [pc, #500]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	4a7c      	ldr	r2, [pc, #496]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dfa:	4b7a      	ldr	r3, [pc, #488]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0a:	4b77      	ldr	r3, [pc, #476]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d118      	bne.n	8005e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e16:	4b74      	ldr	r3, [pc, #464]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a73      	ldr	r2, [pc, #460]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e22:	f7fb fad5 	bl	80013d0 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fb fad1 	bl	80013d0 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e10c      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d106      	bne.n	8005e5e <HAL_RCC_OscConfig+0x2ea>
 8005e50:	4b64      	ldr	r3, [pc, #400]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	4a63      	ldr	r2, [pc, #396]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5c:	e01c      	b.n	8005e98 <HAL_RCC_OscConfig+0x324>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x30c>
 8005e66:	4b5f      	ldr	r3, [pc, #380]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	4a5e      	ldr	r2, [pc, #376]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	f043 0304 	orr.w	r3, r3, #4
 8005e70:	6713      	str	r3, [r2, #112]	; 0x70
 8005e72:	4b5c      	ldr	r3, [pc, #368]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	4a5b      	ldr	r2, [pc, #364]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0x324>
 8005e80:	4b58      	ldr	r3, [pc, #352]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	4a57      	ldr	r2, [pc, #348]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8c:	4b55      	ldr	r3, [pc, #340]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e90:	4a54      	ldr	r2, [pc, #336]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e92:	f023 0304 	bic.w	r3, r3, #4
 8005e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea0:	f7fb fa96 	bl	80013d0 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea8:	f7fb fa92 	bl	80013d0 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0cb      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebe:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0ee      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x334>
 8005eca:	e014      	b.n	8005ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ecc:	f7fb fa80 	bl	80013d0 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fb fa7c 	bl	80013d0 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0b5      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eea:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1ee      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d105      	bne.n	8005f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efc:	4b39      	ldr	r3, [pc, #228]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	4a38      	ldr	r2, [pc, #224]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a1 	beq.w	8006054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d05c      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d141      	bne.n	8005faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f26:	4b31      	ldr	r3, [pc, #196]	; (8005fec <HAL_RCC_OscConfig+0x478>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fb fa50 	bl	80013d0 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fb fa4c 	bl	80013d0 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e087      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f46:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	019b      	lsls	r3, r3, #6
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	491b      	ldr	r1, [pc, #108]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_OscConfig+0x478>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fb fa25 	bl	80013d0 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8a:	f7fb fa21 	bl	80013d0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e05c      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x416>
 8005fa8:	e054      	b.n	8006054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_RCC_OscConfig+0x478>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fb fa0e 	bl	80013d0 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fb fa0a 	bl	80013d0 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e045      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x444>
 8005fd6:	e03d      	b.n	8006054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e038      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40007000 	.word	0x40007000
 8005fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <HAL_RCC_OscConfig+0x4ec>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d028      	beq.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006008:	429a      	cmp	r2, r3
 800600a:	d121      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d11a      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	3b01      	subs	r3, #1
 800603a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800

08006064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0cc      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006078:	4b68      	ldr	r3, [pc, #416]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d90c      	bls.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b63      	ldr	r3, [pc, #396]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0b8      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b8:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a58      	ldr	r2, [pc, #352]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060d0:	4b53      	ldr	r3, [pc, #332]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a52      	ldr	r2, [pc, #328]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060dc:	4b50      	ldr	r3, [pc, #320]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	494d      	ldr	r1, [pc, #308]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d044      	beq.n	8006184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006102:	4b47      	ldr	r3, [pc, #284]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d119      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d003      	beq.n	8006122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800611e:	2b03      	cmp	r3, #3
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006122:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e06f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006132:	4b3b      	ldr	r3, [pc, #236]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e067      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006142:	4b37      	ldr	r3, [pc, #220]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 0203 	bic.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4934      	ldr	r1, [pc, #208]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006154:	f7fb f93c 	bl	80013d0 <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615a:	e00a      	b.n	8006172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800615c:	f7fb f938 	bl	80013d0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	; 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e04f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006172:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 020c 	and.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d1eb      	bne.n	800615c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d20c      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b22      	ldr	r3, [pc, #136]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e032      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b8:	4b19      	ldr	r3, [pc, #100]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4916      	ldr	r1, [pc, #88]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d6:	4b12      	ldr	r3, [pc, #72]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	490e      	ldr	r1, [pc, #56]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ea:	f000 f821 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80061ee:	4602      	mov	r2, r0
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	490a      	ldr	r1, [pc, #40]	; (8006224 <HAL_RCC_ClockConfig+0x1c0>)
 80061fc:	5ccb      	ldrb	r3, [r1, r3]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	4a09      	ldr	r2, [pc, #36]	; (8006228 <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_RCC_ClockConfig+0x1c8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb f89c 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023c00 	.word	0x40023c00
 8006220:	40023800 	.word	0x40023800
 8006224:	0800bb48 	.word	0x0800bb48
 8006228:	2000000c 	.word	0x2000000c
 800622c:	20000010 	.word	0x20000010

08006230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006234:	b094      	sub	sp, #80	; 0x50
 8006236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	647b      	str	r3, [r7, #68]	; 0x44
 800623c:	2300      	movs	r3, #0
 800623e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006240:	2300      	movs	r3, #0
 8006242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006248:	4b79      	ldr	r3, [pc, #484]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b08      	cmp	r3, #8
 8006252:	d00d      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0x40>
 8006254:	2b08      	cmp	r3, #8
 8006256:	f200 80e1 	bhi.w	800641c <HAL_RCC_GetSysClockFreq+0x1ec>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x34>
 800625e:	2b04      	cmp	r3, #4
 8006260:	d003      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0x3a>
 8006262:	e0db      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b73      	ldr	r3, [pc, #460]	; (8006434 <HAL_RCC_GetSysClockFreq+0x204>)
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006268:	e0db      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800626a:	4b73      	ldr	r3, [pc, #460]	; (8006438 <HAL_RCC_GetSysClockFreq+0x208>)
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800626e:	e0d8      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006270:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627a:	4b6d      	ldr	r3, [pc, #436]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d063      	beq.n	800634e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006286:	4b6a      	ldr	r3, [pc, #424]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	2200      	movs	r2, #0
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006298:	633b      	str	r3, [r7, #48]	; 0x30
 800629a:	2300      	movs	r3, #0
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
 800629e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	0159      	lsls	r1, r3, #5
 80062b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b4:	0150      	lsls	r0, r2, #5
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4621      	mov	r1, r4
 80062bc:	1a51      	subs	r1, r2, r1
 80062be:	6139      	str	r1, [r7, #16]
 80062c0:	4629      	mov	r1, r5
 80062c2:	eb63 0301 	sbc.w	r3, r3, r1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d4:	4659      	mov	r1, fp
 80062d6:	018b      	lsls	r3, r1, #6
 80062d8:	4651      	mov	r1, sl
 80062da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062de:	4651      	mov	r1, sl
 80062e0:	018a      	lsls	r2, r1, #6
 80062e2:	4651      	mov	r1, sl
 80062e4:	ebb2 0801 	subs.w	r8, r2, r1
 80062e8:	4659      	mov	r1, fp
 80062ea:	eb63 0901 	sbc.w	r9, r3, r1
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	4623      	mov	r3, r4
 8006308:	eb18 0303 	adds.w	r3, r8, r3
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	462b      	mov	r3, r5
 8006310:	eb49 0303 	adc.w	r3, r9, r3
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006322:	4629      	mov	r1, r5
 8006324:	024b      	lsls	r3, r1, #9
 8006326:	4621      	mov	r1, r4
 8006328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800632c:	4621      	mov	r1, r4
 800632e:	024a      	lsls	r2, r1, #9
 8006330:	4610      	mov	r0, r2
 8006332:	4619      	mov	r1, r3
 8006334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006336:	2200      	movs	r2, #0
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
 800633a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800633c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006340:	f7f9 ff96 	bl	8000270 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4613      	mov	r3, r2
 800634a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800634c:	e058      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634e:	4b38      	ldr	r3, [pc, #224]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	2200      	movs	r2, #0
 8006356:	4618      	mov	r0, r3
 8006358:	4611      	mov	r1, r2
 800635a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	2300      	movs	r3, #0
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	f04f 0000 	mov.w	r0, #0
 8006370:	f04f 0100 	mov.w	r1, #0
 8006374:	0159      	lsls	r1, r3, #5
 8006376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800637a:	0150      	lsls	r0, r2, #5
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4641      	mov	r1, r8
 8006382:	ebb2 0a01 	subs.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb63 0b01 	sbc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800639c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063a0:	ebb2 040a 	subs.w	r4, r2, sl
 80063a4:	eb63 050b 	sbc.w	r5, r3, fp
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	00eb      	lsls	r3, r5, #3
 80063b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063b6:	00e2      	lsls	r2, r4, #3
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	4643      	mov	r3, r8
 80063be:	18e3      	adds	r3, r4, r3
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	464b      	mov	r3, r9
 80063c4:	eb45 0303 	adc.w	r3, r5, r3
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063d6:	4629      	mov	r1, r5
 80063d8:	028b      	lsls	r3, r1, #10
 80063da:	4621      	mov	r1, r4
 80063dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063e0:	4621      	mov	r1, r4
 80063e2:	028a      	lsls	r2, r1, #10
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	2200      	movs	r2, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	f7f9 ff3c 	bl	8000270 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4613      	mov	r3, r2
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	3301      	adds	r3, #1
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800641a:	e002      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_RCC_GetSysClockFreq+0x204>)
 800641e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006424:	4618      	mov	r0, r3
 8006426:	3750      	adds	r7, #80	; 0x50
 8006428:	46bd      	mov	sp, r7
 800642a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800
 8006434:	00f42400 	.word	0x00f42400
 8006438:	007a1200 	.word	0x007a1200

0800643c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006440:	4b03      	ldr	r3, [pc, #12]	; (8006450 <HAL_RCC_GetHCLKFreq+0x14>)
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	2000000c 	.word	0x2000000c

08006454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006458:	f7ff fff0 	bl	800643c <HAL_RCC_GetHCLKFreq>
 800645c:	4602      	mov	r2, r0
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	0a9b      	lsrs	r3, r3, #10
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	4903      	ldr	r1, [pc, #12]	; (8006478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800646a:	5ccb      	ldrb	r3, [r1, r3]
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006470:	4618      	mov	r0, r3
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40023800 	.word	0x40023800
 8006478:	0800bb58 	.word	0x0800bb58

0800647c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e07b      	b.n	8006586 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800649e:	d009      	beq.n	80064b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	61da      	str	r2, [r3, #28]
 80064a6:	e005      	b.n	80064b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fa fcf4 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	ea42 0103 	orr.w	r1, r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	f003 0104 	and.w	r1, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	f003 0210 	and.w	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e041      	b.n	8006624 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fa fcfb 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 fa95 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	d001      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e04e      	b.n	80066e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d022      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d01d      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d018      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1e      	ldr	r2, [pc, #120]	; (80066f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d013      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <HAL_TIM_Base_Start_IT+0xd0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00e      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_TIM_Base_Start_IT+0xd4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d009      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_TIM_Base_Start_IT+0xd8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d004      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_TIM_Base_Start_IT+0xdc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d111      	bne.n	80066d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d010      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0201 	orr.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	e007      	b.n	80066e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40001800 	.word	0x40001800

0800670c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d122      	bne.n	8006768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d11b      	bne.n	8006768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0202 	mvn.w	r2, #2
 8006738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9b5 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 8006754:	e005      	b.n	8006762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9a7 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f9b8 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b04      	cmp	r3, #4
 8006774:	d122      	bne.n	80067bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b04      	cmp	r3, #4
 8006782:	d11b      	bne.n	80067bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0204 	mvn.w	r2, #4
 800678c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f98b 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 80067a8:	e005      	b.n	80067b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f97d 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f98e 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d122      	bne.n	8006810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d11b      	bne.n	8006810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0208 	mvn.w	r2, #8
 80067e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f961 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f953 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f964 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	2b10      	cmp	r3, #16
 800681c:	d122      	bne.n	8006864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b10      	cmp	r3, #16
 800682a:	d11b      	bne.n	8006864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0210 	mvn.w	r2, #16
 8006834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2208      	movs	r2, #8
 800683a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f937 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f929 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f93a 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10e      	bne.n	8006890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d107      	bne.n	8006890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0201 	mvn.w	r2, #1
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fa fa76 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	2b80      	cmp	r3, #128	; 0x80
 800689c:	d10e      	bne.n	80068bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d107      	bne.n	80068bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fae0 	bl	8006e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d10e      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d107      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f8ff 	bl	8006ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d10e      	bne.n	8006914 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b20      	cmp	r3, #32
 8006902:	d107      	bne.n	8006914 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0220 	mvn.w	r2, #32
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 faaa 	bl	8006e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x1c>
 8006934:	2302      	movs	r3, #2
 8006936:	e0b4      	b.n	8006aa2 <HAL_TIM_ConfigClockSource+0x186>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d03e      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	f200 8087 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	f000 8086 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x172>
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d87f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b70      	cmp	r3, #112	; 0x70
 800698a:	d01a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xa6>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d87b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b60      	cmp	r3, #96	; 0x60
 8006992:	d050      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x11a>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d877      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d03c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0xfa>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d873      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d058      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x13a>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d86f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d064      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d86b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d060      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d867      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05c      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d05a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069c0:	e062      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6899      	ldr	r1, [r3, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f000 f9ad 	bl	8006d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	609a      	str	r2, [r3, #8]
      break;
 80069ee:	e04f      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f000 f996 	bl	8006d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a12:	609a      	str	r2, [r3, #8]
      break;
 8006a14:	e03c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 f90a 	bl	8006c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2150      	movs	r1, #80	; 0x50
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f963 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a34:	e02c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 f929 	bl	8006c9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2160      	movs	r1, #96	; 0x60
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f953 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a54:	e01c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 f8ea 	bl	8006c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f943 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a74:	e00c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f000 f93a 	bl	8006cfa <TIM_ITRx_SetConfig>
      break;
 8006a86:	e003      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8c:	e000      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <TIM_Base_SetConfig+0x114>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d00f      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3d      	ldr	r2, [pc, #244]	; (8006c14 <TIM_Base_SetConfig+0x118>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00b      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a3c      	ldr	r2, [pc, #240]	; (8006c18 <TIM_Base_SetConfig+0x11c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a3b      	ldr	r2, [pc, #236]	; (8006c1c <TIM_Base_SetConfig+0x120>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a3a      	ldr	r2, [pc, #232]	; (8006c20 <TIM_Base_SetConfig+0x124>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d108      	bne.n	8006b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2f      	ldr	r2, [pc, #188]	; (8006c10 <TIM_Base_SetConfig+0x114>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02b      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5c:	d027      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2c      	ldr	r2, [pc, #176]	; (8006c14 <TIM_Base_SetConfig+0x118>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d023      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2b      	ldr	r2, [pc, #172]	; (8006c18 <TIM_Base_SetConfig+0x11c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d01f      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <TIM_Base_SetConfig+0x120>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01b      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <TIM_Base_SetConfig+0x124>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d017      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a28      	ldr	r2, [pc, #160]	; (8006c24 <TIM_Base_SetConfig+0x128>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <TIM_Base_SetConfig+0x12c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00f      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <TIM_Base_SetConfig+0x130>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00b      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <TIM_Base_SetConfig+0x134>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d007      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <TIM_Base_SetConfig+0x138>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a23      	ldr	r2, [pc, #140]	; (8006c38 <TIM_Base_SetConfig+0x13c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d108      	bne.n	8006bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <TIM_Base_SetConfig+0x114>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_Base_SetConfig+0xf8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <TIM_Base_SetConfig+0x124>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d103      	bne.n	8006bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	615a      	str	r2, [r3, #20]
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40000c00 	.word	0x40000c00
 8006c20:	40010400 	.word	0x40010400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800
 8006c30:	40001800 	.word	0x40001800
 8006c34:	40001c00 	.word	0x40001c00
 8006c38:	40002000 	.word	0x40002000

08006c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 030a 	bic.w	r3, r3, #10
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b087      	sub	sp, #28
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f023 0210 	bic.w	r2, r3, #16
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	031b      	lsls	r3, r3, #12
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f043 0307 	orr.w	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e05a      	b.n	8006e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd4:	d01d      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1d      	ldr	r2, [pc, #116]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1a      	ldr	r2, [pc, #104]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a17      	ldr	r2, [pc, #92]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10c      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40010400 	.word	0x40010400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40001800 	.word	0x40001800

08006e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e90:	b084      	sub	sp, #16
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	f107 001c 	add.w	r0, r7, #28
 8006e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d122      	bne.n	8006eee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d105      	bne.n	8006ee2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fbee 	bl	80086c4 <USB_CoreReset>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]
 8006eec:	e01a      	b.n	8006f24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fbe2 	bl	80086c4 <USB_CoreReset>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
 8006f16:	e005      	b.n	8006f24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d10b      	bne.n	8006f42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f043 0206 	orr.w	r2, r3, #6
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f4e:	b004      	add	sp, #16
 8006f50:	4770      	bx	lr
	...

08006f54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d165      	bne.n	8007034 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a41      	ldr	r2, [pc, #260]	; (8007070 <USB_SetTurnaroundTime+0x11c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d906      	bls.n	8006f7e <USB_SetTurnaroundTime+0x2a>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a40      	ldr	r2, [pc, #256]	; (8007074 <USB_SetTurnaroundTime+0x120>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d202      	bcs.n	8006f7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f78:	230f      	movs	r3, #15
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e062      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a3c      	ldr	r2, [pc, #240]	; (8007074 <USB_SetTurnaroundTime+0x120>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d306      	bcc.n	8006f94 <USB_SetTurnaroundTime+0x40>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a3b      	ldr	r2, [pc, #236]	; (8007078 <USB_SetTurnaroundTime+0x124>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d202      	bcs.n	8006f94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f8e:	230e      	movs	r3, #14
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e057      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a38      	ldr	r2, [pc, #224]	; (8007078 <USB_SetTurnaroundTime+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d306      	bcc.n	8006faa <USB_SetTurnaroundTime+0x56>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a37      	ldr	r2, [pc, #220]	; (800707c <USB_SetTurnaroundTime+0x128>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d202      	bcs.n	8006faa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fa4:	230d      	movs	r3, #13
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e04c      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a33      	ldr	r2, [pc, #204]	; (800707c <USB_SetTurnaroundTime+0x128>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d306      	bcc.n	8006fc0 <USB_SetTurnaroundTime+0x6c>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a32      	ldr	r2, [pc, #200]	; (8007080 <USB_SetTurnaroundTime+0x12c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d802      	bhi.n	8006fc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fba:	230c      	movs	r3, #12
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e041      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a2f      	ldr	r2, [pc, #188]	; (8007080 <USB_SetTurnaroundTime+0x12c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d906      	bls.n	8006fd6 <USB_SetTurnaroundTime+0x82>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a2e      	ldr	r2, [pc, #184]	; (8007084 <USB_SetTurnaroundTime+0x130>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d802      	bhi.n	8006fd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fd0:	230b      	movs	r3, #11
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e036      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <USB_SetTurnaroundTime+0x130>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d906      	bls.n	8006fec <USB_SetTurnaroundTime+0x98>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <USB_SetTurnaroundTime+0x134>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d802      	bhi.n	8006fec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e02b      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a26      	ldr	r2, [pc, #152]	; (8007088 <USB_SetTurnaroundTime+0x134>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d906      	bls.n	8007002 <USB_SetTurnaroundTime+0xae>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a25      	ldr	r2, [pc, #148]	; (800708c <USB_SetTurnaroundTime+0x138>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d202      	bcs.n	8007002 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ffc:	2309      	movs	r3, #9
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e020      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4a21      	ldr	r2, [pc, #132]	; (800708c <USB_SetTurnaroundTime+0x138>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d306      	bcc.n	8007018 <USB_SetTurnaroundTime+0xc4>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4a20      	ldr	r2, [pc, #128]	; (8007090 <USB_SetTurnaroundTime+0x13c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d802      	bhi.n	8007018 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007012:	2308      	movs	r3, #8
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e015      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <USB_SetTurnaroundTime+0x13c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d906      	bls.n	800702e <USB_SetTurnaroundTime+0xda>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <USB_SetTurnaroundTime+0x140>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d202      	bcs.n	800702e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007028:	2307      	movs	r3, #7
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e00a      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800702e:	2306      	movs	r3, #6
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e007      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800703a:	2309      	movs	r3, #9
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	e001      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007040:	2309      	movs	r3, #9
 8007042:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800705c:	431a      	orrs	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	00d8acbf 	.word	0x00d8acbf
 8007074:	00e4e1c0 	.word	0x00e4e1c0
 8007078:	00f42400 	.word	0x00f42400
 800707c:	01067380 	.word	0x01067380
 8007080:	011a499f 	.word	0x011a499f
 8007084:	01312cff 	.word	0x01312cff
 8007088:	014ca43f 	.word	0x014ca43f
 800708c:	016e3600 	.word	0x016e3600
 8007090:	01a6ab1f 	.word	0x01a6ab1f
 8007094:	01e84800 	.word	0x01e84800

08007098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f043 0201 	orr.w	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d115      	bne.n	800712a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800710a:	2001      	movs	r0, #1
 800710c:	f7fa f96c 	bl	80013e8 <HAL_Delay>
      ms++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fa45 	bl	80085a6 <USB_GetMode>
 800711c:	4603      	mov	r3, r0
 800711e:	2b01      	cmp	r3, #1
 8007120:	d01e      	beq.n	8007160 <USB_SetCurrentMode+0x84>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b31      	cmp	r3, #49	; 0x31
 8007126:	d9f0      	bls.n	800710a <USB_SetCurrentMode+0x2e>
 8007128:	e01a      	b.n	8007160 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d115      	bne.n	800715c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800713c:	2001      	movs	r0, #1
 800713e:	f7fa f953 	bl	80013e8 <HAL_Delay>
      ms++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fa2c 	bl	80085a6 <USB_GetMode>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <USB_SetCurrentMode+0x84>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b31      	cmp	r3, #49	; 0x31
 8007158:	d9f0      	bls.n	800713c <USB_SetCurrentMode+0x60>
 800715a:	e001      	b.n	8007160 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e005      	b.n	800716c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b32      	cmp	r3, #50	; 0x32
 8007164:	d101      	bne.n	800716a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007174:	b084      	sub	sp, #16
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e009      	b.n	80071a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	3340      	adds	r3, #64	; 0x40
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3301      	adds	r3, #1
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b0e      	cmp	r3, #14
 80071ac:	d9f2      	bls.n	8007194 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d11c      	bne.n	80071ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c2:	f043 0302 	orr.w	r3, r3, #2
 80071c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
 80071ec:	e00b      	b.n	8007206 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800720c:	461a      	mov	r2, r3
 800720e:	2300      	movs	r3, #0
 8007210:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007218:	4619      	mov	r1, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007220:	461a      	mov	r2, r3
 8007222:	680b      	ldr	r3, [r1, #0]
 8007224:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10c      	bne.n	8007246 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007232:	2100      	movs	r1, #0
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f965 	bl	8007504 <USB_SetDevSpeed>
 800723a:	e008      	b.n	800724e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800723c:	2101      	movs	r1, #1
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f960 	bl	8007504 <USB_SetDevSpeed>
 8007244:	e003      	b.n	800724e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007246:	2103      	movs	r1, #3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f95b 	bl	8007504 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800724e:	2110      	movs	r1, #16
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f8f3 	bl	800743c <USB_FlushTxFifo>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f91f 	bl	80074a4 <USB_FlushRxFifo>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	461a      	mov	r2, r3
 8007278:	2300      	movs	r3, #0
 800727a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	461a      	mov	r2, r3
 8007284:	2300      	movs	r3, #0
 8007286:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728e:	461a      	mov	r2, r3
 8007290:	2300      	movs	r3, #0
 8007292:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	e043      	b.n	8007322 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072b0:	d118      	bne.n	80072e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	461a      	mov	r2, r3
 80072c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	e013      	b.n	80072f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	461a      	mov	r2, r3
 80072dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	e008      	b.n	80072f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	461a      	mov	r2, r3
 80072f2:	2300      	movs	r3, #0
 80072f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	461a      	mov	r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	461a      	mov	r2, r3
 8007316:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800731a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3301      	adds	r3, #1
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	429a      	cmp	r2, r3
 8007328:	d3b7      	bcc.n	800729a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e043      	b.n	80073b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007346:	d118      	bne.n	800737a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735a:	461a      	mov	r2, r3
 800735c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e013      	b.n	800738c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	461a      	mov	r2, r3
 8007372:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e008      	b.n	800738c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007386:	461a      	mov	r2, r3
 8007388:	2300      	movs	r3, #0
 800738a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	461a      	mov	r2, r3
 80073ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3301      	adds	r3, #1
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d3b7      	bcc.n	8007330 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d105      	bne.n	80073f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f043 0210 	orr.w	r2, r3, #16
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <USB_DevInit+0x2c4>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f043 0208 	orr.w	r2, r3, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d107      	bne.n	8007428 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007420:	f043 0304 	orr.w	r3, r3, #4
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007434:	b004      	add	sp, #16
 8007436:	4770      	bx	lr
 8007438:	803c3800 	.word	0x803c3800

0800743c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <USB_FlushTxFifo+0x64>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d901      	bls.n	800745c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e01b      	b.n	8007494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	daf2      	bge.n	800744a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	019b      	lsls	r3, r3, #6
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <USB_FlushTxFifo+0x64>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e006      	b.n	8007494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b20      	cmp	r3, #32
 8007490:	d0f0      	beq.n	8007474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	00030d40 	.word	0x00030d40

080074a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4a11      	ldr	r2, [pc, #68]	; (8007500 <USB_FlushRxFifo+0x5c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e018      	b.n	80074f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	daf2      	bge.n	80074b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2210      	movs	r2, #16
 80074d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a08      	ldr	r2, [pc, #32]	; (8007500 <USB_FlushRxFifo+0x5c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e006      	b.n	80074f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d0f0      	beq.n	80074d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	00030d40 	.word	0x00030d40

08007504 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007524:	4313      	orrs	r3, r2
 8007526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007536:	b480      	push	{r7}
 8007538:	b087      	sub	sp, #28
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0306 	and.w	r3, r3, #6
 800754e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
 800755a:	e00a      	b.n	8007572 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d002      	beq.n	8007568 <USB_GetDevSpeed+0x32>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b06      	cmp	r3, #6
 8007566:	d102      	bne.n	800756e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007568:	2302      	movs	r3, #2
 800756a:	75fb      	strb	r3, [r7, #23]
 800756c:	e001      	b.n	8007572 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800756e:	230f      	movs	r3, #15
 8007570:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
}
 8007574:	4618      	mov	r0, r3
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d13a      	bne.n	8007612 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	2101      	movs	r1, #1
 80075ae:	fa01 f303 	lsl.w	r3, r1, r3
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	68f9      	ldr	r1, [r7, #12]
 80075b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ba:	4313      	orrs	r3, r2
 80075bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d155      	bne.n	8007680 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	791b      	ldrb	r3, [r3, #4]
 80075ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	059b      	lsls	r3, r3, #22
 80075f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075f8:	4313      	orrs	r3, r2
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	e036      	b.n	8007680 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	f003 030f 	and.w	r3, r3, #15
 8007622:	2101      	movs	r1, #1
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	041b      	lsls	r3, r3, #16
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007630:	4313      	orrs	r3, r2
 8007632:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11a      	bne.n	8007680 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007666:	430b      	orrs	r3, r1
 8007668:	4313      	orrs	r3, r2
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800767e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d161      	bne.n	8007770 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c2:	d11f      	bne.n	8007704 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	0151      	lsls	r1, r2, #5
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	440a      	add	r2, r1
 80076fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007702:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	2101      	movs	r1, #1
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	b29b      	uxth	r3, r3
 800771c:	43db      	mvns	r3, r3
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007724:	4013      	ands	r3, r2
 8007726:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	43db      	mvns	r3, r3
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007748:	4013      	ands	r3, r2
 800774a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	0159      	lsls	r1, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	440b      	add	r3, r1
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	4619      	mov	r1, r3
 8007768:	4b35      	ldr	r3, [pc, #212]	; (8007840 <USB_DeactivateEndpoint+0x1b0>)
 800776a:	4013      	ands	r3, r2
 800776c:	600b      	str	r3, [r1, #0]
 800776e:	e060      	b.n	8007832 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007786:	d11f      	bne.n	80077c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	0151      	lsls	r1, r2, #5
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	440a      	add	r2, r1
 800779e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	2101      	movs	r1, #1
 80077da:	fa01 f303 	lsl.w	r3, r1, r3
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	43db      	mvns	r3, r3
 80077e2:	68f9      	ldr	r1, [r7, #12]
 80077e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e8:	4013      	ands	r3, r2
 80077ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	43db      	mvns	r3, r3
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780c:	4013      	ands	r3, r2
 800780e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	0159      	lsls	r1, r3, #5
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	440b      	add	r3, r1
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	4619      	mov	r1, r3
 800782c:	4b05      	ldr	r3, [pc, #20]	; (8007844 <USB_DeactivateEndpoint+0x1b4>)
 800782e:	4013      	ands	r3, r2
 8007830:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	ec337800 	.word	0xec337800
 8007844:	eff37800 	.word	0xeff37800

08007848 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af02      	add	r7, sp, #8
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	f040 815c 	bne.w	8007b22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d132      	bne.n	80078d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007890:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d0:	0cdb      	lsrs	r3, r3, #19
 80078d2:	04db      	lsls	r3, r3, #19
 80078d4:	6113      	str	r3, [r2, #16]
 80078d6:	e074      	b.n	80079c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	0cdb      	lsrs	r3, r3, #19
 80078f4:	04db      	lsls	r3, r3, #19
 80078f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007912:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007916:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800791a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6999      	ldr	r1, [r3, #24]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	440b      	add	r3, r1
 8007934:	1e59      	subs	r1, r3, #1
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	fbb1 f3f3 	udiv	r3, r1, r3
 800793e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007940:	4b9d      	ldr	r3, [pc, #628]	; (8007bb8 <USB_EPStartXfer+0x370>)
 8007942:	400b      	ands	r3, r1
 8007944:	69b9      	ldr	r1, [r7, #24]
 8007946:	0148      	lsls	r0, r1, #5
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	4401      	add	r1, r0
 800794c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007950:	4313      	orrs	r3, r2
 8007952:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800796a:	69b9      	ldr	r1, [r7, #24]
 800796c:	0148      	lsls	r0, r1, #5
 800796e:	69f9      	ldr	r1, [r7, #28]
 8007970:	4401      	add	r1, r0
 8007972:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007976:	4313      	orrs	r3, r2
 8007978:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	791b      	ldrb	r3, [r3, #4]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d11f      	bne.n	80079c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80079a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d14b      	bne.n	8007a60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	461a      	mov	r2, r3
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	791b      	ldrb	r3, [r3, #4]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d128      	bne.n	8007a3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d110      	bne.n	8007a1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e00f      	b.n	8007a3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e133      	b.n	8007cc8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	791b      	ldrb	r3, [r3, #4]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d015      	beq.n	8007ab4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 811b 	beq.w	8007cc8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa8:	69f9      	ldr	r1, [r7, #28]
 8007aaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	634b      	str	r3, [r1, #52]	; 0x34
 8007ab2:	e109      	b.n	8007cc8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d110      	bne.n	8007ae6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	e00f      	b.n	8007b06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6919      	ldr	r1, [r3, #16]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	b298      	uxth	r0, r3
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4603      	mov	r3, r0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fade 	bl	80080dc <USB_WritePacket>
 8007b20:	e0d2      	b.n	8007cc8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b3c:	0cdb      	lsrs	r3, r3, #19
 8007b3e:	04db      	lsls	r3, r3, #19
 8007b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d126      	bne.n	8007bbc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b84:	69b9      	ldr	r1, [r7, #24]
 8007b86:	0148      	lsls	r0, r1, #5
 8007b88:	69f9      	ldr	r1, [r7, #28]
 8007b8a:	4401      	add	r1, r0
 8007b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b90:	4313      	orrs	r3, r2
 8007b92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bb2:	6113      	str	r3, [r2, #16]
 8007bb4:	e03a      	b.n	8007c2c <USB_EPStartXfer+0x3e4>
 8007bb6:	bf00      	nop
 8007bb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	1e5a      	subs	r2, r3, #1
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	8afa      	ldrh	r2, [r7, #22]
 8007bd8:	fb03 f202 	mul.w	r2, r3, r2
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bec:	691a      	ldr	r2, [r3, #16]
 8007bee:	8afb      	ldrh	r3, [r7, #22]
 8007bf0:	04d9      	lsls	r1, r3, #19
 8007bf2:	4b38      	ldr	r3, [pc, #224]	; (8007cd4 <USB_EPStartXfer+0x48c>)
 8007bf4:	400b      	ands	r3, r1
 8007bf6:	69b9      	ldr	r1, [r7, #24]
 8007bf8:	0148      	lsls	r0, r1, #5
 8007bfa:	69f9      	ldr	r1, [r7, #28]
 8007bfc:	4401      	add	r1, r0
 8007bfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c02:	4313      	orrs	r3, r2
 8007c04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c1c:	69b9      	ldr	r1, [r7, #24]
 8007c1e:	0148      	lsls	r0, r1, #5
 8007c20:	69f9      	ldr	r1, [r7, #28]
 8007c22:	4401      	add	r1, r0
 8007c24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d10d      	bne.n	8007c4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6919      	ldr	r1, [r3, #16]
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	460a      	mov	r2, r1
 8007c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	791b      	ldrb	r3, [r3, #4]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d128      	bne.n	8007ca8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d110      	bne.n	8007c88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	e00f      	b.n	8007ca8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	1ff80000 	.word	0x1ff80000

08007cd8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	f040 80ce 	bne.w	8007e96 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d132      	bne.n	8007d68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d60:	0cdb      	lsrs	r3, r3, #19
 8007d62:	04db      	lsls	r3, r3, #19
 8007d64:	6113      	str	r3, [r2, #16]
 8007d66:	e04e      	b.n	8007e06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d82:	0cdb      	lsrs	r3, r3, #19
 8007d84:	04db      	lsls	r3, r3, #19
 8007d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007da6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007daa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	699a      	ldr	r2, [r3, #24]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d903      	bls.n	8007dc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	0151      	lsls	r1, r2, #5
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007df6:	6939      	ldr	r1, [r7, #16]
 8007df8:	0148      	lsls	r0, r1, #5
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	4401      	add	r1, r0
 8007dfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e02:	4313      	orrs	r3, r2
 8007e04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d11e      	bne.n	8007e4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e20:	461a      	mov	r2, r3
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	e097      	b.n	8007f7a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 8083 	beq.w	8007f7a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	2101      	movs	r1, #1
 8007e86:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8a:	6979      	ldr	r1, [r7, #20]
 8007e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e90:	4313      	orrs	r3, r2
 8007e92:	634b      	str	r3, [r1, #52]	; 0x34
 8007e94:	e071      	b.n	8007f7a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb0:	0cdb      	lsrs	r3, r3, #19
 8007eb2:	04db      	lsls	r3, r3, #19
 8007eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	0151      	lsls	r1, r2, #5
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	440a      	add	r2, r1
 8007ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ed4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ed8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f28:	6939      	ldr	r1, [r7, #16]
 8007f2a:	0148      	lsls	r0, r1, #5
 8007f2c:	6979      	ldr	r1, [r7, #20]
 8007f2e:	4401      	add	r1, r0
 8007f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f34:	4313      	orrs	r3, r2
 8007f36:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d10d      	bne.n	8007f5a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6919      	ldr	r1, [r3, #16]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	460a      	mov	r2, r1
 8007f58:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d14a      	bne.n	800803c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fbe:	f040 8086 	bne.w	80080ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	7812      	ldrb	r2, [r2, #0]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fe4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008008:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f242 7210 	movw	r2, #10000	; 0x2710
 8008016:	4293      	cmp	r3, r2
 8008018:	d902      	bls.n	8008020 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]
          break;
 800801e:	e056      	b.n	80080ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008038:	d0e7      	beq.n	800800a <USB_EPStopXfer+0x82>
 800803a:	e048      	b.n	80080ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008054:	d13b      	bne.n	80080ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	440a      	add	r2, r1
 8008070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008074:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008078:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800809c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d902      	bls.n	80080b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	75fb      	strb	r3, [r7, #23]
          break;
 80080b2:	e00c      	b.n	80080ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080cc:	d0e7      	beq.n	800809e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080dc:	b480      	push	{r7}
 80080de:	b089      	sub	sp, #36	; 0x24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4611      	mov	r1, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	460b      	mov	r3, r1
 80080ec:	71fb      	strb	r3, [r7, #7]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d123      	bne.n	800814a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008102:	88bb      	ldrh	r3, [r7, #4]
 8008104:	3303      	adds	r3, #3
 8008106:	089b      	lsrs	r3, r3, #2
 8008108:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800810a:	2300      	movs	r3, #0
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	e018      	b.n	8008142 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	031a      	lsls	r2, r3, #12
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	4413      	add	r3, r2
 8008118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811c:	461a      	mov	r2, r3
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	3301      	adds	r3, #1
 8008134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3301      	adds	r3, #1
 800813a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	3301      	adds	r3, #1
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	429a      	cmp	r2, r3
 8008148:	d3e2      	bcc.n	8008110 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3724      	adds	r7, #36	; 0x24
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008158:	b480      	push	{r7}
 800815a:	b08b      	sub	sp, #44	; 0x2c
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800816e:	88fb      	ldrh	r3, [r7, #6]
 8008170:	089b      	lsrs	r3, r3, #2
 8008172:	b29b      	uxth	r3, r3
 8008174:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008176:	88fb      	ldrh	r3, [r7, #6]
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800817e:	2300      	movs	r3, #0
 8008180:	623b      	str	r3, [r7, #32]
 8008182:	e014      	b.n	80081ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	3301      	adds	r3, #1
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	3301      	adds	r3, #1
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	3301      	adds	r3, #1
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	3301      	adds	r3, #1
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	3301      	adds	r3, #1
 80081ac:	623b      	str	r3, [r7, #32]
 80081ae:	6a3a      	ldr	r2, [r7, #32]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d3e6      	bcc.n	8008184 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081b6:	8bfb      	ldrh	r3, [r7, #30]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01e      	beq.n	80081fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	461a      	mov	r2, r3
 80081c8:	f107 0310 	add.w	r3, r7, #16
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	701a      	strb	r2, [r3, #0]
      i++;
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	3301      	adds	r3, #1
 80081e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	3301      	adds	r3, #1
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081ee:	8bfb      	ldrh	r3, [r7, #30]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081f4:	8bfb      	ldrh	r3, [r7, #30]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1ea      	bne.n	80081d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	372c      	adds	r7, #44	; 0x2c
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d12c      	bne.n	800827e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	db12      	blt.n	800825c <USB_EPSetStall+0x54>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00f      	beq.n	800825c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800825a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	440a      	add	r2, r1
 8008272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	e02b      	b.n	80082d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	db12      	blt.n	80082b6 <USB_EPSetStall+0xae>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00f      	beq.n	80082b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d128      	bne.n	8008352 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800831e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	791b      	ldrb	r3, [r3, #4]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d003      	beq.n	8008330 <USB_EPClearStall+0x4c>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	791b      	ldrb	r3, [r3, #4]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d138      	bne.n	80083a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	440a      	add	r2, r1
 8008346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	e027      	b.n	80083a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008370:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	791b      	ldrb	r3, [r3, #4]
 8008376:	2b03      	cmp	r3, #3
 8008378:	d003      	beq.n	8008382 <USB_EPClearStall+0x9e>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d10f      	bne.n	80083a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	0151      	lsls	r1, r2, #5
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	440a      	add	r2, r1
 8008398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083e4:	68f9      	ldr	r1, [r7, #12]
 80083e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ea:	4313      	orrs	r3, r2
 80083ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008416:	f023 0303 	bic.w	r3, r3, #3
 800841a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800842a:	f023 0302 	bic.w	r3, r3, #2
 800842e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4013      	ands	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	4013      	ands	r3, r2
 80084c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	0c1b      	lsrs	r3, r3, #16
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	4013      	ands	r3, r2
 80084fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	b29b      	uxth	r3, r3
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	4013      	ands	r3, r2
 800853a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800853c:	68bb      	ldr	r3, [r7, #8]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	fa22 f303 	lsr.w	r3, r2, r3
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	b2db      	uxtb	r3, r3
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4013      	ands	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008598:	68bb      	ldr	r3, [r7, #8]
}
 800859a:	4618      	mov	r0, r3
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f003 0301 	and.w	r3, r3, #1
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085e0:	f023 0307 	bic.w	r3, r3, #7
 80085e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	460b      	mov	r3, r1
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	333c      	adds	r3, #60	; 0x3c
 800861e:	3304      	adds	r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4a26      	ldr	r2, [pc, #152]	; (80086c0 <USB_EP0_OutStart+0xb8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d90a      	bls.n	8008642 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800863c:	d101      	bne.n	8008642 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e037      	b.n	80086b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	461a      	mov	r2, r3
 800864a:	2300      	movs	r3, #0
 800864c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008670:	f043 0318 	orr.w	r3, r3, #24
 8008674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008684:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008688:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d10f      	bne.n	80086b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	4f54300a 	.word	0x4f54300a

080086c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4a13      	ldr	r2, [pc, #76]	; (8008728 <USB_CoreReset+0x64>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d901      	bls.n	80086e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e01b      	b.n	800871a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	daf2      	bge.n	80086d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f043 0201 	orr.w	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a09      	ldr	r2, [pc, #36]	; (8008728 <USB_CoreReset+0x64>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d901      	bls.n	800870c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e006      	b.n	800871a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b01      	cmp	r3, #1
 8008716:	d0f0      	beq.n	80086fa <USB_CoreReset+0x36>

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	00030d40 	.word	0x00030d40

0800872c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008738:	2010      	movs	r0, #16
 800873a:	f002 f937 	bl	800a9ac <USBD_static_malloc>
 800873e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	32b0      	adds	r2, #176	; 0xb0
 8008750:	2100      	movs	r1, #0
 8008752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008756:	2302      	movs	r3, #2
 8008758:	e048      	b.n	80087ec <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	32b0      	adds	r2, #176	; 0xb0
 8008764:	68f9      	ldr	r1, [r7, #12]
 8008766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	32b0      	adds	r2, #176	; 0xb0
 8008774:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7c1b      	ldrb	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10d      	bne.n	80087a2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008786:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <USBD_HID_Init+0xc8>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	f003 020f 	and.w	r2, r3, #15
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	3326      	adds	r3, #38	; 0x26
 800879c:	2207      	movs	r2, #7
 800879e:	801a      	strh	r2, [r3, #0]
 80087a0:	e00c      	b.n	80087bc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <USBD_HID_Init+0xc8>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	f003 020f 	and.w	r2, r3, #15
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	3326      	adds	r3, #38	; 0x26
 80087b8:	220a      	movs	r2, #10
 80087ba:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <USBD_HID_Init+0xc8>)
 80087be:	7819      	ldrb	r1, [r3, #0]
 80087c0:	2304      	movs	r3, #4
 80087c2:	2203      	movs	r2, #3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 ffe0 	bl	800a78a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <USBD_HID_Init+0xc8>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f003 020f 	and.w	r2, r3, #15
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	3324      	adds	r3, #36	; 0x24
 80087e0:	2201      	movs	r2, #1
 80087e2:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200000cb 	.word	0x200000cb

080087f8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008804:	4b1f      	ldr	r3, [pc, #124]	; (8008884 <USBD_HID_DeInit+0x8c>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 ffe3 	bl	800a7d6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008810:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <USBD_HID_DeInit+0x8c>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f003 020f 	and.w	r2, r3, #15
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	440b      	add	r3, r1
 8008824:	3324      	adds	r3, #36	; 0x24
 8008826:	2200      	movs	r2, #0
 8008828:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800882a:	4b16      	ldr	r3, [pc, #88]	; (8008884 <USBD_HID_DeInit+0x8c>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 020f 	and.w	r2, r3, #15
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	3326      	adds	r3, #38	; 0x26
 8008840:	2200      	movs	r2, #0
 8008842:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32b0      	adds	r2, #176	; 0xb0
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d011      	beq.n	800887a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	32b0      	adds	r2, #176	; 0xb0
 8008860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008864:	4618      	mov	r0, r3
 8008866:	f002 f8af 	bl	800a9c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	32b0      	adds	r2, #176	; 0xb0
 8008874:	2100      	movs	r1, #0
 8008876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200000cb 	.word	0x200000cb

08008888 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	32b0      	adds	r2, #176	; 0xb0
 800889c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e0e8      	b.n	8008a86 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d046      	beq.n	800894e <USBD_HID_Setup+0xc6>
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	f040 80d8 	bne.w	8008a76 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	3b02      	subs	r3, #2
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d836      	bhi.n	800893e <USBD_HID_Setup+0xb6>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <USBD_HID_Setup+0x50>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	0800892f 	.word	0x0800892f
 80088dc:	0800890f 	.word	0x0800890f
 80088e0:	0800893f 	.word	0x0800893f
 80088e4:	0800893f 	.word	0x0800893f
 80088e8:	0800893f 	.word	0x0800893f
 80088ec:	0800893f 	.word	0x0800893f
 80088f0:	0800893f 	.word	0x0800893f
 80088f4:	0800893f 	.word	0x0800893f
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	08008901 	.word	0x08008901
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	885b      	ldrh	r3, [r3, #2]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	461a      	mov	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	601a      	str	r2, [r3, #0]
          break;
 800890c:	e01e      	b.n	800894c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fbf1 	bl	800a0fc <USBD_CtlSendData>
          break;
 800891a:	e017      	b.n	800894c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	885b      	ldrh	r3, [r3, #2]
 8008920:	0a1b      	lsrs	r3, r3, #8
 8008922:	b29b      	uxth	r3, r3
 8008924:	b2db      	uxtb	r3, r3
 8008926:	461a      	mov	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	605a      	str	r2, [r3, #4]
          break;
 800892c:	e00e      	b.n	800894c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3304      	adds	r3, #4
 8008932:	2201      	movs	r2, #1
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 fbe0 	bl	800a0fc <USBD_CtlSendData>
          break;
 800893c:	e006      	b.n	800894c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 fb6a 	bl	800a01a <USBD_CtlError>
          ret = USBD_FAIL;
 8008946:	2303      	movs	r3, #3
 8008948:	75fb      	strb	r3, [r7, #23]
          break;
 800894a:	bf00      	nop
      }
      break;
 800894c:	e09a      	b.n	8008a84 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	785b      	ldrb	r3, [r3, #1]
 8008952:	2b0b      	cmp	r3, #11
 8008954:	f200 8086 	bhi.w	8008a64 <USBD_HID_Setup+0x1dc>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USBD_HID_Setup+0xd8>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008991 	.word	0x08008991
 8008964:	08008a73 	.word	0x08008a73
 8008968:	08008a65 	.word	0x08008a65
 800896c:	08008a65 	.word	0x08008a65
 8008970:	08008a65 	.word	0x08008a65
 8008974:	08008a65 	.word	0x08008a65
 8008978:	080089bb 	.word	0x080089bb
 800897c:	08008a65 	.word	0x08008a65
 8008980:	08008a65 	.word	0x08008a65
 8008984:	08008a65 	.word	0x08008a65
 8008988:	08008a13 	.word	0x08008a13
 800898c:	08008a3d 	.word	0x08008a3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b03      	cmp	r3, #3
 800899a:	d107      	bne.n	80089ac <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800899c:	f107 030a 	add.w	r3, r7, #10
 80089a0:	2202      	movs	r2, #2
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 fba9 	bl	800a0fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089aa:	e063      	b.n	8008a74 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fb33 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          break;
 80089b8:	e05c      	b.n	8008a74 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	885b      	ldrh	r3, [r3, #2]
 80089be:	0a1b      	lsrs	r3, r3, #8
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b22      	cmp	r3, #34	; 0x22
 80089c4:	d108      	bne.n	80089d8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	88db      	ldrh	r3, [r3, #6]
 80089ca:	2b3f      	cmp	r3, #63	; 0x3f
 80089cc:	bf28      	it	cs
 80089ce:	233f      	movcs	r3, #63	; 0x3f
 80089d0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80089d2:	4b2f      	ldr	r3, [pc, #188]	; (8008a90 <USBD_HID_Setup+0x208>)
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	e015      	b.n	8008a04 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	0a1b      	lsrs	r3, r3, #8
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b21      	cmp	r3, #33	; 0x21
 80089e2:	d108      	bne.n	80089f6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80089e4:	4b2b      	ldr	r3, [pc, #172]	; (8008a94 <USBD_HID_Setup+0x20c>)
 80089e6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	88db      	ldrh	r3, [r3, #6]
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	bf28      	it	cs
 80089f0:	2309      	movcs	r3, #9
 80089f2:	82bb      	strh	r3, [r7, #20]
 80089f4:	e006      	b.n	8008a04 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 fb0e 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 80089fe:	2303      	movs	r3, #3
 8008a00:	75fb      	strb	r3, [r7, #23]
            break;
 8008a02:	e037      	b.n	8008a74 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a04:	8abb      	ldrh	r3, [r7, #20]
 8008a06:	461a      	mov	r2, r3
 8008a08:	6939      	ldr	r1, [r7, #16]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fb76 	bl	800a0fc <USBD_CtlSendData>
          break;
 8008a10:	e030      	b.n	8008a74 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d107      	bne.n	8008a2e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3308      	adds	r3, #8
 8008a22:	2201      	movs	r2, #1
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 fb68 	bl	800a0fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a2c:	e022      	b.n	8008a74 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 faf2 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a36:	2303      	movs	r3, #3
 8008a38:	75fb      	strb	r3, [r7, #23]
          break;
 8008a3a:	e01b      	b.n	8008a74 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d106      	bne.n	8008a56 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a54:	e00e      	b.n	8008a74 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 fade 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	75fb      	strb	r3, [r7, #23]
          break;
 8008a62:	e007      	b.n	8008a74 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fad7 	bl	800a01a <USBD_CtlError>
          ret = USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008a70:	e000      	b.n	8008a74 <USBD_HID_Setup+0x1ec>
          break;
 8008a72:	bf00      	nop
      }
      break;
 8008a74:	e006      	b.n	8008a84 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 face 	bl	800a01a <USBD_CtlError>
      ret = USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	75fb      	strb	r3, [r7, #23]
      break;
 8008a82:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	2000008c 	.word	0x2000008c
 8008a94:	20000074 	.word	0x20000074

08008a98 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	32b0      	adds	r2, #176	; 0xb0
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e014      	b.n	8008aea <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d10d      	bne.n	8008ae8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	7b1b      	ldrb	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d109      	bne.n	8008ae8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008ada:	4b06      	ldr	r3, [pc, #24]	; (8008af4 <USBD_HID_SendReport+0x5c>)
 8008adc:	7819      	ldrb	r1, [r3, #0]
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f001 ff1f 	bl	800a926 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	200000cb 	.word	0x200000cb

08008af8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008b00:	2181      	movs	r1, #129	; 0x81
 8008b02:	4809      	ldr	r0, [pc, #36]	; (8008b28 <USBD_HID_GetFSCfgDesc+0x30>)
 8008b04:	f000 fc51 	bl	80093aa <USBD_GetEpDesc>
 8008b08:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	220a      	movs	r2, #10
 8008b14:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2222      	movs	r2, #34	; 0x22
 8008b1a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008b1c:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000050 	.word	0x20000050

08008b2c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008b34:	2181      	movs	r1, #129	; 0x81
 8008b36:	4809      	ldr	r0, [pc, #36]	; (8008b5c <USBD_HID_GetHSCfgDesc+0x30>)
 8008b38:	f000 fc37 	bl	80093aa <USBD_GetEpDesc>
 8008b3c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2207      	movs	r2, #7
 8008b48:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2222      	movs	r2, #34	; 0x22
 8008b4e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000050 	.word	0x20000050

08008b60 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008b68:	2181      	movs	r1, #129	; 0x81
 8008b6a:	4809      	ldr	r0, [pc, #36]	; (8008b90 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008b6c:	f000 fc1d 	bl	80093aa <USBD_GetEpDesc>
 8008b70:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	220a      	movs	r2, #10
 8008b7c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2222      	movs	r2, #34	; 0x22
 8008b82:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000050 	.word	0x20000050

08008b94 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	32b0      	adds	r2, #176	; 0xb0
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	220a      	movs	r2, #10
 8008bcc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	20000080 	.word	0x20000080

08008be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008bf4:	4817      	ldr	r0, [pc, #92]	; (8008c54 <USBD_Init+0x74>)
 8008bf6:	f001 ff4f 	bl	800aa98 <iprintf>
 8008bfa:	4817      	ldr	r0, [pc, #92]	; (8008c58 <USBD_Init+0x78>)
 8008bfc:	f001 ff4c 	bl	800aa98 <iprintf>
 8008c00:	200a      	movs	r0, #10
 8008c02:	f001 ff61 	bl	800aac8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e01f      	b.n	8008c4a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	79fa      	ldrb	r2, [r7, #7]
 8008c3c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f001 fd3c 	bl	800a6bc <USBD_LL_Init>
 8008c44:	4603      	mov	r3, r0
 8008c46:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	0800ba8c 	.word	0x0800ba8c
 8008c58:	0800ba94 	.word	0x0800ba94

08008c5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8008c70:	481a      	ldr	r0, [pc, #104]	; (8008cdc <USBD_RegisterClass+0x80>)
 8008c72:	f001 ff11 	bl	800aa98 <iprintf>
 8008c76:	481a      	ldr	r0, [pc, #104]	; (8008ce0 <USBD_RegisterClass+0x84>)
 8008c78:	f001 ff0e 	bl	800aa98 <iprintf>
 8008c7c:	200a      	movs	r0, #10
 8008c7e:	f001 ff23 	bl	800aac8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e025      	b.n	8008cd2 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	32ae      	adds	r2, #174	; 0xae
 8008c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00f      	beq.n	8008cc2 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	32ae      	adds	r2, #174	; 0xae
 8008cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	f107 020e 	add.w	r2, r7, #14
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4798      	blx	r3
 8008cba:	4602      	mov	r2, r0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	0800ba8c 	.word	0x0800ba8c
 8008ce0:	0800baac 	.word	0x0800baac

08008ce4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fd31 	bl	800a754 <USBD_LL_Start>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 f908 	bl	8009fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d01a      	beq.n	8008df0 <USBD_LL_SetupStage+0x72>
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d822      	bhi.n	8008e04 <USBD_LL_SetupStage+0x86>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <USBD_LL_SetupStage+0x4a>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d00a      	beq.n	8008ddc <USBD_LL_SetupStage+0x5e>
 8008dc6:	e01d      	b.n	8008e04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fb5f 	bl	8009494 <USBD_StdDevReq>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dda:	e020      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fbc7 	bl	8009578 <USBD_StdItfReq>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]
      break;
 8008dee:	e016      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc29 	bl	8009650 <USBD_StdEPReq>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
      break;
 8008e02:	e00c      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fcfe 	bl	800a814 <USBD_LL_StallEP>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1c:	bf00      	nop
  }

  return ret;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	460b      	mov	r3, r1
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d16e      	bne.n	8008f1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	f040 8098 	bne.w	8008f84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d913      	bls.n	8008e88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	1ad2      	subs	r2, r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bf28      	it	cs
 8008e7a:	4613      	movcs	r3, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f001 f967 	bl	800a154 <USBD_CtlContinueRx>
 8008e86:	e07d      	b.n	8008f84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e8e:	f003 031f 	and.w	r3, r3, #31
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d014      	beq.n	8008ec0 <USBD_LL_DataOutStage+0x98>
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d81d      	bhi.n	8008ed6 <USBD_LL_DataOutStage+0xae>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x7c>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d003      	beq.n	8008eaa <USBD_LL_DataOutStage+0x82>
 8008ea2:	e018      	b.n	8008ed6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea8:	e018      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fa5e 	bl	8009376 <USBD_CoreFindIF>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ebe:	e00d      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fa60 	bl	8009390 <USBD_CoreFindEP>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ed4:	e002      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d119      	bne.n	8008f16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d113      	bne.n	8008f16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eee:	7dba      	ldrb	r2, [r7, #22]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	32ae      	adds	r2, #174	; 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008efe:	7dba      	ldrb	r2, [r7, #22]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f06:	7dba      	ldrb	r2, [r7, #22]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	32ae      	adds	r2, #174	; 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 f92d 	bl	800a176 <USBD_CtlSendStatus>
 8008f1c:	e032      	b.n	8008f84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fa31 	bl	8009390 <USBD_CoreFindEP>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f32:	7dbb      	ldrb	r3, [r7, #22]
 8008f34:	2bff      	cmp	r3, #255	; 0xff
 8008f36:	d025      	beq.n	8008f84 <USBD_LL_DataOutStage+0x15c>
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d122      	bne.n	8008f84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d117      	bne.n	8008f7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f4a:	7dba      	ldrb	r2, [r7, #22]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	32ae      	adds	r2, #174	; 0xae
 8008f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00f      	beq.n	8008f7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f5a:	7dba      	ldrb	r2, [r7, #22]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f62:	7dba      	ldrb	r2, [r7, #22]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	32ae      	adds	r2, #174	; 0xae
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	7afa      	ldrb	r2, [r7, #11]
 8008f70:	4611      	mov	r1, r2
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	e000      	b.n	8008f86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	460b      	mov	r3, r1
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d16f      	bne.n	8009082 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d15a      	bne.n	8009068 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d914      	bls.n	8008fe8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f001 f8ac 	bl	800a132 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fcc1 	bl	800a968 <USBD_LL_PrepareReceive>
 8008fe6:	e03f      	b.n	8009068 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d11c      	bne.n	800902e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d316      	bcc.n	800902e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800900a:	429a      	cmp	r2, r3
 800900c:	d20f      	bcs.n	800902e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f001 f88d 	bl	800a132 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f001 fc9e 	bl	800a968 <USBD_LL_PrepareReceive>
 800902c:	e01c      	b.n	8009068 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d10f      	bne.n	800905a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d009      	beq.n	800905a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800905a:	2180      	movs	r1, #128	; 0x80
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f001 fbd9 	bl	800a814 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f001 f89a 	bl	800a19c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d03a      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fe42 	bl	8008cfc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009080:	e032      	b.n	80090e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f97f 	bl	8009390 <USBD_CoreFindEP>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2bff      	cmp	r3, #255	; 0xff
 800909a:	d025      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d122      	bne.n	80090e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d11c      	bne.n	80090e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090ae:	7dfa      	ldrb	r2, [r7, #23]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	32ae      	adds	r2, #174	; 0xae
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d014      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090be:	7dfa      	ldrb	r2, [r7, #23]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090c6:	7dfa      	ldrb	r2, [r7, #23]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	32ae      	adds	r2, #174	; 0xae
 80090cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	7afa      	ldrb	r2, [r7, #11]
 80090d4:	4611      	mov	r1, r2
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	4798      	blx	r3
 80090da:	4603      	mov	r3, r0
 80090dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090de:	7dbb      	ldrb	r3, [r7, #22]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090e4:	7dbb      	ldrb	r3, [r7, #22]
 80090e6:	e000      	b.n	80090ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00e      	beq.n	8009158 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6852      	ldr	r2, [r2, #4]
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	4611      	mov	r1, r2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fb13 	bl	800a78a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2240      	movs	r2, #64	; 0x40
 8009170:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	2200      	movs	r2, #0
 8009178:	2180      	movs	r1, #128	; 0x80
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fb05 	bl	800a78a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2240      	movs	r2, #64	; 0x40
 800918a:	621a      	str	r2, [r3, #32]

  return ret;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2204      	movs	r2, #4
 80091d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d106      	bne.n	8009204 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b03      	cmp	r3, #3
 8009224:	d110      	bne.n	8009248 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	32ae      	adds	r2, #174	; 0xae
 8009268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e01c      	b.n	80092ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b03      	cmp	r3, #3
 800927e:	d115      	bne.n	80092ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32ae      	adds	r2, #174	; 0xae
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	32ae      	adds	r2, #174	; 0xae
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	4611      	mov	r1, r2
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	32ae      	adds	r2, #174	; 0xae
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e01c      	b.n	8009312 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d115      	bne.n	8009310 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	32ae      	adds	r2, #174	; 0xae
 80092ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	32ae      	adds	r2, #174	; 0xae
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	4611      	mov	r1, r2
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00e      	beq.n	800936c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	6852      	ldr	r2, [r2, #4]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	4611      	mov	r1, r2
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009368:	2303      	movs	r3, #3
 800936a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009382:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009384:	4618      	mov	r0, r3
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800939c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	885b      	ldrh	r3, [r3, #2]
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d920      	bls.n	8009414 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093da:	e013      	b.n	8009404 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093dc:	f107 030a 	add.w	r3, r7, #10
 80093e0:	4619      	mov	r1, r3
 80093e2:	6978      	ldr	r0, [r7, #20]
 80093e4:	f000 f81b 	bl	800941e <USBD_GetNextDesc>
 80093e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	d108      	bne.n	8009404 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	789b      	ldrb	r3, [r3, #2]
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d008      	beq.n	8009412 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009400:	2300      	movs	r3, #0
 8009402:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	b29a      	uxth	r2, r3
 800940a:	897b      	ldrh	r3, [r7, #10]
 800940c:	429a      	cmp	r2, r3
 800940e:	d8e5      	bhi.n	80093dc <USBD_GetEpDesc+0x32>
 8009410:	e000      	b.n	8009414 <USBD_GetEpDesc+0x6a>
          break;
 8009412:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009414:	693b      	ldr	r3, [r7, #16]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	881a      	ldrh	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800944a:	68fb      	ldr	r3, [r7, #12]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	3301      	adds	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009476:	8a3b      	ldrh	r3, [r7, #16]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	b21a      	sxth	r2, r3
 800947c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009480:	4313      	orrs	r3, r2
 8009482:	b21b      	sxth	r3, r3
 8009484:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009486:	89fb      	ldrh	r3, [r7, #14]
}
 8009488:	4618      	mov	r0, r3
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d005      	beq.n	80094ba <USBD_StdDevReq+0x26>
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d857      	bhi.n	8009562 <USBD_StdDevReq+0xce>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00f      	beq.n	80094d6 <USBD_StdDevReq+0x42>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d153      	bne.n	8009562 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32ae      	adds	r2, #174	; 0xae
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	4798      	blx	r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
      break;
 80094d4:	e04a      	b.n	800956c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b09      	cmp	r3, #9
 80094dc:	d83b      	bhi.n	8009556 <USBD_StdDevReq+0xc2>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <USBD_StdDevReq+0x50>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009539 	.word	0x08009539
 80094e8:	0800954d 	.word	0x0800954d
 80094ec:	08009557 	.word	0x08009557
 80094f0:	08009543 	.word	0x08009543
 80094f4:	08009557 	.word	0x08009557
 80094f8:	08009517 	.word	0x08009517
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	08009557 	.word	0x08009557
 8009504:	0800952f 	.word	0x0800952f
 8009508:	08009521 	.word	0x08009521
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa3c 	bl	800998c <USBD_GetDescriptor>
          break;
 8009514:	e024      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fba1 	bl	8009c60 <USBD_SetAddress>
          break;
 800951e:	e01f      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fbe0 	bl	8009ce8 <USBD_SetConfig>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
          break;
 800952c:	e018      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fc83 	bl	8009e3c <USBD_GetConfig>
          break;
 8009536:	e013      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fcb4 	bl	8009ea8 <USBD_GetStatus>
          break;
 8009540:	e00e      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fce3 	bl	8009f10 <USBD_SetFeature>
          break;
 800954a:	e009      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fd07 	bl	8009f62 <USBD_ClrFeature>
          break;
 8009554:	e004      	b.n	8009560 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fd5e 	bl	800a01a <USBD_CtlError>
          break;
 800955e:	bf00      	nop
      }
      break;
 8009560:	e004      	b.n	800956c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fd58 	bl	800a01a <USBD_CtlError>
      break;
 800956a:	bf00      	nop
  }

  return ret;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d005      	beq.n	800959e <USBD_StdItfReq+0x26>
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d852      	bhi.n	800963c <USBD_StdItfReq+0xc4>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <USBD_StdItfReq+0x26>
 800959a:	2b20      	cmp	r3, #32
 800959c:	d14e      	bne.n	800963c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d840      	bhi.n	800962e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	889b      	ldrh	r3, [r3, #4]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d836      	bhi.n	8009624 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff fed9 	bl	8009376 <USBD_CoreFindIF>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2bff      	cmp	r3, #255	; 0xff
 80095cc:	d01d      	beq.n	800960a <USBD_StdItfReq+0x92>
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d11a      	bne.n	800960a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095d4:	7bba      	ldrb	r2, [r7, #14]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	32ae      	adds	r2, #174	; 0xae
 80095da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00f      	beq.n	8009604 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095e4:	7bba      	ldrb	r2, [r7, #14]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095ec:	7bba      	ldrb	r2, [r7, #14]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	32ae      	adds	r2, #174	; 0xae
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009602:	e004      	b.n	800960e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009604:	2303      	movs	r3, #3
 8009606:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009608:	e001      	b.n	800960e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800960a:	2303      	movs	r3, #3
 800960c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d110      	bne.n	8009638 <USBD_StdItfReq+0xc0>
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10d      	bne.n	8009638 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fdaa 	bl	800a176 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009622:	e009      	b.n	8009638 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fcf7 	bl	800a01a <USBD_CtlError>
          break;
 800962c:	e004      	b.n	8009638 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fcf2 	bl	800a01a <USBD_CtlError>
          break;
 8009636:	e000      	b.n	800963a <USBD_StdItfReq+0xc2>
          break;
 8009638:	bf00      	nop
      }
      break;
 800963a:	e004      	b.n	8009646 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fceb 	bl	800a01a <USBD_CtlError>
      break;
 8009644:	bf00      	nop
  }

  return ret;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	889b      	ldrh	r3, [r3, #4]
 8009662:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800966c:	2b40      	cmp	r3, #64	; 0x40
 800966e:	d007      	beq.n	8009680 <USBD_StdEPReq+0x30>
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	f200 817f 	bhi.w	8009974 <USBD_StdEPReq+0x324>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d02a      	beq.n	80096d0 <USBD_StdEPReq+0x80>
 800967a:	2b20      	cmp	r3, #32
 800967c:	f040 817a 	bne.w	8009974 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fe83 	bl	8009390 <USBD_CoreFindEP>
 800968a:	4603      	mov	r3, r0
 800968c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800968e:	7b7b      	ldrb	r3, [r7, #13]
 8009690:	2bff      	cmp	r3, #255	; 0xff
 8009692:	f000 8174 	beq.w	800997e <USBD_StdEPReq+0x32e>
 8009696:	7b7b      	ldrb	r3, [r7, #13]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 8170 	bne.w	800997e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800969e:	7b7a      	ldrb	r2, [r7, #13]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096a6:	7b7a      	ldrb	r2, [r7, #13]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	32ae      	adds	r2, #174	; 0xae
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 8163 	beq.w	800997e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096b8:	7b7a      	ldrb	r2, [r7, #13]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	32ae      	adds	r2, #174	; 0xae
 80096be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096ce:	e156      	b.n	800997e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d008      	beq.n	80096ea <USBD_StdEPReq+0x9a>
 80096d8:	2b03      	cmp	r3, #3
 80096da:	f300 8145 	bgt.w	8009968 <USBD_StdEPReq+0x318>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 809b 	beq.w	800981a <USBD_StdEPReq+0x1ca>
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d03c      	beq.n	8009762 <USBD_StdEPReq+0x112>
 80096e8:	e13e      	b.n	8009968 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d002      	beq.n	80096fc <USBD_StdEPReq+0xac>
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d016      	beq.n	8009728 <USBD_StdEPReq+0xd8>
 80096fa:	e02c      	b.n	8009756 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00d      	beq.n	800971e <USBD_StdEPReq+0xce>
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	2b80      	cmp	r3, #128	; 0x80
 8009706:	d00a      	beq.n	800971e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 f881 	bl	800a814 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009712:	2180      	movs	r1, #128	; 0x80
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f87d 	bl	800a814 <USBD_LL_StallEP>
 800971a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800971c:	e020      	b.n	8009760 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fc7a 	bl	800a01a <USBD_CtlError>
              break;
 8009726:	e01b      	b.n	8009760 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	885b      	ldrh	r3, [r3, #2]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10e      	bne.n	800974e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00b      	beq.n	800974e <USBD_StdEPReq+0xfe>
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d008      	beq.n	800974e <USBD_StdEPReq+0xfe>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	88db      	ldrh	r3, [r3, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f863 	bl	800a814 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fd11 	bl	800a176 <USBD_CtlSendStatus>

              break;
 8009754:	e004      	b.n	8009760 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc5e 	bl	800a01a <USBD_CtlError>
              break;
 800975e:	bf00      	nop
          }
          break;
 8009760:	e107      	b.n	8009972 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b02      	cmp	r3, #2
 800976c:	d002      	beq.n	8009774 <USBD_StdEPReq+0x124>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d016      	beq.n	80097a0 <USBD_StdEPReq+0x150>
 8009772:	e04b      	b.n	800980c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <USBD_StdEPReq+0x146>
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d00a      	beq.n	8009796 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f845 	bl	800a814 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f841 	bl	800a814 <USBD_LL_StallEP>
 8009792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009794:	e040      	b.n	8009818 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc3e 	bl	800a01a <USBD_CtlError>
              break;
 800979e:	e03b      	b.n	8009818 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	885b      	ldrh	r3, [r3, #2]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d136      	bne.n	8009816 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 f84b 	bl	800a852 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fcda 	bl	800a176 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff fde2 	bl	8009390 <USBD_CoreFindEP>
 80097cc:	4603      	mov	r3, r0
 80097ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097d0:	7b7b      	ldrb	r3, [r7, #13]
 80097d2:	2bff      	cmp	r3, #255	; 0xff
 80097d4:	d01f      	beq.n	8009816 <USBD_StdEPReq+0x1c6>
 80097d6:	7b7b      	ldrb	r3, [r7, #13]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d11c      	bne.n	8009816 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097dc:	7b7a      	ldrb	r2, [r7, #13]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097e4:	7b7a      	ldrb	r2, [r7, #13]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	32ae      	adds	r2, #174	; 0xae
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d010      	beq.n	8009816 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097f4:	7b7a      	ldrb	r2, [r7, #13]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	32ae      	adds	r2, #174	; 0xae
 80097fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800980a:	e004      	b.n	8009816 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fc03 	bl	800a01a <USBD_CtlError>
              break;
 8009814:	e000      	b.n	8009818 <USBD_StdEPReq+0x1c8>
              break;
 8009816:	bf00      	nop
          }
          break;
 8009818:	e0ab      	b.n	8009972 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d002      	beq.n	800982c <USBD_StdEPReq+0x1dc>
 8009826:	2b03      	cmp	r3, #3
 8009828:	d032      	beq.n	8009890 <USBD_StdEPReq+0x240>
 800982a:	e097      	b.n	800995c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <USBD_StdEPReq+0x1f2>
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b80      	cmp	r3, #128	; 0x80
 8009836:	d004      	beq.n	8009842 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fbed 	bl	800a01a <USBD_CtlError>
                break;
 8009840:	e091      	b.n	8009966 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009846:	2b00      	cmp	r3, #0
 8009848:	da0b      	bge.n	8009862 <USBD_StdEPReq+0x212>
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	3310      	adds	r3, #16
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	3304      	adds	r3, #4
 8009860:	e00b      	b.n	800987a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	4413      	add	r3, r2
 8009878:	3304      	adds	r3, #4
 800987a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2202      	movs	r2, #2
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc37 	bl	800a0fc <USBD_CtlSendData>
              break;
 800988e:	e06a      	b.n	8009966 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009894:	2b00      	cmp	r3, #0
 8009896:	da11      	bge.n	80098bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 020f 	and.w	r2, r3, #15
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	440b      	add	r3, r1
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d117      	bne.n	80098e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fbb0 	bl	800a01a <USBD_CtlError>
                  break;
 80098ba:	e054      	b.n	8009966 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	f003 020f 	and.w	r2, r3, #15
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb9d 	bl	800a01a <USBD_CtlError>
                  break;
 80098e0:	e041      	b.n	8009966 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da0b      	bge.n	8009902 <USBD_StdEPReq+0x2b2>
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	3310      	adds	r3, #16
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4413      	add	r3, r2
 80098fe:	3304      	adds	r3, #4
 8009900:	e00b      	b.n	800991a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	4413      	add	r3, r2
 8009918:	3304      	adds	r3, #4
 800991a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <USBD_StdEPReq+0x2d8>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d103      	bne.n	8009930 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e00e      	b.n	800994e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 ffab 	bl	800a890 <USBD_LL_IsStallEP>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e002      	b.n	800994e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2202      	movs	r2, #2
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fbd1 	bl	800a0fc <USBD_CtlSendData>
              break;
 800995a:	e004      	b.n	8009966 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fb5b 	bl	800a01a <USBD_CtlError>
              break;
 8009964:	bf00      	nop
          }
          break;
 8009966:	e004      	b.n	8009972 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb55 	bl	800a01a <USBD_CtlError>
          break;
 8009970:	bf00      	nop
      }
      break;
 8009972:	e005      	b.n	8009980 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fb4f 	bl	800a01a <USBD_CtlError>
      break;
 800997c:	e000      	b.n	8009980 <USBD_StdEPReq+0x330>
      break;
 800997e:	bf00      	nop
  }

  return ret;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	3b01      	subs	r3, #1
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	f200 8128 	bhi.w	8009c02 <USBD_GetDescriptor+0x276>
 80099b2:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <USBD_GetDescriptor+0x2c>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	08009a2d 	.word	0x08009a2d
 80099c4:	08009c03 	.word	0x08009c03
 80099c8:	08009c03 	.word	0x08009c03
 80099cc:	08009ba3 	.word	0x08009ba3
 80099d0:	08009bcf 	.word	0x08009bcf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
      break;
 80099ea:	e112      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7c1b      	ldrb	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10d      	bne.n	8009a10 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	f107 0208 	add.w	r2, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a0e:	e100      	b.n	8009c12 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f107 0208 	add.w	r2, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	2202      	movs	r2, #2
 8009a28:	701a      	strb	r2, [r3, #0]
      break;
 8009a2a:	e0f2      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	f200 80ac 	bhi.w	8009b90 <USBD_GetDescriptor+0x204>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBD_GetDescriptor+0xb4>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009a59 	.word	0x08009a59
 8009a44:	08009a8d 	.word	0x08009a8d
 8009a48:	08009ac1 	.word	0x08009ac1
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009b29 	.word	0x08009b29
 8009a54:	08009b5d 	.word	0x08009b5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7a:	e091      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 facb 	bl	800a01a <USBD_CtlError>
            err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8a:	e089      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	7c12      	ldrb	r2, [r2, #16]
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aae:	e077      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fab1 	bl	800a01a <USBD_CtlError>
            err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
          break;
 8009abe:	e06f      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	7c12      	ldrb	r2, [r2, #16]
 8009ad8:	f107 0108 	add.w	r1, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ae2:	e05d      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa97 	bl	800a01a <USBD_CtlError>
            err++;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	3301      	adds	r3, #1
 8009af0:	72fb      	strb	r3, [r7, #11]
          break;
 8009af2:	e055      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	7c12      	ldrb	r2, [r2, #16]
 8009b0c:	f107 0108 	add.w	r1, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b16:	e043      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fa7d 	bl	800a01a <USBD_CtlError>
            err++;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	3301      	adds	r3, #1
 8009b24:	72fb      	strb	r3, [r7, #11]
          break;
 8009b26:	e03b      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	7c12      	ldrb	r2, [r2, #16]
 8009b40:	f107 0108 	add.w	r1, r7, #8
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b4a:	e029      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa63 	bl	800a01a <USBD_CtlError>
            err++;
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	3301      	adds	r3, #1
 8009b58:	72fb      	strb	r3, [r7, #11]
          break;
 8009b5a:	e021      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	7c12      	ldrb	r2, [r2, #16]
 8009b74:	f107 0108 	add.w	r1, r7, #8
 8009b78:	4610      	mov	r0, r2
 8009b7a:	4798      	blx	r3
 8009b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b7e:	e00f      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa49 	bl	800a01a <USBD_CtlError>
            err++;
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b8e:	e007      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa41 	bl	800a01a <USBD_CtlError>
          err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b9e:	bf00      	nop
      }
      break;
 8009ba0:	e037      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7c1b      	ldrb	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d109      	bne.n	8009bbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	f107 0208 	add.w	r2, r7, #8
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4798      	blx	r3
 8009bba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bbc:	e029      	b.n	8009c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fa2a 	bl	800a01a <USBD_CtlError>
        err++;
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	72fb      	strb	r3, [r7, #11]
      break;
 8009bcc:	e021      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7c1b      	ldrb	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10d      	bne.n	8009bf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	f107 0208 	add.w	r2, r7, #8
 8009be2:	4610      	mov	r0, r2
 8009be4:	4798      	blx	r3
 8009be6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	2207      	movs	r2, #7
 8009bee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bf0:	e00f      	b.n	8009c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fa10 	bl	800a01a <USBD_CtlError>
        err++;
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009c00:	e007      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fa08 	bl	800a01a <USBD_CtlError>
      err++;
 8009c0a:	7afb      	ldrb	r3, [r7, #11]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c10:	bf00      	nop
  }

  if (err != 0U)
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11e      	bne.n	8009c56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	88db      	ldrh	r3, [r3, #6]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d016      	beq.n	8009c4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c20:	893b      	ldrh	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00e      	beq.n	8009c44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88da      	ldrh	r2, [r3, #6]
 8009c2a:	893b      	ldrh	r3, [r7, #8]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	bf28      	it	cs
 8009c30:	4613      	movcs	r3, r2
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c36:	893b      	ldrh	r3, [r7, #8]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa5d 	bl	800a0fc <USBD_CtlSendData>
 8009c42:	e009      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f9e7 	bl	800a01a <USBD_CtlError>
 8009c4c:	e004      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa91 	bl	800a176 <USBD_CtlSendStatus>
 8009c54:	e000      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    return;
 8009c56:	bf00      	nop
  }
}
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop

08009c60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	889b      	ldrh	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d131      	bne.n	8009cd6 <USBD_SetAddress+0x76>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d12d      	bne.n	8009cd6 <USBD_SetAddress+0x76>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	885b      	ldrh	r3, [r3, #2]
 8009c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c80:	d829      	bhi.n	8009cd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	885b      	ldrh	r3, [r3, #2]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d104      	bne.n	8009ca4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f9bc 	bl	800a01a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca2:	e01d      	b.n	8009ce0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7bfa      	ldrb	r2, [r7, #15]
 8009ca8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fe19 	bl	800a8e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa5d 	bl	800a176 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d004      	beq.n	8009ccc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cca:	e009      	b.n	8009ce0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd4:	e004      	b.n	8009ce0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f99e 	bl	800a01a <USBD_CtlError>
  }
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	4b4e      	ldr	r3, [pc, #312]	; (8009e38 <USBD_SetConfig+0x150>)
 8009cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d00:	4b4d      	ldr	r3, [pc, #308]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d905      	bls.n	8009d14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f985 	bl	800a01a <USBD_CtlError>
    return USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e08c      	b.n	8009e2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d002      	beq.n	8009d26 <USBD_SetConfig+0x3e>
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d029      	beq.n	8009d78 <USBD_SetConfig+0x90>
 8009d24:	e075      	b.n	8009e12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d26:	4b44      	ldr	r3, [pc, #272]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d020      	beq.n	8009d70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d2e:	4b42      	ldr	r3, [pc, #264]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d38:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fe ffe7 	bl	8008d12 <USBD_SetClassConfig>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d008      	beq.n	8009d60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f962 	bl	800a01a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2202      	movs	r2, #2
 8009d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d5e:	e065      	b.n	8009e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa08 	bl	800a176 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d6e:	e05d      	b.n	8009e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fa00 	bl	800a176 <USBD_CtlSendStatus>
      break;
 8009d76:	e059      	b.n	8009e2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d78:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d112      	bne.n	8009da6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d88:	4b2b      	ldr	r3, [pc, #172]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d92:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fe ffd6 	bl	8008d4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9e9 	bl	800a176 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009da4:	e042      	b.n	8009e2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <USBD_SetConfig+0x150>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d02a      	beq.n	8009e0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7fe ffc4 	bl	8008d4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dc2:	4b1d      	ldr	r3, [pc, #116]	; (8009e38 <USBD_SetConfig+0x150>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <USBD_SetConfig+0x150>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7fe ff9d 	bl	8008d12 <USBD_SetClassConfig>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00f      	beq.n	8009e02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f918 	bl	800a01a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe ffa9 	bl	8008d4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e00:	e014      	b.n	8009e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f9b7 	bl	800a176 <USBD_CtlSendStatus>
      break;
 8009e08:	e010      	b.n	8009e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f9b3 	bl	800a176 <USBD_CtlSendStatus>
      break;
 8009e10:	e00c      	b.n	8009e2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f900 	bl	800a01a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e1a:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <USBD_SetConfig+0x150>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7fe ff92 	bl	8008d4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e26:	2303      	movs	r3, #3
 8009e28:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2a:	bf00      	nop
  }

  return ret;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200003c0 	.word	0x200003c0

08009e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d004      	beq.n	8009e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f8e2 	bl	800a01a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e56:	e023      	b.n	8009ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	dc02      	bgt.n	8009e6a <USBD_GetConfig+0x2e>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dc03      	bgt.n	8009e70 <USBD_GetConfig+0x34>
 8009e68:	e015      	b.n	8009e96 <USBD_GetConfig+0x5a>
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d00b      	beq.n	8009e86 <USBD_GetConfig+0x4a>
 8009e6e:	e012      	b.n	8009e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f93c 	bl	800a0fc <USBD_CtlSendData>
        break;
 8009e84:	e00c      	b.n	8009ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3304      	adds	r3, #4
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f934 	bl	800a0fc <USBD_CtlSendData>
        break;
 8009e94:	e004      	b.n	8009ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f8be 	bl	800a01a <USBD_CtlError>
        break;
 8009e9e:	bf00      	nop
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d81e      	bhi.n	8009efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	88db      	ldrh	r3, [r3, #6]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d004      	beq.n	8009ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f8a5 	bl	800a01a <USBD_CtlError>
        break;
 8009ed0:	e01a      	b.n	8009f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f043 0202 	orr.w	r2, r3, #2
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f900 	bl	800a0fc <USBD_CtlSendData>
      break;
 8009efc:	e004      	b.n	8009f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f88a 	bl	800a01a <USBD_CtlError>
      break;
 8009f06:	bf00      	nop
  }
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	885b      	ldrh	r3, [r3, #2]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d107      	bne.n	8009f32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f923 	bl	800a176 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f30:	e013      	b.n	8009f5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	885b      	ldrh	r3, [r3, #2]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d10b      	bne.n	8009f52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	889b      	ldrh	r3, [r3, #4]
 8009f3e:	0a1b      	lsrs	r3, r3, #8
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f913 	bl	800a176 <USBD_CtlSendStatus>
}
 8009f50:	e003      	b.n	8009f5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f860 	bl	800a01a <USBD_CtlError>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d80b      	bhi.n	8009f92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	885b      	ldrh	r3, [r3, #2]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d10c      	bne.n	8009f9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f8f3 	bl	800a176 <USBD_CtlSendStatus>
      }
      break;
 8009f90:	e004      	b.n	8009f9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f840 	bl	800a01a <USBD_CtlError>
      break;
 8009f9a:	e000      	b.n	8009f9e <USBD_ClrFeature+0x3c>
      break;
 8009f9c:	bf00      	nop
  }
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	781a      	ldrb	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fa41 	bl	8009458 <SWAPBYTE>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	461a      	mov	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff fa34 	bl	8009458 <SWAPBYTE>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3301      	adds	r3, #1
 800a002:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7ff fa27 	bl	8009458 <SWAPBYTE>
 800a00a:	4603      	mov	r3, r0
 800a00c:	461a      	mov	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	80da      	strh	r2, [r3, #6]
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a024:	2180      	movs	r1, #128	; 0x80
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fbf4 	bl	800a814 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fbf0 	bl	800a814 <USBD_LL_StallEP>
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d036      	beq.n	800a0c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a056:	6938      	ldr	r0, [r7, #16]
 800a058:	f000 f836 	bl	800a0c8 <USBD_GetLen>
 800a05c:	4603      	mov	r3, r0
 800a05e:	3301      	adds	r3, #1
 800a060:	b29b      	uxth	r3, r3
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7812      	ldrb	r2, [r2, #0]
 800a074:	701a      	strb	r2, [r3, #0]
  idx++;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	3301      	adds	r3, #1
 800a07a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	2203      	movs	r2, #3
 800a084:	701a      	strb	r2, [r3, #0]
  idx++;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	3301      	adds	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a08c:	e013      	b.n	800a0b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	4413      	add	r3, r2
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3301      	adds	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
    idx++;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e7      	bne.n	800a08e <USBD_GetString+0x52>
 800a0be:	e000      	b.n	800a0c2 <USBD_GetString+0x86>
    return;
 800a0c0:	bf00      	nop
  }
}
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0d8:	e005      	b.n	800a0e6 <USBD_GetLen+0x1e>
  {
    len++;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f5      	bne.n	800a0da <USBD_GetLen+0x12>
  }

  return len;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fbff 	bl	800a926 <USBD_LL_Transmit>

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	2100      	movs	r1, #0
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 fbee 	bl	800a926 <USBD_LL_Transmit>

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	2100      	movs	r1, #0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fbfe 	bl	800a968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2204      	movs	r2, #4
 800a182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a186:	2300      	movs	r3, #0
 800a188:	2200      	movs	r2, #0
 800a18a:	2100      	movs	r1, #0
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fbca 	bl	800a926 <USBD_LL_Transmit>

  return USBD_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2205      	movs	r2, #5
 800a1a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fbd8 	bl	800a968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	490e      	ldr	r1, [pc, #56]	; (800a204 <MX_USB_DEVICE_Init+0x40>)
 800a1cc:	480e      	ldr	r0, [pc, #56]	; (800a208 <MX_USB_DEVICE_Init+0x44>)
 800a1ce:	f7fe fd07 	bl	8008be0 <USBD_Init>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1d8:	f7f6 fdf2 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a1dc:	490b      	ldr	r1, [pc, #44]	; (800a20c <MX_USB_DEVICE_Init+0x48>)
 800a1de:	480a      	ldr	r0, [pc, #40]	; (800a208 <MX_USB_DEVICE_Init+0x44>)
 800a1e0:	f7fe fd3c 	bl	8008c5c <USBD_RegisterClass>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1ea:	f7f6 fde9 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1ee:	4806      	ldr	r0, [pc, #24]	; (800a208 <MX_USB_DEVICE_Init+0x44>)
 800a1f0:	f7fe fd78 	bl	8008ce4 <USBD_Start>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a1fa:	f7f6 fde1 	bl	8000dc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1fe:	bf00      	nop
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	200000cc 	.word	0x200000cc
 800a208:	200003c4 	.word	0x200003c4
 800a20c:	20000018 	.word	0x20000018

0800a210 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2212      	movs	r2, #18
 800a220:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a222:	4b03      	ldr	r3, [pc, #12]	; (800a230 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	200000e8 	.word	0x200000e8

0800a234 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	6039      	str	r1, [r7, #0]
 800a23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2204      	movs	r2, #4
 800a244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a246:	4b03      	ldr	r3, [pc, #12]	; (800a254 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	200000fc 	.word	0x200000fc

0800a258 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d105      	bne.n	800a276 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	4907      	ldr	r1, [pc, #28]	; (800a28c <USBD_FS_ProductStrDescriptor+0x34>)
 800a26e:	4808      	ldr	r0, [pc, #32]	; (800a290 <USBD_FS_ProductStrDescriptor+0x38>)
 800a270:	f7ff fee4 	bl	800a03c <USBD_GetString>
 800a274:	e004      	b.n	800a280 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4904      	ldr	r1, [pc, #16]	; (800a28c <USBD_FS_ProductStrDescriptor+0x34>)
 800a27a:	4805      	ldr	r0, [pc, #20]	; (800a290 <USBD_FS_ProductStrDescriptor+0x38>)
 800a27c:	f7ff fede 	bl	800a03c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a280:	4b02      	ldr	r3, [pc, #8]	; (800a28c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	200006a0 	.word	0x200006a0
 800a290:	0800bac4 	.word	0x0800bac4

0800a294 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	4904      	ldr	r1, [pc, #16]	; (800a2b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2a4:	4804      	ldr	r0, [pc, #16]	; (800a2b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2a6:	f7ff fec9 	bl	800a03c <USBD_GetString>
  return USBD_StrDesc;
 800a2aa:	4b02      	ldr	r3, [pc, #8]	; (800a2b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	200006a0 	.word	0x200006a0
 800a2b8:	0800bad0 	.word	0x0800bad0

0800a2bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	221a      	movs	r2, #26
 800a2cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2ce:	f000 f843 	bl	800a358 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2d2:	4b02      	ldr	r3, [pc, #8]	; (800a2dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000100 	.word	0x20000100

0800a2e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	6039      	str	r1, [r7, #0]
 800a2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d105      	bne.n	800a2fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	4907      	ldr	r1, [pc, #28]	; (800a314 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2f6:	4808      	ldr	r0, [pc, #32]	; (800a318 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2f8:	f7ff fea0 	bl	800a03c <USBD_GetString>
 800a2fc:	e004      	b.n	800a308 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	4904      	ldr	r1, [pc, #16]	; (800a314 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a302:	4805      	ldr	r0, [pc, #20]	; (800a318 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a304:	f7ff fe9a 	bl	800a03c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a308:	4b02      	ldr	r3, [pc, #8]	; (800a314 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	200006a0 	.word	0x200006a0
 800a318:	0800bad8 	.word	0x0800bad8

0800a31c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	6039      	str	r1, [r7, #0]
 800a326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d105      	bne.n	800a33a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	4907      	ldr	r1, [pc, #28]	; (800a350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a332:	4808      	ldr	r0, [pc, #32]	; (800a354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a334:	f7ff fe82 	bl	800a03c <USBD_GetString>
 800a338:	e004      	b.n	800a344 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4904      	ldr	r1, [pc, #16]	; (800a350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a33e:	4805      	ldr	r0, [pc, #20]	; (800a354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a340:	f7ff fe7c 	bl	800a03c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a344:	4b02      	ldr	r3, [pc, #8]	; (800a350 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	200006a0 	.word	0x200006a0
 800a354:	0800bae4 	.word	0x0800bae4

0800a358 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a35e:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <Get_SerialNum+0x44>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a364:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <Get_SerialNum+0x48>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a36a:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <Get_SerialNum+0x4c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4413      	add	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a37e:	2208      	movs	r2, #8
 800a380:	4909      	ldr	r1, [pc, #36]	; (800a3a8 <Get_SerialNum+0x50>)
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 f814 	bl	800a3b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a388:	2204      	movs	r2, #4
 800a38a:	4908      	ldr	r1, [pc, #32]	; (800a3ac <Get_SerialNum+0x54>)
 800a38c:	68b8      	ldr	r0, [r7, #8]
 800a38e:	f000 f80f 	bl	800a3b0 <IntToUnicode>
  }
}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	1fff7a10 	.word	0x1fff7a10
 800a3a0:	1fff7a14 	.word	0x1fff7a14
 800a3a4:	1fff7a18 	.word	0x1fff7a18
 800a3a8:	20000102 	.word	0x20000102
 800a3ac:	20000112 	.word	0x20000112

0800a3b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]
 800a3c6:	e027      	b.n	800a418 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	0f1b      	lsrs	r3, r3, #28
 800a3cc:	2b09      	cmp	r3, #9
 800a3ce:	d80b      	bhi.n	800a3e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	0f1b      	lsrs	r3, r3, #28
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	440b      	add	r3, r1
 800a3e0:	3230      	adds	r2, #48	; 0x30
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	e00a      	b.n	800a3fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	0f1b      	lsrs	r3, r3, #28
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3237      	adds	r2, #55	; 0x37
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	3301      	adds	r3, #1
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	3301      	adds	r3, #1
 800a416:	75fb      	strb	r3, [r7, #23]
 800a418:	7dfa      	ldrb	r2, [r7, #23]
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d3d3      	bcc.n	800a3c8 <IntToUnicode+0x18>
  }
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
	...

0800a430 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08a      	sub	sp, #40	; 0x28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a438:	f107 0314 	add.w	r3, r7, #20
 800a43c:	2200      	movs	r2, #0
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	605a      	str	r2, [r3, #4]
 800a442:	609a      	str	r2, [r3, #8]
 800a444:	60da      	str	r2, [r3, #12]
 800a446:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a450:	d13a      	bne.n	800a4c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a452:	2300      	movs	r3, #0
 800a454:	613b      	str	r3, [r7, #16]
 800a456:	4b1e      	ldr	r3, [pc, #120]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	4a1d      	ldr	r2, [pc, #116]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a45c:	f043 0301 	orr.w	r3, r3, #1
 800a460:	6313      	str	r3, [r2, #48]	; 0x30
 800a462:	4b1b      	ldr	r3, [pc, #108]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	613b      	str	r3, [r7, #16]
 800a46c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a46e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a474:	2302      	movs	r3, #2
 800a476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a47c:	2303      	movs	r3, #3
 800a47e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a480:	230a      	movs	r3, #10
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a484:	f107 0314 	add.w	r3, r7, #20
 800a488:	4619      	mov	r1, r3
 800a48a:	4812      	ldr	r0, [pc, #72]	; (800a4d4 <HAL_PCD_MspInit+0xa4>)
 800a48c:	f7f7 fbfc 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a490:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	4a0e      	ldr	r2, [pc, #56]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49a:	6353      	str	r3, [r2, #52]	; 0x34
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a4:	4a0a      	ldr	r2, [pc, #40]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a4a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4aa:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ac:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <HAL_PCD_MspInit+0xa0>)
 800a4ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2043      	movs	r0, #67	; 0x43
 800a4be:	f7f7 f892 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4c2:	2043      	movs	r0, #67	; 0x43
 800a4c4:	f7f7 f8ab 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4c8:	bf00      	nop
 800a4ca:	3728      	adds	r7, #40	; 0x28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	40023800 	.word	0x40023800
 800a4d4:	40020000 	.word	0x40020000

0800a4d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fe fc45 	bl	8008d7e <USBD_LL_SetupStage>
}
 800a4f4:	bf00      	nop
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a50e:	78fa      	ldrb	r2, [r7, #3]
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	4613      	mov	r3, r2
 800a514:	00db      	lsls	r3, r3, #3
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	440b      	add	r3, r1
 800a51c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	78fb      	ldrb	r3, [r7, #3]
 800a524:	4619      	mov	r1, r3
 800a526:	f7fe fc7f 	bl	8008e28 <USBD_LL_DataOutStage>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	4613      	mov	r3, r2
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	440b      	add	r3, r1
 800a552:	334c      	adds	r3, #76	; 0x4c
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	4619      	mov	r1, r3
 800a55a:	f7fe fd18 	bl	8008f8e <USBD_LL_DataInStage>
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fe4c 	bl	8009212 <USBD_LL_SOF>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a58a:	2301      	movs	r3, #1
 800a58c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d102      	bne.n	800a59c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]
 800a59a:	e008      	b.n	800a5ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d102      	bne.n	800a5aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
 800a5a8:	e001      	b.n	800a5ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5aa:	f7f6 fc09 	bl	8000dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5b4:	7bfa      	ldrb	r2, [r7, #15]
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fdec 	bl	8009196 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fd94 	bl	80090f2 <USBD_LL_Reset>
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe fde7 	bl	80091b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	6812      	ldr	r2, [r2, #0]
 800a5f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a608:	4b04      	ldr	r3, [pc, #16]	; (800a61c <HAL_PCD_SuspendCallback+0x48>)
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	4a03      	ldr	r2, [pc, #12]	; (800a61c <HAL_PCD_SuspendCallback+0x48>)
 800a60e:	f043 0306 	orr.w	r3, r3, #6
 800a612:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	e000ed00 	.word	0xe000ed00

0800a620 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fdd7 	bl	80091e2 <USBD_LL_Resume>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fe2f 	bl	80092b6 <USBD_LL_IsoOUTIncomplete>
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a672:	78fa      	ldrb	r2, [r7, #3]
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe fdeb 	bl	8009252 <USBD_LL_IsoINIncomplete>
}
 800a67c:	bf00      	nop
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fe41 	bl	800931a <USBD_LL_DevConnected>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fe3e 	bl	8009330 <USBD_LL_DevDisconnected>
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d13c      	bne.n	800a746 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6cc:	4a20      	ldr	r2, [pc, #128]	; (800a750 <USBD_LL_Init+0x94>)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a1e      	ldr	r2, [pc, #120]	; (800a750 <USBD_LL_Init+0x94>)
 800a6d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6dc:	4b1c      	ldr	r3, [pc, #112]	; (800a750 <USBD_LL_Init+0x94>)
 800a6de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a6e4:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <USBD_LL_Init+0x94>)
 800a6e6:	2204      	movs	r2, #4
 800a6e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a6ea:	4b19      	ldr	r3, [pc, #100]	; (800a750 <USBD_LL_Init+0x94>)
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6f0:	4b17      	ldr	r3, [pc, #92]	; (800a750 <USBD_LL_Init+0x94>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6f6:	4b16      	ldr	r3, [pc, #88]	; (800a750 <USBD_LL_Init+0x94>)
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6fc:	4b14      	ldr	r3, [pc, #80]	; (800a750 <USBD_LL_Init+0x94>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a702:	4b13      	ldr	r3, [pc, #76]	; (800a750 <USBD_LL_Init+0x94>)
 800a704:	2200      	movs	r2, #0
 800a706:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a708:	4b11      	ldr	r3, [pc, #68]	; (800a750 <USBD_LL_Init+0x94>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a70e:	4b10      	ldr	r3, [pc, #64]	; (800a750 <USBD_LL_Init+0x94>)
 800a710:	2200      	movs	r2, #0
 800a712:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a714:	4b0e      	ldr	r3, [pc, #56]	; (800a750 <USBD_LL_Init+0x94>)
 800a716:	2200      	movs	r2, #0
 800a718:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a71a:	480d      	ldr	r0, [pc, #52]	; (800a750 <USBD_LL_Init+0x94>)
 800a71c:	f7f9 ffc4 	bl	80046a8 <HAL_PCD_Init>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a726:	f7f6 fb4b 	bl	8000dc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a72a:	2180      	movs	r1, #128	; 0x80
 800a72c:	4808      	ldr	r0, [pc, #32]	; (800a750 <USBD_LL_Init+0x94>)
 800a72e:	f7fb fa04 	bl	8005b3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a732:	2240      	movs	r2, #64	; 0x40
 800a734:	2100      	movs	r1, #0
 800a736:	4806      	ldr	r0, [pc, #24]	; (800a750 <USBD_LL_Init+0x94>)
 800a738:	f7fb f9b8 	bl	8005aac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a73c:	2280      	movs	r2, #128	; 0x80
 800a73e:	2101      	movs	r1, #1
 800a740:	4803      	ldr	r0, [pc, #12]	; (800a750 <USBD_LL_Init+0x94>)
 800a742:	f7fb f9b3 	bl	8005aac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	200008a0 	.word	0x200008a0

0800a754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fa f8b9 	bl	80048e2 <HAL_PCD_Start>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f930 	bl	800a9dc <USBD_Get_USB_Status>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a780:	7bbb      	ldrb	r3, [r7, #14]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	4608      	mov	r0, r1
 800a794:	4611      	mov	r1, r2
 800a796:	461a      	mov	r2, r3
 800a798:	4603      	mov	r3, r0
 800a79a:	70fb      	strb	r3, [r7, #3]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70bb      	strb	r3, [r7, #2]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7b2:	78bb      	ldrb	r3, [r7, #2]
 800a7b4:	883a      	ldrh	r2, [r7, #0]
 800a7b6:	78f9      	ldrb	r1, [r7, #3]
 800a7b8:	f7fa fd8a 	bl	80052d0 <HAL_PCD_EP_Open>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f90a 	bl	800a9dc <USBD_Get_USB_Status>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7f0:	78fa      	ldrb	r2, [r7, #3]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fa fdd3 	bl	80053a0 <HAL_PCD_EP_Close>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fe:	7bfb      	ldrb	r3, [r7, #15]
 800a800:	4618      	mov	r0, r3
 800a802:	f000 f8eb 	bl	800a9dc <USBD_Get_USB_Status>
 800a806:	4603      	mov	r3, r0
 800a808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7fa fe93 	bl	800555e <HAL_PCD_EP_SetStall>
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f8cc 	bl	800a9dc <USBD_Get_USB_Status>
 800a844:	4603      	mov	r3, r0
 800a846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a848:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	4611      	mov	r1, r2
 800a870:	4618      	mov	r0, r3
 800a872:	f7fa fed8 	bl	8005626 <HAL_PCD_EP_ClrStall>
 800a876:	4603      	mov	r3, r0
 800a878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 f8ad 	bl	800a9dc <USBD_Get_USB_Status>
 800a882:	4603      	mov	r3, r0
 800a884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a886:	7bbb      	ldrb	r3, [r7, #14]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da0b      	bge.n	800a8c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8b2:	68f9      	ldr	r1, [r7, #12]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	333e      	adds	r3, #62	; 0x3e
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	e00b      	b.n	800a8dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ca:	68f9      	ldr	r1, [r7, #12]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a8da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a902:	78fa      	ldrb	r2, [r7, #3]
 800a904:	4611      	mov	r1, r2
 800a906:	4618      	mov	r0, r3
 800a908:	f7fa fcbd 	bl	8005286 <HAL_PCD_SetAddress>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	4618      	mov	r0, r3
 800a914:	f000 f862 	bl	800a9dc <USBD_Get_USB_Status>
 800a918:	4603      	mov	r3, r0
 800a91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b086      	sub	sp, #24
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	603b      	str	r3, [r7, #0]
 800a932:	460b      	mov	r3, r1
 800a934:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a944:	7af9      	ldrb	r1, [r7, #11]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	f7fa fdbe 	bl	80054ca <HAL_PCD_EP_Transmit>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f841 	bl	800a9dc <USBD_Get_USB_Status>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a95e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	460b      	mov	r3, r1
 800a976:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a986:	7af9      	ldrb	r1, [r7, #11]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	f7fa fd52 	bl	8005434 <HAL_PCD_EP_Receive>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f820 	bl	800a9dc <USBD_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a9b4:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <USBD_static_malloc+0x18>)
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000dac 	.word	0x20000dac

0800a9c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]

}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d817      	bhi.n	800aa20 <USBD_Get_USB_Status+0x44>
 800a9f0:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <USBD_Get_USB_Status+0x1c>)
 800a9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f6:	bf00      	nop
 800a9f8:	0800aa09 	.word	0x0800aa09
 800a9fc:	0800aa0f 	.word	0x0800aa0f
 800aa00:	0800aa15 	.word	0x0800aa15
 800aa04:	0800aa1b 	.word	0x0800aa1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0c:	e00b      	b.n	800aa26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	73fb      	strb	r3, [r7, #15]
    break;
 800aa12:	e008      	b.n	800aa26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa14:	2301      	movs	r3, #1
 800aa16:	73fb      	strb	r3, [r7, #15]
    break;
 800aa18:	e005      	b.n	800aa26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa1e:	e002      	b.n	800aa26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa20:	2303      	movs	r3, #3
 800aa22:	73fb      	strb	r3, [r7, #15]
    break;
 800aa24:	bf00      	nop
  }
  return usb_status;
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <__errno>:
 800aa34:	4b01      	ldr	r3, [pc, #4]	; (800aa3c <__errno+0x8>)
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	2000011c 	.word	0x2000011c

0800aa40 <__libc_init_array>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4d0d      	ldr	r5, [pc, #52]	; (800aa78 <__libc_init_array+0x38>)
 800aa44:	4c0d      	ldr	r4, [pc, #52]	; (800aa7c <__libc_init_array+0x3c>)
 800aa46:	1b64      	subs	r4, r4, r5
 800aa48:	10a4      	asrs	r4, r4, #2
 800aa4a:	2600      	movs	r6, #0
 800aa4c:	42a6      	cmp	r6, r4
 800aa4e:	d109      	bne.n	800aa64 <__libc_init_array+0x24>
 800aa50:	4d0b      	ldr	r5, [pc, #44]	; (800aa80 <__libc_init_array+0x40>)
 800aa52:	4c0c      	ldr	r4, [pc, #48]	; (800aa84 <__libc_init_array+0x44>)
 800aa54:	f001 f80c 	bl	800ba70 <_init>
 800aa58:	1b64      	subs	r4, r4, r5
 800aa5a:	10a4      	asrs	r4, r4, #2
 800aa5c:	2600      	movs	r6, #0
 800aa5e:	42a6      	cmp	r6, r4
 800aa60:	d105      	bne.n	800aa6e <__libc_init_array+0x2e>
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa68:	4798      	blx	r3
 800aa6a:	3601      	adds	r6, #1
 800aa6c:	e7ee      	b.n	800aa4c <__libc_init_array+0xc>
 800aa6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa72:	4798      	blx	r3
 800aa74:	3601      	adds	r6, #1
 800aa76:	e7f2      	b.n	800aa5e <__libc_init_array+0x1e>
 800aa78:	0800bc08 	.word	0x0800bc08
 800aa7c:	0800bc08 	.word	0x0800bc08
 800aa80:	0800bc08 	.word	0x0800bc08
 800aa84:	0800bc0c 	.word	0x0800bc0c

0800aa88 <memset>:
 800aa88:	4402      	add	r2, r0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d100      	bne.n	800aa92 <memset+0xa>
 800aa90:	4770      	bx	lr
 800aa92:	f803 1b01 	strb.w	r1, [r3], #1
 800aa96:	e7f9      	b.n	800aa8c <memset+0x4>

0800aa98 <iprintf>:
 800aa98:	b40f      	push	{r0, r1, r2, r3}
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <iprintf+0x2c>)
 800aa9c:	b513      	push	{r0, r1, r4, lr}
 800aa9e:	681c      	ldr	r4, [r3, #0]
 800aaa0:	b124      	cbz	r4, 800aaac <iprintf+0x14>
 800aaa2:	69a3      	ldr	r3, [r4, #24]
 800aaa4:	b913      	cbnz	r3, 800aaac <iprintf+0x14>
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f87c 	bl	800aba4 <__sinit>
 800aaac:	ab05      	add	r3, sp, #20
 800aaae:	9a04      	ldr	r2, [sp, #16]
 800aab0:	68a1      	ldr	r1, [r4, #8]
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 f9d3 	bl	800ae60 <_vfiprintf_r>
 800aaba:	b002      	add	sp, #8
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac0:	b004      	add	sp, #16
 800aac2:	4770      	bx	lr
 800aac4:	2000011c 	.word	0x2000011c

0800aac8 <putchar>:
 800aac8:	4b09      	ldr	r3, [pc, #36]	; (800aaf0 <putchar+0x28>)
 800aaca:	b513      	push	{r0, r1, r4, lr}
 800aacc:	681c      	ldr	r4, [r3, #0]
 800aace:	4601      	mov	r1, r0
 800aad0:	b134      	cbz	r4, 800aae0 <putchar+0x18>
 800aad2:	69a3      	ldr	r3, [r4, #24]
 800aad4:	b923      	cbnz	r3, 800aae0 <putchar+0x18>
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 f863 	bl	800aba4 <__sinit>
 800aade:	9901      	ldr	r1, [sp, #4]
 800aae0:	68a2      	ldr	r2, [r4, #8]
 800aae2:	4620      	mov	r0, r4
 800aae4:	b002      	add	sp, #8
 800aae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaea:	f000 bc7d 	b.w	800b3e8 <_putc_r>
 800aaee:	bf00      	nop
 800aaf0:	2000011c 	.word	0x2000011c

0800aaf4 <std>:
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	4604      	mov	r4, r0
 800aafa:	e9c0 3300 	strd	r3, r3, [r0]
 800aafe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab02:	6083      	str	r3, [r0, #8]
 800ab04:	8181      	strh	r1, [r0, #12]
 800ab06:	6643      	str	r3, [r0, #100]	; 0x64
 800ab08:	81c2      	strh	r2, [r0, #14]
 800ab0a:	6183      	str	r3, [r0, #24]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	2208      	movs	r2, #8
 800ab10:	305c      	adds	r0, #92	; 0x5c
 800ab12:	f7ff ffb9 	bl	800aa88 <memset>
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <std+0x38>)
 800ab18:	6263      	str	r3, [r4, #36]	; 0x24
 800ab1a:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <std+0x3c>)
 800ab1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab1e:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <std+0x40>)
 800ab20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab22:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <std+0x44>)
 800ab24:	6224      	str	r4, [r4, #32]
 800ab26:	6323      	str	r3, [r4, #48]	; 0x30
 800ab28:	bd10      	pop	{r4, pc}
 800ab2a:	bf00      	nop
 800ab2c:	0800b499 	.word	0x0800b499
 800ab30:	0800b4bb 	.word	0x0800b4bb
 800ab34:	0800b4f3 	.word	0x0800b4f3
 800ab38:	0800b517 	.word	0x0800b517

0800ab3c <_cleanup_r>:
 800ab3c:	4901      	ldr	r1, [pc, #4]	; (800ab44 <_cleanup_r+0x8>)
 800ab3e:	f000 b8af 	b.w	800aca0 <_fwalk_reent>
 800ab42:	bf00      	nop
 800ab44:	0800b7f1 	.word	0x0800b7f1

0800ab48 <__sfmoreglue>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	2268      	movs	r2, #104	; 0x68
 800ab4c:	1e4d      	subs	r5, r1, #1
 800ab4e:	4355      	muls	r5, r2
 800ab50:	460e      	mov	r6, r1
 800ab52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab56:	f000 f8e5 	bl	800ad24 <_malloc_r>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	b140      	cbz	r0, 800ab70 <__sfmoreglue+0x28>
 800ab5e:	2100      	movs	r1, #0
 800ab60:	e9c0 1600 	strd	r1, r6, [r0]
 800ab64:	300c      	adds	r0, #12
 800ab66:	60a0      	str	r0, [r4, #8]
 800ab68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab6c:	f7ff ff8c 	bl	800aa88 <memset>
 800ab70:	4620      	mov	r0, r4
 800ab72:	bd70      	pop	{r4, r5, r6, pc}

0800ab74 <__sfp_lock_acquire>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__sfp_lock_acquire+0x8>)
 800ab76:	f000 b8b3 	b.w	800ace0 <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20000dc1 	.word	0x20000dc1

0800ab80 <__sfp_lock_release>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__sfp_lock_release+0x8>)
 800ab82:	f000 b8ae 	b.w	800ace2 <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	20000dc1 	.word	0x20000dc1

0800ab8c <__sinit_lock_acquire>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__sinit_lock_acquire+0x8>)
 800ab8e:	f000 b8a7 	b.w	800ace0 <__retarget_lock_acquire_recursive>
 800ab92:	bf00      	nop
 800ab94:	20000dc2 	.word	0x20000dc2

0800ab98 <__sinit_lock_release>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__sinit_lock_release+0x8>)
 800ab9a:	f000 b8a2 	b.w	800ace2 <__retarget_lock_release_recursive>
 800ab9e:	bf00      	nop
 800aba0:	20000dc2 	.word	0x20000dc2

0800aba4 <__sinit>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4604      	mov	r4, r0
 800aba8:	f7ff fff0 	bl	800ab8c <__sinit_lock_acquire>
 800abac:	69a3      	ldr	r3, [r4, #24]
 800abae:	b11b      	cbz	r3, 800abb8 <__sinit+0x14>
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f7ff bff0 	b.w	800ab98 <__sinit_lock_release>
 800abb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abbc:	6523      	str	r3, [r4, #80]	; 0x50
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <__sinit+0x68>)
 800abc0:	4a13      	ldr	r2, [pc, #76]	; (800ac10 <__sinit+0x6c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800abc6:	42a3      	cmp	r3, r4
 800abc8:	bf04      	itt	eq
 800abca:	2301      	moveq	r3, #1
 800abcc:	61a3      	streq	r3, [r4, #24]
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 f820 	bl	800ac14 <__sfp>
 800abd4:	6060      	str	r0, [r4, #4]
 800abd6:	4620      	mov	r0, r4
 800abd8:	f000 f81c 	bl	800ac14 <__sfp>
 800abdc:	60a0      	str	r0, [r4, #8]
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 f818 	bl	800ac14 <__sfp>
 800abe4:	2200      	movs	r2, #0
 800abe6:	60e0      	str	r0, [r4, #12]
 800abe8:	2104      	movs	r1, #4
 800abea:	6860      	ldr	r0, [r4, #4]
 800abec:	f7ff ff82 	bl	800aaf4 <std>
 800abf0:	68a0      	ldr	r0, [r4, #8]
 800abf2:	2201      	movs	r2, #1
 800abf4:	2109      	movs	r1, #9
 800abf6:	f7ff ff7d 	bl	800aaf4 <std>
 800abfa:	68e0      	ldr	r0, [r4, #12]
 800abfc:	2202      	movs	r2, #2
 800abfe:	2112      	movs	r1, #18
 800ac00:	f7ff ff78 	bl	800aaf4 <std>
 800ac04:	2301      	movs	r3, #1
 800ac06:	61a3      	str	r3, [r4, #24]
 800ac08:	e7d2      	b.n	800abb0 <__sinit+0xc>
 800ac0a:	bf00      	nop
 800ac0c:	0800bb68 	.word	0x0800bb68
 800ac10:	0800ab3d 	.word	0x0800ab3d

0800ac14 <__sfp>:
 800ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac16:	4607      	mov	r7, r0
 800ac18:	f7ff ffac 	bl	800ab74 <__sfp_lock_acquire>
 800ac1c:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <__sfp+0x84>)
 800ac1e:	681e      	ldr	r6, [r3, #0]
 800ac20:	69b3      	ldr	r3, [r6, #24]
 800ac22:	b913      	cbnz	r3, 800ac2a <__sfp+0x16>
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff ffbd 	bl	800aba4 <__sinit>
 800ac2a:	3648      	adds	r6, #72	; 0x48
 800ac2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	d503      	bpl.n	800ac3c <__sfp+0x28>
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	b30b      	cbz	r3, 800ac7c <__sfp+0x68>
 800ac38:	6836      	ldr	r6, [r6, #0]
 800ac3a:	e7f7      	b.n	800ac2c <__sfp+0x18>
 800ac3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac40:	b9d5      	cbnz	r5, 800ac78 <__sfp+0x64>
 800ac42:	4b16      	ldr	r3, [pc, #88]	; (800ac9c <__sfp+0x88>)
 800ac44:	60e3      	str	r3, [r4, #12]
 800ac46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac4c:	f000 f847 	bl	800acde <__retarget_lock_init_recursive>
 800ac50:	f7ff ff96 	bl	800ab80 <__sfp_lock_release>
 800ac54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac5c:	6025      	str	r5, [r4, #0]
 800ac5e:	61a5      	str	r5, [r4, #24]
 800ac60:	2208      	movs	r2, #8
 800ac62:	4629      	mov	r1, r5
 800ac64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac68:	f7ff ff0e 	bl	800aa88 <memset>
 800ac6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac74:	4620      	mov	r0, r4
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	3468      	adds	r4, #104	; 0x68
 800ac7a:	e7d9      	b.n	800ac30 <__sfp+0x1c>
 800ac7c:	2104      	movs	r1, #4
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f7ff ff62 	bl	800ab48 <__sfmoreglue>
 800ac84:	4604      	mov	r4, r0
 800ac86:	6030      	str	r0, [r6, #0]
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d1d5      	bne.n	800ac38 <__sfp+0x24>
 800ac8c:	f7ff ff78 	bl	800ab80 <__sfp_lock_release>
 800ac90:	230c      	movs	r3, #12
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	e7ee      	b.n	800ac74 <__sfp+0x60>
 800ac96:	bf00      	nop
 800ac98:	0800bb68 	.word	0x0800bb68
 800ac9c:	ffff0001 	.word	0xffff0001

0800aca0 <_fwalk_reent>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	4606      	mov	r6, r0
 800aca6:	4688      	mov	r8, r1
 800aca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acac:	2700      	movs	r7, #0
 800acae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acb2:	f1b9 0901 	subs.w	r9, r9, #1
 800acb6:	d505      	bpl.n	800acc4 <_fwalk_reent+0x24>
 800acb8:	6824      	ldr	r4, [r4, #0]
 800acba:	2c00      	cmp	r4, #0
 800acbc:	d1f7      	bne.n	800acae <_fwalk_reent+0xe>
 800acbe:	4638      	mov	r0, r7
 800acc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc4:	89ab      	ldrh	r3, [r5, #12]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d907      	bls.n	800acda <_fwalk_reent+0x3a>
 800acca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acce:	3301      	adds	r3, #1
 800acd0:	d003      	beq.n	800acda <_fwalk_reent+0x3a>
 800acd2:	4629      	mov	r1, r5
 800acd4:	4630      	mov	r0, r6
 800acd6:	47c0      	blx	r8
 800acd8:	4307      	orrs	r7, r0
 800acda:	3568      	adds	r5, #104	; 0x68
 800acdc:	e7e9      	b.n	800acb2 <_fwalk_reent+0x12>

0800acde <__retarget_lock_init_recursive>:
 800acde:	4770      	bx	lr

0800ace0 <__retarget_lock_acquire_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <__retarget_lock_release_recursive>:
 800ace2:	4770      	bx	lr

0800ace4 <sbrk_aligned>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	4e0e      	ldr	r6, [pc, #56]	; (800ad20 <sbrk_aligned+0x3c>)
 800ace8:	460c      	mov	r4, r1
 800acea:	6831      	ldr	r1, [r6, #0]
 800acec:	4605      	mov	r5, r0
 800acee:	b911      	cbnz	r1, 800acf6 <sbrk_aligned+0x12>
 800acf0:	f000 fbc2 	bl	800b478 <_sbrk_r>
 800acf4:	6030      	str	r0, [r6, #0]
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 fbbd 	bl	800b478 <_sbrk_r>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	d00a      	beq.n	800ad18 <sbrk_aligned+0x34>
 800ad02:	1cc4      	adds	r4, r0, #3
 800ad04:	f024 0403 	bic.w	r4, r4, #3
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d007      	beq.n	800ad1c <sbrk_aligned+0x38>
 800ad0c:	1a21      	subs	r1, r4, r0
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f000 fbb2 	bl	800b478 <_sbrk_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	d101      	bne.n	800ad1c <sbrk_aligned+0x38>
 800ad18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	20000dc8 	.word	0x20000dc8

0800ad24 <_malloc_r>:
 800ad24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad28:	1ccd      	adds	r5, r1, #3
 800ad2a:	f025 0503 	bic.w	r5, r5, #3
 800ad2e:	3508      	adds	r5, #8
 800ad30:	2d0c      	cmp	r5, #12
 800ad32:	bf38      	it	cc
 800ad34:	250c      	movcc	r5, #12
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	4607      	mov	r7, r0
 800ad3a:	db01      	blt.n	800ad40 <_malloc_r+0x1c>
 800ad3c:	42a9      	cmp	r1, r5
 800ad3e:	d905      	bls.n	800ad4c <_malloc_r+0x28>
 800ad40:	230c      	movs	r3, #12
 800ad42:	603b      	str	r3, [r7, #0]
 800ad44:	2600      	movs	r6, #0
 800ad46:	4630      	mov	r0, r6
 800ad48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad4c:	4e2e      	ldr	r6, [pc, #184]	; (800ae08 <_malloc_r+0xe4>)
 800ad4e:	f000 fe03 	bl	800b958 <__malloc_lock>
 800ad52:	6833      	ldr	r3, [r6, #0]
 800ad54:	461c      	mov	r4, r3
 800ad56:	bb34      	cbnz	r4, 800ada6 <_malloc_r+0x82>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	f7ff ffc2 	bl	800ace4 <sbrk_aligned>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	4604      	mov	r4, r0
 800ad64:	d14d      	bne.n	800ae02 <_malloc_r+0xde>
 800ad66:	6834      	ldr	r4, [r6, #0]
 800ad68:	4626      	mov	r6, r4
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	d140      	bne.n	800adf0 <_malloc_r+0xcc>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	4631      	mov	r1, r6
 800ad72:	4638      	mov	r0, r7
 800ad74:	eb04 0803 	add.w	r8, r4, r3
 800ad78:	f000 fb7e 	bl	800b478 <_sbrk_r>
 800ad7c:	4580      	cmp	r8, r0
 800ad7e:	d13a      	bne.n	800adf6 <_malloc_r+0xd2>
 800ad80:	6821      	ldr	r1, [r4, #0]
 800ad82:	3503      	adds	r5, #3
 800ad84:	1a6d      	subs	r5, r5, r1
 800ad86:	f025 0503 	bic.w	r5, r5, #3
 800ad8a:	3508      	adds	r5, #8
 800ad8c:	2d0c      	cmp	r5, #12
 800ad8e:	bf38      	it	cc
 800ad90:	250c      	movcc	r5, #12
 800ad92:	4629      	mov	r1, r5
 800ad94:	4638      	mov	r0, r7
 800ad96:	f7ff ffa5 	bl	800ace4 <sbrk_aligned>
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	d02b      	beq.n	800adf6 <_malloc_r+0xd2>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	442b      	add	r3, r5
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	e00e      	b.n	800adc4 <_malloc_r+0xa0>
 800ada6:	6822      	ldr	r2, [r4, #0]
 800ada8:	1b52      	subs	r2, r2, r5
 800adaa:	d41e      	bmi.n	800adea <_malloc_r+0xc6>
 800adac:	2a0b      	cmp	r2, #11
 800adae:	d916      	bls.n	800adde <_malloc_r+0xba>
 800adb0:	1961      	adds	r1, r4, r5
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	6025      	str	r5, [r4, #0]
 800adb6:	bf18      	it	ne
 800adb8:	6059      	strne	r1, [r3, #4]
 800adba:	6863      	ldr	r3, [r4, #4]
 800adbc:	bf08      	it	eq
 800adbe:	6031      	streq	r1, [r6, #0]
 800adc0:	5162      	str	r2, [r4, r5]
 800adc2:	604b      	str	r3, [r1, #4]
 800adc4:	4638      	mov	r0, r7
 800adc6:	f104 060b 	add.w	r6, r4, #11
 800adca:	f000 fdcb 	bl	800b964 <__malloc_unlock>
 800adce:	f026 0607 	bic.w	r6, r6, #7
 800add2:	1d23      	adds	r3, r4, #4
 800add4:	1af2      	subs	r2, r6, r3
 800add6:	d0b6      	beq.n	800ad46 <_malloc_r+0x22>
 800add8:	1b9b      	subs	r3, r3, r6
 800adda:	50a3      	str	r3, [r4, r2]
 800addc:	e7b3      	b.n	800ad46 <_malloc_r+0x22>
 800adde:	6862      	ldr	r2, [r4, #4]
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	bf0c      	ite	eq
 800ade4:	6032      	streq	r2, [r6, #0]
 800ade6:	605a      	strne	r2, [r3, #4]
 800ade8:	e7ec      	b.n	800adc4 <_malloc_r+0xa0>
 800adea:	4623      	mov	r3, r4
 800adec:	6864      	ldr	r4, [r4, #4]
 800adee:	e7b2      	b.n	800ad56 <_malloc_r+0x32>
 800adf0:	4634      	mov	r4, r6
 800adf2:	6876      	ldr	r6, [r6, #4]
 800adf4:	e7b9      	b.n	800ad6a <_malloc_r+0x46>
 800adf6:	230c      	movs	r3, #12
 800adf8:	603b      	str	r3, [r7, #0]
 800adfa:	4638      	mov	r0, r7
 800adfc:	f000 fdb2 	bl	800b964 <__malloc_unlock>
 800ae00:	e7a1      	b.n	800ad46 <_malloc_r+0x22>
 800ae02:	6025      	str	r5, [r4, #0]
 800ae04:	e7de      	b.n	800adc4 <_malloc_r+0xa0>
 800ae06:	bf00      	nop
 800ae08:	20000dc4 	.word	0x20000dc4

0800ae0c <__sfputc_r>:
 800ae0c:	6893      	ldr	r3, [r2, #8]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	b410      	push	{r4}
 800ae14:	6093      	str	r3, [r2, #8]
 800ae16:	da08      	bge.n	800ae2a <__sfputc_r+0x1e>
 800ae18:	6994      	ldr	r4, [r2, #24]
 800ae1a:	42a3      	cmp	r3, r4
 800ae1c:	db01      	blt.n	800ae22 <__sfputc_r+0x16>
 800ae1e:	290a      	cmp	r1, #10
 800ae20:	d103      	bne.n	800ae2a <__sfputc_r+0x1e>
 800ae22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae26:	f000 bb7b 	b.w	800b520 <__swbuf_r>
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	1c58      	adds	r0, r3, #1
 800ae2e:	6010      	str	r0, [r2, #0]
 800ae30:	7019      	strb	r1, [r3, #0]
 800ae32:	4608      	mov	r0, r1
 800ae34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <__sfputs_r>:
 800ae3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	460f      	mov	r7, r1
 800ae40:	4614      	mov	r4, r2
 800ae42:	18d5      	adds	r5, r2, r3
 800ae44:	42ac      	cmp	r4, r5
 800ae46:	d101      	bne.n	800ae4c <__sfputs_r+0x12>
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e007      	b.n	800ae5c <__sfputs_r+0x22>
 800ae4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae50:	463a      	mov	r2, r7
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7ff ffda 	bl	800ae0c <__sfputc_r>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d1f3      	bne.n	800ae44 <__sfputs_r+0xa>
 800ae5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae60 <_vfiprintf_r>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	460d      	mov	r5, r1
 800ae66:	b09d      	sub	sp, #116	; 0x74
 800ae68:	4614      	mov	r4, r2
 800ae6a:	4698      	mov	r8, r3
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	b118      	cbz	r0, 800ae78 <_vfiprintf_r+0x18>
 800ae70:	6983      	ldr	r3, [r0, #24]
 800ae72:	b90b      	cbnz	r3, 800ae78 <_vfiprintf_r+0x18>
 800ae74:	f7ff fe96 	bl	800aba4 <__sinit>
 800ae78:	4b89      	ldr	r3, [pc, #548]	; (800b0a0 <_vfiprintf_r+0x240>)
 800ae7a:	429d      	cmp	r5, r3
 800ae7c:	d11b      	bne.n	800aeb6 <_vfiprintf_r+0x56>
 800ae7e:	6875      	ldr	r5, [r6, #4]
 800ae80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae82:	07d9      	lsls	r1, r3, #31
 800ae84:	d405      	bmi.n	800ae92 <_vfiprintf_r+0x32>
 800ae86:	89ab      	ldrh	r3, [r5, #12]
 800ae88:	059a      	lsls	r2, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_vfiprintf_r+0x32>
 800ae8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae8e:	f7ff ff27 	bl	800ace0 <__retarget_lock_acquire_recursive>
 800ae92:	89ab      	ldrh	r3, [r5, #12]
 800ae94:	071b      	lsls	r3, r3, #28
 800ae96:	d501      	bpl.n	800ae9c <_vfiprintf_r+0x3c>
 800ae98:	692b      	ldr	r3, [r5, #16]
 800ae9a:	b9eb      	cbnz	r3, 800aed8 <_vfiprintf_r+0x78>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f000 fba2 	bl	800b5e8 <__swsetup_r>
 800aea4:	b1c0      	cbz	r0, 800aed8 <_vfiprintf_r+0x78>
 800aea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea8:	07dc      	lsls	r4, r3, #31
 800aeaa:	d50e      	bpl.n	800aeca <_vfiprintf_r+0x6a>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb0:	b01d      	add	sp, #116	; 0x74
 800aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	4b7b      	ldr	r3, [pc, #492]	; (800b0a4 <_vfiprintf_r+0x244>)
 800aeb8:	429d      	cmp	r5, r3
 800aeba:	d101      	bne.n	800aec0 <_vfiprintf_r+0x60>
 800aebc:	68b5      	ldr	r5, [r6, #8]
 800aebe:	e7df      	b.n	800ae80 <_vfiprintf_r+0x20>
 800aec0:	4b79      	ldr	r3, [pc, #484]	; (800b0a8 <_vfiprintf_r+0x248>)
 800aec2:	429d      	cmp	r5, r3
 800aec4:	bf08      	it	eq
 800aec6:	68f5      	ldreq	r5, [r6, #12]
 800aec8:	e7da      	b.n	800ae80 <_vfiprintf_r+0x20>
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	0598      	lsls	r0, r3, #22
 800aece:	d4ed      	bmi.n	800aeac <_vfiprintf_r+0x4c>
 800aed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aed2:	f7ff ff06 	bl	800ace2 <__retarget_lock_release_recursive>
 800aed6:	e7e9      	b.n	800aeac <_vfiprintf_r+0x4c>
 800aed8:	2300      	movs	r3, #0
 800aeda:	9309      	str	r3, [sp, #36]	; 0x24
 800aedc:	2320      	movs	r3, #32
 800aede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee6:	2330      	movs	r3, #48	; 0x30
 800aee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0ac <_vfiprintf_r+0x24c>
 800aeec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aef0:	f04f 0901 	mov.w	r9, #1
 800aef4:	4623      	mov	r3, r4
 800aef6:	469a      	mov	sl, r3
 800aef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aefc:	b10a      	cbz	r2, 800af02 <_vfiprintf_r+0xa2>
 800aefe:	2a25      	cmp	r2, #37	; 0x25
 800af00:	d1f9      	bne.n	800aef6 <_vfiprintf_r+0x96>
 800af02:	ebba 0b04 	subs.w	fp, sl, r4
 800af06:	d00b      	beq.n	800af20 <_vfiprintf_r+0xc0>
 800af08:	465b      	mov	r3, fp
 800af0a:	4622      	mov	r2, r4
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ff93 	bl	800ae3a <__sfputs_r>
 800af14:	3001      	adds	r0, #1
 800af16:	f000 80aa 	beq.w	800b06e <_vfiprintf_r+0x20e>
 800af1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af1c:	445a      	add	r2, fp
 800af1e:	9209      	str	r2, [sp, #36]	; 0x24
 800af20:	f89a 3000 	ldrb.w	r3, [sl]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 80a2 	beq.w	800b06e <_vfiprintf_r+0x20e>
 800af2a:	2300      	movs	r3, #0
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af34:	f10a 0a01 	add.w	sl, sl, #1
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	9307      	str	r3, [sp, #28]
 800af3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af40:	931a      	str	r3, [sp, #104]	; 0x68
 800af42:	4654      	mov	r4, sl
 800af44:	2205      	movs	r2, #5
 800af46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af4a:	4858      	ldr	r0, [pc, #352]	; (800b0ac <_vfiprintf_r+0x24c>)
 800af4c:	f7f5 f940 	bl	80001d0 <memchr>
 800af50:	9a04      	ldr	r2, [sp, #16]
 800af52:	b9d8      	cbnz	r0, 800af8c <_vfiprintf_r+0x12c>
 800af54:	06d1      	lsls	r1, r2, #27
 800af56:	bf44      	itt	mi
 800af58:	2320      	movmi	r3, #32
 800af5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af5e:	0713      	lsls	r3, r2, #28
 800af60:	bf44      	itt	mi
 800af62:	232b      	movmi	r3, #43	; 0x2b
 800af64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af68:	f89a 3000 	ldrb.w	r3, [sl]
 800af6c:	2b2a      	cmp	r3, #42	; 0x2a
 800af6e:	d015      	beq.n	800af9c <_vfiprintf_r+0x13c>
 800af70:	9a07      	ldr	r2, [sp, #28]
 800af72:	4654      	mov	r4, sl
 800af74:	2000      	movs	r0, #0
 800af76:	f04f 0c0a 	mov.w	ip, #10
 800af7a:	4621      	mov	r1, r4
 800af7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af80:	3b30      	subs	r3, #48	; 0x30
 800af82:	2b09      	cmp	r3, #9
 800af84:	d94e      	bls.n	800b024 <_vfiprintf_r+0x1c4>
 800af86:	b1b0      	cbz	r0, 800afb6 <_vfiprintf_r+0x156>
 800af88:	9207      	str	r2, [sp, #28]
 800af8a:	e014      	b.n	800afb6 <_vfiprintf_r+0x156>
 800af8c:	eba0 0308 	sub.w	r3, r0, r8
 800af90:	fa09 f303 	lsl.w	r3, r9, r3
 800af94:	4313      	orrs	r3, r2
 800af96:	9304      	str	r3, [sp, #16]
 800af98:	46a2      	mov	sl, r4
 800af9a:	e7d2      	b.n	800af42 <_vfiprintf_r+0xe2>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d19      	adds	r1, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9103      	str	r1, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfbb      	ittet	lt
 800afa8:	425b      	neglt	r3, r3
 800afaa:	f042 0202 	orrlt.w	r2, r2, #2
 800afae:	9307      	strge	r3, [sp, #28]
 800afb0:	9307      	strlt	r3, [sp, #28]
 800afb2:	bfb8      	it	lt
 800afb4:	9204      	strlt	r2, [sp, #16]
 800afb6:	7823      	ldrb	r3, [r4, #0]
 800afb8:	2b2e      	cmp	r3, #46	; 0x2e
 800afba:	d10c      	bne.n	800afd6 <_vfiprintf_r+0x176>
 800afbc:	7863      	ldrb	r3, [r4, #1]
 800afbe:	2b2a      	cmp	r3, #42	; 0x2a
 800afc0:	d135      	bne.n	800b02e <_vfiprintf_r+0x1ce>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	9203      	str	r2, [sp, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bfb8      	it	lt
 800afce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afd2:	3402      	adds	r4, #2
 800afd4:	9305      	str	r3, [sp, #20]
 800afd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0bc <_vfiprintf_r+0x25c>
 800afda:	7821      	ldrb	r1, [r4, #0]
 800afdc:	2203      	movs	r2, #3
 800afde:	4650      	mov	r0, sl
 800afe0:	f7f5 f8f6 	bl	80001d0 <memchr>
 800afe4:	b140      	cbz	r0, 800aff8 <_vfiprintf_r+0x198>
 800afe6:	2340      	movs	r3, #64	; 0x40
 800afe8:	eba0 000a 	sub.w	r0, r0, sl
 800afec:	fa03 f000 	lsl.w	r0, r3, r0
 800aff0:	9b04      	ldr	r3, [sp, #16]
 800aff2:	4303      	orrs	r3, r0
 800aff4:	3401      	adds	r4, #1
 800aff6:	9304      	str	r3, [sp, #16]
 800aff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affc:	482c      	ldr	r0, [pc, #176]	; (800b0b0 <_vfiprintf_r+0x250>)
 800affe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b002:	2206      	movs	r2, #6
 800b004:	f7f5 f8e4 	bl	80001d0 <memchr>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d03f      	beq.n	800b08c <_vfiprintf_r+0x22c>
 800b00c:	4b29      	ldr	r3, [pc, #164]	; (800b0b4 <_vfiprintf_r+0x254>)
 800b00e:	bb1b      	cbnz	r3, 800b058 <_vfiprintf_r+0x1f8>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	3307      	adds	r3, #7
 800b014:	f023 0307 	bic.w	r3, r3, #7
 800b018:	3308      	adds	r3, #8
 800b01a:	9303      	str	r3, [sp, #12]
 800b01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b01e:	443b      	add	r3, r7
 800b020:	9309      	str	r3, [sp, #36]	; 0x24
 800b022:	e767      	b.n	800aef4 <_vfiprintf_r+0x94>
 800b024:	fb0c 3202 	mla	r2, ip, r2, r3
 800b028:	460c      	mov	r4, r1
 800b02a:	2001      	movs	r0, #1
 800b02c:	e7a5      	b.n	800af7a <_vfiprintf_r+0x11a>
 800b02e:	2300      	movs	r3, #0
 800b030:	3401      	adds	r4, #1
 800b032:	9305      	str	r3, [sp, #20]
 800b034:	4619      	mov	r1, r3
 800b036:	f04f 0c0a 	mov.w	ip, #10
 800b03a:	4620      	mov	r0, r4
 800b03c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b040:	3a30      	subs	r2, #48	; 0x30
 800b042:	2a09      	cmp	r2, #9
 800b044:	d903      	bls.n	800b04e <_vfiprintf_r+0x1ee>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0c5      	beq.n	800afd6 <_vfiprintf_r+0x176>
 800b04a:	9105      	str	r1, [sp, #20]
 800b04c:	e7c3      	b.n	800afd6 <_vfiprintf_r+0x176>
 800b04e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b052:	4604      	mov	r4, r0
 800b054:	2301      	movs	r3, #1
 800b056:	e7f0      	b.n	800b03a <_vfiprintf_r+0x1da>
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	462a      	mov	r2, r5
 800b05e:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <_vfiprintf_r+0x258>)
 800b060:	a904      	add	r1, sp, #16
 800b062:	4630      	mov	r0, r6
 800b064:	f3af 8000 	nop.w
 800b068:	4607      	mov	r7, r0
 800b06a:	1c78      	adds	r0, r7, #1
 800b06c:	d1d6      	bne.n	800b01c <_vfiprintf_r+0x1bc>
 800b06e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b070:	07d9      	lsls	r1, r3, #31
 800b072:	d405      	bmi.n	800b080 <_vfiprintf_r+0x220>
 800b074:	89ab      	ldrh	r3, [r5, #12]
 800b076:	059a      	lsls	r2, r3, #22
 800b078:	d402      	bmi.n	800b080 <_vfiprintf_r+0x220>
 800b07a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b07c:	f7ff fe31 	bl	800ace2 <__retarget_lock_release_recursive>
 800b080:	89ab      	ldrh	r3, [r5, #12]
 800b082:	065b      	lsls	r3, r3, #25
 800b084:	f53f af12 	bmi.w	800aeac <_vfiprintf_r+0x4c>
 800b088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b08a:	e711      	b.n	800aeb0 <_vfiprintf_r+0x50>
 800b08c:	ab03      	add	r3, sp, #12
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	462a      	mov	r2, r5
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <_vfiprintf_r+0x258>)
 800b094:	a904      	add	r1, sp, #16
 800b096:	4630      	mov	r0, r6
 800b098:	f000 f880 	bl	800b19c <_printf_i>
 800b09c:	e7e4      	b.n	800b068 <_vfiprintf_r+0x208>
 800b09e:	bf00      	nop
 800b0a0:	0800bb8c 	.word	0x0800bb8c
 800b0a4:	0800bbac 	.word	0x0800bbac
 800b0a8:	0800bb6c 	.word	0x0800bb6c
 800b0ac:	0800bbcc 	.word	0x0800bbcc
 800b0b0:	0800bbd6 	.word	0x0800bbd6
 800b0b4:	00000000 	.word	0x00000000
 800b0b8:	0800ae3b 	.word	0x0800ae3b
 800b0bc:	0800bbd2 	.word	0x0800bbd2

0800b0c0 <_printf_common>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	4616      	mov	r6, r2
 800b0c6:	4699      	mov	r9, r3
 800b0c8:	688a      	ldr	r2, [r1, #8]
 800b0ca:	690b      	ldr	r3, [r1, #16]
 800b0cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	bfb8      	it	lt
 800b0d4:	4613      	movlt	r3, r2
 800b0d6:	6033      	str	r3, [r6, #0]
 800b0d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0dc:	4607      	mov	r7, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	b10a      	cbz	r2, 800b0e6 <_printf_common+0x26>
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	6033      	str	r3, [r6, #0]
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	0699      	lsls	r1, r3, #26
 800b0ea:	bf42      	ittt	mi
 800b0ec:	6833      	ldrmi	r3, [r6, #0]
 800b0ee:	3302      	addmi	r3, #2
 800b0f0:	6033      	strmi	r3, [r6, #0]
 800b0f2:	6825      	ldr	r5, [r4, #0]
 800b0f4:	f015 0506 	ands.w	r5, r5, #6
 800b0f8:	d106      	bne.n	800b108 <_printf_common+0x48>
 800b0fa:	f104 0a19 	add.w	sl, r4, #25
 800b0fe:	68e3      	ldr	r3, [r4, #12]
 800b100:	6832      	ldr	r2, [r6, #0]
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	42ab      	cmp	r3, r5
 800b106:	dc26      	bgt.n	800b156 <_printf_common+0x96>
 800b108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b10c:	1e13      	subs	r3, r2, #0
 800b10e:	6822      	ldr	r2, [r4, #0]
 800b110:	bf18      	it	ne
 800b112:	2301      	movne	r3, #1
 800b114:	0692      	lsls	r2, r2, #26
 800b116:	d42b      	bmi.n	800b170 <_printf_common+0xb0>
 800b118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b11c:	4649      	mov	r1, r9
 800b11e:	4638      	mov	r0, r7
 800b120:	47c0      	blx	r8
 800b122:	3001      	adds	r0, #1
 800b124:	d01e      	beq.n	800b164 <_printf_common+0xa4>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	68e5      	ldr	r5, [r4, #12]
 800b12a:	6832      	ldr	r2, [r6, #0]
 800b12c:	f003 0306 	and.w	r3, r3, #6
 800b130:	2b04      	cmp	r3, #4
 800b132:	bf08      	it	eq
 800b134:	1aad      	subeq	r5, r5, r2
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	6922      	ldr	r2, [r4, #16]
 800b13a:	bf0c      	ite	eq
 800b13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b140:	2500      	movne	r5, #0
 800b142:	4293      	cmp	r3, r2
 800b144:	bfc4      	itt	gt
 800b146:	1a9b      	subgt	r3, r3, r2
 800b148:	18ed      	addgt	r5, r5, r3
 800b14a:	2600      	movs	r6, #0
 800b14c:	341a      	adds	r4, #26
 800b14e:	42b5      	cmp	r5, r6
 800b150:	d11a      	bne.n	800b188 <_printf_common+0xc8>
 800b152:	2000      	movs	r0, #0
 800b154:	e008      	b.n	800b168 <_printf_common+0xa8>
 800b156:	2301      	movs	r3, #1
 800b158:	4652      	mov	r2, sl
 800b15a:	4649      	mov	r1, r9
 800b15c:	4638      	mov	r0, r7
 800b15e:	47c0      	blx	r8
 800b160:	3001      	adds	r0, #1
 800b162:	d103      	bne.n	800b16c <_printf_common+0xac>
 800b164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16c:	3501      	adds	r5, #1
 800b16e:	e7c6      	b.n	800b0fe <_printf_common+0x3e>
 800b170:	18e1      	adds	r1, r4, r3
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	2030      	movs	r0, #48	; 0x30
 800b176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b17a:	4422      	add	r2, r4
 800b17c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b184:	3302      	adds	r3, #2
 800b186:	e7c7      	b.n	800b118 <_printf_common+0x58>
 800b188:	2301      	movs	r3, #1
 800b18a:	4622      	mov	r2, r4
 800b18c:	4649      	mov	r1, r9
 800b18e:	4638      	mov	r0, r7
 800b190:	47c0      	blx	r8
 800b192:	3001      	adds	r0, #1
 800b194:	d0e6      	beq.n	800b164 <_printf_common+0xa4>
 800b196:	3601      	adds	r6, #1
 800b198:	e7d9      	b.n	800b14e <_printf_common+0x8e>
	...

0800b19c <_printf_i>:
 800b19c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a0:	7e0f      	ldrb	r7, [r1, #24]
 800b1a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1a4:	2f78      	cmp	r7, #120	; 0x78
 800b1a6:	4691      	mov	r9, r2
 800b1a8:	4680      	mov	r8, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	469a      	mov	sl, r3
 800b1ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1b2:	d807      	bhi.n	800b1c4 <_printf_i+0x28>
 800b1b4:	2f62      	cmp	r7, #98	; 0x62
 800b1b6:	d80a      	bhi.n	800b1ce <_printf_i+0x32>
 800b1b8:	2f00      	cmp	r7, #0
 800b1ba:	f000 80d8 	beq.w	800b36e <_printf_i+0x1d2>
 800b1be:	2f58      	cmp	r7, #88	; 0x58
 800b1c0:	f000 80a3 	beq.w	800b30a <_printf_i+0x16e>
 800b1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1cc:	e03a      	b.n	800b244 <_printf_i+0xa8>
 800b1ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1d2:	2b15      	cmp	r3, #21
 800b1d4:	d8f6      	bhi.n	800b1c4 <_printf_i+0x28>
 800b1d6:	a101      	add	r1, pc, #4	; (adr r1, 800b1dc <_printf_i+0x40>)
 800b1d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1dc:	0800b235 	.word	0x0800b235
 800b1e0:	0800b249 	.word	0x0800b249
 800b1e4:	0800b1c5 	.word	0x0800b1c5
 800b1e8:	0800b1c5 	.word	0x0800b1c5
 800b1ec:	0800b1c5 	.word	0x0800b1c5
 800b1f0:	0800b1c5 	.word	0x0800b1c5
 800b1f4:	0800b249 	.word	0x0800b249
 800b1f8:	0800b1c5 	.word	0x0800b1c5
 800b1fc:	0800b1c5 	.word	0x0800b1c5
 800b200:	0800b1c5 	.word	0x0800b1c5
 800b204:	0800b1c5 	.word	0x0800b1c5
 800b208:	0800b355 	.word	0x0800b355
 800b20c:	0800b279 	.word	0x0800b279
 800b210:	0800b337 	.word	0x0800b337
 800b214:	0800b1c5 	.word	0x0800b1c5
 800b218:	0800b1c5 	.word	0x0800b1c5
 800b21c:	0800b377 	.word	0x0800b377
 800b220:	0800b1c5 	.word	0x0800b1c5
 800b224:	0800b279 	.word	0x0800b279
 800b228:	0800b1c5 	.word	0x0800b1c5
 800b22c:	0800b1c5 	.word	0x0800b1c5
 800b230:	0800b33f 	.word	0x0800b33f
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	1d1a      	adds	r2, r3, #4
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	602a      	str	r2, [r5, #0]
 800b23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b244:	2301      	movs	r3, #1
 800b246:	e0a3      	b.n	800b390 <_printf_i+0x1f4>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	6829      	ldr	r1, [r5, #0]
 800b24c:	0606      	lsls	r6, r0, #24
 800b24e:	f101 0304 	add.w	r3, r1, #4
 800b252:	d50a      	bpl.n	800b26a <_printf_i+0xce>
 800b254:	680e      	ldr	r6, [r1, #0]
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	2e00      	cmp	r6, #0
 800b25a:	da03      	bge.n	800b264 <_printf_i+0xc8>
 800b25c:	232d      	movs	r3, #45	; 0x2d
 800b25e:	4276      	negs	r6, r6
 800b260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b264:	485e      	ldr	r0, [pc, #376]	; (800b3e0 <_printf_i+0x244>)
 800b266:	230a      	movs	r3, #10
 800b268:	e019      	b.n	800b29e <_printf_i+0x102>
 800b26a:	680e      	ldr	r6, [r1, #0]
 800b26c:	602b      	str	r3, [r5, #0]
 800b26e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b272:	bf18      	it	ne
 800b274:	b236      	sxthne	r6, r6
 800b276:	e7ef      	b.n	800b258 <_printf_i+0xbc>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	6820      	ldr	r0, [r4, #0]
 800b27c:	1d19      	adds	r1, r3, #4
 800b27e:	6029      	str	r1, [r5, #0]
 800b280:	0601      	lsls	r1, r0, #24
 800b282:	d501      	bpl.n	800b288 <_printf_i+0xec>
 800b284:	681e      	ldr	r6, [r3, #0]
 800b286:	e002      	b.n	800b28e <_printf_i+0xf2>
 800b288:	0646      	lsls	r6, r0, #25
 800b28a:	d5fb      	bpl.n	800b284 <_printf_i+0xe8>
 800b28c:	881e      	ldrh	r6, [r3, #0]
 800b28e:	4854      	ldr	r0, [pc, #336]	; (800b3e0 <_printf_i+0x244>)
 800b290:	2f6f      	cmp	r7, #111	; 0x6f
 800b292:	bf0c      	ite	eq
 800b294:	2308      	moveq	r3, #8
 800b296:	230a      	movne	r3, #10
 800b298:	2100      	movs	r1, #0
 800b29a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b29e:	6865      	ldr	r5, [r4, #4]
 800b2a0:	60a5      	str	r5, [r4, #8]
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	bfa2      	ittt	ge
 800b2a6:	6821      	ldrge	r1, [r4, #0]
 800b2a8:	f021 0104 	bicge.w	r1, r1, #4
 800b2ac:	6021      	strge	r1, [r4, #0]
 800b2ae:	b90e      	cbnz	r6, 800b2b4 <_printf_i+0x118>
 800b2b0:	2d00      	cmp	r5, #0
 800b2b2:	d04d      	beq.n	800b350 <_printf_i+0x1b4>
 800b2b4:	4615      	mov	r5, r2
 800b2b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b2be:	5dc7      	ldrb	r7, [r0, r7]
 800b2c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2c4:	4637      	mov	r7, r6
 800b2c6:	42bb      	cmp	r3, r7
 800b2c8:	460e      	mov	r6, r1
 800b2ca:	d9f4      	bls.n	800b2b6 <_printf_i+0x11a>
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d10b      	bne.n	800b2e8 <_printf_i+0x14c>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	07de      	lsls	r6, r3, #31
 800b2d4:	d508      	bpl.n	800b2e8 <_printf_i+0x14c>
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	bfde      	ittt	le
 800b2de:	2330      	movle	r3, #48	; 0x30
 800b2e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b2e8:	1b52      	subs	r2, r2, r5
 800b2ea:	6122      	str	r2, [r4, #16]
 800b2ec:	f8cd a000 	str.w	sl, [sp]
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	aa03      	add	r2, sp, #12
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	f7ff fee2 	bl	800b0c0 <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d14c      	bne.n	800b39a <_printf_i+0x1fe>
 800b300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b304:	b004      	add	sp, #16
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	4835      	ldr	r0, [pc, #212]	; (800b3e0 <_printf_i+0x244>)
 800b30c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b310:	6829      	ldr	r1, [r5, #0]
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	f851 6b04 	ldr.w	r6, [r1], #4
 800b318:	6029      	str	r1, [r5, #0]
 800b31a:	061d      	lsls	r5, r3, #24
 800b31c:	d514      	bpl.n	800b348 <_printf_i+0x1ac>
 800b31e:	07df      	lsls	r7, r3, #31
 800b320:	bf44      	itt	mi
 800b322:	f043 0320 	orrmi.w	r3, r3, #32
 800b326:	6023      	strmi	r3, [r4, #0]
 800b328:	b91e      	cbnz	r6, 800b332 <_printf_i+0x196>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	f023 0320 	bic.w	r3, r3, #32
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	2310      	movs	r3, #16
 800b334:	e7b0      	b.n	800b298 <_printf_i+0xfc>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	f043 0320 	orr.w	r3, r3, #32
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	2378      	movs	r3, #120	; 0x78
 800b340:	4828      	ldr	r0, [pc, #160]	; (800b3e4 <_printf_i+0x248>)
 800b342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b346:	e7e3      	b.n	800b310 <_printf_i+0x174>
 800b348:	0659      	lsls	r1, r3, #25
 800b34a:	bf48      	it	mi
 800b34c:	b2b6      	uxthmi	r6, r6
 800b34e:	e7e6      	b.n	800b31e <_printf_i+0x182>
 800b350:	4615      	mov	r5, r2
 800b352:	e7bb      	b.n	800b2cc <_printf_i+0x130>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	6826      	ldr	r6, [r4, #0]
 800b358:	6961      	ldr	r1, [r4, #20]
 800b35a:	1d18      	adds	r0, r3, #4
 800b35c:	6028      	str	r0, [r5, #0]
 800b35e:	0635      	lsls	r5, r6, #24
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	d501      	bpl.n	800b368 <_printf_i+0x1cc>
 800b364:	6019      	str	r1, [r3, #0]
 800b366:	e002      	b.n	800b36e <_printf_i+0x1d2>
 800b368:	0670      	lsls	r0, r6, #25
 800b36a:	d5fb      	bpl.n	800b364 <_printf_i+0x1c8>
 800b36c:	8019      	strh	r1, [r3, #0]
 800b36e:	2300      	movs	r3, #0
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	4615      	mov	r5, r2
 800b374:	e7ba      	b.n	800b2ec <_printf_i+0x150>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	1d1a      	adds	r2, r3, #4
 800b37a:	602a      	str	r2, [r5, #0]
 800b37c:	681d      	ldr	r5, [r3, #0]
 800b37e:	6862      	ldr	r2, [r4, #4]
 800b380:	2100      	movs	r1, #0
 800b382:	4628      	mov	r0, r5
 800b384:	f7f4 ff24 	bl	80001d0 <memchr>
 800b388:	b108      	cbz	r0, 800b38e <_printf_i+0x1f2>
 800b38a:	1b40      	subs	r0, r0, r5
 800b38c:	6060      	str	r0, [r4, #4]
 800b38e:	6863      	ldr	r3, [r4, #4]
 800b390:	6123      	str	r3, [r4, #16]
 800b392:	2300      	movs	r3, #0
 800b394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b398:	e7a8      	b.n	800b2ec <_printf_i+0x150>
 800b39a:	6923      	ldr	r3, [r4, #16]
 800b39c:	462a      	mov	r2, r5
 800b39e:	4649      	mov	r1, r9
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	47d0      	blx	sl
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d0ab      	beq.n	800b300 <_printf_i+0x164>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	079b      	lsls	r3, r3, #30
 800b3ac:	d413      	bmi.n	800b3d6 <_printf_i+0x23a>
 800b3ae:	68e0      	ldr	r0, [r4, #12]
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	4298      	cmp	r0, r3
 800b3b4:	bfb8      	it	lt
 800b3b6:	4618      	movlt	r0, r3
 800b3b8:	e7a4      	b.n	800b304 <_printf_i+0x168>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4632      	mov	r2, r6
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	47d0      	blx	sl
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d09b      	beq.n	800b300 <_printf_i+0x164>
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	68e3      	ldr	r3, [r4, #12]
 800b3cc:	9903      	ldr	r1, [sp, #12]
 800b3ce:	1a5b      	subs	r3, r3, r1
 800b3d0:	42ab      	cmp	r3, r5
 800b3d2:	dcf2      	bgt.n	800b3ba <_printf_i+0x21e>
 800b3d4:	e7eb      	b.n	800b3ae <_printf_i+0x212>
 800b3d6:	2500      	movs	r5, #0
 800b3d8:	f104 0619 	add.w	r6, r4, #25
 800b3dc:	e7f5      	b.n	800b3ca <_printf_i+0x22e>
 800b3de:	bf00      	nop
 800b3e0:	0800bbdd 	.word	0x0800bbdd
 800b3e4:	0800bbee 	.word	0x0800bbee

0800b3e8 <_putc_r>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	b118      	cbz	r0, 800b3fa <_putc_r+0x12>
 800b3f2:	6983      	ldr	r3, [r0, #24]
 800b3f4:	b90b      	cbnz	r3, 800b3fa <_putc_r+0x12>
 800b3f6:	f7ff fbd5 	bl	800aba4 <__sinit>
 800b3fa:	4b1c      	ldr	r3, [pc, #112]	; (800b46c <_putc_r+0x84>)
 800b3fc:	429c      	cmp	r4, r3
 800b3fe:	d124      	bne.n	800b44a <_putc_r+0x62>
 800b400:	6874      	ldr	r4, [r6, #4]
 800b402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b404:	07d8      	lsls	r0, r3, #31
 800b406:	d405      	bmi.n	800b414 <_putc_r+0x2c>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	0599      	lsls	r1, r3, #22
 800b40c:	d402      	bmi.n	800b414 <_putc_r+0x2c>
 800b40e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b410:	f7ff fc66 	bl	800ace0 <__retarget_lock_acquire_recursive>
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	3b01      	subs	r3, #1
 800b418:	2b00      	cmp	r3, #0
 800b41a:	60a3      	str	r3, [r4, #8]
 800b41c:	da05      	bge.n	800b42a <_putc_r+0x42>
 800b41e:	69a2      	ldr	r2, [r4, #24]
 800b420:	4293      	cmp	r3, r2
 800b422:	db1c      	blt.n	800b45e <_putc_r+0x76>
 800b424:	b2eb      	uxtb	r3, r5
 800b426:	2b0a      	cmp	r3, #10
 800b428:	d019      	beq.n	800b45e <_putc_r+0x76>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	6022      	str	r2, [r4, #0]
 800b430:	701d      	strb	r5, [r3, #0]
 800b432:	b2ed      	uxtb	r5, r5
 800b434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b436:	07da      	lsls	r2, r3, #31
 800b438:	d405      	bmi.n	800b446 <_putc_r+0x5e>
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	059b      	lsls	r3, r3, #22
 800b43e:	d402      	bmi.n	800b446 <_putc_r+0x5e>
 800b440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b442:	f7ff fc4e 	bl	800ace2 <__retarget_lock_release_recursive>
 800b446:	4628      	mov	r0, r5
 800b448:	bd70      	pop	{r4, r5, r6, pc}
 800b44a:	4b09      	ldr	r3, [pc, #36]	; (800b470 <_putc_r+0x88>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	d101      	bne.n	800b454 <_putc_r+0x6c>
 800b450:	68b4      	ldr	r4, [r6, #8]
 800b452:	e7d6      	b.n	800b402 <_putc_r+0x1a>
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <_putc_r+0x8c>)
 800b456:	429c      	cmp	r4, r3
 800b458:	bf08      	it	eq
 800b45a:	68f4      	ldreq	r4, [r6, #12]
 800b45c:	e7d1      	b.n	800b402 <_putc_r+0x1a>
 800b45e:	4629      	mov	r1, r5
 800b460:	4622      	mov	r2, r4
 800b462:	4630      	mov	r0, r6
 800b464:	f000 f85c 	bl	800b520 <__swbuf_r>
 800b468:	4605      	mov	r5, r0
 800b46a:	e7e3      	b.n	800b434 <_putc_r+0x4c>
 800b46c:	0800bb8c 	.word	0x0800bb8c
 800b470:	0800bbac 	.word	0x0800bbac
 800b474:	0800bb6c 	.word	0x0800bb6c

0800b478 <_sbrk_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d06      	ldr	r5, [pc, #24]	; (800b494 <_sbrk_r+0x1c>)
 800b47c:	2300      	movs	r3, #0
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	f7f5 fecc 	bl	8001220 <_sbrk>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_sbrk_r+0x1a>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_sbrk_r+0x1a>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	20000dcc 	.word	0x20000dcc

0800b498 <__sread>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	460c      	mov	r4, r1
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	f000 fab2 	bl	800ba08 <_read_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	bfab      	itete	ge
 800b4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b4ac:	181b      	addge	r3, r3, r0
 800b4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4b2:	bfac      	ite	ge
 800b4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4b6:	81a3      	strhlt	r3, [r4, #12]
 800b4b8:	bd10      	pop	{r4, pc}

0800b4ba <__swrite>:
 800b4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	461f      	mov	r7, r3
 800b4c0:	898b      	ldrh	r3, [r1, #12]
 800b4c2:	05db      	lsls	r3, r3, #23
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	d505      	bpl.n	800b4d8 <__swrite+0x1e>
 800b4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f000 f9c8 	bl	800b868 <_lseek_r>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strh	r3, [r4, #12]
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	f000 b869 	b.w	800b5c4 <_write_r>

0800b4f2 <__sseek>:
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 f9b5 	bl	800b868 <_lseek_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	bf15      	itete	ne
 800b504:	6560      	strne	r0, [r4, #84]	; 0x54
 800b506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strheq	r3, [r4, #12]
 800b510:	bf18      	it	ne
 800b512:	81a3      	strhne	r3, [r4, #12]
 800b514:	bd10      	pop	{r4, pc}

0800b516 <__sclose>:
 800b516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51a:	f000 b8d3 	b.w	800b6c4 <_close_r>
	...

0800b520 <__swbuf_r>:
 800b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b522:	460e      	mov	r6, r1
 800b524:	4614      	mov	r4, r2
 800b526:	4605      	mov	r5, r0
 800b528:	b118      	cbz	r0, 800b532 <__swbuf_r+0x12>
 800b52a:	6983      	ldr	r3, [r0, #24]
 800b52c:	b90b      	cbnz	r3, 800b532 <__swbuf_r+0x12>
 800b52e:	f7ff fb39 	bl	800aba4 <__sinit>
 800b532:	4b21      	ldr	r3, [pc, #132]	; (800b5b8 <__swbuf_r+0x98>)
 800b534:	429c      	cmp	r4, r3
 800b536:	d12b      	bne.n	800b590 <__swbuf_r+0x70>
 800b538:	686c      	ldr	r4, [r5, #4]
 800b53a:	69a3      	ldr	r3, [r4, #24]
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	071a      	lsls	r2, r3, #28
 800b542:	d52f      	bpl.n	800b5a4 <__swbuf_r+0x84>
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	b36b      	cbz	r3, 800b5a4 <__swbuf_r+0x84>
 800b548:	6923      	ldr	r3, [r4, #16]
 800b54a:	6820      	ldr	r0, [r4, #0]
 800b54c:	1ac0      	subs	r0, r0, r3
 800b54e:	6963      	ldr	r3, [r4, #20]
 800b550:	b2f6      	uxtb	r6, r6
 800b552:	4283      	cmp	r3, r0
 800b554:	4637      	mov	r7, r6
 800b556:	dc04      	bgt.n	800b562 <__swbuf_r+0x42>
 800b558:	4621      	mov	r1, r4
 800b55a:	4628      	mov	r0, r5
 800b55c:	f000 f948 	bl	800b7f0 <_fflush_r>
 800b560:	bb30      	cbnz	r0, 800b5b0 <__swbuf_r+0x90>
 800b562:	68a3      	ldr	r3, [r4, #8]
 800b564:	3b01      	subs	r3, #1
 800b566:	60a3      	str	r3, [r4, #8]
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	6022      	str	r2, [r4, #0]
 800b56e:	701e      	strb	r6, [r3, #0]
 800b570:	6963      	ldr	r3, [r4, #20]
 800b572:	3001      	adds	r0, #1
 800b574:	4283      	cmp	r3, r0
 800b576:	d004      	beq.n	800b582 <__swbuf_r+0x62>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	07db      	lsls	r3, r3, #31
 800b57c:	d506      	bpl.n	800b58c <__swbuf_r+0x6c>
 800b57e:	2e0a      	cmp	r6, #10
 800b580:	d104      	bne.n	800b58c <__swbuf_r+0x6c>
 800b582:	4621      	mov	r1, r4
 800b584:	4628      	mov	r0, r5
 800b586:	f000 f933 	bl	800b7f0 <_fflush_r>
 800b58a:	b988      	cbnz	r0, 800b5b0 <__swbuf_r+0x90>
 800b58c:	4638      	mov	r0, r7
 800b58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <__swbuf_r+0x9c>)
 800b592:	429c      	cmp	r4, r3
 800b594:	d101      	bne.n	800b59a <__swbuf_r+0x7a>
 800b596:	68ac      	ldr	r4, [r5, #8]
 800b598:	e7cf      	b.n	800b53a <__swbuf_r+0x1a>
 800b59a:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <__swbuf_r+0xa0>)
 800b59c:	429c      	cmp	r4, r3
 800b59e:	bf08      	it	eq
 800b5a0:	68ec      	ldreq	r4, [r5, #12]
 800b5a2:	e7ca      	b.n	800b53a <__swbuf_r+0x1a>
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f000 f81e 	bl	800b5e8 <__swsetup_r>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d0cb      	beq.n	800b548 <__swbuf_r+0x28>
 800b5b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b5b4:	e7ea      	b.n	800b58c <__swbuf_r+0x6c>
 800b5b6:	bf00      	nop
 800b5b8:	0800bb8c 	.word	0x0800bb8c
 800b5bc:	0800bbac 	.word	0x0800bbac
 800b5c0:	0800bb6c 	.word	0x0800bb6c

0800b5c4 <_write_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d07      	ldr	r5, [pc, #28]	; (800b5e4 <_write_r+0x20>)
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	602a      	str	r2, [r5, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f7f5 fdd3 	bl	800117e <_write>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_write_r+0x1e>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_write_r+0x1e>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	20000dcc 	.word	0x20000dcc

0800b5e8 <__swsetup_r>:
 800b5e8:	4b32      	ldr	r3, [pc, #200]	; (800b6b4 <__swsetup_r+0xcc>)
 800b5ea:	b570      	push	{r4, r5, r6, lr}
 800b5ec:	681d      	ldr	r5, [r3, #0]
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	b125      	cbz	r5, 800b5fe <__swsetup_r+0x16>
 800b5f4:	69ab      	ldr	r3, [r5, #24]
 800b5f6:	b913      	cbnz	r3, 800b5fe <__swsetup_r+0x16>
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f7ff fad3 	bl	800aba4 <__sinit>
 800b5fe:	4b2e      	ldr	r3, [pc, #184]	; (800b6b8 <__swsetup_r+0xd0>)
 800b600:	429c      	cmp	r4, r3
 800b602:	d10f      	bne.n	800b624 <__swsetup_r+0x3c>
 800b604:	686c      	ldr	r4, [r5, #4]
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b60c:	0719      	lsls	r1, r3, #28
 800b60e:	d42c      	bmi.n	800b66a <__swsetup_r+0x82>
 800b610:	06dd      	lsls	r5, r3, #27
 800b612:	d411      	bmi.n	800b638 <__swsetup_r+0x50>
 800b614:	2309      	movs	r3, #9
 800b616:	6033      	str	r3, [r6, #0]
 800b618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b622:	e03e      	b.n	800b6a2 <__swsetup_r+0xba>
 800b624:	4b25      	ldr	r3, [pc, #148]	; (800b6bc <__swsetup_r+0xd4>)
 800b626:	429c      	cmp	r4, r3
 800b628:	d101      	bne.n	800b62e <__swsetup_r+0x46>
 800b62a:	68ac      	ldr	r4, [r5, #8]
 800b62c:	e7eb      	b.n	800b606 <__swsetup_r+0x1e>
 800b62e:	4b24      	ldr	r3, [pc, #144]	; (800b6c0 <__swsetup_r+0xd8>)
 800b630:	429c      	cmp	r4, r3
 800b632:	bf08      	it	eq
 800b634:	68ec      	ldreq	r4, [r5, #12]
 800b636:	e7e6      	b.n	800b606 <__swsetup_r+0x1e>
 800b638:	0758      	lsls	r0, r3, #29
 800b63a:	d512      	bpl.n	800b662 <__swsetup_r+0x7a>
 800b63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b63e:	b141      	cbz	r1, 800b652 <__swsetup_r+0x6a>
 800b640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b644:	4299      	cmp	r1, r3
 800b646:	d002      	beq.n	800b64e <__swsetup_r+0x66>
 800b648:	4630      	mov	r0, r6
 800b64a:	f000 f991 	bl	800b970 <_free_r>
 800b64e:	2300      	movs	r3, #0
 800b650:	6363      	str	r3, [r4, #52]	; 0x34
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	2300      	movs	r3, #0
 800b65c:	6063      	str	r3, [r4, #4]
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f043 0308 	orr.w	r3, r3, #8
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	b94b      	cbnz	r3, 800b682 <__swsetup_r+0x9a>
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b678:	d003      	beq.n	800b682 <__swsetup_r+0x9a>
 800b67a:	4621      	mov	r1, r4
 800b67c:	4630      	mov	r0, r6
 800b67e:	f000 f92b 	bl	800b8d8 <__smakebuf_r>
 800b682:	89a0      	ldrh	r0, [r4, #12]
 800b684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b688:	f010 0301 	ands.w	r3, r0, #1
 800b68c:	d00a      	beq.n	800b6a4 <__swsetup_r+0xbc>
 800b68e:	2300      	movs	r3, #0
 800b690:	60a3      	str	r3, [r4, #8]
 800b692:	6963      	ldr	r3, [r4, #20]
 800b694:	425b      	negs	r3, r3
 800b696:	61a3      	str	r3, [r4, #24]
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	b943      	cbnz	r3, 800b6ae <__swsetup_r+0xc6>
 800b69c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6a0:	d1ba      	bne.n	800b618 <__swsetup_r+0x30>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	0781      	lsls	r1, r0, #30
 800b6a6:	bf58      	it	pl
 800b6a8:	6963      	ldrpl	r3, [r4, #20]
 800b6aa:	60a3      	str	r3, [r4, #8]
 800b6ac:	e7f4      	b.n	800b698 <__swsetup_r+0xb0>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e7f7      	b.n	800b6a2 <__swsetup_r+0xba>
 800b6b2:	bf00      	nop
 800b6b4:	2000011c 	.word	0x2000011c
 800b6b8:	0800bb8c 	.word	0x0800bb8c
 800b6bc:	0800bbac 	.word	0x0800bbac
 800b6c0:	0800bb6c 	.word	0x0800bb6c

0800b6c4 <_close_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d06      	ldr	r5, [pc, #24]	; (800b6e0 <_close_r+0x1c>)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	602b      	str	r3, [r5, #0]
 800b6d0:	f7f5 fd71 	bl	80011b6 <_close>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_close_r+0x1a>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_close_r+0x1a>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20000dcc 	.word	0x20000dcc

0800b6e4 <__sflush_r>:
 800b6e4:	898a      	ldrh	r2, [r1, #12]
 800b6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	0710      	lsls	r0, r2, #28
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	d458      	bmi.n	800b7a4 <__sflush_r+0xc0>
 800b6f2:	684b      	ldr	r3, [r1, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc05      	bgt.n	800b704 <__sflush_r+0x20>
 800b6f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dc02      	bgt.n	800b704 <__sflush_r+0x20>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b706:	2e00      	cmp	r6, #0
 800b708:	d0f9      	beq.n	800b6fe <__sflush_r+0x1a>
 800b70a:	2300      	movs	r3, #0
 800b70c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b710:	682f      	ldr	r7, [r5, #0]
 800b712:	602b      	str	r3, [r5, #0]
 800b714:	d032      	beq.n	800b77c <__sflush_r+0x98>
 800b716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	075a      	lsls	r2, r3, #29
 800b71c:	d505      	bpl.n	800b72a <__sflush_r+0x46>
 800b71e:	6863      	ldr	r3, [r4, #4]
 800b720:	1ac0      	subs	r0, r0, r3
 800b722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b724:	b10b      	cbz	r3, 800b72a <__sflush_r+0x46>
 800b726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b728:	1ac0      	subs	r0, r0, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	4602      	mov	r2, r0
 800b72e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b730:	6a21      	ldr	r1, [r4, #32]
 800b732:	4628      	mov	r0, r5
 800b734:	47b0      	blx	r6
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	d106      	bne.n	800b74a <__sflush_r+0x66>
 800b73c:	6829      	ldr	r1, [r5, #0]
 800b73e:	291d      	cmp	r1, #29
 800b740:	d82c      	bhi.n	800b79c <__sflush_r+0xb8>
 800b742:	4a2a      	ldr	r2, [pc, #168]	; (800b7ec <__sflush_r+0x108>)
 800b744:	40ca      	lsrs	r2, r1
 800b746:	07d6      	lsls	r6, r2, #31
 800b748:	d528      	bpl.n	800b79c <__sflush_r+0xb8>
 800b74a:	2200      	movs	r2, #0
 800b74c:	6062      	str	r2, [r4, #4]
 800b74e:	04d9      	lsls	r1, r3, #19
 800b750:	6922      	ldr	r2, [r4, #16]
 800b752:	6022      	str	r2, [r4, #0]
 800b754:	d504      	bpl.n	800b760 <__sflush_r+0x7c>
 800b756:	1c42      	adds	r2, r0, #1
 800b758:	d101      	bne.n	800b75e <__sflush_r+0x7a>
 800b75a:	682b      	ldr	r3, [r5, #0]
 800b75c:	b903      	cbnz	r3, 800b760 <__sflush_r+0x7c>
 800b75e:	6560      	str	r0, [r4, #84]	; 0x54
 800b760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b762:	602f      	str	r7, [r5, #0]
 800b764:	2900      	cmp	r1, #0
 800b766:	d0ca      	beq.n	800b6fe <__sflush_r+0x1a>
 800b768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b76c:	4299      	cmp	r1, r3
 800b76e:	d002      	beq.n	800b776 <__sflush_r+0x92>
 800b770:	4628      	mov	r0, r5
 800b772:	f000 f8fd 	bl	800b970 <_free_r>
 800b776:	2000      	movs	r0, #0
 800b778:	6360      	str	r0, [r4, #52]	; 0x34
 800b77a:	e7c1      	b.n	800b700 <__sflush_r+0x1c>
 800b77c:	6a21      	ldr	r1, [r4, #32]
 800b77e:	2301      	movs	r3, #1
 800b780:	4628      	mov	r0, r5
 800b782:	47b0      	blx	r6
 800b784:	1c41      	adds	r1, r0, #1
 800b786:	d1c7      	bne.n	800b718 <__sflush_r+0x34>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0c4      	beq.n	800b718 <__sflush_r+0x34>
 800b78e:	2b1d      	cmp	r3, #29
 800b790:	d001      	beq.n	800b796 <__sflush_r+0xb2>
 800b792:	2b16      	cmp	r3, #22
 800b794:	d101      	bne.n	800b79a <__sflush_r+0xb6>
 800b796:	602f      	str	r7, [r5, #0]
 800b798:	e7b1      	b.n	800b6fe <__sflush_r+0x1a>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	e7ad      	b.n	800b700 <__sflush_r+0x1c>
 800b7a4:	690f      	ldr	r7, [r1, #16]
 800b7a6:	2f00      	cmp	r7, #0
 800b7a8:	d0a9      	beq.n	800b6fe <__sflush_r+0x1a>
 800b7aa:	0793      	lsls	r3, r2, #30
 800b7ac:	680e      	ldr	r6, [r1, #0]
 800b7ae:	bf08      	it	eq
 800b7b0:	694b      	ldreq	r3, [r1, #20]
 800b7b2:	600f      	str	r7, [r1, #0]
 800b7b4:	bf18      	it	ne
 800b7b6:	2300      	movne	r3, #0
 800b7b8:	eba6 0807 	sub.w	r8, r6, r7
 800b7bc:	608b      	str	r3, [r1, #8]
 800b7be:	f1b8 0f00 	cmp.w	r8, #0
 800b7c2:	dd9c      	ble.n	800b6fe <__sflush_r+0x1a>
 800b7c4:	6a21      	ldr	r1, [r4, #32]
 800b7c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7c8:	4643      	mov	r3, r8
 800b7ca:	463a      	mov	r2, r7
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b0      	blx	r6
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	dc06      	bgt.n	800b7e2 <__sflush_r+0xfe>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e0:	e78e      	b.n	800b700 <__sflush_r+0x1c>
 800b7e2:	4407      	add	r7, r0
 800b7e4:	eba8 0800 	sub.w	r8, r8, r0
 800b7e8:	e7e9      	b.n	800b7be <__sflush_r+0xda>
 800b7ea:	bf00      	nop
 800b7ec:	20400001 	.word	0x20400001

0800b7f0 <_fflush_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	690b      	ldr	r3, [r1, #16]
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	b913      	cbnz	r3, 800b800 <_fflush_r+0x10>
 800b7fa:	2500      	movs	r5, #0
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	b118      	cbz	r0, 800b80a <_fflush_r+0x1a>
 800b802:	6983      	ldr	r3, [r0, #24]
 800b804:	b90b      	cbnz	r3, 800b80a <_fflush_r+0x1a>
 800b806:	f7ff f9cd 	bl	800aba4 <__sinit>
 800b80a:	4b14      	ldr	r3, [pc, #80]	; (800b85c <_fflush_r+0x6c>)
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d11b      	bne.n	800b848 <_fflush_r+0x58>
 800b810:	686c      	ldr	r4, [r5, #4]
 800b812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0ef      	beq.n	800b7fa <_fflush_r+0xa>
 800b81a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b81c:	07d0      	lsls	r0, r2, #31
 800b81e:	d404      	bmi.n	800b82a <_fflush_r+0x3a>
 800b820:	0599      	lsls	r1, r3, #22
 800b822:	d402      	bmi.n	800b82a <_fflush_r+0x3a>
 800b824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b826:	f7ff fa5b 	bl	800ace0 <__retarget_lock_acquire_recursive>
 800b82a:	4628      	mov	r0, r5
 800b82c:	4621      	mov	r1, r4
 800b82e:	f7ff ff59 	bl	800b6e4 <__sflush_r>
 800b832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b834:	07da      	lsls	r2, r3, #31
 800b836:	4605      	mov	r5, r0
 800b838:	d4e0      	bmi.n	800b7fc <_fflush_r+0xc>
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	059b      	lsls	r3, r3, #22
 800b83e:	d4dd      	bmi.n	800b7fc <_fflush_r+0xc>
 800b840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b842:	f7ff fa4e 	bl	800ace2 <__retarget_lock_release_recursive>
 800b846:	e7d9      	b.n	800b7fc <_fflush_r+0xc>
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <_fflush_r+0x70>)
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d101      	bne.n	800b852 <_fflush_r+0x62>
 800b84e:	68ac      	ldr	r4, [r5, #8]
 800b850:	e7df      	b.n	800b812 <_fflush_r+0x22>
 800b852:	4b04      	ldr	r3, [pc, #16]	; (800b864 <_fflush_r+0x74>)
 800b854:	429c      	cmp	r4, r3
 800b856:	bf08      	it	eq
 800b858:	68ec      	ldreq	r4, [r5, #12]
 800b85a:	e7da      	b.n	800b812 <_fflush_r+0x22>
 800b85c:	0800bb8c 	.word	0x0800bb8c
 800b860:	0800bbac 	.word	0x0800bbac
 800b864:	0800bb6c 	.word	0x0800bb6c

0800b868 <_lseek_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	; (800b888 <_lseek_r+0x20>)
 800b86c:	4604      	mov	r4, r0
 800b86e:	4608      	mov	r0, r1
 800b870:	4611      	mov	r1, r2
 800b872:	2200      	movs	r2, #0
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f7f5 fcc4 	bl	8001204 <_lseek>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_lseek_r+0x1e>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_lseek_r+0x1e>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20000dcc 	.word	0x20000dcc

0800b88c <__swhatbuf_r>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	460e      	mov	r6, r1
 800b890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b894:	2900      	cmp	r1, #0
 800b896:	b096      	sub	sp, #88	; 0x58
 800b898:	4614      	mov	r4, r2
 800b89a:	461d      	mov	r5, r3
 800b89c:	da08      	bge.n	800b8b0 <__swhatbuf_r+0x24>
 800b89e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	602a      	str	r2, [r5, #0]
 800b8a6:	061a      	lsls	r2, r3, #24
 800b8a8:	d410      	bmi.n	800b8cc <__swhatbuf_r+0x40>
 800b8aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ae:	e00e      	b.n	800b8ce <__swhatbuf_r+0x42>
 800b8b0:	466a      	mov	r2, sp
 800b8b2:	f000 f8bb 	bl	800ba2c <_fstat_r>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	dbf1      	blt.n	800b89e <__swhatbuf_r+0x12>
 800b8ba:	9a01      	ldr	r2, [sp, #4]
 800b8bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8c4:	425a      	negs	r2, r3
 800b8c6:	415a      	adcs	r2, r3
 800b8c8:	602a      	str	r2, [r5, #0]
 800b8ca:	e7ee      	b.n	800b8aa <__swhatbuf_r+0x1e>
 800b8cc:	2340      	movs	r3, #64	; 0x40
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	b016      	add	sp, #88	; 0x58
 800b8d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8d8 <__smakebuf_r>:
 800b8d8:	898b      	ldrh	r3, [r1, #12]
 800b8da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8dc:	079d      	lsls	r5, r3, #30
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	d507      	bpl.n	800b8f4 <__smakebuf_r+0x1c>
 800b8e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	6163      	str	r3, [r4, #20]
 800b8f0:	b002      	add	sp, #8
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	ab01      	add	r3, sp, #4
 800b8f6:	466a      	mov	r2, sp
 800b8f8:	f7ff ffc8 	bl	800b88c <__swhatbuf_r>
 800b8fc:	9900      	ldr	r1, [sp, #0]
 800b8fe:	4605      	mov	r5, r0
 800b900:	4630      	mov	r0, r6
 800b902:	f7ff fa0f 	bl	800ad24 <_malloc_r>
 800b906:	b948      	cbnz	r0, 800b91c <__smakebuf_r+0x44>
 800b908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90c:	059a      	lsls	r2, r3, #22
 800b90e:	d4ef      	bmi.n	800b8f0 <__smakebuf_r+0x18>
 800b910:	f023 0303 	bic.w	r3, r3, #3
 800b914:	f043 0302 	orr.w	r3, r3, #2
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	e7e3      	b.n	800b8e4 <__smakebuf_r+0xc>
 800b91c:	4b0d      	ldr	r3, [pc, #52]	; (800b954 <__smakebuf_r+0x7c>)
 800b91e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	6020      	str	r0, [r4, #0]
 800b924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	9b00      	ldr	r3, [sp, #0]
 800b92c:	6163      	str	r3, [r4, #20]
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	6120      	str	r0, [r4, #16]
 800b932:	b15b      	cbz	r3, 800b94c <__smakebuf_r+0x74>
 800b934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b938:	4630      	mov	r0, r6
 800b93a:	f000 f889 	bl	800ba50 <_isatty_r>
 800b93e:	b128      	cbz	r0, 800b94c <__smakebuf_r+0x74>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f023 0303 	bic.w	r3, r3, #3
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	89a0      	ldrh	r0, [r4, #12]
 800b94e:	4305      	orrs	r5, r0
 800b950:	81a5      	strh	r5, [r4, #12]
 800b952:	e7cd      	b.n	800b8f0 <__smakebuf_r+0x18>
 800b954:	0800ab3d 	.word	0x0800ab3d

0800b958 <__malloc_lock>:
 800b958:	4801      	ldr	r0, [pc, #4]	; (800b960 <__malloc_lock+0x8>)
 800b95a:	f7ff b9c1 	b.w	800ace0 <__retarget_lock_acquire_recursive>
 800b95e:	bf00      	nop
 800b960:	20000dc0 	.word	0x20000dc0

0800b964 <__malloc_unlock>:
 800b964:	4801      	ldr	r0, [pc, #4]	; (800b96c <__malloc_unlock+0x8>)
 800b966:	f7ff b9bc 	b.w	800ace2 <__retarget_lock_release_recursive>
 800b96a:	bf00      	nop
 800b96c:	20000dc0 	.word	0x20000dc0

0800b970 <_free_r>:
 800b970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b972:	2900      	cmp	r1, #0
 800b974:	d044      	beq.n	800ba00 <_free_r+0x90>
 800b976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b97a:	9001      	str	r0, [sp, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f1a1 0404 	sub.w	r4, r1, #4
 800b982:	bfb8      	it	lt
 800b984:	18e4      	addlt	r4, r4, r3
 800b986:	f7ff ffe7 	bl	800b958 <__malloc_lock>
 800b98a:	4a1e      	ldr	r2, [pc, #120]	; (800ba04 <_free_r+0x94>)
 800b98c:	9801      	ldr	r0, [sp, #4]
 800b98e:	6813      	ldr	r3, [r2, #0]
 800b990:	b933      	cbnz	r3, 800b9a0 <_free_r+0x30>
 800b992:	6063      	str	r3, [r4, #4]
 800b994:	6014      	str	r4, [r2, #0]
 800b996:	b003      	add	sp, #12
 800b998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b99c:	f7ff bfe2 	b.w	800b964 <__malloc_unlock>
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d908      	bls.n	800b9b6 <_free_r+0x46>
 800b9a4:	6825      	ldr	r5, [r4, #0]
 800b9a6:	1961      	adds	r1, r4, r5
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf01      	itttt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	1949      	addeq	r1, r1, r5
 800b9b2:	6021      	streq	r1, [r4, #0]
 800b9b4:	e7ed      	b.n	800b992 <_free_r+0x22>
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b10b      	cbz	r3, 800b9c0 <_free_r+0x50>
 800b9bc:	42a3      	cmp	r3, r4
 800b9be:	d9fa      	bls.n	800b9b6 <_free_r+0x46>
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	1855      	adds	r5, r2, r1
 800b9c4:	42a5      	cmp	r5, r4
 800b9c6:	d10b      	bne.n	800b9e0 <_free_r+0x70>
 800b9c8:	6824      	ldr	r4, [r4, #0]
 800b9ca:	4421      	add	r1, r4
 800b9cc:	1854      	adds	r4, r2, r1
 800b9ce:	42a3      	cmp	r3, r4
 800b9d0:	6011      	str	r1, [r2, #0]
 800b9d2:	d1e0      	bne.n	800b996 <_free_r+0x26>
 800b9d4:	681c      	ldr	r4, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	6053      	str	r3, [r2, #4]
 800b9da:	4421      	add	r1, r4
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	e7da      	b.n	800b996 <_free_r+0x26>
 800b9e0:	d902      	bls.n	800b9e8 <_free_r+0x78>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	e7d6      	b.n	800b996 <_free_r+0x26>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf04      	itt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	bf04      	itt	eq
 800b9f8:	1949      	addeq	r1, r1, r5
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	6054      	str	r4, [r2, #4]
 800b9fe:	e7ca      	b.n	800b996 <_free_r+0x26>
 800ba00:	b003      	add	sp, #12
 800ba02:	bd30      	pop	{r4, r5, pc}
 800ba04:	20000dc4 	.word	0x20000dc4

0800ba08 <_read_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_read_r+0x20>)
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4611      	mov	r1, r2
 800ba12:	2200      	movs	r2, #0
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7f5 fb94 	bl	8001144 <_read>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_read_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_read_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20000dcc 	.word	0x20000dcc

0800ba2c <_fstat_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d07      	ldr	r5, [pc, #28]	; (800ba4c <_fstat_r+0x20>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	4611      	mov	r1, r2
 800ba38:	602b      	str	r3, [r5, #0]
 800ba3a:	f7f5 fbc8 	bl	80011ce <_fstat>
 800ba3e:	1c43      	adds	r3, r0, #1
 800ba40:	d102      	bne.n	800ba48 <_fstat_r+0x1c>
 800ba42:	682b      	ldr	r3, [r5, #0]
 800ba44:	b103      	cbz	r3, 800ba48 <_fstat_r+0x1c>
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	bd38      	pop	{r3, r4, r5, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000dcc 	.word	0x20000dcc

0800ba50 <_isatty_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d06      	ldr	r5, [pc, #24]	; (800ba6c <_isatty_r+0x1c>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	f7f5 fbc7 	bl	80011ee <_isatty>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_isatty_r+0x1a>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_isatty_r+0x1a>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20000dcc 	.word	0x20000dcc

0800ba70 <_init>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	bf00      	nop
 800ba74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba76:	bc08      	pop	{r3}
 800ba78:	469e      	mov	lr, r3
 800ba7a:	4770      	bx	lr

0800ba7c <_fini>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	bf00      	nop
 800ba80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba82:	bc08      	pop	{r3}
 800ba84:	469e      	mov	lr, r3
 800ba86:	4770      	bx	lr
