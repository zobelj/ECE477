
F407_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec8  0800aec8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aed0  0800aed0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aed0  0800aed0  0001aed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800aed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00000c50  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20000dd0  20000dd0  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ecb  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a5  00000000  00000000  0003907b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001508  00000000  00000000  0003dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000065a0  00000000  00000000  0003f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b589  00000000  00000000  00045950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2be4  00000000  00000000  00060ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133abd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067fc  00000000  00000000  00133b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad3c 	.word	0x0800ad3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000184 	.word	0x20000184
 80001cc:	0800ad3c 	.word	0x0800ad3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <scan_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Local Keypad Scanning */
void scan_keypad() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  set_rows();
 800057a:	f000 f847 	bl	800060c <set_rows>

  // read the columns
  int local_cols = get_cols();
 800057e:	f000 f8bd 	bl	80006fc <get_cols>
 8000582:	6038      	str	r0, [r7, #0]
  //int local_cols = all_cols & 0x0F;
  //int expander_cols = (all_cols & 0xF0) >> 4;

  // scan local cols
  for(int i = 0; i < nCols1; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	e030      	b.n	80005ec <scan_keypad+0x78>
    if(local_cols & (1 << i)) {
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	fa42 f303 	asr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d019      	beq.n	80005ce <scan_keypad+0x5a>
    	if (keypresses1[row][i] != 1) {
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <scan_keypad+0x8c>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4919      	ldr	r1, [pc, #100]	; (8000604 <scan_keypad+0x90>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	18ca      	adds	r2, r1, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d018      	beq.n	80005e6 <scan_keypad+0x72>
    		keypresses1[row][i] = 1;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <scan_keypad+0x8c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4912      	ldr	r1, [pc, #72]	; (8000604 <scan_keypad+0x90>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4413      	add	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	18ca      	adds	r2, r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e00b      	b.n	80005e6 <scan_keypad+0x72>
//    	    charCount++;
//    	    charsInCycle++;
    	}
    }
    else {
      keypresses1[row][i] = 0;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <scan_keypad+0x8c>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <scan_keypad+0x90>)
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	18ca      	adds	r2, r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < nCols1; i++) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <scan_keypad+0x94>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbc9      	blt.n	800058a <scan_keypad+0x16>
//      keypresses2[row][i] = 0;
//    }
//
//  }

}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200003ac 	.word	0x200003ac
 8000604:	2000019c 	.word	0x2000019c
 8000608:	20000004 	.word	0x20000004

0800060c <set_rows>:

void set_rows() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  // update row value
  row = (row + 1) % nRows1;
 8000610:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <set_rows+0xe4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a37      	ldr	r2, [pc, #220]	; (80006f4 <set_rows+0xe8>)
 8000618:	6812      	ldr	r2, [r2, #0]
 800061a:	fb93 f1f2 	sdiv	r1, r3, r2
 800061e:	fb01 f202 	mul.w	r2, r1, r2
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <set_rows+0xe4>)
 8000626:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	4832      	ldr	r0, [pc, #200]	; (80006f8 <set_rows+0xec>)
 800062e:	f001 fc7f 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2102      	movs	r1, #2
 8000636:	4830      	ldr	r0, [pc, #192]	; (80006f8 <set_rows+0xec>)
 8000638:	f001 fc7a 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2104      	movs	r1, #4
 8000640:	482d      	ldr	r0, [pc, #180]	; (80006f8 <set_rows+0xec>)
 8000642:	f001 fc75 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2108      	movs	r1, #8
 800064a:	482b      	ldr	r0, [pc, #172]	; (80006f8 <set_rows+0xec>)
 800064c:	f001 fc70 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4828      	ldr	r0, [pc, #160]	; (80006f8 <set_rows+0xec>)
 8000656:	f001 fc6b 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2120      	movs	r1, #32
 800065e:	4826      	ldr	r0, [pc, #152]	; (80006f8 <set_rows+0xec>)
 8000660:	f001 fc66 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4823      	ldr	r0, [pc, #140]	; (80006f8 <set_rows+0xec>)
 800066a:	f001 fc61 	bl	8001f30 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low and last row back to high
  switch(row) {
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <set_rows+0xe4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b06      	cmp	r3, #6
 8000674:	d83a      	bhi.n	80006ec <set_rows+0xe0>
 8000676:	a201      	add	r2, pc, #4	; (adr r2, 800067c <set_rows+0x70>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000699 	.word	0x08000699
 8000680:	080006a5 	.word	0x080006a5
 8000684:	080006b1 	.word	0x080006b1
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006c9 	.word	0x080006c9
 8000690:	080006d5 	.word	0x080006d5
 8000694:	080006e1 	.word	0x080006e1
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	4816      	ldr	r0, [pc, #88]	; (80006f8 <set_rows+0xec>)
 800069e:	f001 fc47 	bl	8001f30 <HAL_GPIO_WritePin>
      break;
 80006a2:	e023      	b.n	80006ec <set_rows+0xe0>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2102      	movs	r1, #2
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <set_rows+0xec>)
 80006aa:	f001 fc41 	bl	8001f30 <HAL_GPIO_WritePin>
      break;
 80006ae:	e01d      	b.n	80006ec <set_rows+0xe0>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2104      	movs	r1, #4
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <set_rows+0xec>)
 80006b6:	f001 fc3b 	bl	8001f30 <HAL_GPIO_WritePin>
      break;
 80006ba:	e017      	b.n	80006ec <set_rows+0xe0>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <set_rows+0xec>)
 80006c2:	f001 fc35 	bl	8001f30 <HAL_GPIO_WritePin>
      break;
 80006c6:	e011      	b.n	80006ec <set_rows+0xe0>
    case 4:
      HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <set_rows+0xec>)
 80006ce:	f001 fc2f 	bl	8001f30 <HAL_GPIO_WritePin>
      break;
 80006d2:	e00b      	b.n	80006ec <set_rows+0xe0>
    case 5:
	  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <set_rows+0xec>)
 80006da:	f001 fc29 	bl	8001f30 <HAL_GPIO_WritePin>
	  break;
 80006de:	e005      	b.n	80006ec <set_rows+0xe0>
    case 6:
	  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <set_rows+0xec>)
 80006e6:	f001 fc23 	bl	8001f30 <HAL_GPIO_WritePin>
	  break;
 80006ea:	bf00      	nop
  // TODO: change this logic to work with all 7 rows on Side B.
  // Code below works for the breadboard prototype
  // set current row to low and others to high on gpio expander keypad
//  uint8_t data[2] = {0x0A, ~( 8 >> row )};
//  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200003ac 	.word	0x200003ac
 80006f4:	20000000 	.word	0x20000000
 80006f8:	40020c00 	.word	0x40020c00

080006fc <get_cols>:

int get_cols() {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 7) & 0x3F;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <get_cols+0x24>)
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	09db      	lsrs	r3, r3, #7
 8000708:	43db      	mvns	r3, r3
 800070a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800070e:	607b      	str	r3, [r7, #4]
//  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
//  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 1, 1000);

  //int expander_cols = data[0] & 0xF0;

  return local_cols;// | expander_cols;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40020c00 	.word	0x40020c00

08000724 <record_keys>:

/* USB Functions */
void record_keys() {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 800072a:	2208      	movs	r2, #8
 800072c:	2100      	movs	r1, #0
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <record_keys+0x80>)
 8000730:	f009 fb10 	bl	8009d54 <memset>
  keycodeNum = 1;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <record_keys+0x84>)
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < nRows1; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e027      	b.n	8000790 <record_keys+0x6c>
	  for(int j = 0; j < nCols1; j++) {
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	e01c      	b.n	8000780 <record_keys+0x5c>
		  if(keypresses1[i][j] == 1) {
 8000746:	4919      	ldr	r1, [pc, #100]	; (80007ac <record_keys+0x88>)
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	18ca      	adds	r2, r1, r3
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d10d      	bne.n	800077a <record_keys+0x56>
			  add_keypress(layout1[i][j]);
 800075e:	4914      	ldr	r1, [pc, #80]	; (80007b0 <record_keys+0x8c>)
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f821 	bl	80007bc <add_keypress>
	  for(int j = 0; j < nCols1; j++) {
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <record_keys+0x90>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	dbdd      	blt.n	8000746 <record_keys+0x22>
  for(int i = 0; i < nRows1; i++) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3301      	adds	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <record_keys+0x94>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	dbd2      	blt.n	8000740 <record_keys+0x1c>
//  for(int i = 0; i < 4; i++) {
//	  if(rotary_keypresses[i] == 1)
//		  add_keypress(rotary_keys[i]);
//  }

}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200003b0 	.word	0x200003b0
 80007a8:	20000008 	.word	0x20000008
 80007ac:	2000019c 	.word	0x2000019c
 80007b0:	0800adbc 	.word	0x0800adbc
 80007b4:	20000004 	.word	0x20000004
 80007b8:	20000000 	.word	0x20000000

080007bc <add_keypress>:

void add_keypress(char key) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
//	if(key == (char)KEY_LSHIFT) {
//		keyboardhid.MODIFIER = 2;
//		return;
//	}

	switch(keycodeNum) {
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <add_keypress+0x7c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d827      	bhi.n	8000820 <add_keypress+0x64>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <add_keypress+0x1c>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	080007f1 	.word	0x080007f1
 80007dc:	080007f9 	.word	0x080007f9
 80007e0:	08000801 	.word	0x08000801
 80007e4:	08000809 	.word	0x08000809
 80007e8:	08000811 	.word	0x08000811
 80007ec:	08000819 	.word	0x08000819
			case 1:
			  keyboardhid.KEYCODE1 = key;
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <add_keypress+0x80>)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	7093      	strb	r3, [r2, #2]
			  break;
 80007f6:	e014      	b.n	8000822 <add_keypress+0x66>
			case 2:
			  keyboardhid.KEYCODE2 = key;
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <add_keypress+0x80>)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	70d3      	strb	r3, [r2, #3]
			  break;
 80007fe:	e010      	b.n	8000822 <add_keypress+0x66>
			case 3:
			  keyboardhid.KEYCODE3 = key;
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <add_keypress+0x80>)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	7113      	strb	r3, [r2, #4]
			  break;
 8000806:	e00c      	b.n	8000822 <add_keypress+0x66>
			case 4:
			  keyboardhid.KEYCODE4 = key;
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <add_keypress+0x80>)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	7153      	strb	r3, [r2, #5]
			  break;
 800080e:	e008      	b.n	8000822 <add_keypress+0x66>
			case 5:
			  keyboardhid.KEYCODE5 = key;
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <add_keypress+0x80>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	7193      	strb	r3, [r2, #6]
			  break;
 8000816:	e004      	b.n	8000822 <add_keypress+0x66>
			case 6:
			  keyboardhid.KEYCODE6 = key;
 8000818:	4a08      	ldr	r2, [pc, #32]	; (800083c <add_keypress+0x80>)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	71d3      	strb	r3, [r2, #7]
			  break;
 800081e:	e000      	b.n	8000822 <add_keypress+0x66>
			default:
				break;
 8000820:	bf00      	nop
		  }
		  keycodeNum++;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <add_keypress+0x7c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <add_keypress+0x7c>)
 800082a:	6013      	str	r3, [r2, #0]

}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000008 	.word	0x20000008
 800083c:	200003b0 	.word	0x200003b0

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fd16 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f81c 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f9be 	bl	8000bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000850:	f000 f99c 	bl	8000b8c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000854:	f008 fe1c 	bl	8009490 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000858:	f000 f8e0 	bl	8000a1c <MX_TIM4_Init>
  MX_TIM6_Init();
 800085c:	f000 f92a 	bl	8000ab4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000860:	f000 f95e 	bl	8000b20 <MX_TIM7_Init>
  MX_I2C2_Init();
 8000864:	f000 f876 	bl	8000954 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000868:	f000 f8a2 	bl	80009b0 <MX_SPI1_Init>
//  sprintf(writeBuff, "Number of turns: ");
//  ILI9341_DrawText(writeBuff, FONT4, 25, 110, BLACK, WHITE);
//  switch_lcd();

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <main+0x3c>)
 800086e:	f005 f843 	bl	80058f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <main+0x40>)
 8000874:	f005 f840 	bl	80058f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  //char buffer1[10];
  //char buffer2[10];

  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x38>
 800087a:	bf00      	nop
 800087c:	200002d4 	.word	0x200002d4
 8000880:	2000031c 	.word	0x2000031c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f009 fa5e 	bl	8009d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a26      	ldr	r2, [pc, #152]	; (800094c <SystemClock_Config+0xc8>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	; (8000950 <SystemClock_Config+0xcc>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008f8:	2348      	movs	r3, #72	; 0x48
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000900:	2303      	movs	r3, #3
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fa99 	bl	8004e40 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 fa0c 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2102      	movs	r1, #2
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fcfb 	bl	8005330 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000940:	f000 f9f6 	bl	8000d30 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C2_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_I2C2_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C2_Init+0x50>)
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_I2C2_Init+0x58>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C2_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2C2_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_I2C2_Init+0x50>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_I2C2_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_I2C2_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_I2C2_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2C2_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_I2C2_Init+0x50>)
 8000992:	f001 fae7 	bl	8001f64 <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 f9c8 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200001c8 	.word	0x200001c8
 80009a8:	40005800 	.word	0x40005800
 80009ac:	00061a80 	.word	0x00061a80

080009b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_SPI1_Init+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009e4:	2208      	movs	r2, #8
 80009e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI1_Init+0x64>)
 80009fc:	220a      	movs	r2, #10
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_SPI1_Init+0x64>)
 8000a02:	f004 fea1 	bl	8005748 <HAL_SPI_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 f990 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000021c 	.word	0x2000021c
 8000a18:	40013000 	.word	0x40013000

08000a1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a3a:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <MX_TIM4_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a40:	229f      	movs	r2, #159	; 0x9f
 8000a42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a4c:	2263      	movs	r2, #99	; 0x63
 8000a4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a5e:	f004 fefc 	bl	800585a <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000a68:	f000 f962 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a7a:	f005 f8b5 	bl	8005be8 <HAL_TIM_ConfigClockSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000a84:	f000 f954 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_TIM4_Init+0x90>)
 8000a96:	f005 fad1 	bl	800603c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000aa0:	f000 f946 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200002d4 	.word	0x200002d4
 8000ab0:	40000800 	.word	0x40000800

08000ab4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000ac4:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <MX_TIM6_Init+0x68>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000aca:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ace:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000ad8:	2213      	movs	r2, #19
 8000ada:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000ae4:	f004 feb9 	bl	800585a <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000aee:	f000 f91f 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_TIM6_Init+0x64>)
 8000b00:	f005 fa9c 	bl	800603c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b0a:	f000 f911 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000031c 	.word	0x2000031c
 8000b1c:	40001000 	.word	0x40001000

08000b20 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b30:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <MX_TIM7_Init+0x68>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000-1;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b36:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000-1;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b44:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000b48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b52:	f004 fe82 	bl	800585a <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b5c:	f000 f8e8 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_TIM7_Init+0x64>)
 8000b6e:	f005 fa65 	bl	800603c <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 f8da 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000364 	.word	0x20000364
 8000b88:	40001400 	.word	0x40001400

08000b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_DMA_Init+0x3c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <MX_DMA_Init+0x3c>)
 8000b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_DMA_Init+0x3c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	203b      	movs	r0, #59	; 0x3b
 8000bb4:	f000 fccf 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000bb8:	203b      	movs	r0, #59	; 0x3b
 8000bba:	f000 fce8 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a36      	ldr	r2, [pc, #216]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a28      	ldr	r2, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DC_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000c74:	481b      	ldr	r0, [pc, #108]	; (8000ce4 <MX_GPIO_Init+0x118>)
 8000c76:	f001 f95b 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	217f      	movs	r1, #127	; 0x7f
 8000c7e:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c80:	f001 f956 	bl	8001f30 <HAL_GPIO_WritePin>
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin ENC_A_Pin ENC_B_Pin ENC_SW_Pin
                           COL0_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8000c84:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000c88:	617b      	str	r3, [r7, #20]
                          |COL5_Pin|ENC_A_Pin|ENC_B_Pin|ENC_SW_Pin
                          |COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c9a:	f000 ffad 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DC_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin;
 8000c9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0x118>)
 8000cb8:	f000 ff9e 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin ROW5_Pin ROW6_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8000cbc:	237f      	movs	r3, #127	; 0x7f
 8000cbe:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000cd4:	f000 ff90 	bl	8001bf8 <HAL_GPIO_Init>

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d107      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8000cfc:	f7ff fd12 	bl	8000724 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8000d00:	2208      	movs	r2, #8
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d06:	f007 f82d 	bl	8007d64 <USBD_HID_SendReport>
//		numCycles++;
//		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
//		charsInCycle = 0;

	}
}
 8000d0a:	e005      	b.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim == &htim6) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d101      	bne.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x2c>
		scan_keypad();
 8000d14:	f7ff fc2e 	bl	8000574 <scan_keypad>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200002d4 	.word	0x200002d4
 8000d24:	200003b0 	.word	0x200003b0
 8000d28:	200003c4 	.word	0x200003c4
 8000d2c:	2000031c 	.word	0x2000031c

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_I2C_MspInit+0x94>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d134      	bne.n	8000e18 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_I2C_MspInit+0x98>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_I2C_MspInit+0x98>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_I2C_MspInit+0x98>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4810      	ldr	r0, [pc, #64]	; (8000e28 <HAL_I2C_MspInit+0x9c>)
 8000de8:	f000 ff06 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_I2C_MspInit+0x98>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_I2C_MspInit+0x98>)
 8000df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_I2C_MspInit+0x98>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2021      	movs	r0, #33	; 0x21
 8000e0e:	f000 fba2 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e12:	2021      	movs	r0, #33	; 0x21
 8000e14:	f000 fbbb 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40005800 	.word	0x40005800
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020400 	.word	0x40020400

08000e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <HAL_SPI_MspInit+0xe0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d159      	bne.n	8000f02 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_SPI_MspInit+0xe4>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <HAL_SPI_MspInit+0xe4>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <HAL_SPI_MspInit+0xe4>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_SPI_MspInit+0xe4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_SPI_MspInit+0xe4>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_SPI_MspInit+0xe4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e86:	23a0      	movs	r3, #160	; 0xa0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e96:	2305      	movs	r3, #5
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481c      	ldr	r0, [pc, #112]	; (8000f14 <HAL_SPI_MspInit+0xe8>)
 8000ea2:	f000 fea9 	bl	8001bf8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ea8:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <HAL_SPI_MspInit+0xf0>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000eae:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000eb6:	2240      	movs	r2, #64	; 0x40
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000ee8:	f000 fb6c 	bl	80015c4 <HAL_DMA_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000ef2:	f7ff ff1d 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000efa:	649a      	str	r2, [r3, #72]	; 0x48
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_SPI_MspInit+0xec>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40013000 	.word	0x40013000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	20000274 	.word	0x20000274
 8000f1c:	40026458 	.word	0x40026458

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d116      	bne.n	8000f60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201e      	movs	r0, #30
 8000f54:	f000 faff 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f58:	201e      	movs	r0, #30
 8000f5a:	f000 fb18 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f5e:	e036      	b.n	8000fce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d116      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2036      	movs	r0, #54	; 0x36
 8000f8c:	f000 fae3 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f90:	2036      	movs	r0, #54	; 0x36
 8000f92:	f000 fafc 	bl	800158e <HAL_NVIC_EnableIRQ>
}
 8000f96:	e01a      	b.n	8000fce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d115      	bne.n	8000fce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0xbc>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2037      	movs	r0, #55	; 0x37
 8000fc4:	f000 fac7 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fc8:	2037      	movs	r0, #55	; 0x37
 8000fca:	f000 fae0 	bl	800158e <HAL_NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40000800 	.word	0x40000800
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40001000 	.word	0x40001000
 8000fe4:	40001400 	.word	0x40001400

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f970 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM4_IRQHandler+0x10>)
 8001042:	f004 fcc9 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200002d4 	.word	0x200002d4

08001050 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <I2C2_EV_IRQHandler+0x10>)
 8001056:	f001 f8c9 	bl	80021ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001c8 	.word	0x200001c8

08001064 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM6_DAC_IRQHandler+0x10>)
 800106a:	f004 fcb5 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000031c 	.word	0x2000031c

08001078 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM7_IRQHandler+0x10>)
 800107e:	f004 fcab 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000364 	.word	0x20000364

0800108c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <DMA2_Stream3_IRQHandler+0x10>)
 8001092:	f000 fb67 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000274 	.word	0x20000274

080010a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <OTG_FS_IRQHandler+0x10>)
 80010a6:	f002 fdb6 	bl	8003c16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200008a0 	.word	0x200008a0

080010b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00a      	b.n	80010dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010c6:	f3af 8000 	nop.w
 80010ca:	4601      	mov	r1, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf0      	blt.n	80010c6 <_read+0x12>
	}

return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e009      	b.n	8001114 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf1      	blt.n	8001100 <_write+0x12>
	}
	return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	605a      	str	r2, [r3, #4]
	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f008 fd9e 	bl	8009d00 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20020000 	.word	0x20020000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	200003b8 	.word	0x200003b8
 80011f8:	20000dd0 	.word	0x20000dd0

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800123c:	4c0b      	ldr	r4, [pc, #44]	; (800126c <LoopFillZerobss+0x26>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124a:	f7ff ffd7 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124e:	f008 fd5d 	bl	8009d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff faf5 	bl	8000840 <main>
  bx  lr    
 8001256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001264:	0800aed8 	.word	0x0800aed8
  ldr r2, =_sbss
 8001268:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800126c:	20000dd0 	.word	0x20000dd0

08001270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <HAL_Init+0x40>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_Init+0x40>)
 800128a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x40>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f94f 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fd48 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023c00 	.word	0x40023c00

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f967 	bl	80015aa <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f4:	f000 f92f 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000014 	.word	0x20000014
 8001314:	20000010 	.word	0x20000010

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000014 	.word	0x20000014
 800133c:	200003bc 	.word	0x200003bc

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200003bc 	.word	0x200003bc

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000014 	.word	0x20000014

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff29 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff3e 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff31 	bl	8001404 <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffa2 	bl	80014fc <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff feb6 	bl	8001340 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e099      	b.n	8001714 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001600:	e00f      	b.n	8001622 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001602:	f7ff fe9d 	bl	8001340 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b05      	cmp	r3, #5
 800160e:	d908      	bls.n	8001622 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2220      	movs	r2, #32
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e078      	b.n	8001714 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e8      	bne.n	8001602 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_DMA_Init+0x158>)
 800163c:	4013      	ands	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800164e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	2b04      	cmp	r3, #4
 800167a:	d107      	bne.n	800168c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4313      	orrs	r3, r2
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f023 0307 	bic.w	r3, r3, #7
 80016a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d117      	bne.n	80016e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fa19 	bl	8001b00 <DMA_CheckFifoParam>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016e2:	2301      	movs	r3, #1
 80016e4:	e016      	b.n	8001714 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f9d0 	bl	8001a94 <DMA_CalcBaseAndBitshift>
 80016f4:	4603      	mov	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	223f      	movs	r2, #63	; 0x3f
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	f010803f 	.word	0xf010803f

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001770:	4b8e      	ldr	r3, [pc, #568]	; (80019ac <HAL_DMA_IRQHandler+0x248>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a8e      	ldr	r2, [pc, #568]	; (80019b0 <HAL_DMA_IRQHandler+0x24c>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	2210      	movs	r2, #16
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03c      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2210      	movs	r2, #16
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e01f      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808f 	beq.w	8001a04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8087 	beq.w	8001a04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2220      	movs	r2, #32
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d136      	bne.n	800197c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_IRQHandler+0x1da>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	223f      	movs	r2, #63	; 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07e      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
        }
        return;
 800197a:	e079      	b.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01d      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	2b00      	cmp	r3, #0
 800199e:	d031      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e02c      	b.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d023      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
 80019c4:	e01e      	b.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0210 	bic.w	r2, r2, #16
 80019e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d032      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d307      	bcc.n	8001a4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f2      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x2cc>
 8001a4a:	e000      	b.n	8001a4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
 8001a6e:	e000      	b.n	8001a72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a70:	bf00      	nop
    }
  }
}
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a86:	b2db      	uxtb	r3, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b10      	subs	r3, #16
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <DMA_CalcBaseAndBitshift+0x64>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <DMA_CalcBaseAndBitshift+0x68>)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d909      	bls.n	8001ad6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	1d1a      	adds	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad4:	e007      	b.n	8001ae6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	aaaaaaab 	.word	0xaaaaaaab
 8001afc:	0800ae28 	.word	0x0800ae28

08001b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11f      	bne.n	8001b5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d856      	bhi.n	8001bce <DMA_CheckFifoParam+0xce>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <DMA_CheckFifoParam+0x28>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b4b 	.word	0x08001b4b
 8001b30:	08001b39 	.word	0x08001b39
 8001b34:	08001bcf 	.word	0x08001bcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d046      	beq.n	8001bd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b48:	e043      	b.n	8001bd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b52:	d140      	bne.n	8001bd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b58:	e03d      	b.n	8001bd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b62:	d121      	bne.n	8001ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d837      	bhi.n	8001bda <DMA_CheckFifoParam+0xda>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <DMA_CheckFifoParam+0x70>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b87 	.word	0x08001b87
 8001b78:	08001b81 	.word	0x08001b81
 8001b7c:	08001b99 	.word	0x08001b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      break;
 8001b84:	e030      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d025      	beq.n	8001bde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b96:	e022      	b.n	8001bde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ba0:	d11f      	bne.n	8001be2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ba6:	e01c      	b.n	8001be2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d903      	bls.n	8001bb6 <DMA_CheckFifoParam+0xb6>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bb4:	e018      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bba:	e015      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      break;
 8001bcc:	e00b      	b.n	8001be6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e00a      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e008      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e006      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e004      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
 8001be0:	e002      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001be2:	bf00      	nop
 8001be4:	e000      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
    }
  } 
  
  return status; 
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e16b      	b.n	8001eec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 815a 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80b4 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a5f      	ldr	r2, [pc, #380]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a5b      	ldr	r2, [pc, #364]	; (8001f08 <HAL_GPIO_Init+0x310>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_GPIO_Init+0x314>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_GPIO_Init+0x318>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a50      	ldr	r2, [pc, #320]	; (8001f14 <HAL_GPIO_Init+0x31c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4f      	ldr	r2, [pc, #316]	; (8001f18 <HAL_GPIO_Init+0x320>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4e      	ldr	r2, [pc, #312]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <HAL_GPIO_Init+0x328>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x20a>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00e      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e02:	2308      	movs	r3, #8
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	; (8001f08 <HAL_GPIO_Init+0x310>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae90 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e12b      	b.n	80021ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fefe 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	; 0x24
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc8:	f003 fbaa 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8001fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a81      	ldr	r2, [pc, #516]	; (80021d8 <HAL_I2C_Init+0x274>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d807      	bhi.n	8001fe8 <HAL_I2C_Init+0x84>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a80      	ldr	r2, [pc, #512]	; (80021dc <HAL_I2C_Init+0x278>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e006      	b.n	8001ff6 <HAL_I2C_Init+0x92>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a7d      	ldr	r2, [pc, #500]	; (80021e0 <HAL_I2C_Init+0x27c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0e7      	b.n	80021ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4a78      	ldr	r2, [pc, #480]	; (80021e4 <HAL_I2C_Init+0x280>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9b      	lsrs	r3, r3, #18
 8002008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_I2C_Init+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d802      	bhi.n	8002038 <HAL_I2C_Init+0xd4>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	e009      	b.n	800204c <HAL_I2C_Init+0xe8>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_I2C_Init+0x284>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	3301      	adds	r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	430b      	orrs	r3, r1
 8002052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800205e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	495c      	ldr	r1, [pc, #368]	; (80021d8 <HAL_I2C_Init+0x274>)
 8002068:	428b      	cmp	r3, r1
 800206a:	d819      	bhi.n	80020a0 <HAL_I2C_Init+0x13c>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e59      	subs	r1, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb1 f3f3 	udiv	r3, r1, r3
 800207a:	1c59      	adds	r1, r3, #1
 800207c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002080:	400b      	ands	r3, r1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_I2C_Init+0x138>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fbb1 f3f3 	udiv	r3, r1, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209a:	e051      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 800209c:	2304      	movs	r3, #4
 800209e:	e04f      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <HAL_I2C_Init+0x168>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e012      	b.n	80020f2 <HAL_I2C_Init+0x18e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Init+0x196>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e022      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <HAL_I2C_Init+0x1bc>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e58      	subs	r0, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	fbb0 f3f3 	udiv	r3, r0, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211e:	e00f      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	6809      	ldr	r1, [r1, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800216e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6911      	ldr	r1, [r2, #16]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d2      	ldr	r2, [r2, #12]
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	430b      	orrs	r3, r1
 8002182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	000186a0 	.word	0x000186a0
 80021dc:	001e847f 	.word	0x001e847f
 80021e0:	003d08ff 	.word	0x003d08ff
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800220c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b10      	cmp	r3, #16
 800221a:	d003      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x38>
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	f040 80c1 	bne.w	80023a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <HAL_I2C_EV_IRQHandler+0x6e>
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002244:	d003      	beq.n	800224e <HAL_I2C_EV_IRQHandler+0x62>
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800224c:	d101      	bne.n	8002252 <HAL_I2C_EV_IRQHandler+0x66>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_I2C_EV_IRQHandler+0x68>
 8002252:	2300      	movs	r3, #0
 8002254:	2b01      	cmp	r3, #1
 8002256:	f000 8132 	beq.w	80024be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00c      	beq.n	800227e <HAL_I2C_EV_IRQHandler+0x92>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f001 fb65 	bl	8003940 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fcdc 	bl	8002c34 <I2C_Master_SB>
 800227c:	e092      	b.n	80023a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_I2C_EV_IRQHandler+0xb2>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	0a5b      	lsrs	r3, r3, #9
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fd52 	bl	8002d40 <I2C_Master_ADD10>
 800229c:	e082      	b.n	80023a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0xd2>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	0a5b      	lsrs	r3, r3, #9
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fd6c 	bl	8002d94 <I2C_Master_ADDR>
 80022bc:	e072      	b.n	80023a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03b      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d8:	f000 80f3 	beq.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	09db      	lsrs	r3, r3, #7
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00f      	beq.n	8002308 <HAL_I2C_EV_IRQHandler+0x11c>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d009      	beq.n	8002308 <HAL_I2C_EV_IRQHandler+0x11c>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f94c 	bl	800259e <I2C_MasterTransmit_TXE>
 8002306:	e04d      	b.n	80023a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80d6 	beq.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	0a5b      	lsrs	r3, r3, #9
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80cf 	beq.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	2b21      	cmp	r3, #33	; 0x21
 8002328:	d103      	bne.n	8002332 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f9d3 	bl	80026d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002330:	e0c7      	b.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	f040 80c4 	bne.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fa41 	bl	80027c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002340:	e0bf      	b.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002350:	f000 80b7 	beq.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00f      	beq.n	8002380 <HAL_I2C_EV_IRQHandler+0x194>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <HAL_I2C_EV_IRQHandler+0x194>
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fab6 	bl	80028ea <I2C_MasterReceive_RXNE>
 800237e:	e011      	b.n	80023a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 809a 	beq.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	0a5b      	lsrs	r3, r3, #9
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8093 	beq.w	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb5f 	bl	8002a60 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a2:	e08e      	b.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023a4:	e08d      	b.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e007      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0x20e>
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00c      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80023f0:	69b9      	ldr	r1, [r7, #24]
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 ff1d 	bl	8003232 <I2C_Slave_ADDR>
 80023f8:	e066      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0x22e>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	0a5b      	lsrs	r3, r3, #9
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 ff58 	bl	80032c8 <I2C_Slave_STOPF>
 8002418:	e056      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	2b21      	cmp	r3, #33	; 0x21
 800241e:	d002      	beq.n	8002426 <HAL_I2C_EV_IRQHandler+0x23a>
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	2b29      	cmp	r3, #41	; 0x29
 8002424:	d125      	bne.n	8002472 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	09db      	lsrs	r3, r3, #7
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00f      	beq.n	8002452 <HAL_I2C_EV_IRQHandler+0x266>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	0a9b      	lsrs	r3, r3, #10
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_I2C_EV_IRQHandler+0x266>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fe33 	bl	80030b6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002450:	e039      	b.n	80024c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d033      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	0a5b      	lsrs	r3, r3, #9
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02d      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fe60 	bl	8003130 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002470:	e029      	b.n	80024c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00f      	beq.n	800249e <HAL_I2C_EV_IRQHandler+0x2b2>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	0a9b      	lsrs	r3, r3, #10
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_I2C_EV_IRQHandler+0x2b2>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fe6b 	bl	8003172 <I2C_SlaveReceive_RXNE>
 800249c:	e014      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fe99 	bl	80031ee <I2C_SlaveReceive_BTF>
 80024bc:	e004      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
 800252a:	4613      	mov	r3, r2
 800252c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d150      	bne.n	8002666 <I2C_MasterTransmit_TXE+0xc8>
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b21      	cmp	r3, #33	; 0x21
 80025c8:	d14d      	bne.n	8002666 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d01d      	beq.n	800260c <I2C_MasterTransmit_TXE+0x6e>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d01a      	beq.n	800260c <I2C_MasterTransmit_TXE+0x6e>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025dc:	d016      	beq.n	800260c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2211      	movs	r2, #17
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff62 	bl	80024ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800260a:	e060      	b.n	80026ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800261a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d107      	bne.n	8002656 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ff7d 	bl	800254e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002654:	e03b      	b.n	80026ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff35 	bl	80024ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002664:	e033      	b.n	80026ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b21      	cmp	r3, #33	; 0x21
 800266a:	d005      	beq.n	8002678 <I2C_MasterTransmit_TXE+0xda>
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d12d      	bne.n	80026ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b22      	cmp	r3, #34	; 0x22
 8002676:	d12a      	bne.n	80026ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002690:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002692:	e01c      	b.n	80026ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d103      	bne.n	80026a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f88e 	bl	80027c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80026a6:	e012      	b.n	80026ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026cc:	e7ff      	b.n	80026ce <I2C_MasterTransmit_TXE+0x130>
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b21      	cmp	r3, #33	; 0x21
 80026ee:	d164      	bne.n	80027ba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d012      	beq.n	8002720 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800271e:	e04c      	b.n	80027ba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b08      	cmp	r3, #8
 8002724:	d01d      	beq.n	8002762 <I2C_MasterTransmit_BTF+0x8c>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b20      	cmp	r3, #32
 800272a:	d01a      	beq.n	8002762 <I2C_MasterTransmit_BTF+0x8c>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002732:	d016      	beq.n	8002762 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002742:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2211      	movs	r2, #17
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff feb7 	bl	80024ce <HAL_I2C_MasterTxCpltCallback>
}
 8002760:	e02b      	b.n	80027ba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002770:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002780:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d107      	bne.n	80027ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fed2 	bl	800254e <HAL_I2C_MemTxCpltCallback>
}
 80027aa:	e006      	b.n	80027ba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fe8a 	bl	80024ce <HAL_I2C_MasterTxCpltCallback>
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11d      	bne.n	8002816 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10b      	bne.n	80027fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	1c9a      	adds	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80027f8:	e073      	b.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	b29b      	uxth	r3, r3
 8002800:	121b      	asrs	r3, r3, #8
 8002802:	b2da      	uxtb	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002814:	e065      	b.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10b      	bne.n	8002836 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	b2da      	uxtb	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002834:	e055      	b.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	2b02      	cmp	r3, #2
 800283c:	d151      	bne.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b22      	cmp	r3, #34	; 0x22
 8002842:	d10d      	bne.n	8002860 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002852:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800285e:	e040      	b.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d015      	beq.n	8002896 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b21      	cmp	r3, #33	; 0x21
 800286e:	d112      	bne.n	8002896 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002894:	e025      	b.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d120      	bne.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b21      	cmp	r3, #33	; 0x21
 80028a4:	d11d      	bne.n	80028e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fe36 	bl	800254e <HAL_I2C_MemTxCpltCallback>
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b22      	cmp	r3, #34	; 0x22
 80028fc:	f040 80ac 	bne.w	8002a58 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d921      	bls.n	8002952 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b03      	cmp	r3, #3
 800293c:	f040 808c 	bne.w	8002a58 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002950:	e082      	b.n	8002a58 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	2b02      	cmp	r3, #2
 8002958:	d075      	beq.n	8002a46 <I2C_MasterReceive_RXNE+0x15c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d002      	beq.n	8002966 <I2C_MasterReceive_RXNE+0x7c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d16f      	bne.n	8002a46 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 ffb8 	bl	80038dc <I2C_WaitOnSTOPRequestThroughIT>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d142      	bne.n	80029f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002980:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002990:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d10a      	bne.n	80029e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fdc1 	bl	8002562 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029e0:	e03a      	b.n	8002a58 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2212      	movs	r2, #18
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fd76 	bl	80024e2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029f6:	e02f      	b.n	8002a58 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a06:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff fd99 	bl	8002576 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a44:	e008      	b.n	8002a58 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a54:	605a      	str	r2, [r3, #4]
}
 8002a56:	e7ff      	b.n	8002a58 <I2C_MasterReceive_RXNE+0x16e>
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d11b      	bne.n	8002ab0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002aae:	e0bd      	b.n	8002c2c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d129      	bne.n	8002b0e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00a      	beq.n	8002ae6 <I2C_MasterReceive_BTF+0x86>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d007      	beq.n	8002ae6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b0c:	e08e      	b.n	8002c2c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d176      	bne.n	8002c06 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d002      	beq.n	8002b24 <I2C_MasterReceive_BTF+0xc4>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d108      	bne.n	8002b36 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e019      	b.n	8002b6a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d002      	beq.n	8002b42 <I2C_MasterReceive_BTF+0xe2>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d108      	bne.n	8002b54 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00a      	b.n	8002b6a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d007      	beq.n	8002b6a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bc4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d10a      	bne.n	8002bf0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fcba 	bl	8002562 <HAL_I2C_MemRxCpltCallback>
}
 8002bee:	e01d      	b.n	8002c2c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2212      	movs	r2, #18
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fc6f 	bl	80024e2 <HAL_I2C_MasterRxCpltCallback>
}
 8002c04:	e012      	b.n	8002c2c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d117      	bne.n	8002c78 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c60:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c62:	e067      	b.n	8002d34 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]
}
 8002c76:	e05d      	b.n	8002d34 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c80:	d133      	bne.n	8002cea <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b21      	cmp	r3, #33	; 0x21
 8002c8c:	d109      	bne.n	8002ca2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c9e:	611a      	str	r2, [r3, #16]
 8002ca0:	e008      	b.n	8002cb4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <I2C_Master_SB+0x92>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d032      	beq.n	8002d34 <I2C_Master_SB+0x100>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02d      	beq.n	8002d34 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce6:	605a      	str	r2, [r3, #4]
}
 8002ce8:	e024      	b.n	8002d34 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10e      	bne.n	8002d10 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	11db      	asrs	r3, r3, #7
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f003 0306 	and.w	r3, r3, #6
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f063 030f 	orn	r3, r3, #15
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]
}
 8002d0e:	e011      	b.n	8002d34 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10d      	bne.n	8002d34 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	11db      	asrs	r3, r3, #7
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f003 0306 	and.w	r3, r3, #6
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f063 030e 	orn	r3, r3, #14
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <I2C_Master_ADD10+0x26>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <I2C_Master_ADD10+0x48>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d86:	605a      	str	r2, [r3, #4]
  }
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b091      	sub	sp, #68	; 0x44
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b22      	cmp	r3, #34	; 0x22
 8002dbc:	f040 8169 	bne.w	8003092 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10f      	bne.n	8002de8 <I2C_Master_ADDR+0x54>
 8002dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d10b      	bne.n	8002de8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	e160      	b.n	80030aa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11d      	bne.n	8002e2c <I2C_Master_ADDR+0x98>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002df8:	d118      	bne.n	8002e2c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50
 8002e2a:	e13e      	b.n	80030aa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d113      	bne.n	8002e5e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e115      	b.n	800308a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 808a 	bne.w	8002f7e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e70:	d137      	bne.n	8002ee2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e80:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e90:	d113      	bne.n	8002eba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	e0e7      	b.n	800308a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e0d3      	b.n	800308a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d02e      	beq.n	8002f46 <I2C_Master_ADDR+0x1b2>
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d02b      	beq.n	8002f46 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	2b12      	cmp	r3, #18
 8002ef2:	d102      	bne.n	8002efa <I2C_Master_ADDR+0x166>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d125      	bne.n	8002f46 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00e      	beq.n	8002f1e <I2C_Master_ADDR+0x18a>
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d00b      	beq.n	8002f1e <I2C_Master_ADDR+0x18a>
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d008      	beq.n	8002f1e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e007      	b.n	8002f2e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	e0a1      	b.n	800308a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e085      	b.n	800308a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d14d      	bne.n	8003024 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d016      	beq.n	8002fbc <I2C_Master_ADDR+0x228>
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d013      	beq.n	8002fbc <I2C_Master_ADDR+0x228>
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d010      	beq.n	8002fbc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e007      	b.n	8002fcc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fda:	d117      	bne.n	800300c <I2C_Master_ADDR+0x278>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe2:	d00b      	beq.n	8002ffc <I2C_Master_ADDR+0x268>
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d008      	beq.n	8002ffc <I2C_Master_ADDR+0x268>
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d005      	beq.n	8002ffc <I2C_Master_ADDR+0x268>
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d002      	beq.n	8002ffc <I2C_Master_ADDR+0x268>
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d107      	bne.n	800300c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800300a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e032      	b.n	800308a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003032:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003042:	d117      	bne.n	8003074 <I2C_Master_ADDR+0x2e0>
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800304a:	d00b      	beq.n	8003064 <I2C_Master_ADDR+0x2d0>
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	2b01      	cmp	r3, #1
 8003050:	d008      	beq.n	8003064 <I2C_Master_ADDR+0x2d0>
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2b08      	cmp	r3, #8
 8003056:	d005      	beq.n	8003064 <I2C_Master_ADDR+0x2d0>
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	2b10      	cmp	r3, #16
 800305c:	d002      	beq.n	8003064 <I2C_Master_ADDR+0x2d0>
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	2b20      	cmp	r3, #32
 8003062:	d107      	bne.n	8003074 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003072:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003090:	e00b      	b.n	80030aa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	e7ff      	b.n	80030aa <I2C_Master_ADDR+0x316>
 80030aa:	bf00      	nop
 80030ac:	3744      	adds	r7, #68	; 0x44
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02b      	beq.n	8003128 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d114      	bne.n	8003128 <I2C_SlaveTransmit_TXE+0x72>
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b29      	cmp	r3, #41	; 0x29
 8003102:	d111      	bne.n	8003128 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003112:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2221      	movs	r2, #33	; 0x21
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2228      	movs	r2, #40	; 0x28
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff f9e7 	bl	80024f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02c      	beq.n	80031e6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d114      	bne.n	80031e6 <I2C_SlaveReceive_RXNE+0x74>
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b2a      	cmp	r3, #42	; 0x2a
 80031c0:	d111      	bne.n	80031e6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2222      	movs	r2, #34	; 0x22
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2228      	movs	r2, #40	; 0x28
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff f992 	bl	800250a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800324c:	2b28      	cmp	r3, #40	; 0x28
 800324e:	d127      	bne.n	80032a0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	09db      	lsrs	r3, r3, #7
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	81bb      	strh	r3, [r7, #12]
 8003282:	e002      	b.n	800328a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003292:	89ba      	ldrh	r2, [r7, #12]
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff f940 	bl	800251e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800329e:	e00e      	b.n	80032be <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003324:	d172      	bne.n	800340c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b22      	cmp	r3, #34	; 0x22
 800332a:	d002      	beq.n	8003332 <I2C_Slave_STOPF+0x6a>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b2a      	cmp	r3, #42	; 0x2a
 8003330:	d135      	bne.n	800339e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003364:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fb84 	bl	8001a78 <HAL_DMA_GetState>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	d049      	beq.n	800340a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <I2C_Slave_STOPF+0x258>)
 800337c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe f9cc 	bl	8001720 <HAL_DMA_Abort_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03d      	beq.n	800340a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800339c:	e035      	b.n	800340a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fb4e 	bl	8001a78 <HAL_DMA_GetState>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d014      	beq.n	800340c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <I2C_Slave_STOPF+0x258>)
 80033e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f996 	bl	8001720 <HAL_DMA_Abort_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003404:	4610      	mov	r0, r2
 8003406:	4798      	blx	r3
 8003408:	e000      	b.n	800340c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800340a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03e      	beq.n	8003494 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d112      	bne.n	800344a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d112      	bne.n	800347e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f843 	bl	8003528 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80034a2:	e039      	b.n	8003518 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b2a      	cmp	r3, #42	; 0x2a
 80034a8:	d109      	bne.n	80034be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2228      	movs	r2, #40	; 0x28
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff f826 	bl	800250a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b28      	cmp	r3, #40	; 0x28
 80034c8:	d111      	bne.n	80034ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <I2C_Slave_STOPF+0x25c>)
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff f827 	bl	800253a <HAL_I2C_ListenCpltCallback>
}
 80034ec:	e014      	b.n	8003518 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	2b22      	cmp	r3, #34	; 0x22
 80034f4:	d002      	beq.n	80034fc <I2C_Slave_STOPF+0x234>
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b22      	cmp	r3, #34	; 0x22
 80034fa:	d10d      	bne.n	8003518 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe fff9 	bl	800250a <HAL_I2C_SlaveRxCpltCallback>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	0800378d 	.word	0x0800378d
 8003524:	ffff0000 	.word	0xffff0000

08003528 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	2b10      	cmp	r3, #16
 8003544:	d002      	beq.n	800354c <I2C_ITError+0x24>
 8003546:	7bbb      	ldrb	r3, [r7, #14]
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d10a      	bne.n	8003562 <I2C_ITError+0x3a>
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b22      	cmp	r3, #34	; 0x22
 8003550:	d107      	bne.n	8003562 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003560:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003568:	2b28      	cmp	r3, #40	; 0x28
 800356a:	d107      	bne.n	800357c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2228      	movs	r2, #40	; 0x28
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800357a:	e015      	b.n	80035a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d00a      	beq.n	80035a2 <I2C_ITError+0x7a>
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b60      	cmp	r3, #96	; 0x60
 8003590:	d007      	beq.n	80035a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b6:	d162      	bne.n	800367e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d020      	beq.n	8003618 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	4a6a      	ldr	r2, [pc, #424]	; (8003784 <I2C_ITError+0x25c>)
 80035dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f89c 	bl	8001720 <HAL_DMA_Abort_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8089 	beq.w	8003702 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003612:	4610      	mov	r0, r2
 8003614:	4798      	blx	r3
 8003616:	e074      	b.n	8003702 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	4a59      	ldr	r2, [pc, #356]	; (8003784 <I2C_ITError+0x25c>)
 800361e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe f87b 	bl	8001720 <HAL_DMA_Abort_IT>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d068      	beq.n	8003702 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d10b      	bne.n	8003656 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003678:	4610      	mov	r0, r2
 800367a:	4798      	blx	r3
 800367c:	e041      	b.n	8003702 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b60      	cmp	r3, #96	; 0x60
 8003688:	d125      	bne.n	80036d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d10b      	bne.n	80036be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe ff5b 	bl	800258a <HAL_I2C_AbortCpltCallback>
 80036d4:	e015      	b.n	8003702 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d10b      	bne.n	80036fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fe ff3a 	bl	8002576 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d113      	bne.n	800377c <I2C_ITError+0x254>
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b28      	cmp	r3, #40	; 0x28
 8003758:	d110      	bne.n	800377c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <I2C_ITError+0x260>)
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fedf 	bl	800253a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	0800378d 	.word	0x0800378d
 8003788:	ffff0000 	.word	0xffff0000

0800378c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037a6:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <I2C_DMAAbort+0x148>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	08db      	lsrs	r3, r3, #3
 80037ac:	4a4a      	ldr	r2, [pc, #296]	; (80038d8 <I2C_DMAAbort+0x14c>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0a1a      	lsrs	r2, r3, #8
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00da      	lsls	r2, r3, #3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f043 0220 	orr.w	r2, r3, #32
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80037d2:	e00a      	b.n	80037ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d0ea      	beq.n	80037c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	2200      	movs	r2, #0
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	2200      	movs	r2, #0
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003818:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	2200      	movs	r2, #0
 800382e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	2200      	movs	r2, #0
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b60      	cmp	r3, #96	; 0x60
 800385a:	d10e      	bne.n	800387a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7fe fe89 	bl	800258a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003878:	e027      	b.n	80038ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003880:	2b28      	cmp	r3, #40	; 0x28
 8003882:	d117      	bne.n	80038b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2228      	movs	r2, #40	; 0x28
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038b2:	e007      	b.n	80038c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	f7fe fe56 	bl	8002576 <HAL_I2C_ErrorCallback>
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	14f8b589 	.word	0x14f8b589

080038dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	08db      	lsrs	r3, r3, #3
 80038ee:	4a13      	ldr	r2, [pc, #76]	; (800393c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	0a1a      	lsrs	r2, r3, #8
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b01      	subs	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d107      	bne.n	800391a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e008      	b.n	800392c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d0e9      	beq.n	80038fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	2000000c 	.word	0x2000000c
 800393c:	14f8b589 	.word	0x14f8b589

08003940 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003950:	d103      	bne.n	800395a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003958:	e007      	b.n	800396a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003962:	d102      	bne.n	800396a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2208      	movs	r2, #8
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003978:	b08f      	sub	sp, #60	; 0x3c
 800397a:	af0a      	add	r7, sp, #40	; 0x28
 800397c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e10f      	b.n	8003ba8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f005 feaa 	bl	80096fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2203      	movs	r2, #3
 80039ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fcdd 	bl	8006386 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	687e      	ldr	r6, [r7, #4]
 80039d4:	466d      	mov	r5, sp
 80039d6:	f106 0410 	add.w	r4, r6, #16
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ea:	1d33      	adds	r3, r6, #4
 80039ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f002 fbb4 	bl	800615c <USB_CoreInit>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0d0      	b.n	8003ba8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 fccb 	bl	80063a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e04a      	b.n	8003aae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	333d      	adds	r3, #61	; 0x3d
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	333c      	adds	r3, #60	; 0x3c
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	b298      	uxth	r0, r3
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3344      	adds	r3, #68	; 0x44
 8003a54:	4602      	mov	r2, r0
 8003a56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3340      	adds	r3, #64	; 0x40
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3348      	adds	r3, #72	; 0x48
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	334c      	adds	r3, #76	; 0x4c
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3354      	adds	r3, #84	; 0x54
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3af      	bcc.n	8003a18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e044      	b.n	8003b48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	3301      	adds	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3b5      	bcc.n	8003abe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	687e      	ldr	r6, [r7, #4]
 8003b5a:	466d      	mov	r5, sp
 8003b5c:	f106 0410 	add.w	r4, r6, #16
 8003b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b70:	1d33      	adds	r3, r6, #4
 8003b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b74:	6838      	ldr	r0, [r7, #0]
 8003b76:	f002 fc63 	bl	8006440 <USB_DevInit>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e00d      	b.n	8003ba8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f003 fdb2 	bl	800770a <USB_DevDisconnect>

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_PCD_Start+0x1c>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e020      	b.n	8003c0e <HAL_PCD_Start+0x5e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d109      	bne.n	8003bf0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 fbb5 	bl	8006364 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fd62 	bl	80076c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c16:	b590      	push	{r4, r7, lr}
 8003c18:	b08d      	sub	sp, #52	; 0x34
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 fe20 	bl	8007872 <USB_GetMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 848a 	bne.w	800454e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 fd84 	bl	800774c <USB_ReadInterrupts>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8480 	beq.w	800454c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 fd71 	bl	800774c <USB_ReadInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d107      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f002 0202 	and.w	r2, r2, #2
 8003c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 fd5f 	bl	800774c <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d161      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0210 	bic.w	r2, r2, #16
 8003ca6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	0c5b      	lsrs	r3, r3, #17
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d124      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d035      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6a38      	ldr	r0, [r7, #32]
 8003cf4:	f003 fb96 	bl	8007424 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d04:	441a      	add	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d16:	441a      	add	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	621a      	str	r2, [r3, #32]
 8003d1c:	e016      	b.n	8003d4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	0c5b      	lsrs	r3, r3, #17
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d110      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d30:	2208      	movs	r2, #8
 8003d32:	4619      	mov	r1, r3
 8003d34:	6a38      	ldr	r0, [r7, #32]
 8003d36:	f003 fb75 	bl	8007424 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d46:	441a      	add	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0210 	orr.w	r2, r2, #16
 8003d5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f003 fcf3 	bl	800774c <USB_ReadInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d70:	f040 80a7 	bne.w	8003ec2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f003 fcf8 	bl	8007772 <USB_ReadDevAllOutEpInterrupt>
 8003d82:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d84:	e099      	b.n	8003eba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 808e 	beq.w	8003eae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 fd1c 	bl	80077da <USB_ReadDevOutEPInterrupt>
 8003da2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 feaa 	bl	8004b1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00c      	beq.n	8003dec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	2308      	movs	r3, #8
 8003de2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 ff80 	bl	8004cec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	461a      	mov	r2, r3
 8003e04:	2310      	movs	r3, #16
 8003e06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d030      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b80      	cmp	r3, #128	; 0x80
 8003e1c:	d109      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	78db      	ldrb	r3, [r3, #3]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d108      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f005 fd53 	bl	8009908 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2302      	movs	r3, #2
 8003e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f47f af62 	bne.w	8003d86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 fc40 	bl	800774c <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ed6:	f040 80db 	bne.w	8004090 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f003 fc61 	bl	80077a6 <USB_ReadDevAllInEpInterrupt>
 8003ee4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003eea:	e0cd      	b.n	8004088 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80c2 	beq.w	800407c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 fc87 	bl	8007816 <USB_ReadDevInEPInterrupt>
 8003f08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d057      	beq.n	8003fc4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f34:	4013      	ands	r3, r2
 8003f36:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	2301      	movs	r3, #1
 8003f48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d132      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334c      	adds	r3, #76	; 0x4c
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4403      	add	r3, r0
 8003f72:	3348      	adds	r3, #72	; 0x48
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4419      	add	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4403      	add	r3, r0
 8003f86:	334c      	adds	r3, #76	; 0x4c
 8003f88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d113      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x3a2>
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3354      	adds	r3, #84	; 0x54
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	f003 fc8e 	bl	80078d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f005 fc1d 	bl	80097fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2308      	movs	r3, #8
 8003fde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004012:	461a      	mov	r2, r3
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d023      	beq.n	800406a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004024:	6a38      	ldr	r0, [r7, #32]
 8004026:	f002 fb6f 	bl	8006708 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	3338      	adds	r3, #56	; 0x38
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	3304      	adds	r3, #4
 800403c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f005 fc6a 	bl	800992c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	461a      	mov	r2, r3
 8004066:	2302      	movs	r3, #2
 8004068:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fcc3 	bl	8004a02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	3301      	adds	r3, #1
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	f47f af2e 	bne.w	8003eec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fb59 	bl	800774c <USB_ReadInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a4:	d122      	bne.n	80040ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d108      	bne.n	80040d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040cc:	2100      	movs	r1, #0
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 feaa 	bl	8004e28 <HAL_PCDEx_LPM_Callback>
 80040d4:	e002      	b.n	80040dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f005 fc08 	bl	80098ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 fb2b 	bl	800774c <USB_ReadInterrupts>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004100:	d112      	bne.n	8004128 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f005 fbc4 	bl	80098a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004126:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f003 fb0d 	bl	800774c <USB_ReadInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	f040 80b7 	bne.w	80042ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2110      	movs	r1, #16
 800415a:	4618      	mov	r0, r3
 800415c:	f002 fad4 	bl	8006708 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	e046      	b.n	80041f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	461a      	mov	r2, r3
 8004174:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004178:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004198:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	461a      	mov	r2, r3
 80041a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	3301      	adds	r3, #1
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d3b3      	bcc.n	8004166 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800420c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004210:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422a:	f043 030b 	orr.w	r3, r3, #11
 800422e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004240:	f043 030b 	orr.w	r3, r3, #11
 8004244:	6453      	str	r3, [r2, #68]	; 0x44
 8004246:	e015      	b.n	8004274 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800425a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800425e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426e:	f043 030b 	orr.w	r3, r3, #11
 8004272:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004282:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004286:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004298:	461a      	mov	r2, r3
 800429a:	f003 fb1b 	bl	80078d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 fa4a 	bl	800774c <USB_ReadInterrupts>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	d124      	bne.n	800430e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f003 fae0 	bl	800788e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 fa95 	bl	8006802 <USB_GetDevSpeed>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681c      	ldr	r4, [r3, #0]
 80042e4:	f001 fa10 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 80042e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	4620      	mov	r0, r4
 80042f4:	f001 ff94 	bl	8006220 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f005 faa8 	bl	800984e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800430c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f003 fa1a 	bl	800774c <USB_ReadInterrupts>
 8004318:	4603      	mov	r3, r0
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b08      	cmp	r3, #8
 8004320:	d10a      	bne.n	8004338 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f005 fa85 	bl	8009832 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f002 0208 	and.w	r2, r2, #8
 8004336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f003 fa05 	bl	800774c <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d122      	bne.n	8004392 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004358:	2301      	movs	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	e014      	b.n	8004388 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb0f 	bl	80049a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	3301      	adds	r3, #1
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	429a      	cmp	r2, r3
 8004390:	d3e5      	bcc.n	800435e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f003 f9d8 	bl	800774c <USB_ReadInterrupts>
 800439c:	4603      	mov	r3, r0
 800439e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a6:	d13b      	bne.n	8004420 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a8:	2301      	movs	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	e02b      	b.n	8004406 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	3340      	adds	r3, #64	; 0x40
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d115      	bne.n	8004400 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da12      	bge.n	8004400 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	333f      	adds	r3, #63	; 0x3f
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fad0 	bl	80049a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	3301      	adds	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440c:	429a      	cmp	r2, r3
 800440e:	d3ce      	bcc.n	80043ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800441e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f003 f991 	bl	800774c <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004434:	d155      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004436:	2301      	movs	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	e045      	b.n	80044c8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d12e      	bne.n	80044c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004464:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004466:	2b00      	cmp	r3, #0
 8004468:	da2b      	bge.n	80044c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004476:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800447a:	429a      	cmp	r2, r3
 800447c:	d121      	bne.n	80044c2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044be:	6053      	str	r3, [r2, #4]
            break;
 80044c0:	e007      	b.n	80044d2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	3301      	adds	r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3b4      	bcc.n	800443c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 f930 	bl	800774c <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d10a      	bne.n	800450e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f005 fa29 	bl	8009950 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800450c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f003 f91a 	bl	800774c <USB_ReadInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d115      	bne.n	800454e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f005 fa19 	bl	800996c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e000      	b.n	800454e <HAL_PCD_IRQHandler+0x938>
      return;
 800454c:	bf00      	nop
    }
  }
}
 800454e:	3734      	adds	r7, #52	; 0x34
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}

08004554 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_PCD_SetAddress+0x1a>
 800456a:	2302      	movs	r3, #2
 800456c:	e013      	b.n	8004596 <HAL_PCD_SetAddress+0x42>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f003 f878 	bl	800767c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	461a      	mov	r2, r3
 80045ac:	4603      	mov	r3, r0
 80045ae:	70fb      	strb	r3, [r7, #3]
 80045b0:	460b      	mov	r3, r1
 80045b2:	803b      	strh	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da0f      	bge.n	80045e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	3338      	adds	r3, #56	; 0x38
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	3304      	adds	r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	705a      	strb	r2, [r3, #1]
 80045e2:	e00f      	b.n	8004604 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	3304      	adds	r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004610:	883a      	ldrh	r2, [r7, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	78ba      	ldrb	r2, [r7, #2]
 800461a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800462e:	78bb      	ldrb	r3, [r7, #2]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d102      	bne.n	800463a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_PCD_EP_Open+0xaa>
 8004644:	2302      	movs	r3, #2
 8004646:	e00e      	b.n	8004666 <HAL_PCD_EP_Open+0xc8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	f002 f8f8 	bl	800684c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004664:	7afb      	ldrb	r3, [r7, #11]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800467a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	da0f      	bge.n	80046a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3338      	adds	r3, #56	; 0x38
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	3304      	adds	r3, #4
 8004698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	705a      	strb	r2, [r3, #1]
 80046a0:	e00f      	b.n	80046c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_PCD_EP_Close+0x6e>
 80046d8:	2302      	movs	r3, #2
 80046da:	e00e      	b.n	80046fa <HAL_PCD_EP_Close+0x8c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f002 f936 	bl	800695c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	460b      	mov	r3, r1
 8004710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004744:	7afb      	ldrb	r3, [r7, #11]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	b2da      	uxtb	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d102      	bne.n	800475e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	f002 fc15 	bl	8006fa4 <USB_EP0StartXfer>
 800477a:	e008      	b.n	800478e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	f002 f9c3 	bl	8006b14 <USB_EPStartXfer>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	460b      	mov	r3, r1
 80047a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	f003 020f 	and.w	r2, r3, #15
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	3338      	adds	r3, #56	; 0x38
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	3304      	adds	r3, #4
 80047be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2201      	movs	r2, #1
 80047d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d102      	bne.n	80047f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	f002 fbcb 	bl	8006fa4 <USB_EP0StartXfer>
 800480e:	e008      	b.n	8004822 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	f002 f979 	bl	8006b14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d901      	bls.n	800484a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e050      	b.n	80048ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800484a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0f      	bge.n	8004872 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	3338      	adds	r3, #56	; 0x38
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	3304      	adds	r3, #4
 8004868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	705a      	strb	r2, [r3, #1]
 8004870:	e00d      	b.n	800488e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_PCD_EP_SetStall+0x82>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e01e      	b.n	80048ec <HAL_PCD_EP_SetStall+0xc0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	4618      	mov	r0, r3
 80048be:	f002 fe09 	bl	80074d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	b2d9      	uxtb	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048dc:	461a      	mov	r2, r3
 80048de:	f002 fff9 	bl	80078d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d901      	bls.n	8004912 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e042      	b.n	8004998 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da0f      	bge.n	800493a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	3338      	adds	r3, #56	; 0x38
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	3304      	adds	r3, #4
 8004930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	705a      	strb	r2, [r3, #1]
 8004938:	e00f      	b.n	800495a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_PCD_EP_ClrStall+0x86>
 8004976:	2302      	movs	r3, #2
 8004978:	e00e      	b.n	8004998 <HAL_PCD_EP_ClrStall+0xa4>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	4618      	mov	r0, r3
 800498a:	f002 fe11 	bl	80075b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da0c      	bge.n	80049ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	3338      	adds	r3, #56	; 0x38
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	3304      	adds	r3, #4
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e00c      	b.n	80049e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 020f 	and.w	r2, r3, #15
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	4413      	add	r3, r2
 80049e4:	3304      	adds	r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68f9      	ldr	r1, [r7, #12]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f002 fc30 	bl	8007254 <USB_EPStopXfer>
 80049f4:	4603      	mov	r3, r0
 80049f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049f8:	7afb      	ldrb	r3, [r7, #11]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b08a      	sub	sp, #40	; 0x28
 8004a06:	af02      	add	r7, sp, #8
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	3338      	adds	r3, #56	; 0x38
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	3304      	adds	r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d901      	bls.n	8004a3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06c      	b.n	8004b14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d902      	bls.n	8004a56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a5e:	e02b      	b.n	8004ab8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d902      	bls.n	8004a7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3303      	adds	r3, #3
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6919      	ldr	r1, [r3, #16]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	4603      	mov	r3, r0
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f002 fc84 	bl	80073a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d809      	bhi.n	8004ae2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1a      	ldr	r2, [r3, #32]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d203      	bcs.n	8004ae2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1be      	bne.n	8004a60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d811      	bhi.n	8004b12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	2201      	movs	r2, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	6939      	ldr	r1, [r7, #16]
 8004b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0e:	4013      	ands	r3, r2
 8004b10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	333c      	adds	r3, #60	; 0x3c
 8004b34:	3304      	adds	r3, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d17b      	bne.n	8004c4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4a61      	ldr	r2, [pc, #388]	; (8004ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	f240 80b9 	bls.w	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80b3 	beq.w	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b84:	6093      	str	r3, [r2, #8]
 8004b86:	e0a7      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	6093      	str	r3, [r2, #8]
 8004ba4:	e098      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f040 8093 	bne.w	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	; (8004ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d90f      	bls.n	8004bda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	6093      	str	r3, [r2, #8]
 8004bd8:	e07e      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4413      	add	r3, r2
 8004bec:	3304      	adds	r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	0159      	lsls	r1, r3, #5
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d114      	bne.n	8004c3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c24:	461a      	mov	r2, r3
 8004c26:	2101      	movs	r1, #1
 8004c28:	f002 fe54 	bl	80078d4 <USB_EP0_OutStart>
 8004c2c:	e006      	b.n	8004c3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	441a      	add	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f004 fdc0 	bl	80097c8 <HAL_PCD_DataOutStageCallback>
 8004c48:	e046      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4a26      	ldr	r2, [pc, #152]	; (8004ce8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d124      	bne.n	8004c9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	e032      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f004 fd97 	bl	80097c8 <HAL_PCD_DataOutStageCallback>
 8004c9a:	e01d      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d114      	bne.n	8004ccc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f002 fe04 	bl	80078d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f004 fd78 	bl	80097c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	4f54300a 	.word	0x4f54300a
 8004ce8:	4f54310a 	.word	0x4f54310a

08004cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	333c      	adds	r3, #60	; 0x3c
 8004d04:	3304      	adds	r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d90e      	bls.n	8004d40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f004 fd2f 	bl	80097a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d90c      	bls.n	8004d68 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d60:	461a      	mov	r2, r3
 8004d62:	2101      	movs	r1, #1
 8004d64:	f002 fdb6 	bl	80078d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	4f54300a 	.word	0x4f54300a

08004d78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
 8004d84:	4613      	mov	r3, r2
 8004d86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d96:	883b      	ldrh	r3, [r7, #0]
 8004d98:	0419      	lsls	r1, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
 8004da4:	e028      	b.n	8004df8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	4413      	add	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e00d      	b.n	8004dd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	3340      	adds	r3, #64	; 0x40
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	7bfa      	ldrb	r2, [r7, #15]
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d3ec      	bcc.n	8004dba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004de0:	883b      	ldrh	r3, [r7, #0]
 8004de2:	0418      	lsls	r0, r3, #16
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6819      	ldr	r1, [r3, #0]
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	4302      	orrs	r2, r0
 8004df0:	3340      	adds	r3, #64	; 0x40
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e267      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d075      	beq.n	8004f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e5e:	4b88      	ldr	r3, [pc, #544]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d00c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6a:	4b85      	ldr	r3, [pc, #532]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d112      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e76:	4b82      	ldr	r3, [pc, #520]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	4b7e      	ldr	r3, [pc, #504]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05b      	beq.n	8004f48 <HAL_RCC_OscConfig+0x108>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d157      	bne.n	8004f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e242      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x74>
 8004ea6:	4b76      	ldr	r3, [pc, #472]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a75      	ldr	r2, [pc, #468]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xb0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x98>
 8004ebe:	4b70      	ldr	r3, [pc, #448]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a6f      	ldr	r2, [pc, #444]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b6d      	ldr	r3, [pc, #436]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6c      	ldr	r2, [pc, #432]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xb0>
 8004ed8:	4b69      	ldr	r3, [pc, #420]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a68      	ldr	r2, [pc, #416]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a65      	ldr	r2, [pc, #404]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fc fa22 	bl	8001340 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fc fa1e 	bl	8001340 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e207      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b5b      	ldr	r3, [pc, #364]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xc0>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fc fa0e 	bl	8001340 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fc fa0a 	bl	8001340 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e1f3      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b51      	ldr	r3, [pc, #324]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0xe8>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d063      	beq.n	800501e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f56:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6e:	4b44      	ldr	r3, [pc, #272]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x152>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1c7      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4937      	ldr	r1, [pc, #220]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e03a      	b.n	800501e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b34      	ldr	r3, [pc, #208]	; (8005084 <HAL_RCC_OscConfig+0x244>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fc f9c3 	bl	8001340 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fc f9bf 	bl	8001340 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1a8      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b28      	ldr	r3, [pc, #160]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4925      	ldr	r1, [pc, #148]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	e015      	b.n	800501e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <HAL_RCC_OscConfig+0x244>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fc f9a2 	bl	8001340 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005000:	f7fc f99e 	bl	8001340 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e187      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <HAL_RCC_OscConfig+0x248>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fc f982 	bl	8001340 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005040:	f7fc f97e 	bl	8001340 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e167      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x240>)
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0x200>
 800505e:	e01b      	b.n	8005098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_RCC_OscConfig+0x248>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005066:	f7fc f96b 	bl	8001340 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	e00e      	b.n	800508c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506e:	f7fc f967 	bl	8001340 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d907      	bls.n	800508c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e150      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
 8005080:	40023800 	.word	0x40023800
 8005084:	42470000 	.word	0x42470000
 8005088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	4b88      	ldr	r3, [pc, #544]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800508e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ea      	bne.n	800506e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8097 	beq.w	80051d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050aa:	4b81      	ldr	r3, [pc, #516]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	4b7d      	ldr	r3, [pc, #500]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	4a7c      	ldr	r2, [pc, #496]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	6413      	str	r3, [r2, #64]	; 0x40
 80050c6:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b77      	ldr	r3, [pc, #476]	; (80052b4 <HAL_RCC_OscConfig+0x474>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b74      	ldr	r3, [pc, #464]	; (80052b4 <HAL_RCC_OscConfig+0x474>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a73      	ldr	r2, [pc, #460]	; (80052b4 <HAL_RCC_OscConfig+0x474>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fc f927 	bl	8001340 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fc f923 	bl	8001340 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e10c      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b6a      	ldr	r3, [pc, #424]	; (80052b4 <HAL_RCC_OscConfig+0x474>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x2ea>
 800511c:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a63      	ldr	r2, [pc, #396]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
 8005128:	e01c      	b.n	8005164 <HAL_RCC_OscConfig+0x324>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x30c>
 8005132:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6713      	str	r3, [r2, #112]	; 0x70
 800513e:	4b5c      	ldr	r3, [pc, #368]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a5b      	ldr	r2, [pc, #364]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x324>
 800514c:	4b58      	ldr	r3, [pc, #352]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a57      	ldr	r2, [pc, #348]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a54      	ldr	r2, [pc, #336]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800515e:	f023 0304 	bic.w	r3, r3, #4
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fc f8e8 	bl	8001340 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fc f8e4 	bl	8001340 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0cb      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518a:	4b49      	ldr	r3, [pc, #292]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0ee      	beq.n	8005174 <HAL_RCC_OscConfig+0x334>
 8005196:	e014      	b.n	80051c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005198:	f7fc f8d2 	bl	8001340 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fc f8ce 	bl	8001340 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0b5      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b6:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ee      	bne.n	80051a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	4a38      	ldr	r2, [pc, #224]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a1 	beq.w	8005320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d05c      	beq.n	80052a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d141      	bne.n	8005276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_RCC_OscConfig+0x478>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f8:	f7fc f8a2 	bl	8001340 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fc f89e 	bl	8001340 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e087      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	3b01      	subs	r3, #1
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	491b      	ldr	r1, [pc, #108]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCC_OscConfig+0x478>)
 800524a:	2201      	movs	r2, #1
 800524c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524e:	f7fc f877 	bl	8001340 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005256:	f7fc f873 	bl	8001340 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e05c      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x416>
 8005274:	e054      	b.n	8005320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_RCC_OscConfig+0x478>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fc f860 	bl	8001340 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7fc f85c 	bl	8001340 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e045      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCC_OscConfig+0x470>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x444>
 80052a2:	e03d      	b.n	8005320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e038      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40007000 	.word	0x40007000
 80052b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <HAL_RCC_OscConfig+0x4ec>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d028      	beq.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d121      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d11a      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d111      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	3b01      	subs	r3, #1
 8005306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d107      	bne.n	800531c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800

08005330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0cc      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005344:	4b68      	ldr	r3, [pc, #416]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d90c      	bls.n	800536c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b65      	ldr	r3, [pc, #404]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b63      	ldr	r3, [pc, #396]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0b8      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d020      	beq.n	80053ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005384:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a58      	ldr	r2, [pc, #352]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800538e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800539c:	4b53      	ldr	r3, [pc, #332]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a52      	ldr	r2, [pc, #328]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b50      	ldr	r3, [pc, #320]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	494d      	ldr	r1, [pc, #308]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d044      	beq.n	8005450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b47      	ldr	r3, [pc, #284]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d119      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d003      	beq.n	80053ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ee:	4b3f      	ldr	r3, [pc, #252]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e06f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fe:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e067      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4934      	ldr	r1, [pc, #208]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005420:	f7fb ff8e 	bl	8001340 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fb ff8a 	bl	8001340 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e04f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d20c      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e032      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4916      	ldr	r1, [pc, #88]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	490e      	ldr	r1, [pc, #56]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054b6:	f000 f821 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	490a      	ldr	r1, [pc, #40]	; (80054f0 <HAL_RCC_ClockConfig+0x1c0>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fb feee 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40023c00 	.word	0x40023c00
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800ae10 	.word	0x0800ae10
 80054f4:	2000000c 	.word	0x2000000c
 80054f8:	20000010 	.word	0x20000010

080054fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005500:	b094      	sub	sp, #80	; 0x50
 8005502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
 8005508:	2300      	movs	r3, #0
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	2300      	movs	r3, #0
 800550e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005514:	4b79      	ldr	r3, [pc, #484]	; (80056fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b08      	cmp	r3, #8
 800551e:	d00d      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x40>
 8005520:	2b08      	cmp	r3, #8
 8005522:	f200 80e1 	bhi.w	80056e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_RCC_GetSysClockFreq+0x34>
 800552a:	2b04      	cmp	r3, #4
 800552c:	d003      	beq.n	8005536 <HAL_RCC_GetSysClockFreq+0x3a>
 800552e:	e0db      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b73      	ldr	r3, [pc, #460]	; (8005700 <HAL_RCC_GetSysClockFreq+0x204>)
 8005532:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005534:	e0db      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005536:	4b73      	ldr	r3, [pc, #460]	; (8005704 <HAL_RCC_GetSysClockFreq+0x208>)
 8005538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800553a:	e0d8      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800553c:	4b6f      	ldr	r3, [pc, #444]	; (80056fc <HAL_RCC_GetSysClockFreq+0x200>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005544:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005546:	4b6d      	ldr	r3, [pc, #436]	; (80056fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005552:	4b6a      	ldr	r3, [pc, #424]	; (80056fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	2200      	movs	r2, #0
 800555a:	63bb      	str	r3, [r7, #56]	; 0x38
 800555c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005564:	633b      	str	r3, [r7, #48]	; 0x30
 8005566:	2300      	movs	r3, #0
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
 800556a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800556e:	4622      	mov	r2, r4
 8005570:	462b      	mov	r3, r5
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	0159      	lsls	r1, r3, #5
 800557c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005580:	0150      	lsls	r0, r2, #5
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4621      	mov	r1, r4
 8005588:	1a51      	subs	r1, r2, r1
 800558a:	6139      	str	r1, [r7, #16]
 800558c:	4629      	mov	r1, r5
 800558e:	eb63 0301 	sbc.w	r3, r3, r1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a0:	4659      	mov	r1, fp
 80055a2:	018b      	lsls	r3, r1, #6
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055aa:	4651      	mov	r1, sl
 80055ac:	018a      	lsls	r2, r1, #6
 80055ae:	4651      	mov	r1, sl
 80055b0:	ebb2 0801 	subs.w	r8, r2, r1
 80055b4:	4659      	mov	r1, fp
 80055b6:	eb63 0901 	sbc.w	r9, r3, r1
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ce:	4690      	mov	r8, r2
 80055d0:	4699      	mov	r9, r3
 80055d2:	4623      	mov	r3, r4
 80055d4:	eb18 0303 	adds.w	r3, r8, r3
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	462b      	mov	r3, r5
 80055dc:	eb49 0303 	adc.w	r3, r9, r3
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ee:	4629      	mov	r1, r5
 80055f0:	024b      	lsls	r3, r1, #9
 80055f2:	4621      	mov	r1, r4
 80055f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055f8:	4621      	mov	r1, r4
 80055fa:	024a      	lsls	r2, r1, #9
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005602:	2200      	movs	r2, #0
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
 8005606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800560c:	f7fa fe30 	bl	8000270 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005618:	e058      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561a:	4b38      	ldr	r3, [pc, #224]	; (80056fc <HAL_RCC_GetSysClockFreq+0x200>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	099b      	lsrs	r3, r3, #6
 8005620:	2200      	movs	r2, #0
 8005622:	4618      	mov	r0, r3
 8005624:	4611      	mov	r1, r2
 8005626:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	2300      	movs	r3, #0
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
 8005630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	f04f 0000 	mov.w	r0, #0
 800563c:	f04f 0100 	mov.w	r1, #0
 8005640:	0159      	lsls	r1, r3, #5
 8005642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005646:	0150      	lsls	r0, r2, #5
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4641      	mov	r1, r8
 800564e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005652:	4649      	mov	r1, r9
 8005654:	eb63 0b01 	sbc.w	fp, r3, r1
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005664:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005668:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800566c:	ebb2 040a 	subs.w	r4, r2, sl
 8005670:	eb63 050b 	sbc.w	r5, r3, fp
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	00eb      	lsls	r3, r5, #3
 800567e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005682:	00e2      	lsls	r2, r4, #3
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	4643      	mov	r3, r8
 800568a:	18e3      	adds	r3, r4, r3
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	464b      	mov	r3, r9
 8005690:	eb45 0303 	adc.w	r3, r5, r3
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056a2:	4629      	mov	r1, r5
 80056a4:	028b      	lsls	r3, r1, #10
 80056a6:	4621      	mov	r1, r4
 80056a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056ac:	4621      	mov	r1, r4
 80056ae:	028a      	lsls	r2, r1, #10
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b6:	2200      	movs	r2, #0
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	61fa      	str	r2, [r7, #28]
 80056bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c0:	f7fa fdd6 	bl	8000270 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4613      	mov	r3, r2
 80056ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_GetSysClockFreq+0x200>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056e6:	e002      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3750      	adds	r7, #80	; 0x50
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800
 8005700:	00f42400 	.word	0x00f42400
 8005704:	007a1200 	.word	0x007a1200

08005708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <HAL_RCC_GetHCLKFreq+0x14>)
 800570e:	681b      	ldr	r3, [r3, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	2000000c 	.word	0x2000000c

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005724:	f7ff fff0 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0a9b      	lsrs	r3, r3, #10
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4903      	ldr	r1, [pc, #12]	; (8005744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40023800 	.word	0x40023800
 8005744:	0800ae20 	.word	0x0800ae20

08005748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e07b      	b.n	8005852 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d108      	bne.n	8005774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576a:	d009      	beq.n	8005780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
 8005772:	e005      	b.n	8005780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb fb46 	bl	8000e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	ea42 0103 	orr.w	r1, r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	f003 0104 	and.w	r1, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	f003 0210 	and.w	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e041      	b.n	80058f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fb fb4d 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f000 fa95 	bl	8005dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d001      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e04e      	b.n	80059ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a23      	ldr	r2, [pc, #140]	; (80059bc <HAL_TIM_Base_Start_IT+0xc4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d022      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593a:	d01d      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d018      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00e      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d009      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d111      	bne.n	800599c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b06      	cmp	r3, #6
 8005988:	d010      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599a:	e007      	b.n	80059ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40001800 	.word	0x40001800

080059d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0202 	mvn.w	r2, #2
 8005a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9b5 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9a7 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f9b8 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0204 	mvn.w	r2, #4
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f98b 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f97d 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f98e 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0208 	mvn.w	r2, #8
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f961 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f953 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f964 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f937 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f929 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f93a 	bl	8005d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0201 	mvn.w	r2, #1
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb f8c8 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fae0 	bl	8006148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d10e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8ff 	bl	8005db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d107      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0220 	mvn.w	r2, #32
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 faaa 	bl	8006134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIM_ConfigClockSource+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e0b4      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x186>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d03e      	beq.n	8005cbc <HAL_TIM_ConfigClockSource+0xd4>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	f200 8087 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	f000 8086 	beq.w	8005d5a <HAL_TIM_ConfigClockSource+0x172>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d87f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d01a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xa6>
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d87b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c5c:	2b60      	cmp	r3, #96	; 0x60
 8005c5e:	d050      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x11a>
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d877      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d03c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d873      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d058      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x13a>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d86f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d064      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d86b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d060      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d867      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d05a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	e062      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f000 f9ad 	bl	8005ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	609a      	str	r2, [r3, #8]
      break;
 8005cba:	e04f      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f000 f996 	bl	8005ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	609a      	str	r2, [r3, #8]
      break;
 8005ce0:	e03c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 f90a 	bl	8005f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2150      	movs	r1, #80	; 0x50
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f963 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e02c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f929 	bl	8005f66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2160      	movs	r1, #96	; 0x60
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f953 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 8005d20:	e01c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 f8ea 	bl	8005f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f943 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e00c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 f93a 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 8005d52:	e003      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e000      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a40      	ldr	r2, [pc, #256]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3d      	ldr	r2, [pc, #244]	; (8005ee0 <TIM_Base_SetConfig+0x118>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <TIM_Base_SetConfig+0x11c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3b      	ldr	r2, [pc, #236]	; (8005ee8 <TIM_Base_SetConfig+0x120>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3a      	ldr	r2, [pc, #232]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d108      	bne.n	8005e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d02b      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e28:	d027      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <TIM_Base_SetConfig+0x118>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d023      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <TIM_Base_SetConfig+0x11c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01f      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <TIM_Base_SetConfig+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01b      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d017      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <TIM_Base_SetConfig+0x128>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a27      	ldr	r2, [pc, #156]	; (8005ef4 <TIM_Base_SetConfig+0x12c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <TIM_Base_SetConfig+0x130>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <TIM_Base_SetConfig+0x134>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <TIM_Base_SetConfig+0x138>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <TIM_Base_SetConfig+0x13c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d103      	bne.n	8005ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	615a      	str	r2, [r3, #20]
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40010400 	.word	0x40010400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800
 8005efc:	40001800 	.word	0x40001800
 8005f00:	40001c00 	.word	0x40001c00
 8005f04:	40002000 	.word	0x40002000

08005f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f023 0201 	bic.w	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f023 030a 	bic.w	r3, r3, #10
 8005f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b087      	sub	sp, #28
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f023 0210 	bic.w	r2, r3, #16
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	031b      	lsls	r3, r3, #12
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f043 0307 	orr.w	r3, r3, #7
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	431a      	orrs	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4313      	orrs	r3, r2
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	609a      	str	r2, [r3, #8]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006050:	2302      	movs	r3, #2
 8006052:	e05a      	b.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d01d      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1d      	ldr	r2, [pc, #116]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a18      	ldr	r2, [pc, #96]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a17      	ldr	r2, [pc, #92]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a15      	ldr	r2, [pc, #84]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10c      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40001800 	.word	0x40001800

08006134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800615c:	b084      	sub	sp, #16
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	f107 001c 	add.w	r0, r7, #28
 800616a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d122      	bne.n	80061ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800619c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d105      	bne.n	80061ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fbee 	bl	8007990 <USB_CoreReset>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
 80061b8:	e01a      	b.n	80061f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fbe2 	bl	8007990 <USB_CoreReset>
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
 80061e2:	e005      	b.n	80061f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10b      	bne.n	800620e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f043 0206 	orr.w	r2, r3, #6
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800621a:	b004      	add	sp, #16
 800621c:	4770      	bx	lr
	...

08006220 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d165      	bne.n	8006300 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a41      	ldr	r2, [pc, #260]	; (800633c <USB_SetTurnaroundTime+0x11c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d906      	bls.n	800624a <USB_SetTurnaroundTime+0x2a>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a40      	ldr	r2, [pc, #256]	; (8006340 <USB_SetTurnaroundTime+0x120>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d202      	bcs.n	800624a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006244:	230f      	movs	r3, #15
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e062      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4a3c      	ldr	r2, [pc, #240]	; (8006340 <USB_SetTurnaroundTime+0x120>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d306      	bcc.n	8006260 <USB_SetTurnaroundTime+0x40>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a3b      	ldr	r2, [pc, #236]	; (8006344 <USB_SetTurnaroundTime+0x124>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d202      	bcs.n	8006260 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800625a:	230e      	movs	r3, #14
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e057      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a38      	ldr	r2, [pc, #224]	; (8006344 <USB_SetTurnaroundTime+0x124>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d306      	bcc.n	8006276 <USB_SetTurnaroundTime+0x56>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4a37      	ldr	r2, [pc, #220]	; (8006348 <USB_SetTurnaroundTime+0x128>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d202      	bcs.n	8006276 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006270:	230d      	movs	r3, #13
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e04c      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4a33      	ldr	r2, [pc, #204]	; (8006348 <USB_SetTurnaroundTime+0x128>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d306      	bcc.n	800628c <USB_SetTurnaroundTime+0x6c>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4a32      	ldr	r2, [pc, #200]	; (800634c <USB_SetTurnaroundTime+0x12c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d802      	bhi.n	800628c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006286:	230c      	movs	r3, #12
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e041      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a2f      	ldr	r2, [pc, #188]	; (800634c <USB_SetTurnaroundTime+0x12c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d906      	bls.n	80062a2 <USB_SetTurnaroundTime+0x82>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4a2e      	ldr	r2, [pc, #184]	; (8006350 <USB_SetTurnaroundTime+0x130>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d802      	bhi.n	80062a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800629c:	230b      	movs	r3, #11
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e036      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <USB_SetTurnaroundTime+0x130>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d906      	bls.n	80062b8 <USB_SetTurnaroundTime+0x98>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4a29      	ldr	r2, [pc, #164]	; (8006354 <USB_SetTurnaroundTime+0x134>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d802      	bhi.n	80062b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062b2:	230a      	movs	r3, #10
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e02b      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a26      	ldr	r2, [pc, #152]	; (8006354 <USB_SetTurnaroundTime+0x134>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d906      	bls.n	80062ce <USB_SetTurnaroundTime+0xae>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a25      	ldr	r2, [pc, #148]	; (8006358 <USB_SetTurnaroundTime+0x138>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d202      	bcs.n	80062ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062c8:	2309      	movs	r3, #9
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e020      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4a21      	ldr	r2, [pc, #132]	; (8006358 <USB_SetTurnaroundTime+0x138>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d306      	bcc.n	80062e4 <USB_SetTurnaroundTime+0xc4>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4a20      	ldr	r2, [pc, #128]	; (800635c <USB_SetTurnaroundTime+0x13c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d802      	bhi.n	80062e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062de:	2308      	movs	r3, #8
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e015      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a1d      	ldr	r2, [pc, #116]	; (800635c <USB_SetTurnaroundTime+0x13c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d906      	bls.n	80062fa <USB_SetTurnaroundTime+0xda>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <USB_SetTurnaroundTime+0x140>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d202      	bcs.n	80062fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062f4:	2307      	movs	r3, #7
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e00a      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062fa:	2306      	movs	r3, #6
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e007      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006306:	2309      	movs	r3, #9
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e001      	b.n	8006310 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800630c:	2309      	movs	r3, #9
 800630e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	029b      	lsls	r3, r3, #10
 8006324:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	00d8acbf 	.word	0x00d8acbf
 8006340:	00e4e1c0 	.word	0x00e4e1c0
 8006344:	00f42400 	.word	0x00f42400
 8006348:	01067380 	.word	0x01067380
 800634c:	011a499f 	.word	0x011a499f
 8006350:	01312cff 	.word	0x01312cff
 8006354:	014ca43f 	.word	0x014ca43f
 8006358:	016e3600 	.word	0x016e3600
 800635c:	01a6ab1f 	.word	0x01a6ab1f
 8006360:	01e84800 	.word	0x01e84800

08006364 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f043 0201 	orr.w	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d115      	bne.n	80063f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063d6:	2001      	movs	r0, #1
 80063d8:	f7fa ffbe 	bl	8001358 <HAL_Delay>
      ms++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fa45 	bl	8007872 <USB_GetMode>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d01e      	beq.n	800642c <USB_SetCurrentMode+0x84>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b31      	cmp	r3, #49	; 0x31
 80063f2:	d9f0      	bls.n	80063d6 <USB_SetCurrentMode+0x2e>
 80063f4:	e01a      	b.n	800642c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006408:	2001      	movs	r0, #1
 800640a:	f7fa ffa5 	bl	8001358 <HAL_Delay>
      ms++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fa2c 	bl	8007872 <USB_GetMode>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <USB_SetCurrentMode+0x84>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b31      	cmp	r3, #49	; 0x31
 8006424:	d9f0      	bls.n	8006408 <USB_SetCurrentMode+0x60>
 8006426:	e001      	b.n	800642c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e005      	b.n	8006438 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b32      	cmp	r3, #50	; 0x32
 8006430:	d101      	bne.n	8006436 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006440:	b084      	sub	sp, #16
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800644e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e009      	b.n	8006474 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3340      	adds	r3, #64	; 0x40
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	2200      	movs	r2, #0
 800646c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3301      	adds	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b0e      	cmp	r3, #14
 8006478:	d9f2      	bls.n	8006460 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11c      	bne.n	80064ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648e:	f043 0302 	orr.w	r3, r3, #2
 8006492:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
 80064b8:	e00b      	b.n	80064d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d8:	461a      	mov	r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	4619      	mov	r1, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	461a      	mov	r2, r3
 80064ee:	680b      	ldr	r3, [r1, #0]
 80064f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d10c      	bne.n	8006512 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064fe:	2100      	movs	r1, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f965 	bl	80067d0 <USB_SetDevSpeed>
 8006506:	e008      	b.n	800651a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006508:	2101      	movs	r1, #1
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f960 	bl	80067d0 <USB_SetDevSpeed>
 8006510:	e003      	b.n	800651a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006512:	2103      	movs	r1, #3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f95b 	bl	80067d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800651a:	2110      	movs	r1, #16
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f8f3 	bl	8006708 <USB_FlushTxFifo>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f91f 	bl	8006770 <USB_FlushRxFifo>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	461a      	mov	r2, r3
 8006544:	2300      	movs	r3, #0
 8006546:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	461a      	mov	r2, r3
 8006550:	2300      	movs	r3, #0
 8006552:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	461a      	mov	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	e043      	b.n	80065ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800657c:	d118      	bne.n	80065b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	461a      	mov	r2, r3
 8006592:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e013      	b.n	80065c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e008      	b.n	80065c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	461a      	mov	r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	461a      	mov	r2, r3
 80065e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	3301      	adds	r3, #1
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d3b7      	bcc.n	8006566 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e043      	b.n	8006684 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800660e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006612:	d118      	bne.n	8006646 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e013      	b.n	8006658 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	461a      	mov	r2, r3
 800663e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e008      	b.n	8006658 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	461a      	mov	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	461a      	mov	r2, r3
 8006678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800667c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3301      	adds	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	429a      	cmp	r2, r3
 800668a:	d3b7      	bcc.n	80065fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800669a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f043 0210 	orr.w	r2, r3, #16
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <USB_DevInit+0x2c4>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f043 0208 	orr.w	r2, r3, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d107      	bne.n	80066f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	f043 0304 	orr.w	r3, r3, #4
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006700:	b004      	add	sp, #16
 8006702:	4770      	bx	lr
 8006704:	803c3800 	.word	0x803c3800

08006708 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4a13      	ldr	r2, [pc, #76]	; (800676c <USB_FlushTxFifo+0x64>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e01b      	b.n	8006760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	daf2      	bge.n	8006716 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	019b      	lsls	r3, r3, #6
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <USB_FlushTxFifo+0x64>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e006      	b.n	8006760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b20      	cmp	r3, #32
 800675c:	d0f0      	beq.n	8006740 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	00030d40 	.word	0x00030d40

08006770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a11      	ldr	r2, [pc, #68]	; (80067cc <USB_FlushRxFifo+0x5c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e018      	b.n	80067c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	daf2      	bge.n	800677c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2210      	movs	r2, #16
 800679e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <USB_FlushRxFifo+0x5c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e006      	b.n	80067c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0310 	and.w	r3, r3, #16
 80067ba:	2b10      	cmp	r3, #16
 80067bc:	d0f0      	beq.n	80067a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	00030d40 	.word	0x00030d40

080067d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067f0:	4313      	orrs	r3, r2
 80067f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0306 	and.w	r3, r3, #6
 800681a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]
 8006826:	e00a      	b.n	800683e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d002      	beq.n	8006834 <USB_GetDevSpeed+0x32>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b06      	cmp	r3, #6
 8006832:	d102      	bne.n	800683a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006834:	2302      	movs	r3, #2
 8006836:	75fb      	strb	r3, [r7, #23]
 8006838:	e001      	b.n	800683e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800683a:	230f      	movs	r3, #15
 800683c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006840:	4618      	mov	r0, r3
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d13a      	bne.n	80068de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	2101      	movs	r1, #1
 800687a:	fa01 f303 	lsl.w	r3, r1, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	68f9      	ldr	r1, [r7, #12]
 8006882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006886:	4313      	orrs	r3, r2
 8006888:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d155      	bne.n	800694c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	791b      	ldrb	r3, [r3, #4]
 80068ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	059b      	lsls	r3, r3, #22
 80068c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068c4:	4313      	orrs	r3, r2
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	e036      	b.n	800694c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	69da      	ldr	r2, [r3, #28]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	2101      	movs	r1, #1
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11a      	bne.n	800694c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006932:	430b      	orrs	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d161      	bne.n	8006a3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800698a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800698e:	d11f      	bne.n	80069d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	2101      	movs	r1, #1
 80069e2:	fa01 f303 	lsl.w	r3, r1, r3
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	43db      	mvns	r3, r3
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069f0:	4013      	ands	r3, r2
 80069f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	2101      	movs	r1, #1
 8006a06:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a14:	4013      	ands	r3, r2
 8006a16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	0159      	lsls	r1, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	440b      	add	r3, r1
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a32:	4619      	mov	r1, r3
 8006a34:	4b35      	ldr	r3, [pc, #212]	; (8006b0c <USB_DeactivateEndpoint+0x1b0>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]
 8006a3a:	e060      	b.n	8006afe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a52:	d11f      	bne.n	8006a94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	43db      	mvns	r3, r3
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad8:	4013      	ands	r3, r2
 8006ada:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	0159      	lsls	r1, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	4619      	mov	r1, r3
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <USB_DeactivateEndpoint+0x1b4>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	ec337800 	.word	0xec337800
 8006b10:	eff37800 	.word	0xeff37800

08006b14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	f040 815c 	bne.w	8006dee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d132      	bne.n	8006ba4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9c:	0cdb      	lsrs	r3, r3, #19
 8006b9e:	04db      	lsls	r3, r3, #19
 8006ba0:	6113      	str	r3, [r2, #16]
 8006ba2:	e074      	b.n	8006c8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	0cdb      	lsrs	r3, r3, #19
 8006bc0:	04db      	lsls	r3, r3, #19
 8006bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006be2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6999      	ldr	r1, [r3, #24]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	440b      	add	r3, r1
 8006c00:	1e59      	subs	r1, r3, #1
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c0c:	4b9d      	ldr	r3, [pc, #628]	; (8006e84 <USB_EPStartXfer+0x370>)
 8006c0e:	400b      	ands	r3, r1
 8006c10:	69b9      	ldr	r1, [r7, #24]
 8006c12:	0148      	lsls	r0, r1, #5
 8006c14:	69f9      	ldr	r1, [r7, #28]
 8006c16:	4401      	add	r1, r0
 8006c18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c36:	69b9      	ldr	r1, [r7, #24]
 8006c38:	0148      	lsls	r0, r1, #5
 8006c3a:	69f9      	ldr	r1, [r7, #28]
 8006c3c:	4401      	add	r1, r0
 8006c3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c42:	4313      	orrs	r3, r2
 8006c44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	791b      	ldrb	r3, [r3, #4]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d11f      	bne.n	8006c8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d14b      	bne.n	8006d2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	791b      	ldrb	r3, [r3, #4]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d128      	bne.n	8006d0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d110      	bne.n	8006cea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	e00f      	b.n	8006d0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e133      	b.n	8006f94 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	791b      	ldrb	r3, [r3, #4]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d015      	beq.n	8006d80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 811b 	beq.w	8006f94 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	2101      	movs	r1, #1
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	69f9      	ldr	r1, [r7, #28]
 8006d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	634b      	str	r3, [r1, #52]	; 0x34
 8006d7e:	e109      	b.n	8006f94 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d110      	bne.n	8006db2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e00f      	b.n	8006dd2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6919      	ldr	r1, [r3, #16]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	b298      	uxth	r0, r3
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	4603      	mov	r3, r0
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fade 	bl	80073a8 <USB_WritePacket>
 8006dec:	e0d2      	b.n	8006f94 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e08:	0cdb      	lsrs	r3, r3, #19
 8006e0a:	04db      	lsls	r3, r3, #19
 8006e0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d126      	bne.n	8006e88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	0148      	lsls	r0, r1, #5
 8006e54:	69f9      	ldr	r1, [r7, #28]
 8006e56:	4401      	add	r1, r0
 8006e58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7e:	6113      	str	r3, [r2, #16]
 8006e80:	e03a      	b.n	8006ef8 <USB_EPStartXfer+0x3e4>
 8006e82:	bf00      	nop
 8006e84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	8afa      	ldrh	r2, [r7, #22]
 8006ea4:	fb03 f202 	mul.w	r2, r3, r2
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	8afb      	ldrh	r3, [r7, #22]
 8006ebc:	04d9      	lsls	r1, r3, #19
 8006ebe:	4b38      	ldr	r3, [pc, #224]	; (8006fa0 <USB_EPStartXfer+0x48c>)
 8006ec0:	400b      	ands	r3, r1
 8006ec2:	69b9      	ldr	r1, [r7, #24]
 8006ec4:	0148      	lsls	r0, r1, #5
 8006ec6:	69f9      	ldr	r1, [r7, #28]
 8006ec8:	4401      	add	r1, r0
 8006eca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	0148      	lsls	r0, r1, #5
 8006eec:	69f9      	ldr	r1, [r7, #28]
 8006eee:	4401      	add	r1, r0
 8006ef0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10d      	bne.n	8006f1a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6919      	ldr	r1, [r3, #16]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	460a      	mov	r2, r1
 8006f18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d128      	bne.n	8006f74 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d110      	bne.n	8006f54 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e00f      	b.n	8006f74 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	1ff80000 	.word	0x1ff80000

08006fa4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	f040 80ce 	bne.w	8007162 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d132      	bne.n	8007034 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	0cdb      	lsrs	r3, r3, #19
 800702e:	04db      	lsls	r3, r3, #19
 8007030:	6113      	str	r3, [r2, #16]
 8007032:	e04e      	b.n	80070d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704e:	0cdb      	lsrs	r3, r3, #19
 8007050:	04db      	lsls	r3, r3, #19
 8007052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007072:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007076:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c2:	6939      	ldr	r1, [r7, #16]
 80070c4:	0148      	lsls	r0, r1, #5
 80070c6:	6979      	ldr	r1, [r7, #20]
 80070c8:	4401      	add	r1, r0
 80070ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ce:	4313      	orrs	r3, r2
 80070d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11e      	bne.n	8007116 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e097      	b.n	8007246 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007134:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8083 	beq.w	8007246 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f303 	lsl.w	r3, r1, r3
 8007156:	6979      	ldr	r1, [r7, #20]
 8007158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800715c:	4313      	orrs	r3, r2
 800715e:	634b      	str	r3, [r1, #52]	; 0x34
 8007160:	e071      	b.n	8007246 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717c:	0cdb      	lsrs	r3, r3, #19
 800717e:	04db      	lsls	r3, r3, #19
 8007180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f4:	6939      	ldr	r1, [r7, #16]
 80071f6:	0148      	lsls	r0, r1, #5
 80071f8:	6979      	ldr	r1, [r7, #20]
 80071fa:	4401      	add	r1, r0
 80071fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007200:	4313      	orrs	r3, r2
 8007202:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10d      	bne.n	8007226 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6919      	ldr	r1, [r3, #16]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	460a      	mov	r2, r1
 8007224:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007244:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d14a      	bne.n	8007308 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800728a:	f040 8086 	bne.w	800739a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f242 7210 	movw	r2, #10000	; 0x2710
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d902      	bls.n	80072ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ea:	e056      	b.n	800739a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007304:	d0e7      	beq.n	80072d6 <USB_EPStopXfer+0x82>
 8007306:	e048      	b.n	800739a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007320:	d13b      	bne.n	800739a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	7812      	ldrb	r2, [r2, #0]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007344:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	7812      	ldrb	r2, [r2, #0]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007368:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f242 7210 	movw	r2, #10000	; 0x2710
 8007376:	4293      	cmp	r3, r2
 8007378:	d902      	bls.n	8007380 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	75fb      	strb	r3, [r7, #23]
          break;
 800737e:	e00c      	b.n	800739a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007398:	d0e7      	beq.n	800736a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	460b      	mov	r3, r1
 80073b8:	71fb      	strb	r3, [r7, #7]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d123      	bne.n	8007416 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073ce:	88bb      	ldrh	r3, [r7, #4]
 80073d0:	3303      	adds	r3, #3
 80073d2:	089b      	lsrs	r3, r3, #2
 80073d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073d6:	2300      	movs	r3, #0
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	e018      	b.n	800740e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	031a      	lsls	r2, r3, #12
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e8:	461a      	mov	r2, r3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3301      	adds	r3, #1
 80073f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3301      	adds	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3301      	adds	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	3301      	adds	r3, #1
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	429a      	cmp	r2, r3
 8007414:	d3e2      	bcc.n	80073dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3724      	adds	r7, #36	; 0x24
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007424:	b480      	push	{r7}
 8007426:	b08b      	sub	sp, #44	; 0x2c
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	089b      	lsrs	r3, r3, #2
 800743e:	b29b      	uxth	r3, r3
 8007440:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800744a:	2300      	movs	r3, #0
 800744c:	623b      	str	r3, [r7, #32]
 800744e:	e014      	b.n	800747a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	601a      	str	r2, [r3, #0]
    pDest++;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	3301      	adds	r3, #1
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	3301      	adds	r3, #1
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	3301      	adds	r3, #1
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	3301      	adds	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	3301      	adds	r3, #1
 8007478:	623b      	str	r3, [r7, #32]
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	429a      	cmp	r2, r3
 8007480:	d3e6      	bcc.n	8007450 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007482:	8bfb      	ldrh	r3, [r7, #30]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01e      	beq.n	80074c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007492:	461a      	mov	r2, r3
 8007494:	f107 0310 	add.w	r3, r7, #16
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	701a      	strb	r2, [r3, #0]
      i++;
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	3301      	adds	r3, #1
 80074b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	3301      	adds	r3, #1
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074ba:	8bfb      	ldrh	r3, [r7, #30]
 80074bc:	3b01      	subs	r3, #1
 80074be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074c0:	8bfb      	ldrh	r3, [r7, #30]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1ea      	bne.n	800749c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	372c      	adds	r7, #44	; 0x2c
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d12c      	bne.n	800754a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	db12      	blt.n	8007528 <USB_EPSetStall+0x54>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00f      	beq.n	8007528 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007526:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e02b      	b.n	80075a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	db12      	blt.n	8007582 <USB_EPSetStall+0xae>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00f      	beq.n	8007582 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007580:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d128      	bne.n	800761e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	791b      	ldrb	r3, [r3, #4]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d003      	beq.n	80075fc <USB_EPClearStall+0x4c>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	791b      	ldrb	r3, [r3, #4]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d138      	bne.n	800766e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	440a      	add	r2, r1
 8007612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	e027      	b.n	800766e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800763c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	791b      	ldrb	r3, [r3, #4]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d003      	beq.n	800764e <USB_EPClearStall+0x9e>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d10f      	bne.n	800766e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800766c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800769a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800769e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f6:	f023 0302 	bic.w	r3, r3, #2
 80076fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007724:	f023 0303 	bic.w	r3, r3, #3
 8007728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007738:	f043 0302 	orr.w	r3, r3, #2
 800773c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4013      	ands	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007764:	68fb      	ldr	r3, [r7, #12]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4013      	ands	r3, r2
 8007794:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	0c1b      	lsrs	r3, r3, #16
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	4013      	ands	r3, r2
 80077c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	b29b      	uxth	r3, r3
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	4013      	ands	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007808:	68bb      	ldr	r3, [r7, #8]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007816:	b480      	push	{r7}
 8007818:	b087      	sub	sp, #28
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	fa22 f303 	lsr.w	r3, r2, r3
 8007846:	01db      	lsls	r3, r3, #7
 8007848:	b2db      	uxtb	r3, r3
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4013      	ands	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007864:	68bb      	ldr	r3, [r7, #8]
}
 8007866:	4618      	mov	r0, r3
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0301 	and.w	r3, r3, #1
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078ac:	f023 0307 	bic.w	r3, r3, #7
 80078b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	460b      	mov	r3, r1
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	333c      	adds	r3, #60	; 0x3c
 80078ea:	3304      	adds	r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4a26      	ldr	r2, [pc, #152]	; (800798c <USB_EP0_OutStart+0xb8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d90a      	bls.n	800790e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007908:	d101      	bne.n	800790e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	e037      	b.n	800797e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800792c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800793c:	f043 0318 	orr.w	r3, r3, #24
 8007940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007950:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007954:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10f      	bne.n	800797c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	461a      	mov	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007976:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800797a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	4f54300a 	.word	0x4f54300a

08007990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4a13      	ldr	r2, [pc, #76]	; (80079f4 <USB_CoreReset+0x64>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d901      	bls.n	80079ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e01b      	b.n	80079e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	daf2      	bge.n	800799c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f043 0201 	orr.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <USB_CoreReset+0x64>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d901      	bls.n	80079d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e006      	b.n	80079e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d0f0      	beq.n	80079c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	00030d40 	.word	0x00030d40

080079f8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007a04:	2010      	movs	r0, #16
 8007a06:	f002 f937 	bl	8009c78 <USBD_static_malloc>
 8007a0a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32b0      	adds	r2, #176	; 0xb0
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a22:	2302      	movs	r3, #2
 8007a24:	e048      	b.n	8007ab8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	32b0      	adds	r2, #176	; 0xb0
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	32b0      	adds	r2, #176	; 0xb0
 8007a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7c1b      	ldrb	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007a52:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <USBD_HID_Init+0xc8>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 020f 	and.w	r2, r3, #15
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	3326      	adds	r3, #38	; 0x26
 8007a68:	2207      	movs	r2, #7
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e00c      	b.n	8007a88 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007a6e:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <USBD_HID_Init+0xc8>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f003 020f 	and.w	r2, r3, #15
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	3326      	adds	r3, #38	; 0x26
 8007a84:	220a      	movs	r2, #10
 8007a86:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007a88:	4b0d      	ldr	r3, [pc, #52]	; (8007ac0 <USBD_HID_Init+0xc8>)
 8007a8a:	7819      	ldrb	r1, [r3, #0]
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	2203      	movs	r2, #3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 ffe0 	bl	8009a56 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007a96:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <USBD_HID_Init+0xc8>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	3324      	adds	r3, #36	; 0x24
 8007aac:	2201      	movs	r2, #1
 8007aae:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	200000cb 	.word	0x200000cb

08007ac4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007ad0:	4b1f      	ldr	r3, [pc, #124]	; (8007b50 <USBD_HID_DeInit+0x8c>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 ffe3 	bl	8009aa2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007adc:	4b1c      	ldr	r3, [pc, #112]	; (8007b50 <USBD_HID_DeInit+0x8c>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	3324      	adds	r3, #36	; 0x24
 8007af2:	2200      	movs	r2, #0
 8007af4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007af6:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <USBD_HID_DeInit+0x8c>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f003 020f 	and.w	r2, r3, #15
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3326      	adds	r3, #38	; 0x26
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32b0      	adds	r2, #176	; 0xb0
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	32b0      	adds	r2, #176	; 0xb0
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f002 f8af 	bl	8009c94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	32b0      	adds	r2, #176	; 0xb0
 8007b40:	2100      	movs	r1, #0
 8007b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200000cb 	.word	0x200000cb

08007b54 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32b0      	adds	r2, #176	; 0xb0
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e0e8      	b.n	8007d52 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d046      	beq.n	8007c1a <USBD_HID_Setup+0xc6>
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	f040 80d8 	bne.w	8007d42 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	3b02      	subs	r3, #2
 8007b98:	2b09      	cmp	r3, #9
 8007b9a:	d836      	bhi.n	8007c0a <USBD_HID_Setup+0xb6>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_HID_Setup+0x50>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bfb 	.word	0x08007bfb
 8007ba8:	08007bdb 	.word	0x08007bdb
 8007bac:	08007c0b 	.word	0x08007c0b
 8007bb0:	08007c0b 	.word	0x08007c0b
 8007bb4:	08007c0b 	.word	0x08007c0b
 8007bb8:	08007c0b 	.word	0x08007c0b
 8007bbc:	08007c0b 	.word	0x08007c0b
 8007bc0:	08007c0b 	.word	0x08007c0b
 8007bc4:	08007be9 	.word	0x08007be9
 8007bc8:	08007bcd 	.word	0x08007bcd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	885b      	ldrh	r3, [r3, #2]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]
          break;
 8007bd8:	e01e      	b.n	8007c18 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fbf1 	bl	80093c8 <USBD_CtlSendData>
          break;
 8007be6:	e017      	b.n	8007c18 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	885b      	ldrh	r3, [r3, #2]
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	605a      	str	r2, [r3, #4]
          break;
 8007bf8:	e00e      	b.n	8007c18 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 fbe0 	bl	80093c8 <USBD_CtlSendData>
          break;
 8007c08:	e006      	b.n	8007c18 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 fb6a 	bl	80092e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	75fb      	strb	r3, [r7, #23]
          break;
 8007c16:	bf00      	nop
      }
      break;
 8007c18:	e09a      	b.n	8007d50 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b0b      	cmp	r3, #11
 8007c20:	f200 8086 	bhi.w	8007d30 <USBD_HID_Setup+0x1dc>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <USBD_HID_Setup+0xd8>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c5d 	.word	0x08007c5d
 8007c30:	08007d3f 	.word	0x08007d3f
 8007c34:	08007d31 	.word	0x08007d31
 8007c38:	08007d31 	.word	0x08007d31
 8007c3c:	08007d31 	.word	0x08007d31
 8007c40:	08007d31 	.word	0x08007d31
 8007c44:	08007c87 	.word	0x08007c87
 8007c48:	08007d31 	.word	0x08007d31
 8007c4c:	08007d31 	.word	0x08007d31
 8007c50:	08007d31 	.word	0x08007d31
 8007c54:	08007cdf 	.word	0x08007cdf
 8007c58:	08007d09 	.word	0x08007d09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d107      	bne.n	8007c78 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c68:	f107 030a 	add.w	r3, r7, #10
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fba9 	bl	80093c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c76:	e063      	b.n	8007d40 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fb33 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	75fb      	strb	r3, [r7, #23]
          break;
 8007c84:	e05c      	b.n	8007d40 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	885b      	ldrh	r3, [r3, #2]
 8007c8a:	0a1b      	lsrs	r3, r3, #8
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b22      	cmp	r3, #34	; 0x22
 8007c90:	d108      	bne.n	8007ca4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b3f      	cmp	r3, #63	; 0x3f
 8007c98:	bf28      	it	cs
 8007c9a:	233f      	movcs	r3, #63	; 0x3f
 8007c9c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <USBD_HID_Setup+0x208>)
 8007ca0:	613b      	str	r3, [r7, #16]
 8007ca2:	e015      	b.n	8007cd0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	0a1b      	lsrs	r3, r3, #8
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b21      	cmp	r3, #33	; 0x21
 8007cae:	d108      	bne.n	8007cc2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007cb0:	4b2b      	ldr	r3, [pc, #172]	; (8007d60 <USBD_HID_Setup+0x20c>)
 8007cb2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	88db      	ldrh	r3, [r3, #6]
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	bf28      	it	cs
 8007cbc:	2309      	movcs	r3, #9
 8007cbe:	82bb      	strh	r3, [r7, #20]
 8007cc0:	e006      	b.n	8007cd0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 fb0e 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	75fb      	strb	r3, [r7, #23]
            break;
 8007cce:	e037      	b.n	8007d40 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cd0:	8abb      	ldrh	r3, [r7, #20]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6939      	ldr	r1, [r7, #16]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 fb76 	bl	80093c8 <USBD_CtlSendData>
          break;
 8007cdc:	e030      	b.n	8007d40 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d107      	bne.n	8007cfa <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3308      	adds	r3, #8
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fb68 	bl	80093c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cf8:	e022      	b.n	8007d40 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 faf2 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d02:	2303      	movs	r3, #3
 8007d04:	75fb      	strb	r3, [r7, #23]
          break;
 8007d06:	e01b      	b.n	8007d40 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d106      	bne.n	8007d22 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	885b      	ldrh	r3, [r3, #2]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d20:	e00e      	b.n	8007d40 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 fade 	bl	80092e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d2e:	e007      	b.n	8007d40 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fad7 	bl	80092e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d3c:	e000      	b.n	8007d40 <USBD_HID_Setup+0x1ec>
          break;
 8007d3e:	bf00      	nop
      }
      break;
 8007d40:	e006      	b.n	8007d50 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 face 	bl	80092e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	2000008c 	.word	0x2000008c
 8007d60:	20000074 	.word	0x20000074

08007d64 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	32b0      	adds	r2, #176	; 0xb0
 8007d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d80:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e014      	b.n	8007db6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d10d      	bne.n	8007db4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	7b1b      	ldrb	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2201      	movs	r2, #1
 8007da4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <USBD_HID_SendReport+0x5c>)
 8007da8:	7819      	ldrb	r1, [r3, #0]
 8007daa:	88fb      	ldrh	r3, [r7, #6]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f001 ff1f 	bl	8009bf2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200000cb 	.word	0x200000cb

08007dc4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007dcc:	2181      	movs	r1, #129	; 0x81
 8007dce:	4809      	ldr	r0, [pc, #36]	; (8007df4 <USBD_HID_GetFSCfgDesc+0x30>)
 8007dd0:	f000 fc51 	bl	8008676 <USBD_GetEpDesc>
 8007dd4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	220a      	movs	r2, #10
 8007de0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2222      	movs	r2, #34	; 0x22
 8007de6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000050 	.word	0x20000050

08007df8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007e00:	2181      	movs	r1, #129	; 0x81
 8007e02:	4809      	ldr	r0, [pc, #36]	; (8007e28 <USBD_HID_GetHSCfgDesc+0x30>)
 8007e04:	f000 fc37 	bl	8008676 <USBD_GetEpDesc>
 8007e08:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2207      	movs	r2, #7
 8007e14:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2222      	movs	r2, #34	; 0x22
 8007e1a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000050 	.word	0x20000050

08007e2c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007e34:	2181      	movs	r1, #129	; 0x81
 8007e36:	4809      	ldr	r0, [pc, #36]	; (8007e5c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007e38:	f000 fc1d 	bl	8008676 <USBD_GetEpDesc>
 8007e3c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	220a      	movs	r2, #10
 8007e48:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2222      	movs	r2, #34	; 0x22
 8007e4e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000050 	.word	0x20000050

08007e60 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32b0      	adds	r2, #176	; 0xb0
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	220a      	movs	r2, #10
 8007e98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	20000080 	.word	0x20000080

08007eac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007ec0:	4817      	ldr	r0, [pc, #92]	; (8007f20 <USBD_Init+0x74>)
 8007ec2:	f001 ff4f 	bl	8009d64 <iprintf>
 8007ec6:	4817      	ldr	r0, [pc, #92]	; (8007f24 <USBD_Init+0x78>)
 8007ec8:	f001 ff4c 	bl	8009d64 <iprintf>
 8007ecc:	200a      	movs	r0, #10
 8007ece:	f001 ff61 	bl	8009d94 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e01f      	b.n	8007f16 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	79fa      	ldrb	r2, [r7, #7]
 8007f08:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 fd3c 	bl	8009988 <USBD_LL_Init>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	0800ad54 	.word	0x0800ad54
 8007f24:	0800ad5c 	.word	0x0800ad5c

08007f28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007f3c:	481a      	ldr	r0, [pc, #104]	; (8007fa8 <USBD_RegisterClass+0x80>)
 8007f3e:	f001 ff11 	bl	8009d64 <iprintf>
 8007f42:	481a      	ldr	r0, [pc, #104]	; (8007fac <USBD_RegisterClass+0x84>)
 8007f44:	f001 ff0e 	bl	8009d64 <iprintf>
 8007f48:	200a      	movs	r0, #10
 8007f4a:	f001 ff23 	bl	8009d94 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e025      	b.n	8007f9e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32ae      	adds	r2, #174	; 0xae
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00f      	beq.n	8007f8e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	32ae      	adds	r2, #174	; 0xae
 8007f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	f107 020e 	add.w	r2, r7, #14
 8007f82:	4610      	mov	r0, r2
 8007f84:	4798      	blx	r3
 8007f86:	4602      	mov	r2, r0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0800ad54 	.word	0x0800ad54
 8007fac:	0800ad74 	.word	0x0800ad74

08007fb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 fd31 	bl	8009a20 <USBD_LL_Start>
 8007fbe:	4603      	mov	r3, r0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d009      	beq.n	800800c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	4611      	mov	r1, r2
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	4611      	mov	r1, r2
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f908 	bl	8009272 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	2b02      	cmp	r3, #2
 8008084:	d01a      	beq.n	80080bc <USBD_LL_SetupStage+0x72>
 8008086:	2b02      	cmp	r3, #2
 8008088:	d822      	bhi.n	80080d0 <USBD_LL_SetupStage+0x86>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <USBD_LL_SetupStage+0x4a>
 800808e:	2b01      	cmp	r3, #1
 8008090:	d00a      	beq.n	80080a8 <USBD_LL_SetupStage+0x5e>
 8008092:	e01d      	b.n	80080d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fb5f 	bl	8008760 <USBD_StdDevReq>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73fb      	strb	r3, [r7, #15]
      break;
 80080a6:	e020      	b.n	80080ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fbc7 	bl	8008844 <USBD_StdItfReq>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ba:	e016      	b.n	80080ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fc29 	bl	800891c <USBD_StdEPReq>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
      break;
 80080ce:	e00c      	b.n	80080ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fcfe 	bl	8009ae0 <USBD_LL_StallEP>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	bf00      	nop
  }

  return ret;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	460b      	mov	r3, r1
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008106:	7afb      	ldrb	r3, [r7, #11]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d16e      	bne.n	80081ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008112:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800811a:	2b03      	cmp	r3, #3
 800811c:	f040 8098 	bne.w	8008250 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	429a      	cmp	r2, r3
 800812a:	d913      	bls.n	8008154 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	1ad2      	subs	r2, r2, r3
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	4293      	cmp	r3, r2
 8008144:	bf28      	it	cs
 8008146:	4613      	movcs	r3, r2
 8008148:	461a      	mov	r2, r3
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 f967 	bl	8009420 <USBD_CtlContinueRx>
 8008152:	e07d      	b.n	8008250 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800815a:	f003 031f 	and.w	r3, r3, #31
 800815e:	2b02      	cmp	r3, #2
 8008160:	d014      	beq.n	800818c <USBD_LL_DataOutStage+0x98>
 8008162:	2b02      	cmp	r3, #2
 8008164:	d81d      	bhi.n	80081a2 <USBD_LL_DataOutStage+0xae>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <USBD_LL_DataOutStage+0x7c>
 800816a:	2b01      	cmp	r3, #1
 800816c:	d003      	beq.n	8008176 <USBD_LL_DataOutStage+0x82>
 800816e:	e018      	b.n	80081a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	75bb      	strb	r3, [r7, #22]
            break;
 8008174:	e018      	b.n	80081a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800817c:	b2db      	uxtb	r3, r3
 800817e:	4619      	mov	r1, r3
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fa5e 	bl	8008642 <USBD_CoreFindIF>
 8008186:	4603      	mov	r3, r0
 8008188:	75bb      	strb	r3, [r7, #22]
            break;
 800818a:	e00d      	b.n	80081a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008192:	b2db      	uxtb	r3, r3
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fa60 	bl	800865c <USBD_CoreFindEP>
 800819c:	4603      	mov	r3, r0
 800819e:	75bb      	strb	r3, [r7, #22]
            break;
 80081a0:	e002      	b.n	80081a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75bb      	strb	r3, [r7, #22]
            break;
 80081a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081a8:	7dbb      	ldrb	r3, [r7, #22]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d119      	bne.n	80081e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d113      	bne.n	80081e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081ba:	7dba      	ldrb	r2, [r7, #22]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	32ae      	adds	r2, #174	; 0xae
 80081c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081ca:	7dba      	ldrb	r2, [r7, #22]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081d2:	7dba      	ldrb	r2, [r7, #22]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	32ae      	adds	r2, #174	; 0xae
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f001 f92d 	bl	8009442 <USBD_CtlSendStatus>
 80081e8:	e032      	b.n	8008250 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 fa31 	bl	800865c <USBD_CoreFindEP>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081fe:	7dbb      	ldrb	r3, [r7, #22]
 8008200:	2bff      	cmp	r3, #255	; 0xff
 8008202:	d025      	beq.n	8008250 <USBD_LL_DataOutStage+0x15c>
 8008204:	7dbb      	ldrb	r3, [r7, #22]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d122      	bne.n	8008250 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b03      	cmp	r3, #3
 8008214:	d117      	bne.n	8008246 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008216:	7dba      	ldrb	r2, [r7, #22]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	32ae      	adds	r2, #174	; 0xae
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00f      	beq.n	8008246 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008226:	7dba      	ldrb	r2, [r7, #22]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800822e:	7dba      	ldrb	r2, [r7, #22]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	32ae      	adds	r2, #174	; 0xae
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	7afa      	ldrb	r2, [r7, #11]
 800823c:	4611      	mov	r1, r2
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	e000      	b.n	8008252 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b086      	sub	sp, #24
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	460b      	mov	r3, r1
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008268:	7afb      	ldrb	r3, [r7, #11]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d16f      	bne.n	800834e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3314      	adds	r3, #20
 8008272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800827a:	2b02      	cmp	r3, #2
 800827c:	d15a      	bne.n	8008334 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	429a      	cmp	r2, r3
 8008288:	d914      	bls.n	80082b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	1ad2      	subs	r2, r2, r3
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	461a      	mov	r2, r3
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 f8ac 	bl	80093fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082a6:	2300      	movs	r3, #0
 80082a8:	2200      	movs	r2, #0
 80082aa:	2100      	movs	r1, #0
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 fcc1 	bl	8009c34 <USBD_LL_PrepareReceive>
 80082b2:	e03f      	b.n	8008334 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d11c      	bne.n	80082fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d316      	bcc.n	80082fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d20f      	bcs.n	80082fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f001 f88d 	bl	80093fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ec:	2300      	movs	r3, #0
 80082ee:	2200      	movs	r2, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f001 fc9e 	bl	8009c34 <USBD_LL_PrepareReceive>
 80082f8:	e01c      	b.n	8008334 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b03      	cmp	r3, #3
 8008304:	d10f      	bne.n	8008326 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008326:	2180      	movs	r1, #128	; 0x80
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f001 fbd9 	bl	8009ae0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f001 f89a 	bl	8009468 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d03a      	beq.n	80083b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fe42 	bl	8007fc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800834c:	e032      	b.n	80083b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008354:	b2db      	uxtb	r3, r3
 8008356:	4619      	mov	r1, r3
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f97f 	bl	800865c <USBD_CoreFindEP>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	2bff      	cmp	r3, #255	; 0xff
 8008366:	d025      	beq.n	80083b4 <USBD_LL_DataInStage+0x15a>
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d122      	bne.n	80083b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b03      	cmp	r3, #3
 8008378:	d11c      	bne.n	80083b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800837a:	7dfa      	ldrb	r2, [r7, #23]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	32ae      	adds	r2, #174	; 0xae
 8008380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d014      	beq.n	80083b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800838a:	7dfa      	ldrb	r2, [r7, #23]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008392:	7dfa      	ldrb	r2, [r7, #23]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	32ae      	adds	r2, #174	; 0xae
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	7afa      	ldrb	r2, [r7, #11]
 80083a0:	4611      	mov	r1, r2
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083aa:	7dbb      	ldrb	r3, [r7, #22]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80083b0:	7dbb      	ldrb	r3, [r7, #22]
 80083b2:	e000      	b.n	80083b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d014      	beq.n	8008424 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00e      	beq.n	8008424 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6852      	ldr	r2, [r2, #4]
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	4611      	mov	r1, r2
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008420:	2303      	movs	r3, #3
 8008422:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	2200      	movs	r2, #0
 8008428:	2100      	movs	r1, #0
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fb13 	bl	8009a56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2240      	movs	r2, #64	; 0x40
 800843c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008440:	2340      	movs	r3, #64	; 0x40
 8008442:	2200      	movs	r2, #0
 8008444:	2180      	movs	r1, #128	; 0x80
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fb05 	bl	8009a56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2240      	movs	r2, #64	; 0x40
 8008456:	621a      	str	r2, [r3, #32]

  return ret;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	b2da      	uxtb	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2204      	movs	r2, #4
 800849c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d106      	bne.n	80084d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d110      	bne.n	8008514 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	32ae      	adds	r2, #174	; 0xae
 8008534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800853c:	2303      	movs	r3, #3
 800853e:	e01c      	b.n	800857a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b03      	cmp	r3, #3
 800854a:	d115      	bne.n	8008578 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	32ae      	adds	r2, #174	; 0xae
 8008556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	32ae      	adds	r2, #174	; 0xae
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	78fa      	ldrb	r2, [r7, #3]
 8008572:	4611      	mov	r1, r2
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	32ae      	adds	r2, #174	; 0xae
 8008598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e01c      	b.n	80085de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d115      	bne.n	80085dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	32ae      	adds	r2, #174	; 0xae
 80085ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	32ae      	adds	r2, #174	; 0xae
 80085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	4611      	mov	r1, r2
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00e      	beq.n	8008638 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6852      	ldr	r2, [r2, #4]
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	4611      	mov	r1, r2
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008634:	2303      	movs	r3, #3
 8008636:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800864e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008668:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	b29b      	uxth	r3, r3
 800869a:	429a      	cmp	r2, r3
 800869c:	d920      	bls.n	80086e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80086a6:	e013      	b.n	80086d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80086a8:	f107 030a 	add.w	r3, r7, #10
 80086ac:	4619      	mov	r1, r3
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f000 f81b 	bl	80086ea <USBD_GetNextDesc>
 80086b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d108      	bne.n	80086d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	789b      	ldrb	r3, [r3, #2]
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d008      	beq.n	80086de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	897b      	ldrh	r3, [r7, #10]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d8e5      	bhi.n	80086a8 <USBD_GetEpDesc+0x32>
 80086dc:	e000      	b.n	80086e0 <USBD_GetEpDesc+0x6a>
          break;
 80086de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086e0:	693b      	ldr	r3, [r7, #16]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	881a      	ldrh	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	4413      	add	r3, r2
 8008704:	b29a      	uxth	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4413      	add	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008716:	68fb      	ldr	r3, [r7, #12]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	3301      	adds	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008742:	8a3b      	ldrh	r3, [r7, #16]
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	b21a      	sxth	r2, r3
 8008748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800874c:	4313      	orrs	r3, r2
 800874e:	b21b      	sxth	r3, r3
 8008750:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008752:	89fb      	ldrh	r3, [r7, #14]
}
 8008754:	4618      	mov	r0, r3
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008776:	2b40      	cmp	r3, #64	; 0x40
 8008778:	d005      	beq.n	8008786 <USBD_StdDevReq+0x26>
 800877a:	2b40      	cmp	r3, #64	; 0x40
 800877c:	d857      	bhi.n	800882e <USBD_StdDevReq+0xce>
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00f      	beq.n	80087a2 <USBD_StdDevReq+0x42>
 8008782:	2b20      	cmp	r3, #32
 8008784:	d153      	bne.n	800882e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	32ae      	adds	r2, #174	; 0xae
 8008790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]
      break;
 80087a0:	e04a      	b.n	8008838 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d83b      	bhi.n	8008822 <USBD_StdDevReq+0xc2>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <USBD_StdDevReq+0x50>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008805 	.word	0x08008805
 80087b4:	08008819 	.word	0x08008819
 80087b8:	08008823 	.word	0x08008823
 80087bc:	0800880f 	.word	0x0800880f
 80087c0:	08008823 	.word	0x08008823
 80087c4:	080087e3 	.word	0x080087e3
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	08008823 	.word	0x08008823
 80087d0:	080087fb 	.word	0x080087fb
 80087d4:	080087ed 	.word	0x080087ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa3c 	bl	8008c58 <USBD_GetDescriptor>
          break;
 80087e0:	e024      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fba1 	bl	8008f2c <USBD_SetAddress>
          break;
 80087ea:	e01f      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fbe0 	bl	8008fb4 <USBD_SetConfig>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73fb      	strb	r3, [r7, #15]
          break;
 80087f8:	e018      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fc83 	bl	8009108 <USBD_GetConfig>
          break;
 8008802:	e013      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fcb4 	bl	8009174 <USBD_GetStatus>
          break;
 800880c:	e00e      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fce3 	bl	80091dc <USBD_SetFeature>
          break;
 8008816:	e009      	b.n	800882c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fd07 	bl	800922e <USBD_ClrFeature>
          break;
 8008820:	e004      	b.n	800882c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fd5e 	bl	80092e6 <USBD_CtlError>
          break;
 800882a:	bf00      	nop
      }
      break;
 800882c:	e004      	b.n	8008838 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fd58 	bl	80092e6 <USBD_CtlError>
      break;
 8008836:	bf00      	nop
  }

  return ret;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop

08008844 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d005      	beq.n	800886a <USBD_StdItfReq+0x26>
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d852      	bhi.n	8008908 <USBD_StdItfReq+0xc4>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <USBD_StdItfReq+0x26>
 8008866:	2b20      	cmp	r3, #32
 8008868:	d14e      	bne.n	8008908 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008870:	b2db      	uxtb	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	2b02      	cmp	r3, #2
 8008876:	d840      	bhi.n	80088fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	889b      	ldrh	r3, [r3, #4]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b01      	cmp	r3, #1
 8008880:	d836      	bhi.n	80088f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fed9 	bl	8008642 <USBD_CoreFindIF>
 8008890:	4603      	mov	r3, r0
 8008892:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2bff      	cmp	r3, #255	; 0xff
 8008898:	d01d      	beq.n	80088d6 <USBD_StdItfReq+0x92>
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d11a      	bne.n	80088d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80088a0:	7bba      	ldrb	r2, [r7, #14]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	32ae      	adds	r2, #174	; 0xae
 80088a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088b0:	7bba      	ldrb	r2, [r7, #14]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088b8:	7bba      	ldrb	r2, [r7, #14]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	32ae      	adds	r2, #174	; 0xae
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088ce:	e004      	b.n	80088da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088d0:	2303      	movs	r3, #3
 80088d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088d4:	e001      	b.n	80088da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	88db      	ldrh	r3, [r3, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d110      	bne.n	8008904 <USBD_StdItfReq+0xc0>
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fdaa 	bl	8009442 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088ee:	e009      	b.n	8008904 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fcf7 	bl	80092e6 <USBD_CtlError>
          break;
 80088f8:	e004      	b.n	8008904 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fcf2 	bl	80092e6 <USBD_CtlError>
          break;
 8008902:	e000      	b.n	8008906 <USBD_StdItfReq+0xc2>
          break;
 8008904:	bf00      	nop
      }
      break;
 8008906:	e004      	b.n	8008912 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fceb 	bl	80092e6 <USBD_CtlError>
      break;
 8008910:	bf00      	nop
  }

  return ret;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d007      	beq.n	800894c <USBD_StdEPReq+0x30>
 800893c:	2b40      	cmp	r3, #64	; 0x40
 800893e:	f200 817f 	bhi.w	8008c40 <USBD_StdEPReq+0x324>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d02a      	beq.n	800899c <USBD_StdEPReq+0x80>
 8008946:	2b20      	cmp	r3, #32
 8008948:	f040 817a 	bne.w	8008c40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff fe83 	bl	800865c <USBD_CoreFindEP>
 8008956:	4603      	mov	r3, r0
 8008958:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2bff      	cmp	r3, #255	; 0xff
 800895e:	f000 8174 	beq.w	8008c4a <USBD_StdEPReq+0x32e>
 8008962:	7b7b      	ldrb	r3, [r7, #13]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 8170 	bne.w	8008c4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800896a:	7b7a      	ldrb	r2, [r7, #13]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008972:	7b7a      	ldrb	r2, [r7, #13]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	32ae      	adds	r2, #174	; 0xae
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8163 	beq.w	8008c4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008984:	7b7a      	ldrb	r2, [r7, #13]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	32ae      	adds	r2, #174	; 0xae
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800899a:	e156      	b.n	8008c4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d008      	beq.n	80089b6 <USBD_StdEPReq+0x9a>
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	f300 8145 	bgt.w	8008c34 <USBD_StdEPReq+0x318>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 809b 	beq.w	8008ae6 <USBD_StdEPReq+0x1ca>
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d03c      	beq.n	8008a2e <USBD_StdEPReq+0x112>
 80089b4:	e13e      	b.n	8008c34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d002      	beq.n	80089c8 <USBD_StdEPReq+0xac>
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d016      	beq.n	80089f4 <USBD_StdEPReq+0xd8>
 80089c6:	e02c      	b.n	8008a22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <USBD_StdEPReq+0xce>
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d00a      	beq.n	80089ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f881 	bl	8009ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f87d 	bl	8009ae0 <USBD_LL_StallEP>
 80089e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089e8:	e020      	b.n	8008a2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fc7a 	bl	80092e6 <USBD_CtlError>
              break;
 80089f2:	e01b      	b.n	8008a2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	885b      	ldrh	r3, [r3, #2]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10e      	bne.n	8008a1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <USBD_StdEPReq+0xfe>
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b80      	cmp	r3, #128	; 0x80
 8008a06:	d008      	beq.n	8008a1a <USBD_StdEPReq+0xfe>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	88db      	ldrh	r3, [r3, #6]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f863 	bl	8009ae0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fd11 	bl	8009442 <USBD_CtlSendStatus>

              break;
 8008a20:	e004      	b.n	8008a2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc5e 	bl	80092e6 <USBD_CtlError>
              break;
 8008a2a:	bf00      	nop
          }
          break;
 8008a2c:	e107      	b.n	8008c3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d002      	beq.n	8008a40 <USBD_StdEPReq+0x124>
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d016      	beq.n	8008a6c <USBD_StdEPReq+0x150>
 8008a3e:	e04b      	b.n	8008ad8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <USBD_StdEPReq+0x146>
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b80      	cmp	r3, #128	; 0x80
 8008a4a:	d00a      	beq.n	8008a62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f845 	bl	8009ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a56:	2180      	movs	r1, #128	; 0x80
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f841 	bl	8009ae0 <USBD_LL_StallEP>
 8008a5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a60:	e040      	b.n	8008ae4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fc3e 	bl	80092e6 <USBD_CtlError>
              break;
 8008a6a:	e03b      	b.n	8008ae4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	885b      	ldrh	r3, [r3, #2]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d136      	bne.n	8008ae2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 f84b 	bl	8009b1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fcda 	bl	8009442 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fde2 	bl	800865c <USBD_CoreFindEP>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a9c:	7b7b      	ldrb	r3, [r7, #13]
 8008a9e:	2bff      	cmp	r3, #255	; 0xff
 8008aa0:	d01f      	beq.n	8008ae2 <USBD_StdEPReq+0x1c6>
 8008aa2:	7b7b      	ldrb	r3, [r7, #13]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d11c      	bne.n	8008ae2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008aa8:	7b7a      	ldrb	r2, [r7, #13]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ab0:	7b7a      	ldrb	r2, [r7, #13]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	32ae      	adds	r2, #174	; 0xae
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d010      	beq.n	8008ae2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ac0:	7b7a      	ldrb	r2, [r7, #13]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	32ae      	adds	r2, #174	; 0xae
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ad6:	e004      	b.n	8008ae2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc03 	bl	80092e6 <USBD_CtlError>
              break;
 8008ae0:	e000      	b.n	8008ae4 <USBD_StdEPReq+0x1c8>
              break;
 8008ae2:	bf00      	nop
          }
          break;
 8008ae4:	e0ab      	b.n	8008c3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d002      	beq.n	8008af8 <USBD_StdEPReq+0x1dc>
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d032      	beq.n	8008b5c <USBD_StdEPReq+0x240>
 8008af6:	e097      	b.n	8008c28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <USBD_StdEPReq+0x1f2>
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d004      	beq.n	8008b0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fbed 	bl	80092e6 <USBD_CtlError>
                break;
 8008b0c:	e091      	b.n	8008c32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da0b      	bge.n	8008b2e <USBD_StdEPReq+0x212>
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	3310      	adds	r3, #16
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	e00b      	b.n	8008b46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	3304      	adds	r3, #4
 8008b46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2202      	movs	r2, #2
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fc37 	bl	80093c8 <USBD_CtlSendData>
              break;
 8008b5a:	e06a      	b.n	8008c32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	da11      	bge.n	8008b88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	f003 020f 	and.w	r2, r3, #15
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3324      	adds	r3, #36	; 0x24
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d117      	bne.n	8008bae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fbb0 	bl	80092e6 <USBD_CtlError>
                  break;
 8008b86:	e054      	b.n	8008c32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	f003 020f 	and.w	r2, r3, #15
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fb9d 	bl	80092e6 <USBD_CtlError>
                  break;
 8008bac:	e041      	b.n	8008c32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da0b      	bge.n	8008bce <USBD_StdEPReq+0x2b2>
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	3304      	adds	r3, #4
 8008bcc:	e00b      	b.n	8008be6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	3304      	adds	r3, #4
 8008be6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <USBD_StdEPReq+0x2d8>
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b80      	cmp	r3, #128	; 0x80
 8008bf2:	d103      	bne.n	8008bfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e00e      	b.n	8008c1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 ffab 	bl	8009b5c <USBD_LL_IsStallEP>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fbd1 	bl	80093c8 <USBD_CtlSendData>
              break;
 8008c26:	e004      	b.n	8008c32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fb5b 	bl	80092e6 <USBD_CtlError>
              break;
 8008c30:	bf00      	nop
          }
          break;
 8008c32:	e004      	b.n	8008c3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fb55 	bl	80092e6 <USBD_CtlError>
          break;
 8008c3c:	bf00      	nop
      }
      break;
 8008c3e:	e005      	b.n	8008c4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fb4f 	bl	80092e6 <USBD_CtlError>
      break;
 8008c48:	e000      	b.n	8008c4c <USBD_StdEPReq+0x330>
      break;
 8008c4a:	bf00      	nop
  }

  return ret;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	f200 8128 	bhi.w	8008ece <USBD_GetDescriptor+0x276>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USBD_GetDescriptor+0x2c>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008cf9 	.word	0x08008cf9
 8008c90:	08008ecf 	.word	0x08008ecf
 8008c94:	08008ecf 	.word	0x08008ecf
 8008c98:	08008e6f 	.word	0x08008e6f
 8008c9c:	08008e9b 	.word	0x08008e9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
      break;
 8008cb6:	e112      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7c1b      	ldrb	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10d      	bne.n	8008cdc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	f107 0208 	add.w	r2, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cda:	e100      	b.n	8008ede <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	f107 0208 	add.w	r2, r7, #8
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	701a      	strb	r2, [r3, #0]
      break;
 8008cf6:	e0f2      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	885b      	ldrh	r3, [r3, #2]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	f200 80ac 	bhi.w	8008e5c <USBD_GetDescriptor+0x204>
 8008d04:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <USBD_GetDescriptor+0xb4>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d59 	.word	0x08008d59
 8008d14:	08008d8d 	.word	0x08008d8d
 8008d18:	08008dc1 	.word	0x08008dc1
 8008d1c:	08008df5 	.word	0x08008df5
 8008d20:	08008e29 	.word	0x08008e29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	7c12      	ldrb	r2, [r2, #16]
 8008d3c:	f107 0108 	add.w	r1, r7, #8
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d46:	e091      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 facb 	bl	80092e6 <USBD_CtlError>
            err++;
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	3301      	adds	r3, #1
 8008d54:	72fb      	strb	r3, [r7, #11]
          break;
 8008d56:	e089      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7a:	e077      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fab1 	bl	80092e6 <USBD_CtlError>
            err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8a:	e06f      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7c12      	ldrb	r2, [r2, #16]
 8008da4:	f107 0108 	add.w	r1, r7, #8
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dae:	e05d      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa97 	bl	80092e6 <USBD_CtlError>
            err++;
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dbe:	e055      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de2:	e043      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa7d 	bl	80092e6 <USBD_CtlError>
            err++;
 8008dec:	7afb      	ldrb	r3, [r7, #11]
 8008dee:	3301      	adds	r3, #1
 8008df0:	72fb      	strb	r3, [r7, #11]
          break;
 8008df2:	e03b      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7c12      	ldrb	r2, [r2, #16]
 8008e0c:	f107 0108 	add.w	r1, r7, #8
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e16:	e029      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa63 	bl	80092e6 <USBD_CtlError>
            err++;
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	3301      	adds	r3, #1
 8008e24:	72fb      	strb	r3, [r7, #11]
          break;
 8008e26:	e021      	b.n	8008e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7c12      	ldrb	r2, [r2, #16]
 8008e40:	f107 0108 	add.w	r1, r7, #8
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4a:	e00f      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa49 	bl	80092e6 <USBD_CtlError>
            err++;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	3301      	adds	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5a:	e007      	b.n	8008e6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa41 	bl	80092e6 <USBD_CtlError>
          err++;
 8008e64:	7afb      	ldrb	r3, [r7, #11]
 8008e66:	3301      	adds	r3, #1
 8008e68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e6a:	bf00      	nop
      }
      break;
 8008e6c:	e037      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7c1b      	ldrb	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d109      	bne.n	8008e8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7e:	f107 0208 	add.w	r2, r7, #8
 8008e82:	4610      	mov	r0, r2
 8008e84:	4798      	blx	r3
 8008e86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e88:	e029      	b.n	8008ede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fa2a 	bl	80092e6 <USBD_CtlError>
        err++;
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	3301      	adds	r3, #1
 8008e96:	72fb      	strb	r3, [r7, #11]
      break;
 8008e98:	e021      	b.n	8008ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7c1b      	ldrb	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f107 0208 	add.w	r2, r7, #8
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4798      	blx	r3
 8008eb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	2207      	movs	r2, #7
 8008eba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ebc:	e00f      	b.n	8008ede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fa10 	bl	80092e6 <USBD_CtlError>
        err++;
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ecc:	e007      	b.n	8008ede <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fa08 	bl	80092e6 <USBD_CtlError>
      err++;
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	72fb      	strb	r3, [r7, #11]
      break;
 8008edc:	bf00      	nop
  }

  if (err != 0U)
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d11e      	bne.n	8008f22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	88db      	ldrh	r3, [r3, #6]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d016      	beq.n	8008f1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008eec:	893b      	ldrh	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00e      	beq.n	8008f10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88da      	ldrh	r2, [r3, #6]
 8008ef6:	893b      	ldrh	r3, [r7, #8]
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	bf28      	it	cs
 8008efc:	4613      	movcs	r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	461a      	mov	r2, r3
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa5d 	bl	80093c8 <USBD_CtlSendData>
 8008f0e:	e009      	b.n	8008f24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f9e7 	bl	80092e6 <USBD_CtlError>
 8008f18:	e004      	b.n	8008f24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa91 	bl	8009442 <USBD_CtlSendStatus>
 8008f20:	e000      	b.n	8008f24 <USBD_GetDescriptor+0x2cc>
    return;
 8008f22:	bf00      	nop
  }
}
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop

08008f2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	889b      	ldrh	r3, [r3, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d131      	bne.n	8008fa2 <USBD_SetAddress+0x76>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	88db      	ldrh	r3, [r3, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d12d      	bne.n	8008fa2 <USBD_SetAddress+0x76>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f4c:	d829      	bhi.n	8008fa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	885b      	ldrh	r3, [r3, #2]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d104      	bne.n	8008f70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f9bc 	bl	80092e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6e:	e01d      	b.n	8008fac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7bfa      	ldrb	r2, [r7, #15]
 8008f74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fe19 	bl	8009bb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa5d 	bl	8009442 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	e009      	b.n	8008fac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa0:	e004      	b.n	8008fac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f99e 	bl	80092e6 <USBD_CtlError>
  }
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	885b      	ldrh	r3, [r3, #2]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	4b4e      	ldr	r3, [pc, #312]	; (8009104 <USBD_SetConfig+0x150>)
 8008fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fcc:	4b4d      	ldr	r3, [pc, #308]	; (8009104 <USBD_SetConfig+0x150>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d905      	bls.n	8008fe0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f985 	bl	80092e6 <USBD_CtlError>
    return USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e08c      	b.n	80090fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d002      	beq.n	8008ff2 <USBD_SetConfig+0x3e>
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d029      	beq.n	8009044 <USBD_SetConfig+0x90>
 8008ff0:	e075      	b.n	80090de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ff2:	4b44      	ldr	r3, [pc, #272]	; (8009104 <USBD_SetConfig+0x150>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d020      	beq.n	800903c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ffa:	4b42      	ldr	r3, [pc, #264]	; (8009104 <USBD_SetConfig+0x150>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009004:	4b3f      	ldr	r3, [pc, #252]	; (8009104 <USBD_SetConfig+0x150>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fe ffe7 	bl	8007fde <USBD_SetClassConfig>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f962 	bl	80092e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2202      	movs	r2, #2
 8009026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800902a:	e065      	b.n	80090f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa08 	bl	8009442 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2203      	movs	r2, #3
 8009036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800903a:	e05d      	b.n	80090f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fa00 	bl	8009442 <USBD_CtlSendStatus>
      break;
 8009042:	e059      	b.n	80090f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009044:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <USBD_SetConfig+0x150>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d112      	bne.n	8009072 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009054:	4b2b      	ldr	r3, [pc, #172]	; (8009104 <USBD_SetConfig+0x150>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800905e:	4b29      	ldr	r3, [pc, #164]	; (8009104 <USBD_SetConfig+0x150>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ffd6 	bl	8008016 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9e9 	bl	8009442 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009070:	e042      	b.n	80090f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009072:	4b24      	ldr	r3, [pc, #144]	; (8009104 <USBD_SetConfig+0x150>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	d02a      	beq.n	80090d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fe ffc4 	bl	8008016 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800908e:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <USBD_SetConfig+0x150>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009098:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <USBD_SetConfig+0x150>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fe ff9d 	bl	8007fde <USBD_SetClassConfig>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00f      	beq.n	80090ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f918 	bl	80092e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fe ffa9 	bl	8008016 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090cc:	e014      	b.n	80090f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9b7 	bl	8009442 <USBD_CtlSendStatus>
      break;
 80090d4:	e010      	b.n	80090f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f9b3 	bl	8009442 <USBD_CtlSendStatus>
      break;
 80090dc:	e00c      	b.n	80090f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f900 	bl	80092e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090e6:	4b07      	ldr	r3, [pc, #28]	; (8009104 <USBD_SetConfig+0x150>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7fe ff92 	bl	8008016 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	73fb      	strb	r3, [r7, #15]
      break;
 80090f6:	bf00      	nop
  }

  return ret;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200003c0 	.word	0x200003c0

08009108 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	88db      	ldrh	r3, [r3, #6]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d004      	beq.n	8009124 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f8e2 	bl	80092e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009122:	e023      	b.n	800916c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	dc02      	bgt.n	8009136 <USBD_GetConfig+0x2e>
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc03      	bgt.n	800913c <USBD_GetConfig+0x34>
 8009134:	e015      	b.n	8009162 <USBD_GetConfig+0x5a>
 8009136:	2b03      	cmp	r3, #3
 8009138:	d00b      	beq.n	8009152 <USBD_GetConfig+0x4a>
 800913a:	e012      	b.n	8009162 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3308      	adds	r3, #8
 8009146:	2201      	movs	r2, #1
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f93c 	bl	80093c8 <USBD_CtlSendData>
        break;
 8009150:	e00c      	b.n	800916c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3304      	adds	r3, #4
 8009156:	2201      	movs	r2, #1
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f934 	bl	80093c8 <USBD_CtlSendData>
        break;
 8009160:	e004      	b.n	800916c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f8be 	bl	80092e6 <USBD_CtlError>
        break;
 800916a:	bf00      	nop
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009184:	b2db      	uxtb	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	2b02      	cmp	r3, #2
 800918a:	d81e      	bhi.n	80091ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d004      	beq.n	800919e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f8a5 	bl	80092e6 <USBD_CtlError>
        break;
 800919c:	e01a      	b.n	80091d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d005      	beq.n	80091ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f043 0202 	orr.w	r2, r3, #2
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	330c      	adds	r3, #12
 80091be:	2202      	movs	r2, #2
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f900 	bl	80093c8 <USBD_CtlSendData>
      break;
 80091c8:	e004      	b.n	80091d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f88a 	bl	80092e6 <USBD_CtlError>
      break;
 80091d2:	bf00      	nop
  }
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	885b      	ldrh	r3, [r3, #2]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d107      	bne.n	80091fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f923 	bl	8009442 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091fc:	e013      	b.n	8009226 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d10b      	bne.n	800921e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	889b      	ldrh	r3, [r3, #4]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	b29b      	uxth	r3, r3
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f913 	bl	8009442 <USBD_CtlSendStatus>
}
 800921c:	e003      	b.n	8009226 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f860 	bl	80092e6 <USBD_CtlError>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923e:	b2db      	uxtb	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	2b02      	cmp	r3, #2
 8009244:	d80b      	bhi.n	800925e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d10c      	bne.n	8009268 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f8f3 	bl	8009442 <USBD_CtlSendStatus>
      }
      break;
 800925c:	e004      	b.n	8009268 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f840 	bl	80092e6 <USBD_CtlError>
      break;
 8009266:	e000      	b.n	800926a <USBD_ClrFeature+0x3c>
      break;
 8009268:	bf00      	nop
  }
}
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	781a      	ldrb	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff fa41 	bl	8008724 <SWAPBYTE>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3301      	adds	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fa34 	bl	8008724 <SWAPBYTE>
 80092bc:	4603      	mov	r3, r0
 80092be:	461a      	mov	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3301      	adds	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fa27 	bl	8008724 <SWAPBYTE>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	80da      	strh	r2, [r3, #6]
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092f0:	2180      	movs	r1, #128	; 0x80
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbf4 	bl	8009ae0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092f8:	2100      	movs	r1, #0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fbf0 	bl	8009ae0 <USBD_LL_StallEP>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d036      	beq.n	800938c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009322:	6938      	ldr	r0, [r7, #16]
 8009324:	f000 f836 	bl	8009394 <USBD_GetLen>
 8009328:	4603      	mov	r3, r0
 800932a:	3301      	adds	r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	4413      	add	r3, r2
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	701a      	strb	r2, [r3, #0]
  idx++;
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	3301      	adds	r3, #1
 8009346:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	2203      	movs	r2, #3
 8009350:	701a      	strb	r2, [r3, #0]
  idx++;
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	3301      	adds	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009358:	e013      	b.n	8009382 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	4413      	add	r3, r2
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	3301      	adds	r3, #1
 800936a:	613b      	str	r3, [r7, #16]
    idx++;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	3301      	adds	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	4413      	add	r3, r2
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
    idx++;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	3301      	adds	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e7      	bne.n	800935a <USBD_GetString+0x52>
 800938a:	e000      	b.n	800938e <USBD_GetString+0x86>
    return;
 800938c:	bf00      	nop
  }
}
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093a4:	e005      	b.n	80093b2 <USBD_GetLen+0x1e>
  {
    len++;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	3301      	adds	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1f5      	bne.n	80093a6 <USBD_GetLen+0x12>
  }

  return len;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fbff 	bl	8009bf2 <USBD_LL_Transmit>

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	2100      	movs	r1, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fbee 	bl	8009bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	2100      	movs	r1, #0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fbfe 	bl	8009c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2204      	movs	r2, #4
 800944e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009452:	2300      	movs	r3, #0
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fbca 	bl	8009bf2 <USBD_LL_Transmit>

  return USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2205      	movs	r2, #5
 8009474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009478:	2300      	movs	r3, #0
 800947a:	2200      	movs	r2, #0
 800947c:	2100      	movs	r1, #0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fbd8 	bl	8009c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009494:	2200      	movs	r2, #0
 8009496:	490e      	ldr	r1, [pc, #56]	; (80094d0 <MX_USB_DEVICE_Init+0x40>)
 8009498:	480e      	ldr	r0, [pc, #56]	; (80094d4 <MX_USB_DEVICE_Init+0x44>)
 800949a:	f7fe fd07 	bl	8007eac <USBD_Init>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094a4:	f7f7 fc44 	bl	8000d30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80094a8:	490b      	ldr	r1, [pc, #44]	; (80094d8 <MX_USB_DEVICE_Init+0x48>)
 80094aa:	480a      	ldr	r0, [pc, #40]	; (80094d4 <MX_USB_DEVICE_Init+0x44>)
 80094ac:	f7fe fd3c 	bl	8007f28 <USBD_RegisterClass>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094b6:	f7f7 fc3b 	bl	8000d30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094ba:	4806      	ldr	r0, [pc, #24]	; (80094d4 <MX_USB_DEVICE_Init+0x44>)
 80094bc:	f7fe fd78 	bl	8007fb0 <USBD_Start>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80094c6:	f7f7 fc33 	bl	8000d30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094ca:	bf00      	nop
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200000cc 	.word	0x200000cc
 80094d4:	200003c4 	.word	0x200003c4
 80094d8:	20000018 	.word	0x20000018

080094dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2212      	movs	r2, #18
 80094ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094ee:	4b03      	ldr	r3, [pc, #12]	; (80094fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	200000e8 	.word	0x200000e8

08009500 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2204      	movs	r2, #4
 8009510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009512:	4b03      	ldr	r3, [pc, #12]	; (8009520 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	200000fc 	.word	0x200000fc

08009524 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d105      	bne.n	8009542 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	4907      	ldr	r1, [pc, #28]	; (8009558 <USBD_FS_ProductStrDescriptor+0x34>)
 800953a:	4808      	ldr	r0, [pc, #32]	; (800955c <USBD_FS_ProductStrDescriptor+0x38>)
 800953c:	f7ff fee4 	bl	8009308 <USBD_GetString>
 8009540:	e004      	b.n	800954c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	4904      	ldr	r1, [pc, #16]	; (8009558 <USBD_FS_ProductStrDescriptor+0x34>)
 8009546:	4805      	ldr	r0, [pc, #20]	; (800955c <USBD_FS_ProductStrDescriptor+0x38>)
 8009548:	f7ff fede 	bl	8009308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200006a0 	.word	0x200006a0
 800955c:	0800ad8c 	.word	0x0800ad8c

08009560 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	4904      	ldr	r1, [pc, #16]	; (8009580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009570:	4804      	ldr	r0, [pc, #16]	; (8009584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009572:	f7ff fec9 	bl	8009308 <USBD_GetString>
  return USBD_StrDesc;
 8009576:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	200006a0 	.word	0x200006a0
 8009584:	0800ad98 	.word	0x0800ad98

08009588 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	221a      	movs	r2, #26
 8009598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800959a:	f000 f843 	bl	8009624 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800959e:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20000100 	.word	0x20000100

080095ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	6039      	str	r1, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4907      	ldr	r1, [pc, #28]	; (80095e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095c2:	4808      	ldr	r0, [pc, #32]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c4:	f7ff fea0 	bl	8009308 <USBD_GetString>
 80095c8:	e004      	b.n	80095d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4904      	ldr	r1, [pc, #16]	; (80095e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ce:	4805      	ldr	r0, [pc, #20]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d0:	f7ff fe9a 	bl	8009308 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d4:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200006a0 	.word	0x200006a0
 80095e4:	0800ada0 	.word	0x0800ada0

080095e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4907      	ldr	r1, [pc, #28]	; (800961c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095fe:	4808      	ldr	r0, [pc, #32]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009600:	f7ff fe82 	bl	8009308 <USBD_GetString>
 8009604:	e004      	b.n	8009610 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800960a:	4805      	ldr	r0, [pc, #20]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800960c:	f7ff fe7c 	bl	8009308 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009610:	4b02      	ldr	r3, [pc, #8]	; (800961c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200006a0 	.word	0x200006a0
 8009620:	0800adac 	.word	0x0800adac

08009624 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <Get_SerialNum+0x44>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009630:	4b0e      	ldr	r3, [pc, #56]	; (800966c <Get_SerialNum+0x48>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009636:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <Get_SerialNum+0x4c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800964a:	2208      	movs	r2, #8
 800964c:	4909      	ldr	r1, [pc, #36]	; (8009674 <Get_SerialNum+0x50>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f814 	bl	800967c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009654:	2204      	movs	r2, #4
 8009656:	4908      	ldr	r1, [pc, #32]	; (8009678 <Get_SerialNum+0x54>)
 8009658:	68b8      	ldr	r0, [r7, #8]
 800965a:	f000 f80f 	bl	800967c <IntToUnicode>
  }
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	1fff7a10 	.word	0x1fff7a10
 800966c:	1fff7a14 	.word	0x1fff7a14
 8009670:	1fff7a18 	.word	0x1fff7a18
 8009674:	20000102 	.word	0x20000102
 8009678:	20000112 	.word	0x20000112

0800967c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]
 8009692:	e027      	b.n	80096e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	0f1b      	lsrs	r3, r3, #28
 8009698:	2b09      	cmp	r3, #9
 800969a:	d80b      	bhi.n	80096b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0f1b      	lsrs	r3, r3, #28
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	4619      	mov	r1, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	440b      	add	r3, r1
 80096ac:	3230      	adds	r2, #48	; 0x30
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	e00a      	b.n	80096ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	0f1b      	lsrs	r3, r3, #28
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	4619      	mov	r1, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	440b      	add	r3, r1
 80096c4:	3237      	adds	r2, #55	; 0x37
 80096c6:	b2d2      	uxtb	r2, r2
 80096c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	3301      	adds	r3, #1
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	4413      	add	r3, r2
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	3301      	adds	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
 80096e4:	7dfa      	ldrb	r2, [r7, #23]
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d3d3      	bcc.n	8009694 <IntToUnicode+0x18>
  }
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	; 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	609a      	str	r2, [r3, #8]
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800971c:	d13a      	bne.n	8009794 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	4b1e      	ldr	r3, [pc, #120]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	4a1d      	ldr	r2, [pc, #116]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	6313      	str	r3, [r2, #48]	; 0x30
 800972e:	4b1b      	ldr	r3, [pc, #108]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800973a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800973e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009740:	2302      	movs	r3, #2
 8009742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009748:	2303      	movs	r3, #3
 800974a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800974c:	230a      	movs	r3, #10
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	4619      	mov	r1, r3
 8009756:	4812      	ldr	r0, [pc, #72]	; (80097a0 <HAL_PCD_MspInit+0xa4>)
 8009758:	f7f8 fa4e 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <HAL_PCD_MspInit+0xa0>)
 800975e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009760:	4a0e      	ldr	r2, [pc, #56]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009766:	6353      	str	r3, [r2, #52]	; 0x34
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <HAL_PCD_MspInit+0xa0>)
 800976e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009776:	6453      	str	r3, [r2, #68]	; 0x44
 8009778:	4b08      	ldr	r3, [pc, #32]	; (800979c <HAL_PCD_MspInit+0xa0>)
 800977a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	2043      	movs	r0, #67	; 0x43
 800978a:	f7f7 fee4 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800978e:	2043      	movs	r0, #67	; 0x43
 8009790:	f7f7 fefd 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009794:	bf00      	nop
 8009796:	3728      	adds	r7, #40	; 0x28
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40023800 	.word	0x40023800
 80097a0:	40020000 	.word	0x40020000

080097a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7fe fc45 	bl	800804a <USBD_LL_SetupStage>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	4619      	mov	r1, r3
 80097f2:	f7fe fc7f 	bl	80080f4 <USBD_LL_DataOutStage>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009810:	78fa      	ldrb	r2, [r7, #3]
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	4613      	mov	r3, r2
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	440b      	add	r3, r1
 800981e:	334c      	adds	r3, #76	; 0x4c
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	4619      	mov	r1, r3
 8009826:	f7fe fd18 	bl	800825a <USBD_LL_DataInStage>
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fe4c 	bl	80084de <USBD_LL_SOF>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009856:	2301      	movs	r3, #1
 8009858:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
 8009866:	e008      	b.n	800987a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d102      	bne.n	8009876 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009870:	2301      	movs	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e001      	b.n	800987a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009876:	f7f7 fa5b 	bl	8000d30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009880:	7bfa      	ldrb	r2, [r7, #15]
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fdec 	bl	8008462 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fd94 	bl	80083be <USBD_LL_Reset>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fde7 	bl	8008482 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6812      	ldr	r2, [r2, #0]
 80098c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <HAL_PCD_SuspendCallback+0x48>)
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	4a03      	ldr	r2, [pc, #12]	; (80098e8 <HAL_PCD_SuspendCallback+0x48>)
 80098da:	f043 0306 	orr.w	r3, r3, #6
 80098de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	e000ed00 	.word	0xe000ed00

080098ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fdd7 	bl	80084ae <USBD_LL_Resume>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fe2f 	bl	8008582 <USBD_LL_IsoOUTIncomplete>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fdeb 	bl	800851e <USBD_LL_IsoINIncomplete>
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fe41 	bl	80085e6 <USBD_LL_DevConnected>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fe3e 	bl	80085fc <USBD_LL_DevDisconnected>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d13c      	bne.n	8009a12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009998:	4a20      	ldr	r2, [pc, #128]	; (8009a1c <USBD_LL_Init+0x94>)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a1e      	ldr	r2, [pc, #120]	; (8009a1c <USBD_LL_Init+0x94>)
 80099a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099a8:	4b1c      	ldr	r3, [pc, #112]	; (8009a1c <USBD_LL_Init+0x94>)
 80099aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80099b0:	4b1a      	ldr	r3, [pc, #104]	; (8009a1c <USBD_LL_Init+0x94>)
 80099b2:	2204      	movs	r2, #4
 80099b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80099b6:	4b19      	ldr	r3, [pc, #100]	; (8009a1c <USBD_LL_Init+0x94>)
 80099b8:	2202      	movs	r2, #2
 80099ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099bc:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <USBD_LL_Init+0x94>)
 80099be:	2200      	movs	r2, #0
 80099c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <USBD_LL_Init+0x94>)
 80099c4:	2202      	movs	r2, #2
 80099c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099c8:	4b14      	ldr	r3, [pc, #80]	; (8009a1c <USBD_LL_Init+0x94>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <USBD_LL_Init+0x94>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099d4:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <USBD_LL_Init+0x94>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80099da:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <USBD_LL_Init+0x94>)
 80099dc:	2200      	movs	r2, #0
 80099de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099e0:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <USBD_LL_Init+0x94>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099e6:	480d      	ldr	r0, [pc, #52]	; (8009a1c <USBD_LL_Init+0x94>)
 80099e8:	f7f9 ffc5 	bl	8003976 <HAL_PCD_Init>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099f2:	f7f7 f99d 	bl	8000d30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099f6:	2180      	movs	r1, #128	; 0x80
 80099f8:	4808      	ldr	r0, [pc, #32]	; (8009a1c <USBD_LL_Init+0x94>)
 80099fa:	f7fb fa04 	bl	8004e06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099fe:	2240      	movs	r2, #64	; 0x40
 8009a00:	2100      	movs	r1, #0
 8009a02:	4806      	ldr	r0, [pc, #24]	; (8009a1c <USBD_LL_Init+0x94>)
 8009a04:	f7fb f9b8 	bl	8004d78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a08:	2280      	movs	r2, #128	; 0x80
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	4803      	ldr	r0, [pc, #12]	; (8009a1c <USBD_LL_Init+0x94>)
 8009a0e:	f7fb f9b3 	bl	8004d78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	200008a0 	.word	0x200008a0

08009a20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fa f8ba 	bl	8003bb0 <HAL_PCD_Start>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f930 	bl	8009ca8 <USBD_Get_USB_Status>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	461a      	mov	r2, r3
 8009a64:	4603      	mov	r3, r0
 8009a66:	70fb      	strb	r3, [r7, #3]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70bb      	strb	r3, [r7, #2]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a7e:	78bb      	ldrb	r3, [r7, #2]
 8009a80:	883a      	ldrh	r2, [r7, #0]
 8009a82:	78f9      	ldrb	r1, [r7, #3]
 8009a84:	f7fa fd8b 	bl	800459e <HAL_PCD_EP_Open>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f90a 	bl	8009ca8 <USBD_Get_USB_Status>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009abc:	78fa      	ldrb	r2, [r7, #3]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fa fdd4 	bl	800466e <HAL_PCD_EP_Close>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f8eb 	bl	8009ca8 <USBD_Get_USB_Status>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fa fe94 	bl	800482c <HAL_PCD_EP_SetStall>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 f8cc 	bl	8009ca8 <USBD_Get_USB_Status>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b084      	sub	sp, #16
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fa fed9 	bl	80048f4 <HAL_PCD_EP_ClrStall>
 8009b42:	4603      	mov	r3, r0
 8009b44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 f8ad 	bl	8009ca8 <USBD_Get_USB_Status>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da0b      	bge.n	8009b90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	4613      	mov	r3, r2
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	440b      	add	r3, r1
 8009b8a:	333e      	adds	r3, #62	; 0x3e
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	e00b      	b.n	8009ba8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009ba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fa fcbe 	bl	8004554 <HAL_PCD_SetAddress>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 f862 	bl	8009ca8 <USBD_Get_USB_Status>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b086      	sub	sp, #24
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c10:	7af9      	ldrb	r1, [r7, #11]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	f7fa fdbf 	bl	8004798 <HAL_PCD_EP_Transmit>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 f841 	bl	8009ca8 <USBD_Get_USB_Status>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	460b      	mov	r3, r1
 8009c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c52:	7af9      	ldrb	r1, [r7, #11]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	f7fa fd53 	bl	8004702 <HAL_PCD_EP_Receive>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f820 	bl	8009ca8 <USBD_Get_USB_Status>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c80:	4b03      	ldr	r3, [pc, #12]	; (8009c90 <USBD_static_malloc+0x18>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000dac 	.word	0x20000dac

08009c94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d817      	bhi.n	8009cec <USBD_Get_USB_Status+0x44>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <USBD_Get_USB_Status+0x1c>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009cdb 	.word	0x08009cdb
 8009ccc:	08009ce1 	.word	0x08009ce1
 8009cd0:	08009ce7 	.word	0x08009ce7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd8:	e00b      	b.n	8009cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cde:	e008      	b.n	8009cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce4:	e005      	b.n	8009cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cea:	e002      	b.n	8009cf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf0:	bf00      	nop
  }
  return usb_status;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <__errno>:
 8009d00:	4b01      	ldr	r3, [pc, #4]	; (8009d08 <__errno+0x8>)
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	2000011c 	.word	0x2000011c

08009d0c <__libc_init_array>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	4d0d      	ldr	r5, [pc, #52]	; (8009d44 <__libc_init_array+0x38>)
 8009d10:	4c0d      	ldr	r4, [pc, #52]	; (8009d48 <__libc_init_array+0x3c>)
 8009d12:	1b64      	subs	r4, r4, r5
 8009d14:	10a4      	asrs	r4, r4, #2
 8009d16:	2600      	movs	r6, #0
 8009d18:	42a6      	cmp	r6, r4
 8009d1a:	d109      	bne.n	8009d30 <__libc_init_array+0x24>
 8009d1c:	4d0b      	ldr	r5, [pc, #44]	; (8009d4c <__libc_init_array+0x40>)
 8009d1e:	4c0c      	ldr	r4, [pc, #48]	; (8009d50 <__libc_init_array+0x44>)
 8009d20:	f001 f80c 	bl	800ad3c <_init>
 8009d24:	1b64      	subs	r4, r4, r5
 8009d26:	10a4      	asrs	r4, r4, #2
 8009d28:	2600      	movs	r6, #0
 8009d2a:	42a6      	cmp	r6, r4
 8009d2c:	d105      	bne.n	8009d3a <__libc_init_array+0x2e>
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d34:	4798      	blx	r3
 8009d36:	3601      	adds	r6, #1
 8009d38:	e7ee      	b.n	8009d18 <__libc_init_array+0xc>
 8009d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3e:	4798      	blx	r3
 8009d40:	3601      	adds	r6, #1
 8009d42:	e7f2      	b.n	8009d2a <__libc_init_array+0x1e>
 8009d44:	0800aed0 	.word	0x0800aed0
 8009d48:	0800aed0 	.word	0x0800aed0
 8009d4c:	0800aed0 	.word	0x0800aed0
 8009d50:	0800aed4 	.word	0x0800aed4

08009d54 <memset>:
 8009d54:	4402      	add	r2, r0
 8009d56:	4603      	mov	r3, r0
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d100      	bne.n	8009d5e <memset+0xa>
 8009d5c:	4770      	bx	lr
 8009d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d62:	e7f9      	b.n	8009d58 <memset+0x4>

08009d64 <iprintf>:
 8009d64:	b40f      	push	{r0, r1, r2, r3}
 8009d66:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <iprintf+0x2c>)
 8009d68:	b513      	push	{r0, r1, r4, lr}
 8009d6a:	681c      	ldr	r4, [r3, #0]
 8009d6c:	b124      	cbz	r4, 8009d78 <iprintf+0x14>
 8009d6e:	69a3      	ldr	r3, [r4, #24]
 8009d70:	b913      	cbnz	r3, 8009d78 <iprintf+0x14>
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 f87c 	bl	8009e70 <__sinit>
 8009d78:	ab05      	add	r3, sp, #20
 8009d7a:	9a04      	ldr	r2, [sp, #16]
 8009d7c:	68a1      	ldr	r1, [r4, #8]
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 f9d3 	bl	800a12c <_vfiprintf_r>
 8009d86:	b002      	add	sp, #8
 8009d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d8c:	b004      	add	sp, #16
 8009d8e:	4770      	bx	lr
 8009d90:	2000011c 	.word	0x2000011c

08009d94 <putchar>:
 8009d94:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <putchar+0x28>)
 8009d96:	b513      	push	{r0, r1, r4, lr}
 8009d98:	681c      	ldr	r4, [r3, #0]
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	b134      	cbz	r4, 8009dac <putchar+0x18>
 8009d9e:	69a3      	ldr	r3, [r4, #24]
 8009da0:	b923      	cbnz	r3, 8009dac <putchar+0x18>
 8009da2:	9001      	str	r0, [sp, #4]
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 f863 	bl	8009e70 <__sinit>
 8009daa:	9901      	ldr	r1, [sp, #4]
 8009dac:	68a2      	ldr	r2, [r4, #8]
 8009dae:	4620      	mov	r0, r4
 8009db0:	b002      	add	sp, #8
 8009db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009db6:	f000 bc7d 	b.w	800a6b4 <_putc_r>
 8009dba:	bf00      	nop
 8009dbc:	2000011c 	.word	0x2000011c

08009dc0 <std>:
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dce:	6083      	str	r3, [r0, #8]
 8009dd0:	8181      	strh	r1, [r0, #12]
 8009dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8009dd4:	81c2      	strh	r2, [r0, #14]
 8009dd6:	6183      	str	r3, [r0, #24]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	2208      	movs	r2, #8
 8009ddc:	305c      	adds	r0, #92	; 0x5c
 8009dde:	f7ff ffb9 	bl	8009d54 <memset>
 8009de2:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <std+0x38>)
 8009de4:	6263      	str	r3, [r4, #36]	; 0x24
 8009de6:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <std+0x3c>)
 8009de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dea:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <std+0x40>)
 8009dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dee:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <std+0x44>)
 8009df0:	6224      	str	r4, [r4, #32]
 8009df2:	6323      	str	r3, [r4, #48]	; 0x30
 8009df4:	bd10      	pop	{r4, pc}
 8009df6:	bf00      	nop
 8009df8:	0800a765 	.word	0x0800a765
 8009dfc:	0800a787 	.word	0x0800a787
 8009e00:	0800a7bf 	.word	0x0800a7bf
 8009e04:	0800a7e3 	.word	0x0800a7e3

08009e08 <_cleanup_r>:
 8009e08:	4901      	ldr	r1, [pc, #4]	; (8009e10 <_cleanup_r+0x8>)
 8009e0a:	f000 b8af 	b.w	8009f6c <_fwalk_reent>
 8009e0e:	bf00      	nop
 8009e10:	0800aabd 	.word	0x0800aabd

08009e14 <__sfmoreglue>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	2268      	movs	r2, #104	; 0x68
 8009e18:	1e4d      	subs	r5, r1, #1
 8009e1a:	4355      	muls	r5, r2
 8009e1c:	460e      	mov	r6, r1
 8009e1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e22:	f000 f8e5 	bl	8009ff0 <_malloc_r>
 8009e26:	4604      	mov	r4, r0
 8009e28:	b140      	cbz	r0, 8009e3c <__sfmoreglue+0x28>
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e30:	300c      	adds	r0, #12
 8009e32:	60a0      	str	r0, [r4, #8]
 8009e34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e38:	f7ff ff8c 	bl	8009d54 <memset>
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}

08009e40 <__sfp_lock_acquire>:
 8009e40:	4801      	ldr	r0, [pc, #4]	; (8009e48 <__sfp_lock_acquire+0x8>)
 8009e42:	f000 b8b3 	b.w	8009fac <__retarget_lock_acquire_recursive>
 8009e46:	bf00      	nop
 8009e48:	20000dc1 	.word	0x20000dc1

08009e4c <__sfp_lock_release>:
 8009e4c:	4801      	ldr	r0, [pc, #4]	; (8009e54 <__sfp_lock_release+0x8>)
 8009e4e:	f000 b8ae 	b.w	8009fae <__retarget_lock_release_recursive>
 8009e52:	bf00      	nop
 8009e54:	20000dc1 	.word	0x20000dc1

08009e58 <__sinit_lock_acquire>:
 8009e58:	4801      	ldr	r0, [pc, #4]	; (8009e60 <__sinit_lock_acquire+0x8>)
 8009e5a:	f000 b8a7 	b.w	8009fac <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	20000dc2 	.word	0x20000dc2

08009e64 <__sinit_lock_release>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__sinit_lock_release+0x8>)
 8009e66:	f000 b8a2 	b.w	8009fae <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20000dc2 	.word	0x20000dc2

08009e70 <__sinit>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	4604      	mov	r4, r0
 8009e74:	f7ff fff0 	bl	8009e58 <__sinit_lock_acquire>
 8009e78:	69a3      	ldr	r3, [r4, #24]
 8009e7a:	b11b      	cbz	r3, 8009e84 <__sinit+0x14>
 8009e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e80:	f7ff bff0 	b.w	8009e64 <__sinit_lock_release>
 8009e84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e88:	6523      	str	r3, [r4, #80]	; 0x50
 8009e8a:	4b13      	ldr	r3, [pc, #76]	; (8009ed8 <__sinit+0x68>)
 8009e8c:	4a13      	ldr	r2, [pc, #76]	; (8009edc <__sinit+0x6c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e92:	42a3      	cmp	r3, r4
 8009e94:	bf04      	itt	eq
 8009e96:	2301      	moveq	r3, #1
 8009e98:	61a3      	streq	r3, [r4, #24]
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 f820 	bl	8009ee0 <__sfp>
 8009ea0:	6060      	str	r0, [r4, #4]
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 f81c 	bl	8009ee0 <__sfp>
 8009ea8:	60a0      	str	r0, [r4, #8]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f000 f818 	bl	8009ee0 <__sfp>
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	60e0      	str	r0, [r4, #12]
 8009eb4:	2104      	movs	r1, #4
 8009eb6:	6860      	ldr	r0, [r4, #4]
 8009eb8:	f7ff ff82 	bl	8009dc0 <std>
 8009ebc:	68a0      	ldr	r0, [r4, #8]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	2109      	movs	r1, #9
 8009ec2:	f7ff ff7d 	bl	8009dc0 <std>
 8009ec6:	68e0      	ldr	r0, [r4, #12]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	2112      	movs	r1, #18
 8009ecc:	f7ff ff78 	bl	8009dc0 <std>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	61a3      	str	r3, [r4, #24]
 8009ed4:	e7d2      	b.n	8009e7c <__sinit+0xc>
 8009ed6:	bf00      	nop
 8009ed8:	0800ae30 	.word	0x0800ae30
 8009edc:	08009e09 	.word	0x08009e09

08009ee0 <__sfp>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	f7ff ffac 	bl	8009e40 <__sfp_lock_acquire>
 8009ee8:	4b1e      	ldr	r3, [pc, #120]	; (8009f64 <__sfp+0x84>)
 8009eea:	681e      	ldr	r6, [r3, #0]
 8009eec:	69b3      	ldr	r3, [r6, #24]
 8009eee:	b913      	cbnz	r3, 8009ef6 <__sfp+0x16>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7ff ffbd 	bl	8009e70 <__sinit>
 8009ef6:	3648      	adds	r6, #72	; 0x48
 8009ef8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	d503      	bpl.n	8009f08 <__sfp+0x28>
 8009f00:	6833      	ldr	r3, [r6, #0]
 8009f02:	b30b      	cbz	r3, 8009f48 <__sfp+0x68>
 8009f04:	6836      	ldr	r6, [r6, #0]
 8009f06:	e7f7      	b.n	8009ef8 <__sfp+0x18>
 8009f08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f0c:	b9d5      	cbnz	r5, 8009f44 <__sfp+0x64>
 8009f0e:	4b16      	ldr	r3, [pc, #88]	; (8009f68 <__sfp+0x88>)
 8009f10:	60e3      	str	r3, [r4, #12]
 8009f12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f16:	6665      	str	r5, [r4, #100]	; 0x64
 8009f18:	f000 f847 	bl	8009faa <__retarget_lock_init_recursive>
 8009f1c:	f7ff ff96 	bl	8009e4c <__sfp_lock_release>
 8009f20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f28:	6025      	str	r5, [r4, #0]
 8009f2a:	61a5      	str	r5, [r4, #24]
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f34:	f7ff ff0e 	bl	8009d54 <memset>
 8009f38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f40:	4620      	mov	r0, r4
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f44:	3468      	adds	r4, #104	; 0x68
 8009f46:	e7d9      	b.n	8009efc <__sfp+0x1c>
 8009f48:	2104      	movs	r1, #4
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	f7ff ff62 	bl	8009e14 <__sfmoreglue>
 8009f50:	4604      	mov	r4, r0
 8009f52:	6030      	str	r0, [r6, #0]
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d1d5      	bne.n	8009f04 <__sfp+0x24>
 8009f58:	f7ff ff78 	bl	8009e4c <__sfp_lock_release>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	603b      	str	r3, [r7, #0]
 8009f60:	e7ee      	b.n	8009f40 <__sfp+0x60>
 8009f62:	bf00      	nop
 8009f64:	0800ae30 	.word	0x0800ae30
 8009f68:	ffff0001 	.word	0xffff0001

08009f6c <_fwalk_reent>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	4606      	mov	r6, r0
 8009f72:	4688      	mov	r8, r1
 8009f74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f78:	2700      	movs	r7, #0
 8009f7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f7e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f82:	d505      	bpl.n	8009f90 <_fwalk_reent+0x24>
 8009f84:	6824      	ldr	r4, [r4, #0]
 8009f86:	2c00      	cmp	r4, #0
 8009f88:	d1f7      	bne.n	8009f7a <_fwalk_reent+0xe>
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f90:	89ab      	ldrh	r3, [r5, #12]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d907      	bls.n	8009fa6 <_fwalk_reent+0x3a>
 8009f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	d003      	beq.n	8009fa6 <_fwalk_reent+0x3a>
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	47c0      	blx	r8
 8009fa4:	4307      	orrs	r7, r0
 8009fa6:	3568      	adds	r5, #104	; 0x68
 8009fa8:	e7e9      	b.n	8009f7e <_fwalk_reent+0x12>

08009faa <__retarget_lock_init_recursive>:
 8009faa:	4770      	bx	lr

08009fac <__retarget_lock_acquire_recursive>:
 8009fac:	4770      	bx	lr

08009fae <__retarget_lock_release_recursive>:
 8009fae:	4770      	bx	lr

08009fb0 <sbrk_aligned>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	4e0e      	ldr	r6, [pc, #56]	; (8009fec <sbrk_aligned+0x3c>)
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	6831      	ldr	r1, [r6, #0]
 8009fb8:	4605      	mov	r5, r0
 8009fba:	b911      	cbnz	r1, 8009fc2 <sbrk_aligned+0x12>
 8009fbc:	f000 fbc2 	bl	800a744 <_sbrk_r>
 8009fc0:	6030      	str	r0, [r6, #0]
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 fbbd 	bl	800a744 <_sbrk_r>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d00a      	beq.n	8009fe4 <sbrk_aligned+0x34>
 8009fce:	1cc4      	adds	r4, r0, #3
 8009fd0:	f024 0403 	bic.w	r4, r4, #3
 8009fd4:	42a0      	cmp	r0, r4
 8009fd6:	d007      	beq.n	8009fe8 <sbrk_aligned+0x38>
 8009fd8:	1a21      	subs	r1, r4, r0
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fbb2 	bl	800a744 <_sbrk_r>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d101      	bne.n	8009fe8 <sbrk_aligned+0x38>
 8009fe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009fe8:	4620      	mov	r0, r4
 8009fea:	bd70      	pop	{r4, r5, r6, pc}
 8009fec:	20000dc8 	.word	0x20000dc8

08009ff0 <_malloc_r>:
 8009ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff4:	1ccd      	adds	r5, r1, #3
 8009ff6:	f025 0503 	bic.w	r5, r5, #3
 8009ffa:	3508      	adds	r5, #8
 8009ffc:	2d0c      	cmp	r5, #12
 8009ffe:	bf38      	it	cc
 800a000:	250c      	movcc	r5, #12
 800a002:	2d00      	cmp	r5, #0
 800a004:	4607      	mov	r7, r0
 800a006:	db01      	blt.n	800a00c <_malloc_r+0x1c>
 800a008:	42a9      	cmp	r1, r5
 800a00a:	d905      	bls.n	800a018 <_malloc_r+0x28>
 800a00c:	230c      	movs	r3, #12
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	2600      	movs	r6, #0
 800a012:	4630      	mov	r0, r6
 800a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a018:	4e2e      	ldr	r6, [pc, #184]	; (800a0d4 <_malloc_r+0xe4>)
 800a01a:	f000 fe03 	bl	800ac24 <__malloc_lock>
 800a01e:	6833      	ldr	r3, [r6, #0]
 800a020:	461c      	mov	r4, r3
 800a022:	bb34      	cbnz	r4, 800a072 <_malloc_r+0x82>
 800a024:	4629      	mov	r1, r5
 800a026:	4638      	mov	r0, r7
 800a028:	f7ff ffc2 	bl	8009fb0 <sbrk_aligned>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	4604      	mov	r4, r0
 800a030:	d14d      	bne.n	800a0ce <_malloc_r+0xde>
 800a032:	6834      	ldr	r4, [r6, #0]
 800a034:	4626      	mov	r6, r4
 800a036:	2e00      	cmp	r6, #0
 800a038:	d140      	bne.n	800a0bc <_malloc_r+0xcc>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	4631      	mov	r1, r6
 800a03e:	4638      	mov	r0, r7
 800a040:	eb04 0803 	add.w	r8, r4, r3
 800a044:	f000 fb7e 	bl	800a744 <_sbrk_r>
 800a048:	4580      	cmp	r8, r0
 800a04a:	d13a      	bne.n	800a0c2 <_malloc_r+0xd2>
 800a04c:	6821      	ldr	r1, [r4, #0]
 800a04e:	3503      	adds	r5, #3
 800a050:	1a6d      	subs	r5, r5, r1
 800a052:	f025 0503 	bic.w	r5, r5, #3
 800a056:	3508      	adds	r5, #8
 800a058:	2d0c      	cmp	r5, #12
 800a05a:	bf38      	it	cc
 800a05c:	250c      	movcc	r5, #12
 800a05e:	4629      	mov	r1, r5
 800a060:	4638      	mov	r0, r7
 800a062:	f7ff ffa5 	bl	8009fb0 <sbrk_aligned>
 800a066:	3001      	adds	r0, #1
 800a068:	d02b      	beq.n	800a0c2 <_malloc_r+0xd2>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	442b      	add	r3, r5
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	e00e      	b.n	800a090 <_malloc_r+0xa0>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	1b52      	subs	r2, r2, r5
 800a076:	d41e      	bmi.n	800a0b6 <_malloc_r+0xc6>
 800a078:	2a0b      	cmp	r2, #11
 800a07a:	d916      	bls.n	800a0aa <_malloc_r+0xba>
 800a07c:	1961      	adds	r1, r4, r5
 800a07e:	42a3      	cmp	r3, r4
 800a080:	6025      	str	r5, [r4, #0]
 800a082:	bf18      	it	ne
 800a084:	6059      	strne	r1, [r3, #4]
 800a086:	6863      	ldr	r3, [r4, #4]
 800a088:	bf08      	it	eq
 800a08a:	6031      	streq	r1, [r6, #0]
 800a08c:	5162      	str	r2, [r4, r5]
 800a08e:	604b      	str	r3, [r1, #4]
 800a090:	4638      	mov	r0, r7
 800a092:	f104 060b 	add.w	r6, r4, #11
 800a096:	f000 fdcb 	bl	800ac30 <__malloc_unlock>
 800a09a:	f026 0607 	bic.w	r6, r6, #7
 800a09e:	1d23      	adds	r3, r4, #4
 800a0a0:	1af2      	subs	r2, r6, r3
 800a0a2:	d0b6      	beq.n	800a012 <_malloc_r+0x22>
 800a0a4:	1b9b      	subs	r3, r3, r6
 800a0a6:	50a3      	str	r3, [r4, r2]
 800a0a8:	e7b3      	b.n	800a012 <_malloc_r+0x22>
 800a0aa:	6862      	ldr	r2, [r4, #4]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	bf0c      	ite	eq
 800a0b0:	6032      	streq	r2, [r6, #0]
 800a0b2:	605a      	strne	r2, [r3, #4]
 800a0b4:	e7ec      	b.n	800a090 <_malloc_r+0xa0>
 800a0b6:	4623      	mov	r3, r4
 800a0b8:	6864      	ldr	r4, [r4, #4]
 800a0ba:	e7b2      	b.n	800a022 <_malloc_r+0x32>
 800a0bc:	4634      	mov	r4, r6
 800a0be:	6876      	ldr	r6, [r6, #4]
 800a0c0:	e7b9      	b.n	800a036 <_malloc_r+0x46>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	603b      	str	r3, [r7, #0]
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f000 fdb2 	bl	800ac30 <__malloc_unlock>
 800a0cc:	e7a1      	b.n	800a012 <_malloc_r+0x22>
 800a0ce:	6025      	str	r5, [r4, #0]
 800a0d0:	e7de      	b.n	800a090 <_malloc_r+0xa0>
 800a0d2:	bf00      	nop
 800a0d4:	20000dc4 	.word	0x20000dc4

0800a0d8 <__sfputc_r>:
 800a0d8:	6893      	ldr	r3, [r2, #8]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	b410      	push	{r4}
 800a0e0:	6093      	str	r3, [r2, #8]
 800a0e2:	da08      	bge.n	800a0f6 <__sfputc_r+0x1e>
 800a0e4:	6994      	ldr	r4, [r2, #24]
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	db01      	blt.n	800a0ee <__sfputc_r+0x16>
 800a0ea:	290a      	cmp	r1, #10
 800a0ec:	d103      	bne.n	800a0f6 <__sfputc_r+0x1e>
 800a0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f2:	f000 bb7b 	b.w	800a7ec <__swbuf_r>
 800a0f6:	6813      	ldr	r3, [r2, #0]
 800a0f8:	1c58      	adds	r0, r3, #1
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	7019      	strb	r1, [r3, #0]
 800a0fe:	4608      	mov	r0, r1
 800a100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <__sfputs_r>:
 800a106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a108:	4606      	mov	r6, r0
 800a10a:	460f      	mov	r7, r1
 800a10c:	4614      	mov	r4, r2
 800a10e:	18d5      	adds	r5, r2, r3
 800a110:	42ac      	cmp	r4, r5
 800a112:	d101      	bne.n	800a118 <__sfputs_r+0x12>
 800a114:	2000      	movs	r0, #0
 800a116:	e007      	b.n	800a128 <__sfputs_r+0x22>
 800a118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11c:	463a      	mov	r2, r7
 800a11e:	4630      	mov	r0, r6
 800a120:	f7ff ffda 	bl	800a0d8 <__sfputc_r>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d1f3      	bne.n	800a110 <__sfputs_r+0xa>
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a12c <_vfiprintf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	460d      	mov	r5, r1
 800a132:	b09d      	sub	sp, #116	; 0x74
 800a134:	4614      	mov	r4, r2
 800a136:	4698      	mov	r8, r3
 800a138:	4606      	mov	r6, r0
 800a13a:	b118      	cbz	r0, 800a144 <_vfiprintf_r+0x18>
 800a13c:	6983      	ldr	r3, [r0, #24]
 800a13e:	b90b      	cbnz	r3, 800a144 <_vfiprintf_r+0x18>
 800a140:	f7ff fe96 	bl	8009e70 <__sinit>
 800a144:	4b89      	ldr	r3, [pc, #548]	; (800a36c <_vfiprintf_r+0x240>)
 800a146:	429d      	cmp	r5, r3
 800a148:	d11b      	bne.n	800a182 <_vfiprintf_r+0x56>
 800a14a:	6875      	ldr	r5, [r6, #4]
 800a14c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a14e:	07d9      	lsls	r1, r3, #31
 800a150:	d405      	bmi.n	800a15e <_vfiprintf_r+0x32>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	059a      	lsls	r2, r3, #22
 800a156:	d402      	bmi.n	800a15e <_vfiprintf_r+0x32>
 800a158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a15a:	f7ff ff27 	bl	8009fac <__retarget_lock_acquire_recursive>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	071b      	lsls	r3, r3, #28
 800a162:	d501      	bpl.n	800a168 <_vfiprintf_r+0x3c>
 800a164:	692b      	ldr	r3, [r5, #16]
 800a166:	b9eb      	cbnz	r3, 800a1a4 <_vfiprintf_r+0x78>
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f000 fba2 	bl	800a8b4 <__swsetup_r>
 800a170:	b1c0      	cbz	r0, 800a1a4 <_vfiprintf_r+0x78>
 800a172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a174:	07dc      	lsls	r4, r3, #31
 800a176:	d50e      	bpl.n	800a196 <_vfiprintf_r+0x6a>
 800a178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a17c:	b01d      	add	sp, #116	; 0x74
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	4b7b      	ldr	r3, [pc, #492]	; (800a370 <_vfiprintf_r+0x244>)
 800a184:	429d      	cmp	r5, r3
 800a186:	d101      	bne.n	800a18c <_vfiprintf_r+0x60>
 800a188:	68b5      	ldr	r5, [r6, #8]
 800a18a:	e7df      	b.n	800a14c <_vfiprintf_r+0x20>
 800a18c:	4b79      	ldr	r3, [pc, #484]	; (800a374 <_vfiprintf_r+0x248>)
 800a18e:	429d      	cmp	r5, r3
 800a190:	bf08      	it	eq
 800a192:	68f5      	ldreq	r5, [r6, #12]
 800a194:	e7da      	b.n	800a14c <_vfiprintf_r+0x20>
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	0598      	lsls	r0, r3, #22
 800a19a:	d4ed      	bmi.n	800a178 <_vfiprintf_r+0x4c>
 800a19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a19e:	f7ff ff06 	bl	8009fae <__retarget_lock_release_recursive>
 800a1a2:	e7e9      	b.n	800a178 <_vfiprintf_r+0x4c>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a8:	2320      	movs	r3, #32
 800a1aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1b2:	2330      	movs	r3, #48	; 0x30
 800a1b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a378 <_vfiprintf_r+0x24c>
 800a1b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1bc:	f04f 0901 	mov.w	r9, #1
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	469a      	mov	sl, r3
 800a1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c8:	b10a      	cbz	r2, 800a1ce <_vfiprintf_r+0xa2>
 800a1ca:	2a25      	cmp	r2, #37	; 0x25
 800a1cc:	d1f9      	bne.n	800a1c2 <_vfiprintf_r+0x96>
 800a1ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a1d2:	d00b      	beq.n	800a1ec <_vfiprintf_r+0xc0>
 800a1d4:	465b      	mov	r3, fp
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ff93 	bl	800a106 <__sfputs_r>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	f000 80aa 	beq.w	800a33a <_vfiprintf_r+0x20e>
 800a1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e8:	445a      	add	r2, fp
 800a1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80a2 	beq.w	800a33a <_vfiprintf_r+0x20e>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a200:	f10a 0a01 	add.w	sl, sl, #1
 800a204:	9304      	str	r3, [sp, #16]
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a20c:	931a      	str	r3, [sp, #104]	; 0x68
 800a20e:	4654      	mov	r4, sl
 800a210:	2205      	movs	r2, #5
 800a212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a216:	4858      	ldr	r0, [pc, #352]	; (800a378 <_vfiprintf_r+0x24c>)
 800a218:	f7f5 ffda 	bl	80001d0 <memchr>
 800a21c:	9a04      	ldr	r2, [sp, #16]
 800a21e:	b9d8      	cbnz	r0, 800a258 <_vfiprintf_r+0x12c>
 800a220:	06d1      	lsls	r1, r2, #27
 800a222:	bf44      	itt	mi
 800a224:	2320      	movmi	r3, #32
 800a226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22a:	0713      	lsls	r3, r2, #28
 800a22c:	bf44      	itt	mi
 800a22e:	232b      	movmi	r3, #43	; 0x2b
 800a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b2a      	cmp	r3, #42	; 0x2a
 800a23a:	d015      	beq.n	800a268 <_vfiprintf_r+0x13c>
 800a23c:	9a07      	ldr	r2, [sp, #28]
 800a23e:	4654      	mov	r4, sl
 800a240:	2000      	movs	r0, #0
 800a242:	f04f 0c0a 	mov.w	ip, #10
 800a246:	4621      	mov	r1, r4
 800a248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a24c:	3b30      	subs	r3, #48	; 0x30
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d94e      	bls.n	800a2f0 <_vfiprintf_r+0x1c4>
 800a252:	b1b0      	cbz	r0, 800a282 <_vfiprintf_r+0x156>
 800a254:	9207      	str	r2, [sp, #28]
 800a256:	e014      	b.n	800a282 <_vfiprintf_r+0x156>
 800a258:	eba0 0308 	sub.w	r3, r0, r8
 800a25c:	fa09 f303 	lsl.w	r3, r9, r3
 800a260:	4313      	orrs	r3, r2
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	46a2      	mov	sl, r4
 800a266:	e7d2      	b.n	800a20e <_vfiprintf_r+0xe2>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	1d19      	adds	r1, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	9103      	str	r1, [sp, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	bfbb      	ittet	lt
 800a274:	425b      	neglt	r3, r3
 800a276:	f042 0202 	orrlt.w	r2, r2, #2
 800a27a:	9307      	strge	r3, [sp, #28]
 800a27c:	9307      	strlt	r3, [sp, #28]
 800a27e:	bfb8      	it	lt
 800a280:	9204      	strlt	r2, [sp, #16]
 800a282:	7823      	ldrb	r3, [r4, #0]
 800a284:	2b2e      	cmp	r3, #46	; 0x2e
 800a286:	d10c      	bne.n	800a2a2 <_vfiprintf_r+0x176>
 800a288:	7863      	ldrb	r3, [r4, #1]
 800a28a:	2b2a      	cmp	r3, #42	; 0x2a
 800a28c:	d135      	bne.n	800a2fa <_vfiprintf_r+0x1ce>
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	1d1a      	adds	r2, r3, #4
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	9203      	str	r2, [sp, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	bfb8      	it	lt
 800a29a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a29e:	3402      	adds	r4, #2
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a388 <_vfiprintf_r+0x25c>
 800a2a6:	7821      	ldrb	r1, [r4, #0]
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	f7f5 ff90 	bl	80001d0 <memchr>
 800a2b0:	b140      	cbz	r0, 800a2c4 <_vfiprintf_r+0x198>
 800a2b2:	2340      	movs	r3, #64	; 0x40
 800a2b4:	eba0 000a 	sub.w	r0, r0, sl
 800a2b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	4303      	orrs	r3, r0
 800a2c0:	3401      	adds	r4, #1
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	482c      	ldr	r0, [pc, #176]	; (800a37c <_vfiprintf_r+0x250>)
 800a2ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ce:	2206      	movs	r2, #6
 800a2d0:	f7f5 ff7e 	bl	80001d0 <memchr>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d03f      	beq.n	800a358 <_vfiprintf_r+0x22c>
 800a2d8:	4b29      	ldr	r3, [pc, #164]	; (800a380 <_vfiprintf_r+0x254>)
 800a2da:	bb1b      	cbnz	r3, 800a324 <_vfiprintf_r+0x1f8>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	3307      	adds	r3, #7
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ea:	443b      	add	r3, r7
 800a2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ee:	e767      	b.n	800a1c0 <_vfiprintf_r+0x94>
 800a2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	e7a5      	b.n	800a246 <_vfiprintf_r+0x11a>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	3401      	adds	r4, #1
 800a2fe:	9305      	str	r3, [sp, #20]
 800a300:	4619      	mov	r1, r3
 800a302:	f04f 0c0a 	mov.w	ip, #10
 800a306:	4620      	mov	r0, r4
 800a308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a30c:	3a30      	subs	r2, #48	; 0x30
 800a30e:	2a09      	cmp	r2, #9
 800a310:	d903      	bls.n	800a31a <_vfiprintf_r+0x1ee>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0c5      	beq.n	800a2a2 <_vfiprintf_r+0x176>
 800a316:	9105      	str	r1, [sp, #20]
 800a318:	e7c3      	b.n	800a2a2 <_vfiprintf_r+0x176>
 800a31a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a31e:	4604      	mov	r4, r0
 800a320:	2301      	movs	r3, #1
 800a322:	e7f0      	b.n	800a306 <_vfiprintf_r+0x1da>
 800a324:	ab03      	add	r3, sp, #12
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	462a      	mov	r2, r5
 800a32a:	4b16      	ldr	r3, [pc, #88]	; (800a384 <_vfiprintf_r+0x258>)
 800a32c:	a904      	add	r1, sp, #16
 800a32e:	4630      	mov	r0, r6
 800a330:	f3af 8000 	nop.w
 800a334:	4607      	mov	r7, r0
 800a336:	1c78      	adds	r0, r7, #1
 800a338:	d1d6      	bne.n	800a2e8 <_vfiprintf_r+0x1bc>
 800a33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a33c:	07d9      	lsls	r1, r3, #31
 800a33e:	d405      	bmi.n	800a34c <_vfiprintf_r+0x220>
 800a340:	89ab      	ldrh	r3, [r5, #12]
 800a342:	059a      	lsls	r2, r3, #22
 800a344:	d402      	bmi.n	800a34c <_vfiprintf_r+0x220>
 800a346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a348:	f7ff fe31 	bl	8009fae <__retarget_lock_release_recursive>
 800a34c:	89ab      	ldrh	r3, [r5, #12]
 800a34e:	065b      	lsls	r3, r3, #25
 800a350:	f53f af12 	bmi.w	800a178 <_vfiprintf_r+0x4c>
 800a354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a356:	e711      	b.n	800a17c <_vfiprintf_r+0x50>
 800a358:	ab03      	add	r3, sp, #12
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	462a      	mov	r2, r5
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <_vfiprintf_r+0x258>)
 800a360:	a904      	add	r1, sp, #16
 800a362:	4630      	mov	r0, r6
 800a364:	f000 f880 	bl	800a468 <_printf_i>
 800a368:	e7e4      	b.n	800a334 <_vfiprintf_r+0x208>
 800a36a:	bf00      	nop
 800a36c:	0800ae54 	.word	0x0800ae54
 800a370:	0800ae74 	.word	0x0800ae74
 800a374:	0800ae34 	.word	0x0800ae34
 800a378:	0800ae94 	.word	0x0800ae94
 800a37c:	0800ae9e 	.word	0x0800ae9e
 800a380:	00000000 	.word	0x00000000
 800a384:	0800a107 	.word	0x0800a107
 800a388:	0800ae9a 	.word	0x0800ae9a

0800a38c <_printf_common>:
 800a38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a390:	4616      	mov	r6, r2
 800a392:	4699      	mov	r9, r3
 800a394:	688a      	ldr	r2, [r1, #8]
 800a396:	690b      	ldr	r3, [r1, #16]
 800a398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a39c:	4293      	cmp	r3, r2
 800a39e:	bfb8      	it	lt
 800a3a0:	4613      	movlt	r3, r2
 800a3a2:	6033      	str	r3, [r6, #0]
 800a3a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	b10a      	cbz	r2, 800a3b2 <_printf_common+0x26>
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	6033      	str	r3, [r6, #0]
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	0699      	lsls	r1, r3, #26
 800a3b6:	bf42      	ittt	mi
 800a3b8:	6833      	ldrmi	r3, [r6, #0]
 800a3ba:	3302      	addmi	r3, #2
 800a3bc:	6033      	strmi	r3, [r6, #0]
 800a3be:	6825      	ldr	r5, [r4, #0]
 800a3c0:	f015 0506 	ands.w	r5, r5, #6
 800a3c4:	d106      	bne.n	800a3d4 <_printf_common+0x48>
 800a3c6:	f104 0a19 	add.w	sl, r4, #25
 800a3ca:	68e3      	ldr	r3, [r4, #12]
 800a3cc:	6832      	ldr	r2, [r6, #0]
 800a3ce:	1a9b      	subs	r3, r3, r2
 800a3d0:	42ab      	cmp	r3, r5
 800a3d2:	dc26      	bgt.n	800a422 <_printf_common+0x96>
 800a3d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3d8:	1e13      	subs	r3, r2, #0
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	bf18      	it	ne
 800a3de:	2301      	movne	r3, #1
 800a3e0:	0692      	lsls	r2, r2, #26
 800a3e2:	d42b      	bmi.n	800a43c <_printf_common+0xb0>
 800a3e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d01e      	beq.n	800a430 <_printf_common+0xa4>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	68e5      	ldr	r5, [r4, #12]
 800a3f6:	6832      	ldr	r2, [r6, #0]
 800a3f8:	f003 0306 	and.w	r3, r3, #6
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	bf08      	it	eq
 800a400:	1aad      	subeq	r5, r5, r2
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	6922      	ldr	r2, [r4, #16]
 800a406:	bf0c      	ite	eq
 800a408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a40c:	2500      	movne	r5, #0
 800a40e:	4293      	cmp	r3, r2
 800a410:	bfc4      	itt	gt
 800a412:	1a9b      	subgt	r3, r3, r2
 800a414:	18ed      	addgt	r5, r5, r3
 800a416:	2600      	movs	r6, #0
 800a418:	341a      	adds	r4, #26
 800a41a:	42b5      	cmp	r5, r6
 800a41c:	d11a      	bne.n	800a454 <_printf_common+0xc8>
 800a41e:	2000      	movs	r0, #0
 800a420:	e008      	b.n	800a434 <_printf_common+0xa8>
 800a422:	2301      	movs	r3, #1
 800a424:	4652      	mov	r2, sl
 800a426:	4649      	mov	r1, r9
 800a428:	4638      	mov	r0, r7
 800a42a:	47c0      	blx	r8
 800a42c:	3001      	adds	r0, #1
 800a42e:	d103      	bne.n	800a438 <_printf_common+0xac>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a438:	3501      	adds	r5, #1
 800a43a:	e7c6      	b.n	800a3ca <_printf_common+0x3e>
 800a43c:	18e1      	adds	r1, r4, r3
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	2030      	movs	r0, #48	; 0x30
 800a442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a446:	4422      	add	r2, r4
 800a448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a44c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a450:	3302      	adds	r3, #2
 800a452:	e7c7      	b.n	800a3e4 <_printf_common+0x58>
 800a454:	2301      	movs	r3, #1
 800a456:	4622      	mov	r2, r4
 800a458:	4649      	mov	r1, r9
 800a45a:	4638      	mov	r0, r7
 800a45c:	47c0      	blx	r8
 800a45e:	3001      	adds	r0, #1
 800a460:	d0e6      	beq.n	800a430 <_printf_common+0xa4>
 800a462:	3601      	adds	r6, #1
 800a464:	e7d9      	b.n	800a41a <_printf_common+0x8e>
	...

0800a468 <_printf_i>:
 800a468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a46c:	7e0f      	ldrb	r7, [r1, #24]
 800a46e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a470:	2f78      	cmp	r7, #120	; 0x78
 800a472:	4691      	mov	r9, r2
 800a474:	4680      	mov	r8, r0
 800a476:	460c      	mov	r4, r1
 800a478:	469a      	mov	sl, r3
 800a47a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a47e:	d807      	bhi.n	800a490 <_printf_i+0x28>
 800a480:	2f62      	cmp	r7, #98	; 0x62
 800a482:	d80a      	bhi.n	800a49a <_printf_i+0x32>
 800a484:	2f00      	cmp	r7, #0
 800a486:	f000 80d8 	beq.w	800a63a <_printf_i+0x1d2>
 800a48a:	2f58      	cmp	r7, #88	; 0x58
 800a48c:	f000 80a3 	beq.w	800a5d6 <_printf_i+0x16e>
 800a490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a498:	e03a      	b.n	800a510 <_printf_i+0xa8>
 800a49a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a49e:	2b15      	cmp	r3, #21
 800a4a0:	d8f6      	bhi.n	800a490 <_printf_i+0x28>
 800a4a2:	a101      	add	r1, pc, #4	; (adr r1, 800a4a8 <_printf_i+0x40>)
 800a4a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4a8:	0800a501 	.word	0x0800a501
 800a4ac:	0800a515 	.word	0x0800a515
 800a4b0:	0800a491 	.word	0x0800a491
 800a4b4:	0800a491 	.word	0x0800a491
 800a4b8:	0800a491 	.word	0x0800a491
 800a4bc:	0800a491 	.word	0x0800a491
 800a4c0:	0800a515 	.word	0x0800a515
 800a4c4:	0800a491 	.word	0x0800a491
 800a4c8:	0800a491 	.word	0x0800a491
 800a4cc:	0800a491 	.word	0x0800a491
 800a4d0:	0800a491 	.word	0x0800a491
 800a4d4:	0800a621 	.word	0x0800a621
 800a4d8:	0800a545 	.word	0x0800a545
 800a4dc:	0800a603 	.word	0x0800a603
 800a4e0:	0800a491 	.word	0x0800a491
 800a4e4:	0800a491 	.word	0x0800a491
 800a4e8:	0800a643 	.word	0x0800a643
 800a4ec:	0800a491 	.word	0x0800a491
 800a4f0:	0800a545 	.word	0x0800a545
 800a4f4:	0800a491 	.word	0x0800a491
 800a4f8:	0800a491 	.word	0x0800a491
 800a4fc:	0800a60b 	.word	0x0800a60b
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	1d1a      	adds	r2, r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	602a      	str	r2, [r5, #0]
 800a508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a510:	2301      	movs	r3, #1
 800a512:	e0a3      	b.n	800a65c <_printf_i+0x1f4>
 800a514:	6820      	ldr	r0, [r4, #0]
 800a516:	6829      	ldr	r1, [r5, #0]
 800a518:	0606      	lsls	r6, r0, #24
 800a51a:	f101 0304 	add.w	r3, r1, #4
 800a51e:	d50a      	bpl.n	800a536 <_printf_i+0xce>
 800a520:	680e      	ldr	r6, [r1, #0]
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	2e00      	cmp	r6, #0
 800a526:	da03      	bge.n	800a530 <_printf_i+0xc8>
 800a528:	232d      	movs	r3, #45	; 0x2d
 800a52a:	4276      	negs	r6, r6
 800a52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a530:	485e      	ldr	r0, [pc, #376]	; (800a6ac <_printf_i+0x244>)
 800a532:	230a      	movs	r3, #10
 800a534:	e019      	b.n	800a56a <_printf_i+0x102>
 800a536:	680e      	ldr	r6, [r1, #0]
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a53e:	bf18      	it	ne
 800a540:	b236      	sxthne	r6, r6
 800a542:	e7ef      	b.n	800a524 <_printf_i+0xbc>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	6820      	ldr	r0, [r4, #0]
 800a548:	1d19      	adds	r1, r3, #4
 800a54a:	6029      	str	r1, [r5, #0]
 800a54c:	0601      	lsls	r1, r0, #24
 800a54e:	d501      	bpl.n	800a554 <_printf_i+0xec>
 800a550:	681e      	ldr	r6, [r3, #0]
 800a552:	e002      	b.n	800a55a <_printf_i+0xf2>
 800a554:	0646      	lsls	r6, r0, #25
 800a556:	d5fb      	bpl.n	800a550 <_printf_i+0xe8>
 800a558:	881e      	ldrh	r6, [r3, #0]
 800a55a:	4854      	ldr	r0, [pc, #336]	; (800a6ac <_printf_i+0x244>)
 800a55c:	2f6f      	cmp	r7, #111	; 0x6f
 800a55e:	bf0c      	ite	eq
 800a560:	2308      	moveq	r3, #8
 800a562:	230a      	movne	r3, #10
 800a564:	2100      	movs	r1, #0
 800a566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a56a:	6865      	ldr	r5, [r4, #4]
 800a56c:	60a5      	str	r5, [r4, #8]
 800a56e:	2d00      	cmp	r5, #0
 800a570:	bfa2      	ittt	ge
 800a572:	6821      	ldrge	r1, [r4, #0]
 800a574:	f021 0104 	bicge.w	r1, r1, #4
 800a578:	6021      	strge	r1, [r4, #0]
 800a57a:	b90e      	cbnz	r6, 800a580 <_printf_i+0x118>
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	d04d      	beq.n	800a61c <_printf_i+0x1b4>
 800a580:	4615      	mov	r5, r2
 800a582:	fbb6 f1f3 	udiv	r1, r6, r3
 800a586:	fb03 6711 	mls	r7, r3, r1, r6
 800a58a:	5dc7      	ldrb	r7, [r0, r7]
 800a58c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a590:	4637      	mov	r7, r6
 800a592:	42bb      	cmp	r3, r7
 800a594:	460e      	mov	r6, r1
 800a596:	d9f4      	bls.n	800a582 <_printf_i+0x11a>
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d10b      	bne.n	800a5b4 <_printf_i+0x14c>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	07de      	lsls	r6, r3, #31
 800a5a0:	d508      	bpl.n	800a5b4 <_printf_i+0x14c>
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	6861      	ldr	r1, [r4, #4]
 800a5a6:	4299      	cmp	r1, r3
 800a5a8:	bfde      	ittt	le
 800a5aa:	2330      	movle	r3, #48	; 0x30
 800a5ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5b4:	1b52      	subs	r2, r2, r5
 800a5b6:	6122      	str	r2, [r4, #16]
 800a5b8:	f8cd a000 	str.w	sl, [sp]
 800a5bc:	464b      	mov	r3, r9
 800a5be:	aa03      	add	r2, sp, #12
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	f7ff fee2 	bl	800a38c <_printf_common>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d14c      	bne.n	800a666 <_printf_i+0x1fe>
 800a5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d0:	b004      	add	sp, #16
 800a5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d6:	4835      	ldr	r0, [pc, #212]	; (800a6ac <_printf_i+0x244>)
 800a5d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5dc:	6829      	ldr	r1, [r5, #0]
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5e4:	6029      	str	r1, [r5, #0]
 800a5e6:	061d      	lsls	r5, r3, #24
 800a5e8:	d514      	bpl.n	800a614 <_printf_i+0x1ac>
 800a5ea:	07df      	lsls	r7, r3, #31
 800a5ec:	bf44      	itt	mi
 800a5ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a5f2:	6023      	strmi	r3, [r4, #0]
 800a5f4:	b91e      	cbnz	r6, 800a5fe <_printf_i+0x196>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	f023 0320 	bic.w	r3, r3, #32
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	2310      	movs	r3, #16
 800a600:	e7b0      	b.n	800a564 <_printf_i+0xfc>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f043 0320 	orr.w	r3, r3, #32
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	2378      	movs	r3, #120	; 0x78
 800a60c:	4828      	ldr	r0, [pc, #160]	; (800a6b0 <_printf_i+0x248>)
 800a60e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a612:	e7e3      	b.n	800a5dc <_printf_i+0x174>
 800a614:	0659      	lsls	r1, r3, #25
 800a616:	bf48      	it	mi
 800a618:	b2b6      	uxthmi	r6, r6
 800a61a:	e7e6      	b.n	800a5ea <_printf_i+0x182>
 800a61c:	4615      	mov	r5, r2
 800a61e:	e7bb      	b.n	800a598 <_printf_i+0x130>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	6826      	ldr	r6, [r4, #0]
 800a624:	6961      	ldr	r1, [r4, #20]
 800a626:	1d18      	adds	r0, r3, #4
 800a628:	6028      	str	r0, [r5, #0]
 800a62a:	0635      	lsls	r5, r6, #24
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	d501      	bpl.n	800a634 <_printf_i+0x1cc>
 800a630:	6019      	str	r1, [r3, #0]
 800a632:	e002      	b.n	800a63a <_printf_i+0x1d2>
 800a634:	0670      	lsls	r0, r6, #25
 800a636:	d5fb      	bpl.n	800a630 <_printf_i+0x1c8>
 800a638:	8019      	strh	r1, [r3, #0]
 800a63a:	2300      	movs	r3, #0
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	4615      	mov	r5, r2
 800a640:	e7ba      	b.n	800a5b8 <_printf_i+0x150>
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	1d1a      	adds	r2, r3, #4
 800a646:	602a      	str	r2, [r5, #0]
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	2100      	movs	r1, #0
 800a64e:	4628      	mov	r0, r5
 800a650:	f7f5 fdbe 	bl	80001d0 <memchr>
 800a654:	b108      	cbz	r0, 800a65a <_printf_i+0x1f2>
 800a656:	1b40      	subs	r0, r0, r5
 800a658:	6060      	str	r0, [r4, #4]
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	2300      	movs	r3, #0
 800a660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a664:	e7a8      	b.n	800a5b8 <_printf_i+0x150>
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	462a      	mov	r2, r5
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d0ab      	beq.n	800a5cc <_printf_i+0x164>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	079b      	lsls	r3, r3, #30
 800a678:	d413      	bmi.n	800a6a2 <_printf_i+0x23a>
 800a67a:	68e0      	ldr	r0, [r4, #12]
 800a67c:	9b03      	ldr	r3, [sp, #12]
 800a67e:	4298      	cmp	r0, r3
 800a680:	bfb8      	it	lt
 800a682:	4618      	movlt	r0, r3
 800a684:	e7a4      	b.n	800a5d0 <_printf_i+0x168>
 800a686:	2301      	movs	r3, #1
 800a688:	4632      	mov	r2, r6
 800a68a:	4649      	mov	r1, r9
 800a68c:	4640      	mov	r0, r8
 800a68e:	47d0      	blx	sl
 800a690:	3001      	adds	r0, #1
 800a692:	d09b      	beq.n	800a5cc <_printf_i+0x164>
 800a694:	3501      	adds	r5, #1
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	9903      	ldr	r1, [sp, #12]
 800a69a:	1a5b      	subs	r3, r3, r1
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	dcf2      	bgt.n	800a686 <_printf_i+0x21e>
 800a6a0:	e7eb      	b.n	800a67a <_printf_i+0x212>
 800a6a2:	2500      	movs	r5, #0
 800a6a4:	f104 0619 	add.w	r6, r4, #25
 800a6a8:	e7f5      	b.n	800a696 <_printf_i+0x22e>
 800a6aa:	bf00      	nop
 800a6ac:	0800aea5 	.word	0x0800aea5
 800a6b0:	0800aeb6 	.word	0x0800aeb6

0800a6b4 <_putc_r>:
 800a6b4:	b570      	push	{r4, r5, r6, lr}
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	b118      	cbz	r0, 800a6c6 <_putc_r+0x12>
 800a6be:	6983      	ldr	r3, [r0, #24]
 800a6c0:	b90b      	cbnz	r3, 800a6c6 <_putc_r+0x12>
 800a6c2:	f7ff fbd5 	bl	8009e70 <__sinit>
 800a6c6:	4b1c      	ldr	r3, [pc, #112]	; (800a738 <_putc_r+0x84>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d124      	bne.n	800a716 <_putc_r+0x62>
 800a6cc:	6874      	ldr	r4, [r6, #4]
 800a6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6d0:	07d8      	lsls	r0, r3, #31
 800a6d2:	d405      	bmi.n	800a6e0 <_putc_r+0x2c>
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	0599      	lsls	r1, r3, #22
 800a6d8:	d402      	bmi.n	800a6e0 <_putc_r+0x2c>
 800a6da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6dc:	f7ff fc66 	bl	8009fac <__retarget_lock_acquire_recursive>
 800a6e0:	68a3      	ldr	r3, [r4, #8]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	60a3      	str	r3, [r4, #8]
 800a6e8:	da05      	bge.n	800a6f6 <_putc_r+0x42>
 800a6ea:	69a2      	ldr	r2, [r4, #24]
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	db1c      	blt.n	800a72a <_putc_r+0x76>
 800a6f0:	b2eb      	uxtb	r3, r5
 800a6f2:	2b0a      	cmp	r3, #10
 800a6f4:	d019      	beq.n	800a72a <_putc_r+0x76>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	6022      	str	r2, [r4, #0]
 800a6fc:	701d      	strb	r5, [r3, #0]
 800a6fe:	b2ed      	uxtb	r5, r5
 800a700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a702:	07da      	lsls	r2, r3, #31
 800a704:	d405      	bmi.n	800a712 <_putc_r+0x5e>
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	059b      	lsls	r3, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_putc_r+0x5e>
 800a70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a70e:	f7ff fc4e 	bl	8009fae <__retarget_lock_release_recursive>
 800a712:	4628      	mov	r0, r5
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <_putc_r+0x88>)
 800a718:	429c      	cmp	r4, r3
 800a71a:	d101      	bne.n	800a720 <_putc_r+0x6c>
 800a71c:	68b4      	ldr	r4, [r6, #8]
 800a71e:	e7d6      	b.n	800a6ce <_putc_r+0x1a>
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <_putc_r+0x8c>)
 800a722:	429c      	cmp	r4, r3
 800a724:	bf08      	it	eq
 800a726:	68f4      	ldreq	r4, [r6, #12]
 800a728:	e7d1      	b.n	800a6ce <_putc_r+0x1a>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4622      	mov	r2, r4
 800a72e:	4630      	mov	r0, r6
 800a730:	f000 f85c 	bl	800a7ec <__swbuf_r>
 800a734:	4605      	mov	r5, r0
 800a736:	e7e3      	b.n	800a700 <_putc_r+0x4c>
 800a738:	0800ae54 	.word	0x0800ae54
 800a73c:	0800ae74 	.word	0x0800ae74
 800a740:	0800ae34 	.word	0x0800ae34

0800a744 <_sbrk_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d06      	ldr	r5, [pc, #24]	; (800a760 <_sbrk_r+0x1c>)
 800a748:	2300      	movs	r3, #0
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	602b      	str	r3, [r5, #0]
 800a750:	f7f6 fd1e 	bl	8001190 <_sbrk>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_sbrk_r+0x1a>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_sbrk_r+0x1a>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	20000dcc 	.word	0x20000dcc

0800a764 <__sread>:
 800a764:	b510      	push	{r4, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	f000 fab2 	bl	800acd4 <_read_r>
 800a770:	2800      	cmp	r0, #0
 800a772:	bfab      	itete	ge
 800a774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a776:	89a3      	ldrhlt	r3, [r4, #12]
 800a778:	181b      	addge	r3, r3, r0
 800a77a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a77e:	bfac      	ite	ge
 800a780:	6563      	strge	r3, [r4, #84]	; 0x54
 800a782:	81a3      	strhlt	r3, [r4, #12]
 800a784:	bd10      	pop	{r4, pc}

0800a786 <__swrite>:
 800a786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78a:	461f      	mov	r7, r3
 800a78c:	898b      	ldrh	r3, [r1, #12]
 800a78e:	05db      	lsls	r3, r3, #23
 800a790:	4605      	mov	r5, r0
 800a792:	460c      	mov	r4, r1
 800a794:	4616      	mov	r6, r2
 800a796:	d505      	bpl.n	800a7a4 <__swrite+0x1e>
 800a798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79c:	2302      	movs	r3, #2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f000 f9c8 	bl	800ab34 <_lseek_r>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ae:	81a3      	strh	r3, [r4, #12]
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ba:	f000 b869 	b.w	800a890 <_write_r>

0800a7be <__sseek>:
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c6:	f000 f9b5 	bl	800ab34 <_lseek_r>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	bf15      	itete	ne
 800a7d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7da:	81a3      	strheq	r3, [r4, #12]
 800a7dc:	bf18      	it	ne
 800a7de:	81a3      	strhne	r3, [r4, #12]
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <__sclose>:
 800a7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e6:	f000 b8d3 	b.w	800a990 <_close_r>
	...

0800a7ec <__swbuf_r>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	460e      	mov	r6, r1
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	b118      	cbz	r0, 800a7fe <__swbuf_r+0x12>
 800a7f6:	6983      	ldr	r3, [r0, #24]
 800a7f8:	b90b      	cbnz	r3, 800a7fe <__swbuf_r+0x12>
 800a7fa:	f7ff fb39 	bl	8009e70 <__sinit>
 800a7fe:	4b21      	ldr	r3, [pc, #132]	; (800a884 <__swbuf_r+0x98>)
 800a800:	429c      	cmp	r4, r3
 800a802:	d12b      	bne.n	800a85c <__swbuf_r+0x70>
 800a804:	686c      	ldr	r4, [r5, #4]
 800a806:	69a3      	ldr	r3, [r4, #24]
 800a808:	60a3      	str	r3, [r4, #8]
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	071a      	lsls	r2, r3, #28
 800a80e:	d52f      	bpl.n	800a870 <__swbuf_r+0x84>
 800a810:	6923      	ldr	r3, [r4, #16]
 800a812:	b36b      	cbz	r3, 800a870 <__swbuf_r+0x84>
 800a814:	6923      	ldr	r3, [r4, #16]
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	1ac0      	subs	r0, r0, r3
 800a81a:	6963      	ldr	r3, [r4, #20]
 800a81c:	b2f6      	uxtb	r6, r6
 800a81e:	4283      	cmp	r3, r0
 800a820:	4637      	mov	r7, r6
 800a822:	dc04      	bgt.n	800a82e <__swbuf_r+0x42>
 800a824:	4621      	mov	r1, r4
 800a826:	4628      	mov	r0, r5
 800a828:	f000 f948 	bl	800aabc <_fflush_r>
 800a82c:	bb30      	cbnz	r0, 800a87c <__swbuf_r+0x90>
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	3b01      	subs	r3, #1
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	6022      	str	r2, [r4, #0]
 800a83a:	701e      	strb	r6, [r3, #0]
 800a83c:	6963      	ldr	r3, [r4, #20]
 800a83e:	3001      	adds	r0, #1
 800a840:	4283      	cmp	r3, r0
 800a842:	d004      	beq.n	800a84e <__swbuf_r+0x62>
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	07db      	lsls	r3, r3, #31
 800a848:	d506      	bpl.n	800a858 <__swbuf_r+0x6c>
 800a84a:	2e0a      	cmp	r6, #10
 800a84c:	d104      	bne.n	800a858 <__swbuf_r+0x6c>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 f933 	bl	800aabc <_fflush_r>
 800a856:	b988      	cbnz	r0, 800a87c <__swbuf_r+0x90>
 800a858:	4638      	mov	r0, r7
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <__swbuf_r+0x9c>)
 800a85e:	429c      	cmp	r4, r3
 800a860:	d101      	bne.n	800a866 <__swbuf_r+0x7a>
 800a862:	68ac      	ldr	r4, [r5, #8]
 800a864:	e7cf      	b.n	800a806 <__swbuf_r+0x1a>
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <__swbuf_r+0xa0>)
 800a868:	429c      	cmp	r4, r3
 800a86a:	bf08      	it	eq
 800a86c:	68ec      	ldreq	r4, [r5, #12]
 800a86e:	e7ca      	b.n	800a806 <__swbuf_r+0x1a>
 800a870:	4621      	mov	r1, r4
 800a872:	4628      	mov	r0, r5
 800a874:	f000 f81e 	bl	800a8b4 <__swsetup_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d0cb      	beq.n	800a814 <__swbuf_r+0x28>
 800a87c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a880:	e7ea      	b.n	800a858 <__swbuf_r+0x6c>
 800a882:	bf00      	nop
 800a884:	0800ae54 	.word	0x0800ae54
 800a888:	0800ae74 	.word	0x0800ae74
 800a88c:	0800ae34 	.word	0x0800ae34

0800a890 <_write_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d07      	ldr	r5, [pc, #28]	; (800a8b0 <_write_r+0x20>)
 800a894:	4604      	mov	r4, r0
 800a896:	4608      	mov	r0, r1
 800a898:	4611      	mov	r1, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	602a      	str	r2, [r5, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f7f6 fc25 	bl	80010ee <_write>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_write_r+0x1e>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_write_r+0x1e>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20000dcc 	.word	0x20000dcc

0800a8b4 <__swsetup_r>:
 800a8b4:	4b32      	ldr	r3, [pc, #200]	; (800a980 <__swsetup_r+0xcc>)
 800a8b6:	b570      	push	{r4, r5, r6, lr}
 800a8b8:	681d      	ldr	r5, [r3, #0]
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	b125      	cbz	r5, 800a8ca <__swsetup_r+0x16>
 800a8c0:	69ab      	ldr	r3, [r5, #24]
 800a8c2:	b913      	cbnz	r3, 800a8ca <__swsetup_r+0x16>
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f7ff fad3 	bl	8009e70 <__sinit>
 800a8ca:	4b2e      	ldr	r3, [pc, #184]	; (800a984 <__swsetup_r+0xd0>)
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	d10f      	bne.n	800a8f0 <__swsetup_r+0x3c>
 800a8d0:	686c      	ldr	r4, [r5, #4]
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8d8:	0719      	lsls	r1, r3, #28
 800a8da:	d42c      	bmi.n	800a936 <__swsetup_r+0x82>
 800a8dc:	06dd      	lsls	r5, r3, #27
 800a8de:	d411      	bmi.n	800a904 <__swsetup_r+0x50>
 800a8e0:	2309      	movs	r3, #9
 800a8e2:	6033      	str	r3, [r6, #0]
 800a8e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ee:	e03e      	b.n	800a96e <__swsetup_r+0xba>
 800a8f0:	4b25      	ldr	r3, [pc, #148]	; (800a988 <__swsetup_r+0xd4>)
 800a8f2:	429c      	cmp	r4, r3
 800a8f4:	d101      	bne.n	800a8fa <__swsetup_r+0x46>
 800a8f6:	68ac      	ldr	r4, [r5, #8]
 800a8f8:	e7eb      	b.n	800a8d2 <__swsetup_r+0x1e>
 800a8fa:	4b24      	ldr	r3, [pc, #144]	; (800a98c <__swsetup_r+0xd8>)
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	bf08      	it	eq
 800a900:	68ec      	ldreq	r4, [r5, #12]
 800a902:	e7e6      	b.n	800a8d2 <__swsetup_r+0x1e>
 800a904:	0758      	lsls	r0, r3, #29
 800a906:	d512      	bpl.n	800a92e <__swsetup_r+0x7a>
 800a908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a90a:	b141      	cbz	r1, 800a91e <__swsetup_r+0x6a>
 800a90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a910:	4299      	cmp	r1, r3
 800a912:	d002      	beq.n	800a91a <__swsetup_r+0x66>
 800a914:	4630      	mov	r0, r6
 800a916:	f000 f991 	bl	800ac3c <_free_r>
 800a91a:	2300      	movs	r3, #0
 800a91c:	6363      	str	r3, [r4, #52]	; 0x34
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	2300      	movs	r3, #0
 800a928:	6063      	str	r3, [r4, #4]
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	f043 0308 	orr.w	r3, r3, #8
 800a934:	81a3      	strh	r3, [r4, #12]
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	b94b      	cbnz	r3, 800a94e <__swsetup_r+0x9a>
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a944:	d003      	beq.n	800a94e <__swsetup_r+0x9a>
 800a946:	4621      	mov	r1, r4
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 f92b 	bl	800aba4 <__smakebuf_r>
 800a94e:	89a0      	ldrh	r0, [r4, #12]
 800a950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a954:	f010 0301 	ands.w	r3, r0, #1
 800a958:	d00a      	beq.n	800a970 <__swsetup_r+0xbc>
 800a95a:	2300      	movs	r3, #0
 800a95c:	60a3      	str	r3, [r4, #8]
 800a95e:	6963      	ldr	r3, [r4, #20]
 800a960:	425b      	negs	r3, r3
 800a962:	61a3      	str	r3, [r4, #24]
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	b943      	cbnz	r3, 800a97a <__swsetup_r+0xc6>
 800a968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a96c:	d1ba      	bne.n	800a8e4 <__swsetup_r+0x30>
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	0781      	lsls	r1, r0, #30
 800a972:	bf58      	it	pl
 800a974:	6963      	ldrpl	r3, [r4, #20]
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	e7f4      	b.n	800a964 <__swsetup_r+0xb0>
 800a97a:	2000      	movs	r0, #0
 800a97c:	e7f7      	b.n	800a96e <__swsetup_r+0xba>
 800a97e:	bf00      	nop
 800a980:	2000011c 	.word	0x2000011c
 800a984:	0800ae54 	.word	0x0800ae54
 800a988:	0800ae74 	.word	0x0800ae74
 800a98c:	0800ae34 	.word	0x0800ae34

0800a990 <_close_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d06      	ldr	r5, [pc, #24]	; (800a9ac <_close_r+0x1c>)
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	f7f6 fbc3 	bl	8001126 <_close>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_close_r+0x1a>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_close_r+0x1a>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	20000dcc 	.word	0x20000dcc

0800a9b0 <__sflush_r>:
 800a9b0:	898a      	ldrh	r2, [r1, #12]
 800a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	0710      	lsls	r0, r2, #28
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	d458      	bmi.n	800aa70 <__sflush_r+0xc0>
 800a9be:	684b      	ldr	r3, [r1, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc05      	bgt.n	800a9d0 <__sflush_r+0x20>
 800a9c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dc02      	bgt.n	800a9d0 <__sflush_r+0x20>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	d0f9      	beq.n	800a9ca <__sflush_r+0x1a>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9dc:	682f      	ldr	r7, [r5, #0]
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	d032      	beq.n	800aa48 <__sflush_r+0x98>
 800a9e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	075a      	lsls	r2, r3, #29
 800a9e8:	d505      	bpl.n	800a9f6 <__sflush_r+0x46>
 800a9ea:	6863      	ldr	r3, [r4, #4]
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f0:	b10b      	cbz	r3, 800a9f6 <__sflush_r+0x46>
 800a9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fc:	6a21      	ldr	r1, [r4, #32]
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b0      	blx	r6
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	d106      	bne.n	800aa16 <__sflush_r+0x66>
 800aa08:	6829      	ldr	r1, [r5, #0]
 800aa0a:	291d      	cmp	r1, #29
 800aa0c:	d82c      	bhi.n	800aa68 <__sflush_r+0xb8>
 800aa0e:	4a2a      	ldr	r2, [pc, #168]	; (800aab8 <__sflush_r+0x108>)
 800aa10:	40ca      	lsrs	r2, r1
 800aa12:	07d6      	lsls	r6, r2, #31
 800aa14:	d528      	bpl.n	800aa68 <__sflush_r+0xb8>
 800aa16:	2200      	movs	r2, #0
 800aa18:	6062      	str	r2, [r4, #4]
 800aa1a:	04d9      	lsls	r1, r3, #19
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	6022      	str	r2, [r4, #0]
 800aa20:	d504      	bpl.n	800aa2c <__sflush_r+0x7c>
 800aa22:	1c42      	adds	r2, r0, #1
 800aa24:	d101      	bne.n	800aa2a <__sflush_r+0x7a>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	b903      	cbnz	r3, 800aa2c <__sflush_r+0x7c>
 800aa2a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2e:	602f      	str	r7, [r5, #0]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d0ca      	beq.n	800a9ca <__sflush_r+0x1a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__sflush_r+0x92>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 f8fd 	bl	800ac3c <_free_r>
 800aa42:	2000      	movs	r0, #0
 800aa44:	6360      	str	r0, [r4, #52]	; 0x34
 800aa46:	e7c1      	b.n	800a9cc <__sflush_r+0x1c>
 800aa48:	6a21      	ldr	r1, [r4, #32]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b0      	blx	r6
 800aa50:	1c41      	adds	r1, r0, #1
 800aa52:	d1c7      	bne.n	800a9e4 <__sflush_r+0x34>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0c4      	beq.n	800a9e4 <__sflush_r+0x34>
 800aa5a:	2b1d      	cmp	r3, #29
 800aa5c:	d001      	beq.n	800aa62 <__sflush_r+0xb2>
 800aa5e:	2b16      	cmp	r3, #22
 800aa60:	d101      	bne.n	800aa66 <__sflush_r+0xb6>
 800aa62:	602f      	str	r7, [r5, #0]
 800aa64:	e7b1      	b.n	800a9ca <__sflush_r+0x1a>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	e7ad      	b.n	800a9cc <__sflush_r+0x1c>
 800aa70:	690f      	ldr	r7, [r1, #16]
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d0a9      	beq.n	800a9ca <__sflush_r+0x1a>
 800aa76:	0793      	lsls	r3, r2, #30
 800aa78:	680e      	ldr	r6, [r1, #0]
 800aa7a:	bf08      	it	eq
 800aa7c:	694b      	ldreq	r3, [r1, #20]
 800aa7e:	600f      	str	r7, [r1, #0]
 800aa80:	bf18      	it	ne
 800aa82:	2300      	movne	r3, #0
 800aa84:	eba6 0807 	sub.w	r8, r6, r7
 800aa88:	608b      	str	r3, [r1, #8]
 800aa8a:	f1b8 0f00 	cmp.w	r8, #0
 800aa8e:	dd9c      	ble.n	800a9ca <__sflush_r+0x1a>
 800aa90:	6a21      	ldr	r1, [r4, #32]
 800aa92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa94:	4643      	mov	r3, r8
 800aa96:	463a      	mov	r2, r7
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b0      	blx	r6
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dc06      	bgt.n	800aaae <__sflush_r+0xfe>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaac:	e78e      	b.n	800a9cc <__sflush_r+0x1c>
 800aaae:	4407      	add	r7, r0
 800aab0:	eba8 0800 	sub.w	r8, r8, r0
 800aab4:	e7e9      	b.n	800aa8a <__sflush_r+0xda>
 800aab6:	bf00      	nop
 800aab8:	20400001 	.word	0x20400001

0800aabc <_fflush_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	690b      	ldr	r3, [r1, #16]
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	b913      	cbnz	r3, 800aacc <_fflush_r+0x10>
 800aac6:	2500      	movs	r5, #0
 800aac8:	4628      	mov	r0, r5
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	b118      	cbz	r0, 800aad6 <_fflush_r+0x1a>
 800aace:	6983      	ldr	r3, [r0, #24]
 800aad0:	b90b      	cbnz	r3, 800aad6 <_fflush_r+0x1a>
 800aad2:	f7ff f9cd 	bl	8009e70 <__sinit>
 800aad6:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <_fflush_r+0x6c>)
 800aad8:	429c      	cmp	r4, r3
 800aada:	d11b      	bne.n	800ab14 <_fflush_r+0x58>
 800aadc:	686c      	ldr	r4, [r5, #4]
 800aade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0ef      	beq.n	800aac6 <_fflush_r+0xa>
 800aae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae8:	07d0      	lsls	r0, r2, #31
 800aaea:	d404      	bmi.n	800aaf6 <_fflush_r+0x3a>
 800aaec:	0599      	lsls	r1, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_fflush_r+0x3a>
 800aaf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaf2:	f7ff fa5b 	bl	8009fac <__retarget_lock_acquire_recursive>
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	4621      	mov	r1, r4
 800aafa:	f7ff ff59 	bl	800a9b0 <__sflush_r>
 800aafe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab00:	07da      	lsls	r2, r3, #31
 800ab02:	4605      	mov	r5, r0
 800ab04:	d4e0      	bmi.n	800aac8 <_fflush_r+0xc>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	059b      	lsls	r3, r3, #22
 800ab0a:	d4dd      	bmi.n	800aac8 <_fflush_r+0xc>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0e:	f7ff fa4e 	bl	8009fae <__retarget_lock_release_recursive>
 800ab12:	e7d9      	b.n	800aac8 <_fflush_r+0xc>
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <_fflush_r+0x70>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d101      	bne.n	800ab1e <_fflush_r+0x62>
 800ab1a:	68ac      	ldr	r4, [r5, #8]
 800ab1c:	e7df      	b.n	800aade <_fflush_r+0x22>
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <_fflush_r+0x74>)
 800ab20:	429c      	cmp	r4, r3
 800ab22:	bf08      	it	eq
 800ab24:	68ec      	ldreq	r4, [r5, #12]
 800ab26:	e7da      	b.n	800aade <_fflush_r+0x22>
 800ab28:	0800ae54 	.word	0x0800ae54
 800ab2c:	0800ae74 	.word	0x0800ae74
 800ab30:	0800ae34 	.word	0x0800ae34

0800ab34 <_lseek_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d07      	ldr	r5, [pc, #28]	; (800ab54 <_lseek_r+0x20>)
 800ab38:	4604      	mov	r4, r0
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	602a      	str	r2, [r5, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	f7f6 fb16 	bl	8001174 <_lseek>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_lseek_r+0x1e>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_lseek_r+0x1e>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	20000dcc 	.word	0x20000dcc

0800ab58 <__swhatbuf_r>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	460e      	mov	r6, r1
 800ab5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab60:	2900      	cmp	r1, #0
 800ab62:	b096      	sub	sp, #88	; 0x58
 800ab64:	4614      	mov	r4, r2
 800ab66:	461d      	mov	r5, r3
 800ab68:	da08      	bge.n	800ab7c <__swhatbuf_r+0x24>
 800ab6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	061a      	lsls	r2, r3, #24
 800ab74:	d410      	bmi.n	800ab98 <__swhatbuf_r+0x40>
 800ab76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab7a:	e00e      	b.n	800ab9a <__swhatbuf_r+0x42>
 800ab7c:	466a      	mov	r2, sp
 800ab7e:	f000 f8bb 	bl	800acf8 <_fstat_r>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	dbf1      	blt.n	800ab6a <__swhatbuf_r+0x12>
 800ab86:	9a01      	ldr	r2, [sp, #4]
 800ab88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab90:	425a      	negs	r2, r3
 800ab92:	415a      	adcs	r2, r3
 800ab94:	602a      	str	r2, [r5, #0]
 800ab96:	e7ee      	b.n	800ab76 <__swhatbuf_r+0x1e>
 800ab98:	2340      	movs	r3, #64	; 0x40
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	b016      	add	sp, #88	; 0x58
 800aba0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aba4 <__smakebuf_r>:
 800aba4:	898b      	ldrh	r3, [r1, #12]
 800aba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aba8:	079d      	lsls	r5, r3, #30
 800abaa:	4606      	mov	r6, r0
 800abac:	460c      	mov	r4, r1
 800abae:	d507      	bpl.n	800abc0 <__smakebuf_r+0x1c>
 800abb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	2301      	movs	r3, #1
 800abba:	6163      	str	r3, [r4, #20]
 800abbc:	b002      	add	sp, #8
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	ab01      	add	r3, sp, #4
 800abc2:	466a      	mov	r2, sp
 800abc4:	f7ff ffc8 	bl	800ab58 <__swhatbuf_r>
 800abc8:	9900      	ldr	r1, [sp, #0]
 800abca:	4605      	mov	r5, r0
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff fa0f 	bl	8009ff0 <_malloc_r>
 800abd2:	b948      	cbnz	r0, 800abe8 <__smakebuf_r+0x44>
 800abd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	d4ef      	bmi.n	800abbc <__smakebuf_r+0x18>
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	f043 0302 	orr.w	r3, r3, #2
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	e7e3      	b.n	800abb0 <__smakebuf_r+0xc>
 800abe8:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <__smakebuf_r+0x7c>)
 800abea:	62b3      	str	r3, [r6, #40]	; 0x28
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	6020      	str	r0, [r4, #0]
 800abf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf4:	81a3      	strh	r3, [r4, #12]
 800abf6:	9b00      	ldr	r3, [sp, #0]
 800abf8:	6163      	str	r3, [r4, #20]
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	6120      	str	r0, [r4, #16]
 800abfe:	b15b      	cbz	r3, 800ac18 <__smakebuf_r+0x74>
 800ac00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac04:	4630      	mov	r0, r6
 800ac06:	f000 f889 	bl	800ad1c <_isatty_r>
 800ac0a:	b128      	cbz	r0, 800ac18 <__smakebuf_r+0x74>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	89a0      	ldrh	r0, [r4, #12]
 800ac1a:	4305      	orrs	r5, r0
 800ac1c:	81a5      	strh	r5, [r4, #12]
 800ac1e:	e7cd      	b.n	800abbc <__smakebuf_r+0x18>
 800ac20:	08009e09 	.word	0x08009e09

0800ac24 <__malloc_lock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__malloc_lock+0x8>)
 800ac26:	f7ff b9c1 	b.w	8009fac <__retarget_lock_acquire_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	20000dc0 	.word	0x20000dc0

0800ac30 <__malloc_unlock>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__malloc_unlock+0x8>)
 800ac32:	f7ff b9bc 	b.w	8009fae <__retarget_lock_release_recursive>
 800ac36:	bf00      	nop
 800ac38:	20000dc0 	.word	0x20000dc0

0800ac3c <_free_r>:
 800ac3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d044      	beq.n	800accc <_free_r+0x90>
 800ac42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac46:	9001      	str	r0, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac4e:	bfb8      	it	lt
 800ac50:	18e4      	addlt	r4, r4, r3
 800ac52:	f7ff ffe7 	bl	800ac24 <__malloc_lock>
 800ac56:	4a1e      	ldr	r2, [pc, #120]	; (800acd0 <_free_r+0x94>)
 800ac58:	9801      	ldr	r0, [sp, #4]
 800ac5a:	6813      	ldr	r3, [r2, #0]
 800ac5c:	b933      	cbnz	r3, 800ac6c <_free_r+0x30>
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	6014      	str	r4, [r2, #0]
 800ac62:	b003      	add	sp, #12
 800ac64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac68:	f7ff bfe2 	b.w	800ac30 <__malloc_unlock>
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	d908      	bls.n	800ac82 <_free_r+0x46>
 800ac70:	6825      	ldr	r5, [r4, #0]
 800ac72:	1961      	adds	r1, r4, r5
 800ac74:	428b      	cmp	r3, r1
 800ac76:	bf01      	itttt	eq
 800ac78:	6819      	ldreq	r1, [r3, #0]
 800ac7a:	685b      	ldreq	r3, [r3, #4]
 800ac7c:	1949      	addeq	r1, r1, r5
 800ac7e:	6021      	streq	r1, [r4, #0]
 800ac80:	e7ed      	b.n	800ac5e <_free_r+0x22>
 800ac82:	461a      	mov	r2, r3
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	b10b      	cbz	r3, 800ac8c <_free_r+0x50>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d9fa      	bls.n	800ac82 <_free_r+0x46>
 800ac8c:	6811      	ldr	r1, [r2, #0]
 800ac8e:	1855      	adds	r5, r2, r1
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d10b      	bne.n	800acac <_free_r+0x70>
 800ac94:	6824      	ldr	r4, [r4, #0]
 800ac96:	4421      	add	r1, r4
 800ac98:	1854      	adds	r4, r2, r1
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	d1e0      	bne.n	800ac62 <_free_r+0x26>
 800aca0:	681c      	ldr	r4, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	6053      	str	r3, [r2, #4]
 800aca6:	4421      	add	r1, r4
 800aca8:	6011      	str	r1, [r2, #0]
 800acaa:	e7da      	b.n	800ac62 <_free_r+0x26>
 800acac:	d902      	bls.n	800acb4 <_free_r+0x78>
 800acae:	230c      	movs	r3, #12
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	e7d6      	b.n	800ac62 <_free_r+0x26>
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	1961      	adds	r1, r4, r5
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf04      	itt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	bf04      	itt	eq
 800acc4:	1949      	addeq	r1, r1, r5
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	6054      	str	r4, [r2, #4]
 800acca:	e7ca      	b.n	800ac62 <_free_r+0x26>
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	20000dc4 	.word	0x20000dc4

0800acd4 <_read_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	; (800acf4 <_read_r+0x20>)
 800acd8:	4604      	mov	r4, r0
 800acda:	4608      	mov	r0, r1
 800acdc:	4611      	mov	r1, r2
 800acde:	2200      	movs	r2, #0
 800ace0:	602a      	str	r2, [r5, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f7f6 f9e6 	bl	80010b4 <_read>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_read_r+0x1e>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_read_r+0x1e>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	20000dcc 	.word	0x20000dcc

0800acf8 <_fstat_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d07      	ldr	r5, [pc, #28]	; (800ad18 <_fstat_r+0x20>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	f7f6 fa1a 	bl	800113e <_fstat>
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	d102      	bne.n	800ad14 <_fstat_r+0x1c>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	b103      	cbz	r3, 800ad14 <_fstat_r+0x1c>
 800ad12:	6023      	str	r3, [r4, #0]
 800ad14:	bd38      	pop	{r3, r4, r5, pc}
 800ad16:	bf00      	nop
 800ad18:	20000dcc 	.word	0x20000dcc

0800ad1c <_isatty_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d06      	ldr	r5, [pc, #24]	; (800ad38 <_isatty_r+0x1c>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	602b      	str	r3, [r5, #0]
 800ad28:	f7f6 fa19 	bl	800115e <_isatty>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_isatty_r+0x1a>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_isatty_r+0x1a>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000dcc 	.word	0x20000dcc

0800ad3c <_init>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	bf00      	nop
 800ad40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad42:	bc08      	pop	{r3}
 800ad44:	469e      	mov	lr, r3
 800ad46:	4770      	bx	lr

0800ad48 <_fini>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	bf00      	nop
 800ad4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4e:	bc08      	pop	{r3}
 800ad50:	469e      	mov	lr, r3
 800ad52:	4770      	bx	lr
